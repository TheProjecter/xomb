
paganos:     file format elf64-x86-64

Disassembly of section .text:

0000000000100000 <_start>:

		.globl  start, _start
start:
_start:
	.code32
		jmp multiboot_entry
  100000:	eb 22                	jmp    100024 <multiboot_entry>
  100002:	66 90                	xchg   %ax,%ax

0000000000100004 <multiboot_header>:
  100004:	02 b0 ad 1b 03 00    	add    0x31bad(%rax),%dh
  10000a:	01 00                	add    %eax,(%rax)
  10000c:	fb                   	sti    
  10000d:	4f 51                	rex.WRXB push   %r9
  10000f:	e4 04                	in     $0x4,%al
  100011:	00 10                	add    %dl,(%rax)
  100013:	00 00                	add    %al,(%rax)
  100015:	00 10                	add    %dl,(%rax)
  100017:	00 70 3e             	add    %dh,0x3e(%rax)
  10001a:	12 00                	adc    (%rax),%al
  10001c:	c0 9b 12 00 24 00 10 	rcrb   $0x10,0x240012(%rbx)
	...

0000000000100024 <multiboot_entry>:
#endif

multiboot_entry:

		/* Stash values for multiboot we won't touch until 64 bit mode */
		movl %ebx, %esi
  100024:	89 de                	mov    %ebx,%esi
		movl %eax, %edi
  100026:	89 c7                	mov    %eax,%edi

		/* enable 64-bit page-translation-table entries by
			setting CR4.PAE=1.  Paging not enabled until after
			long mode enabled */
		movl %cr4, %eax
  100028:	0f 20 e0             	mov    %cr4,%rax
		bts  $5,   %eax
  10002b:	0f ba e8 05          	bts    $0x5,%eax
		movl %eax, %cr4
  10002f:	0f 22 e0             	mov    %rax,%cr4

		/* Create long mode page table and init CR3 to point to
			the base of the PML4 page table.  */
		movl $pml4_base, %eax
  100032:	b8 00 10 10 00       	mov    $0x101000,%eax
		movl %eax, %cr3
  100037:	0f 22 d8             	mov    %rax,%cr3

		/* Enable Long mode */
		movl $0xc0000080, %ecx
  10003a:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
		rdmsr
  10003f:	0f 32                	rdmsr  
		bts $8, %eax
  100041:	0f ba e8 08          	bts    $0x8,%eax
		wrmsr
  100045:	0f 30                	wrmsr  

		/* enable paging to activate long mode */
		movl %cr0, %eax
  100047:	0f 20 c0             	mov    %cr0,%rax
		bts  $31,  %eax
  10004a:	0f ba e8 1f          	bts    $0x1f,%eax
		movl %eax, %cr0
  10004e:	0f 22 c0             	mov    %rax,%cr0

		or  %edx, %edx
  100051:	09 d2                	or     %edx,%edx
		and %edx, %edx
  100053:	21 d2                	and    %edx,%edx

		/* Load the GDT */
		lgdt	pGDT32
  100055:	0f 01 15 7f 00 10 00 	lgdt   0x10007f(%rip)        # 2000db <_end+0xd651b>

		// set the segment registers
		
	
		ljmp $CS_KERNEL, $start64
  10005c:	ea                   	(bad)  
  10005d:	63 00                	movslq (%rax),%eax
  10005f:	10 00                	adc    %al,(%rax)
  100061:	10 00                	adc    %al,(%rax)

0000000000100063 <start64>:

	.code64
	start64:

		/* Initialize the stack pointer. */
		movq    $(stack + STACK_SIZE), %rsp
  100063:	48 c7 c4 c0 9b 12 00 	mov    $0x129bc0,%rsp

		/* Clear cpu flags */
		pushq $0
  10006a:	6a 00                	pushq  $0x0
		popf
  10006c:	9d                   	popfq  

		/* Push the pointer to the Multiboot information structure. */
		pushq   %rsi
  10006d:	56                   	push   %rsi
		/* Push the magic value. */
		pushq   %rdi
  10006e:	57                   	push   %rdi

		/* Now enter the C main function... */
		call    EXT_C(cmain)
  10006f:	e8 b5 3f 00 00       	callq  104029 <cmain>

0000000000100074 <loop>:

		/* Halt. */
		/*pushq   $halt_message
		call    EXT_C(kprintf)*/

loop:   hlt
  100074:	f4                   	hlt    
		jmp     loop
  100075:	eb fd                	jmp    100074 <loop>

0000000000100077 <halt_message>:
  100077:	48 61                	rex.W (bad)  
  100079:	6c                   	insb   (%dx),%es:(%rdi)
  10007a:	74 65                	je     1000e1 <GDT_TABLE+0x58>
  10007c:	64 2e 00 af 00 89 00 	add    %ch,%cs:%fs:0x10008900(%rdi)
  100083:	10 

000000000010007f <pGDT32>:
  10007f:	af                   	scas   %es:(%rdi),%eax
  100080:	00 89 00 10 00 00    	add    %cl,0x1000(%rcx)
  100086:	00 00                	add    %al,(%rax)
	...

0000000000100089 <GDT_TABLE>:
	...
  100091:	ff                   	(bad)  
  100092:	ff 00                	incl   (%rax)
  100094:	00 00                	add    %al,(%rax)
  100096:	9a                   	(bad)  
  100097:	cf                   	iret   
  100098:	00 ff                	add    %bh,%bh
  10009a:	ff 00                	incl   (%rax)
  10009c:	00 00                	add    %al,(%rax)
  10009e:	9a                   	(bad)  
  10009f:	af                   	scas   %es:(%rdi),%eax
	...
  1000a8:	00 ff                	add    %bh,%bh
  1000aa:	ff 00                	incl   (%rax)
  1000ac:	00 00                	add    %al,(%rax)
  1000ae:	93                   	xchg   %eax,%ebx
  1000af:	af                   	scas   %es:(%rdi),%eax
	...
  1000b8:	00 ff                	add    %bh,%bh
  1000ba:	ff 00                	incl   (%rax)
  1000bc:	00 00                	add    %al,(%rax)
  1000be:	fa                   	cli    
  1000bf:	af                   	scas   %es:(%rdi),%eax
	...
  1000c8:	00 ff                	add    %bh,%bh
  1000ca:	ff 00                	incl   (%rax)
  1000cc:	00 00                	add    %al,(%rax)
  1000ce:	f3 af                	repz scas %es:(%rdi),%eax
	...
  100134:	00 00                	add    %al,(%rax)
  100136:	f4                   	hlt    
	...

0000000000100139 <GDT_END>:
  100139:	90                   	nop    
  10013a:	90                   	nop    
  10013b:	90                   	nop    
  10013c:	90                   	nop    
  10013d:	90                   	nop    
  10013e:	90                   	nop    
  10013f:	90                   	nop    
  100140:	90                   	nop    
  100141:	90                   	nop    
  100142:	90                   	nop    
  100143:	90                   	nop    
  100144:	90                   	nop    
  100145:	90                   	nop    
  100146:	90                   	nop    
  100147:	90                   	nop    
  100148:	90                   	nop    
  100149:	90                   	nop    
  10014a:	90                   	nop    
  10014b:	90                   	nop    
  10014c:	90                   	nop    
  10014d:	90                   	nop    
  10014e:	90                   	nop    
  10014f:	90                   	nop    
  100150:	90                   	nop    
  100151:	90                   	nop    
  100152:	90                   	nop    
  100153:	90                   	nop    
  100154:	90                   	nop    
  100155:	90                   	nop    
  100156:	90                   	nop    
  100157:	90                   	nop    
  100158:	90                   	nop    
  100159:	90                   	nop    
  10015a:	90                   	nop    
  10015b:	90                   	nop    
  10015c:	90                   	nop    
  10015d:	90                   	nop    
  10015e:	90                   	nop    
  10015f:	90                   	nop    
  100160:	90                   	nop    
  100161:	90                   	nop    
  100162:	90                   	nop    
  100163:	90                   	nop    
  100164:	90                   	nop    
  100165:	90                   	nop    
  100166:	90                   	nop    
  100167:	90                   	nop    
  100168:	90                   	nop    
  100169:	90                   	nop    
  10016a:	90                   	nop    
  10016b:	90                   	nop    
  10016c:	90                   	nop    
  10016d:	90                   	nop    
  10016e:	90                   	nop    
  10016f:	90                   	nop    
  100170:	90                   	nop    
  100171:	90                   	nop    
  100172:	90                   	nop    
  100173:	90                   	nop    
  100174:	90                   	nop    
  100175:	90                   	nop    
  100176:	90                   	nop    
  100177:	90                   	nop    
  100178:	90                   	nop    
  100179:	90                   	nop    
  10017a:	90                   	nop    
  10017b:	90                   	nop    
  10017c:	90                   	nop    
  10017d:	90                   	nop    
  10017e:	90                   	nop    
  10017f:	90                   	nop    
  100180:	90                   	nop    
  100181:	90                   	nop    
  100182:	90                   	nop    
  100183:	90                   	nop    
  100184:	90                   	nop    
  100185:	90                   	nop    
  100186:	90                   	nop    
  100187:	90                   	nop    
  100188:	90                   	nop    
  100189:	90                   	nop    
  10018a:	90                   	nop    
  10018b:	90                   	nop    
  10018c:	90                   	nop    
  10018d:	90                   	nop    
  10018e:	90                   	nop    
  10018f:	90                   	nop    
  100190:	90                   	nop    
  100191:	90                   	nop    
  100192:	90                   	nop    
  100193:	90                   	nop    
  100194:	90                   	nop    
  100195:	90                   	nop    
  100196:	90                   	nop    
  100197:	90                   	nop    
  100198:	90                   	nop    
  100199:	90                   	nop    
  10019a:	90                   	nop    
  10019b:	90                   	nop    
  10019c:	90                   	nop    
  10019d:	90                   	nop    
  10019e:	90                   	nop    
  10019f:	90                   	nop    
  1001a0:	90                   	nop    
  1001a1:	90                   	nop    
  1001a2:	90                   	nop    
  1001a3:	90                   	nop    
  1001a4:	90                   	nop    
  1001a5:	90                   	nop    
  1001a6:	90                   	nop    
  1001a7:	90                   	nop    
  1001a8:	90                   	nop    
  1001a9:	90                   	nop    
  1001aa:	90                   	nop    
  1001ab:	90                   	nop    
  1001ac:	90                   	nop    
  1001ad:	90                   	nop    
  1001ae:	90                   	nop    
  1001af:	90                   	nop    
  1001b0:	90                   	nop    
  1001b1:	90                   	nop    
  1001b2:	90                   	nop    
  1001b3:	90                   	nop    
  1001b4:	90                   	nop    
  1001b5:	90                   	nop    
  1001b6:	90                   	nop    
  1001b7:	90                   	nop    
  1001b8:	90                   	nop    
  1001b9:	90                   	nop    
  1001ba:	90                   	nop    
  1001bb:	90                   	nop    
  1001bc:	90                   	nop    
  1001bd:	90                   	nop    
  1001be:	90                   	nop    
  1001bf:	90                   	nop    
  1001c0:	90                   	nop    
  1001c1:	90                   	nop    
  1001c2:	90                   	nop    
  1001c3:	90                   	nop    
  1001c4:	90                   	nop    
  1001c5:	90                   	nop    
  1001c6:	90                   	nop    
  1001c7:	90                   	nop    
  1001c8:	90                   	nop    
  1001c9:	90                   	nop    
  1001ca:	90                   	nop    
  1001cb:	90                   	nop    
  1001cc:	90                   	nop    
  1001cd:	90                   	nop    
  1001ce:	90                   	nop    
  1001cf:	90                   	nop    
  1001d0:	90                   	nop    
  1001d1:	90                   	nop    
  1001d2:	90                   	nop    
  1001d3:	90                   	nop    
  1001d4:	90                   	nop    
  1001d5:	90                   	nop    
  1001d6:	90                   	nop    
  1001d7:	90                   	nop    
  1001d8:	90                   	nop    
  1001d9:	90                   	nop    
  1001da:	90                   	nop    
  1001db:	90                   	nop    
  1001dc:	90                   	nop    
  1001dd:	90                   	nop    
  1001de:	90                   	nop    
  1001df:	90                   	nop    
  1001e0:	90                   	nop    
  1001e1:	90                   	nop    
  1001e2:	90                   	nop    
  1001e3:	90                   	nop    
  1001e4:	90                   	nop    
  1001e5:	90                   	nop    
  1001e6:	90                   	nop    
  1001e7:	90                   	nop    
  1001e8:	90                   	nop    
  1001e9:	90                   	nop    
  1001ea:	90                   	nop    
  1001eb:	90                   	nop    
  1001ec:	90                   	nop    
  1001ed:	90                   	nop    
  1001ee:	90                   	nop    
  1001ef:	90                   	nop    
  1001f0:	90                   	nop    
  1001f1:	90                   	nop    
  1001f2:	90                   	nop    
  1001f3:	90                   	nop    
  1001f4:	90                   	nop    
  1001f5:	90                   	nop    
  1001f6:	90                   	nop    
  1001f7:	90                   	nop    
  1001f8:	90                   	nop    
  1001f9:	90                   	nop    
  1001fa:	90                   	nop    
  1001fb:	90                   	nop    
  1001fc:	90                   	nop    
  1001fd:	90                   	nop    
  1001fe:	90                   	nop    
  1001ff:	90                   	nop    
  100200:	90                   	nop    
  100201:	90                   	nop    
  100202:	90                   	nop    
  100203:	90                   	nop    
  100204:	90                   	nop    
  100205:	90                   	nop    
  100206:	90                   	nop    
  100207:	90                   	nop    
  100208:	90                   	nop    
  100209:	90                   	nop    
  10020a:	90                   	nop    
  10020b:	90                   	nop    
  10020c:	90                   	nop    
  10020d:	90                   	nop    
  10020e:	90                   	nop    
  10020f:	90                   	nop    
  100210:	90                   	nop    
  100211:	90                   	nop    
  100212:	90                   	nop    
  100213:	90                   	nop    
  100214:	90                   	nop    
  100215:	90                   	nop    
  100216:	90                   	nop    
  100217:	90                   	nop    
  100218:	90                   	nop    
  100219:	90                   	nop    
  10021a:	90                   	nop    
  10021b:	90                   	nop    
  10021c:	90                   	nop    
  10021d:	90                   	nop    
  10021e:	90                   	nop    
  10021f:	90                   	nop    
  100220:	90                   	nop    
  100221:	90                   	nop    
  100222:	90                   	nop    
  100223:	90                   	nop    
  100224:	90                   	nop    
  100225:	90                   	nop    
  100226:	90                   	nop    
  100227:	90                   	nop    
  100228:	90                   	nop    
  100229:	90                   	nop    
  10022a:	90                   	nop    
  10022b:	90                   	nop    
  10022c:	90                   	nop    
  10022d:	90                   	nop    
  10022e:	90                   	nop    
  10022f:	90                   	nop    
  100230:	90                   	nop    
  100231:	90                   	nop    
  100232:	90                   	nop    
  100233:	90                   	nop    
  100234:	90                   	nop    
  100235:	90                   	nop    
  100236:	90                   	nop    
  100237:	90                   	nop    
  100238:	90                   	nop    
  100239:	90                   	nop    
  10023a:	90                   	nop    
  10023b:	90                   	nop    
  10023c:	90                   	nop    
  10023d:	90                   	nop    
  10023e:	90                   	nop    
  10023f:	90                   	nop    
  100240:	90                   	nop    
  100241:	90                   	nop    
  100242:	90                   	nop    
  100243:	90                   	nop    
  100244:	90                   	nop    
  100245:	90                   	nop    
  100246:	90                   	nop    
  100247:	90                   	nop    
  100248:	90                   	nop    
  100249:	90                   	nop    
  10024a:	90                   	nop    
  10024b:	90                   	nop    
  10024c:	90                   	nop    
  10024d:	90                   	nop    
  10024e:	90                   	nop    
  10024f:	90                   	nop    
  100250:	90                   	nop    
  100251:	90                   	nop    
  100252:	90                   	nop    
  100253:	90                   	nop    
  100254:	90                   	nop    
  100255:	90                   	nop    
  100256:	90                   	nop    
  100257:	90                   	nop    
  100258:	90                   	nop    
  100259:	90                   	nop    
  10025a:	90                   	nop    
  10025b:	90                   	nop    
  10025c:	90                   	nop    
  10025d:	90                   	nop    
  10025e:	90                   	nop    
  10025f:	90                   	nop    
  100260:	90                   	nop    
  100261:	90                   	nop    
  100262:	90                   	nop    
  100263:	90                   	nop    
  100264:	90                   	nop    
  100265:	90                   	nop    
  100266:	90                   	nop    
  100267:	90                   	nop    
  100268:	90                   	nop    
  100269:	90                   	nop    
  10026a:	90                   	nop    
  10026b:	90                   	nop    
  10026c:	90                   	nop    
  10026d:	90                   	nop    
  10026e:	90                   	nop    
  10026f:	90                   	nop    
  100270:	90                   	nop    
  100271:	90                   	nop    
  100272:	90                   	nop    
  100273:	90                   	nop    
  100274:	90                   	nop    
  100275:	90                   	nop    
  100276:	90                   	nop    
  100277:	90                   	nop    
  100278:	90                   	nop    
  100279:	90                   	nop    
  10027a:	90                   	nop    
  10027b:	90                   	nop    
  10027c:	90                   	nop    
  10027d:	90                   	nop    
  10027e:	90                   	nop    
  10027f:	90                   	nop    
  100280:	90                   	nop    
  100281:	90                   	nop    
  100282:	90                   	nop    
  100283:	90                   	nop    
  100284:	90                   	nop    
  100285:	90                   	nop    
  100286:	90                   	nop    
  100287:	90                   	nop    
  100288:	90                   	nop    
  100289:	90                   	nop    
  10028a:	90                   	nop    
  10028b:	90                   	nop    
  10028c:	90                   	nop    
  10028d:	90                   	nop    
  10028e:	90                   	nop    
  10028f:	90                   	nop    
  100290:	90                   	nop    
  100291:	90                   	nop    
  100292:	90                   	nop    
  100293:	90                   	nop    
  100294:	90                   	nop    
  100295:	90                   	nop    
  100296:	90                   	nop    
  100297:	90                   	nop    
  100298:	90                   	nop    
  100299:	90                   	nop    
  10029a:	90                   	nop    
  10029b:	90                   	nop    
  10029c:	90                   	nop    
  10029d:	90                   	nop    
  10029e:	90                   	nop    
  10029f:	90                   	nop    
  1002a0:	90                   	nop    
  1002a1:	90                   	nop    
  1002a2:	90                   	nop    
  1002a3:	90                   	nop    
  1002a4:	90                   	nop    
  1002a5:	90                   	nop    
  1002a6:	90                   	nop    
  1002a7:	90                   	nop    
  1002a8:	90                   	nop    
  1002a9:	90                   	nop    
  1002aa:	90                   	nop    
  1002ab:	90                   	nop    
  1002ac:	90                   	nop    
  1002ad:	90                   	nop    
  1002ae:	90                   	nop    
  1002af:	90                   	nop    
  1002b0:	90                   	nop    
  1002b1:	90                   	nop    
  1002b2:	90                   	nop    
  1002b3:	90                   	nop    
  1002b4:	90                   	nop    
  1002b5:	90                   	nop    
  1002b6:	90                   	nop    
  1002b7:	90                   	nop    
  1002b8:	90                   	nop    
  1002b9:	90                   	nop    
  1002ba:	90                   	nop    
  1002bb:	90                   	nop    
  1002bc:	90                   	nop    
  1002bd:	90                   	nop    
  1002be:	90                   	nop    
  1002bf:	90                   	nop    
  1002c0:	90                   	nop    
  1002c1:	90                   	nop    
  1002c2:	90                   	nop    
  1002c3:	90                   	nop    
  1002c4:	90                   	nop    
  1002c5:	90                   	nop    
  1002c6:	90                   	nop    
  1002c7:	90                   	nop    
  1002c8:	90                   	nop    
  1002c9:	90                   	nop    
  1002ca:	90                   	nop    
  1002cb:	90                   	nop    
  1002cc:	90                   	nop    
  1002cd:	90                   	nop    
  1002ce:	90                   	nop    
  1002cf:	90                   	nop    
  1002d0:	90                   	nop    
  1002d1:	90                   	nop    
  1002d2:	90                   	nop    
  1002d3:	90                   	nop    
  1002d4:	90                   	nop    
  1002d5:	90                   	nop    
  1002d6:	90                   	nop    
  1002d7:	90                   	nop    
  1002d8:	90                   	nop    
  1002d9:	90                   	nop    
  1002da:	90                   	nop    
  1002db:	90                   	nop    
  1002dc:	90                   	nop    
  1002dd:	90                   	nop    
  1002de:	90                   	nop    
  1002df:	90                   	nop    
  1002e0:	90                   	nop    
  1002e1:	90                   	nop    
  1002e2:	90                   	nop    
  1002e3:	90                   	nop    
  1002e4:	90                   	nop    
  1002e5:	90                   	nop    
  1002e6:	90                   	nop    
  1002e7:	90                   	nop    
  1002e8:	90                   	nop    
  1002e9:	90                   	nop    
  1002ea:	90                   	nop    
  1002eb:	90                   	nop    
  1002ec:	90                   	nop    
  1002ed:	90                   	nop    
  1002ee:	90                   	nop    
  1002ef:	90                   	nop    
  1002f0:	90                   	nop    
  1002f1:	90                   	nop    
  1002f2:	90                   	nop    
  1002f3:	90                   	nop    
  1002f4:	90                   	nop    
  1002f5:	90                   	nop    
  1002f6:	90                   	nop    
  1002f7:	90                   	nop    
  1002f8:	90                   	nop    
  1002f9:	90                   	nop    
  1002fa:	90                   	nop    
  1002fb:	90                   	nop    
  1002fc:	90                   	nop    
  1002fd:	90                   	nop    
  1002fe:	90                   	nop    
  1002ff:	90                   	nop    
  100300:	90                   	nop    
  100301:	90                   	nop    
  100302:	90                   	nop    
  100303:	90                   	nop    
  100304:	90                   	nop    
  100305:	90                   	nop    
  100306:	90                   	nop    
  100307:	90                   	nop    
  100308:	90                   	nop    
  100309:	90                   	nop    
  10030a:	90                   	nop    
  10030b:	90                   	nop    
  10030c:	90                   	nop    
  10030d:	90                   	nop    
  10030e:	90                   	nop    
  10030f:	90                   	nop    
  100310:	90                   	nop    
  100311:	90                   	nop    
  100312:	90                   	nop    
  100313:	90                   	nop    
  100314:	90                   	nop    
  100315:	90                   	nop    
  100316:	90                   	nop    
  100317:	90                   	nop    
  100318:	90                   	nop    
  100319:	90                   	nop    
  10031a:	90                   	nop    
  10031b:	90                   	nop    
  10031c:	90                   	nop    
  10031d:	90                   	nop    
  10031e:	90                   	nop    
  10031f:	90                   	nop    
  100320:	90                   	nop    
  100321:	90                   	nop    
  100322:	90                   	nop    
  100323:	90                   	nop    
  100324:	90                   	nop    
  100325:	90                   	nop    
  100326:	90                   	nop    
  100327:	90                   	nop    
  100328:	90                   	nop    
  100329:	90                   	nop    
  10032a:	90                   	nop    
  10032b:	90                   	nop    
  10032c:	90                   	nop    
  10032d:	90                   	nop    
  10032e:	90                   	nop    
  10032f:	90                   	nop    
  100330:	90                   	nop    
  100331:	90                   	nop    
  100332:	90                   	nop    
  100333:	90                   	nop    
  100334:	90                   	nop    
  100335:	90                   	nop    
  100336:	90                   	nop    
  100337:	90                   	nop    
  100338:	90                   	nop    
  100339:	90                   	nop    
  10033a:	90                   	nop    
  10033b:	90                   	nop    
  10033c:	90                   	nop    
  10033d:	90                   	nop    
  10033e:	90                   	nop    
  10033f:	90                   	nop    
  100340:	90                   	nop    
  100341:	90                   	nop    
  100342:	90                   	nop    
  100343:	90                   	nop    
  100344:	90                   	nop    
  100345:	90                   	nop    
  100346:	90                   	nop    
  100347:	90                   	nop    
  100348:	90                   	nop    
  100349:	90                   	nop    
  10034a:	90                   	nop    
  10034b:	90                   	nop    
  10034c:	90                   	nop    
  10034d:	90                   	nop    
  10034e:	90                   	nop    
  10034f:	90                   	nop    
  100350:	90                   	nop    
  100351:	90                   	nop    
  100352:	90                   	nop    
  100353:	90                   	nop    
  100354:	90                   	nop    
  100355:	90                   	nop    
  100356:	90                   	nop    
  100357:	90                   	nop    
  100358:	90                   	nop    
  100359:	90                   	nop    
  10035a:	90                   	nop    
  10035b:	90                   	nop    
  10035c:	90                   	nop    
  10035d:	90                   	nop    
  10035e:	90                   	nop    
  10035f:	90                   	nop    
  100360:	90                   	nop    
  100361:	90                   	nop    
  100362:	90                   	nop    
  100363:	90                   	nop    
  100364:	90                   	nop    
  100365:	90                   	nop    
  100366:	90                   	nop    
  100367:	90                   	nop    
  100368:	90                   	nop    
  100369:	90                   	nop    
  10036a:	90                   	nop    
  10036b:	90                   	nop    
  10036c:	90                   	nop    
  10036d:	90                   	nop    
  10036e:	90                   	nop    
  10036f:	90                   	nop    
  100370:	90                   	nop    
  100371:	90                   	nop    
  100372:	90                   	nop    
  100373:	90                   	nop    
  100374:	90                   	nop    
  100375:	90                   	nop    
  100376:	90                   	nop    
  100377:	90                   	nop    
  100378:	90                   	nop    
  100379:	90                   	nop    
  10037a:	90                   	nop    
  10037b:	90                   	nop    
  10037c:	90                   	nop    
  10037d:	90                   	nop    
  10037e:	90                   	nop    
  10037f:	90                   	nop    
  100380:	90                   	nop    
  100381:	90                   	nop    
  100382:	90                   	nop    
  100383:	90                   	nop    
  100384:	90                   	nop    
  100385:	90                   	nop    
  100386:	90                   	nop    
  100387:	90                   	nop    
  100388:	90                   	nop    
  100389:	90                   	nop    
  10038a:	90                   	nop    
  10038b:	90                   	nop    
  10038c:	90                   	nop    
  10038d:	90                   	nop    
  10038e:	90                   	nop    
  10038f:	90                   	nop    
  100390:	90                   	nop    
  100391:	90                   	nop    
  100392:	90                   	nop    
  100393:	90                   	nop    
  100394:	90                   	nop    
  100395:	90                   	nop    
  100396:	90                   	nop    
  100397:	90                   	nop    
  100398:	90                   	nop    
  100399:	90                   	nop    
  10039a:	90                   	nop    
  10039b:	90                   	nop    
  10039c:	90                   	nop    
  10039d:	90                   	nop    
  10039e:	90                   	nop    
  10039f:	90                   	nop    
  1003a0:	90                   	nop    
  1003a1:	90                   	nop    
  1003a2:	90                   	nop    
  1003a3:	90                   	nop    
  1003a4:	90                   	nop    
  1003a5:	90                   	nop    
  1003a6:	90                   	nop    
  1003a7:	90                   	nop    
  1003a8:	90                   	nop    
  1003a9:	90                   	nop    
  1003aa:	90                   	nop    
  1003ab:	90                   	nop    
  1003ac:	90                   	nop    
  1003ad:	90                   	nop    
  1003ae:	90                   	nop    
  1003af:	90                   	nop    
  1003b0:	90                   	nop    
  1003b1:	90                   	nop    
  1003b2:	90                   	nop    
  1003b3:	90                   	nop    
  1003b4:	90                   	nop    
  1003b5:	90                   	nop    
  1003b6:	90                   	nop    
  1003b7:	90                   	nop    
  1003b8:	90                   	nop    
  1003b9:	90                   	nop    
  1003ba:	90                   	nop    
  1003bb:	90                   	nop    
  1003bc:	90                   	nop    
  1003bd:	90                   	nop    
  1003be:	90                   	nop    
  1003bf:	90                   	nop    
  1003c0:	90                   	nop    
  1003c1:	90                   	nop    
  1003c2:	90                   	nop    
  1003c3:	90                   	nop    
  1003c4:	90                   	nop    
  1003c5:	90                   	nop    
  1003c6:	90                   	nop    
  1003c7:	90                   	nop    
  1003c8:	90                   	nop    
  1003c9:	90                   	nop    
  1003ca:	90                   	nop    
  1003cb:	90                   	nop    
  1003cc:	90                   	nop    
  1003cd:	90                   	nop    
  1003ce:	90                   	nop    
  1003cf:	90                   	nop    
  1003d0:	90                   	nop    
  1003d1:	90                   	nop    
  1003d2:	90                   	nop    
  1003d3:	90                   	nop    
  1003d4:	90                   	nop    
  1003d5:	90                   	nop    
  1003d6:	90                   	nop    
  1003d7:	90                   	nop    
  1003d8:	90                   	nop    
  1003d9:	90                   	nop    
  1003da:	90                   	nop    
  1003db:	90                   	nop    
  1003dc:	90                   	nop    
  1003dd:	90                   	nop    
  1003de:	90                   	nop    
  1003df:	90                   	nop    
  1003e0:	90                   	nop    
  1003e1:	90                   	nop    
  1003e2:	90                   	nop    
  1003e3:	90                   	nop    
  1003e4:	90                   	nop    
  1003e5:	90                   	nop    
  1003e6:	90                   	nop    
  1003e7:	90                   	nop    
  1003e8:	90                   	nop    
  1003e9:	90                   	nop    
  1003ea:	90                   	nop    
  1003eb:	90                   	nop    
  1003ec:	90                   	nop    
  1003ed:	90                   	nop    
  1003ee:	90                   	nop    
  1003ef:	90                   	nop    
  1003f0:	90                   	nop    
  1003f1:	90                   	nop    
  1003f2:	90                   	nop    
  1003f3:	90                   	nop    
  1003f4:	90                   	nop    
  1003f5:	90                   	nop    
  1003f6:	90                   	nop    
  1003f7:	90                   	nop    
  1003f8:	90                   	nop    
  1003f9:	90                   	nop    
  1003fa:	90                   	nop    
  1003fb:	90                   	nop    
  1003fc:	90                   	nop    
  1003fd:	90                   	nop    
  1003fe:	90                   	nop    
  1003ff:	90                   	nop    
  100400:	90                   	nop    
  100401:	90                   	nop    
  100402:	90                   	nop    
  100403:	90                   	nop    
  100404:	90                   	nop    
  100405:	90                   	nop    
  100406:	90                   	nop    
  100407:	90                   	nop    
  100408:	90                   	nop    
  100409:	90                   	nop    
  10040a:	90                   	nop    
  10040b:	90                   	nop    
  10040c:	90                   	nop    
  10040d:	90                   	nop    
  10040e:	90                   	nop    
  10040f:	90                   	nop    
  100410:	90                   	nop    
  100411:	90                   	nop    
  100412:	90                   	nop    
  100413:	90                   	nop    
  100414:	90                   	nop    
  100415:	90                   	nop    
  100416:	90                   	nop    
  100417:	90                   	nop    
  100418:	90                   	nop    
  100419:	90                   	nop    
  10041a:	90                   	nop    
  10041b:	90                   	nop    
  10041c:	90                   	nop    
  10041d:	90                   	nop    
  10041e:	90                   	nop    
  10041f:	90                   	nop    
  100420:	90                   	nop    
  100421:	90                   	nop    
  100422:	90                   	nop    
  100423:	90                   	nop    
  100424:	90                   	nop    
  100425:	90                   	nop    
  100426:	90                   	nop    
  100427:	90                   	nop    
  100428:	90                   	nop    
  100429:	90                   	nop    
  10042a:	90                   	nop    
  10042b:	90                   	nop    
  10042c:	90                   	nop    
  10042d:	90                   	nop    
  10042e:	90                   	nop    
  10042f:	90                   	nop    
  100430:	90                   	nop    
  100431:	90                   	nop    
  100432:	90                   	nop    
  100433:	90                   	nop    
  100434:	90                   	nop    
  100435:	90                   	nop    
  100436:	90                   	nop    
  100437:	90                   	nop    
  100438:	90                   	nop    
  100439:	90                   	nop    
  10043a:	90                   	nop    
  10043b:	90                   	nop    
  10043c:	90                   	nop    
  10043d:	90                   	nop    
  10043e:	90                   	nop    
  10043f:	90                   	nop    
  100440:	90                   	nop    
  100441:	90                   	nop    
  100442:	90                   	nop    
  100443:	90                   	nop    
  100444:	90                   	nop    
  100445:	90                   	nop    
  100446:	90                   	nop    
  100447:	90                   	nop    
  100448:	90                   	nop    
  100449:	90                   	nop    
  10044a:	90                   	nop    
  10044b:	90                   	nop    
  10044c:	90                   	nop    
  10044d:	90                   	nop    
  10044e:	90                   	nop    
  10044f:	90                   	nop    
  100450:	90                   	nop    
  100451:	90                   	nop    
  100452:	90                   	nop    
  100453:	90                   	nop    
  100454:	90                   	nop    
  100455:	90                   	nop    
  100456:	90                   	nop    
  100457:	90                   	nop    
  100458:	90                   	nop    
  100459:	90                   	nop    
  10045a:	90                   	nop    
  10045b:	90                   	nop    
  10045c:	90                   	nop    
  10045d:	90                   	nop    
  10045e:	90                   	nop    
  10045f:	90                   	nop    
  100460:	90                   	nop    
  100461:	90                   	nop    
  100462:	90                   	nop    
  100463:	90                   	nop    
  100464:	90                   	nop    
  100465:	90                   	nop    
  100466:	90                   	nop    
  100467:	90                   	nop    
  100468:	90                   	nop    
  100469:	90                   	nop    
  10046a:	90                   	nop    
  10046b:	90                   	nop    
  10046c:	90                   	nop    
  10046d:	90                   	nop    
  10046e:	90                   	nop    
  10046f:	90                   	nop    
  100470:	90                   	nop    
  100471:	90                   	nop    
  100472:	90                   	nop    
  100473:	90                   	nop    
  100474:	90                   	nop    
  100475:	90                   	nop    
  100476:	90                   	nop    
  100477:	90                   	nop    
  100478:	90                   	nop    
  100479:	90                   	nop    
  10047a:	90                   	nop    
  10047b:	90                   	nop    
  10047c:	90                   	nop    
  10047d:	90                   	nop    
  10047e:	90                   	nop    
  10047f:	90                   	nop    
  100480:	90                   	nop    
  100481:	90                   	nop    
  100482:	90                   	nop    
  100483:	90                   	nop    
  100484:	90                   	nop    
  100485:	90                   	nop    
  100486:	90                   	nop    
  100487:	90                   	nop    
  100488:	90                   	nop    
  100489:	90                   	nop    
  10048a:	90                   	nop    
  10048b:	90                   	nop    
  10048c:	90                   	nop    
  10048d:	90                   	nop    
  10048e:	90                   	nop    
  10048f:	90                   	nop    
  100490:	90                   	nop    
  100491:	90                   	nop    
  100492:	90                   	nop    
  100493:	90                   	nop    
  100494:	90                   	nop    
  100495:	90                   	nop    
  100496:	90                   	nop    
  100497:	90                   	nop    
  100498:	90                   	nop    
  100499:	90                   	nop    
  10049a:	90                   	nop    
  10049b:	90                   	nop    
  10049c:	90                   	nop    
  10049d:	90                   	nop    
  10049e:	90                   	nop    
  10049f:	90                   	nop    
  1004a0:	90                   	nop    
  1004a1:	90                   	nop    
  1004a2:	90                   	nop    
  1004a3:	90                   	nop    
  1004a4:	90                   	nop    
  1004a5:	90                   	nop    
  1004a6:	90                   	nop    
  1004a7:	90                   	nop    
  1004a8:	90                   	nop    
  1004a9:	90                   	nop    
  1004aa:	90                   	nop    
  1004ab:	90                   	nop    
  1004ac:	90                   	nop    
  1004ad:	90                   	nop    
  1004ae:	90                   	nop    
  1004af:	90                   	nop    
  1004b0:	90                   	nop    
  1004b1:	90                   	nop    
  1004b2:	90                   	nop    
  1004b3:	90                   	nop    
  1004b4:	90                   	nop    
  1004b5:	90                   	nop    
  1004b6:	90                   	nop    
  1004b7:	90                   	nop    
  1004b8:	90                   	nop    
  1004b9:	90                   	nop    
  1004ba:	90                   	nop    
  1004bb:	90                   	nop    
  1004bc:	90                   	nop    
  1004bd:	90                   	nop    
  1004be:	90                   	nop    
  1004bf:	90                   	nop    
  1004c0:	90                   	nop    
  1004c1:	90                   	nop    
  1004c2:	90                   	nop    
  1004c3:	90                   	nop    
  1004c4:	90                   	nop    
  1004c5:	90                   	nop    
  1004c6:	90                   	nop    
  1004c7:	90                   	nop    
  1004c8:	90                   	nop    
  1004c9:	90                   	nop    
  1004ca:	90                   	nop    
  1004cb:	90                   	nop    
  1004cc:	90                   	nop    
  1004cd:	90                   	nop    
  1004ce:	90                   	nop    
  1004cf:	90                   	nop    
  1004d0:	90                   	nop    
  1004d1:	90                   	nop    
  1004d2:	90                   	nop    
  1004d3:	90                   	nop    
  1004d4:	90                   	nop    
  1004d5:	90                   	nop    
  1004d6:	90                   	nop    
  1004d7:	90                   	nop    
  1004d8:	90                   	nop    
  1004d9:	90                   	nop    
  1004da:	90                   	nop    
  1004db:	90                   	nop    
  1004dc:	90                   	nop    
  1004dd:	90                   	nop    
  1004de:	90                   	nop    
  1004df:	90                   	nop    
  1004e0:	90                   	nop    
  1004e1:	90                   	nop    
  1004e2:	90                   	nop    
  1004e3:	90                   	nop    
  1004e4:	90                   	nop    
  1004e5:	90                   	nop    
  1004e6:	90                   	nop    
  1004e7:	90                   	nop    
  1004e8:	90                   	nop    
  1004e9:	90                   	nop    
  1004ea:	90                   	nop    
  1004eb:	90                   	nop    
  1004ec:	90                   	nop    
  1004ed:	90                   	nop    
  1004ee:	90                   	nop    
  1004ef:	90                   	nop    
  1004f0:	90                   	nop    
  1004f1:	90                   	nop    
  1004f2:	90                   	nop    
  1004f3:	90                   	nop    
  1004f4:	90                   	nop    
  1004f5:	90                   	nop    
  1004f6:	90                   	nop    
  1004f7:	90                   	nop    
  1004f8:	90                   	nop    
  1004f9:	90                   	nop    
  1004fa:	90                   	nop    
  1004fb:	90                   	nop    
  1004fc:	90                   	nop    
  1004fd:	90                   	nop    
  1004fe:	90                   	nop    
  1004ff:	90                   	nop    
  100500:	90                   	nop    
  100501:	90                   	nop    
  100502:	90                   	nop    
  100503:	90                   	nop    
  100504:	90                   	nop    
  100505:	90                   	nop    
  100506:	90                   	nop    
  100507:	90                   	nop    
  100508:	90                   	nop    
  100509:	90                   	nop    
  10050a:	90                   	nop    
  10050b:	90                   	nop    
  10050c:	90                   	nop    
  10050d:	90                   	nop    
  10050e:	90                   	nop    
  10050f:	90                   	nop    
  100510:	90                   	nop    
  100511:	90                   	nop    
  100512:	90                   	nop    
  100513:	90                   	nop    
  100514:	90                   	nop    
  100515:	90                   	nop    
  100516:	90                   	nop    
  100517:	90                   	nop    
  100518:	90                   	nop    
  100519:	90                   	nop    
  10051a:	90                   	nop    
  10051b:	90                   	nop    
  10051c:	90                   	nop    
  10051d:	90                   	nop    
  10051e:	90                   	nop    
  10051f:	90                   	nop    
  100520:	90                   	nop    
  100521:	90                   	nop    
  100522:	90                   	nop    
  100523:	90                   	nop    
  100524:	90                   	nop    
  100525:	90                   	nop    
  100526:	90                   	nop    
  100527:	90                   	nop    
  100528:	90                   	nop    
  100529:	90                   	nop    
  10052a:	90                   	nop    
  10052b:	90                   	nop    
  10052c:	90                   	nop    
  10052d:	90                   	nop    
  10052e:	90                   	nop    
  10052f:	90                   	nop    
  100530:	90                   	nop    
  100531:	90                   	nop    
  100532:	90                   	nop    
  100533:	90                   	nop    
  100534:	90                   	nop    
  100535:	90                   	nop    
  100536:	90                   	nop    
  100537:	90                   	nop    
  100538:	90                   	nop    
  100539:	90                   	nop    
  10053a:	90                   	nop    
  10053b:	90                   	nop    
  10053c:	90                   	nop    
  10053d:	90                   	nop    
  10053e:	90                   	nop    
  10053f:	90                   	nop    
  100540:	90                   	nop    
  100541:	90                   	nop    
  100542:	90                   	nop    
  100543:	90                   	nop    
  100544:	90                   	nop    
  100545:	90                   	nop    
  100546:	90                   	nop    
  100547:	90                   	nop    
  100548:	90                   	nop    
  100549:	90                   	nop    
  10054a:	90                   	nop    
  10054b:	90                   	nop    
  10054c:	90                   	nop    
  10054d:	90                   	nop    
  10054e:	90                   	nop    
  10054f:	90                   	nop    
  100550:	90                   	nop    
  100551:	90                   	nop    
  100552:	90                   	nop    
  100553:	90                   	nop    
  100554:	90                   	nop    
  100555:	90                   	nop    
  100556:	90                   	nop    
  100557:	90                   	nop    
  100558:	90                   	nop    
  100559:	90                   	nop    
  10055a:	90                   	nop    
  10055b:	90                   	nop    
  10055c:	90                   	nop    
  10055d:	90                   	nop    
  10055e:	90                   	nop    
  10055f:	90                   	nop    
  100560:	90                   	nop    
  100561:	90                   	nop    
  100562:	90                   	nop    
  100563:	90                   	nop    
  100564:	90                   	nop    
  100565:	90                   	nop    
  100566:	90                   	nop    
  100567:	90                   	nop    
  100568:	90                   	nop    
  100569:	90                   	nop    
  10056a:	90                   	nop    
  10056b:	90                   	nop    
  10056c:	90                   	nop    
  10056d:	90                   	nop    
  10056e:	90                   	nop    
  10056f:	90                   	nop    
  100570:	90                   	nop    
  100571:	90                   	nop    
  100572:	90                   	nop    
  100573:	90                   	nop    
  100574:	90                   	nop    
  100575:	90                   	nop    
  100576:	90                   	nop    
  100577:	90                   	nop    
  100578:	90                   	nop    
  100579:	90                   	nop    
  10057a:	90                   	nop    
  10057b:	90                   	nop    
  10057c:	90                   	nop    
  10057d:	90                   	nop    
  10057e:	90                   	nop    
  10057f:	90                   	nop    
  100580:	90                   	nop    
  100581:	90                   	nop    
  100582:	90                   	nop    
  100583:	90                   	nop    
  100584:	90                   	nop    
  100585:	90                   	nop    
  100586:	90                   	nop    
  100587:	90                   	nop    
  100588:	90                   	nop    
  100589:	90                   	nop    
  10058a:	90                   	nop    
  10058b:	90                   	nop    
  10058c:	90                   	nop    
  10058d:	90                   	nop    
  10058e:	90                   	nop    
  10058f:	90                   	nop    
  100590:	90                   	nop    
  100591:	90                   	nop    
  100592:	90                   	nop    
  100593:	90                   	nop    
  100594:	90                   	nop    
  100595:	90                   	nop    
  100596:	90                   	nop    
  100597:	90                   	nop    
  100598:	90                   	nop    
  100599:	90                   	nop    
  10059a:	90                   	nop    
  10059b:	90                   	nop    
  10059c:	90                   	nop    
  10059d:	90                   	nop    
  10059e:	90                   	nop    
  10059f:	90                   	nop    
  1005a0:	90                   	nop    
  1005a1:	90                   	nop    
  1005a2:	90                   	nop    
  1005a3:	90                   	nop    
  1005a4:	90                   	nop    
  1005a5:	90                   	nop    
  1005a6:	90                   	nop    
  1005a7:	90                   	nop    
  1005a8:	90                   	nop    
  1005a9:	90                   	nop    
  1005aa:	90                   	nop    
  1005ab:	90                   	nop    
  1005ac:	90                   	nop    
  1005ad:	90                   	nop    
  1005ae:	90                   	nop    
  1005af:	90                   	nop    
  1005b0:	90                   	nop    
  1005b1:	90                   	nop    
  1005b2:	90                   	nop    
  1005b3:	90                   	nop    
  1005b4:	90                   	nop    
  1005b5:	90                   	nop    
  1005b6:	90                   	nop    
  1005b7:	90                   	nop    
  1005b8:	90                   	nop    
  1005b9:	90                   	nop    
  1005ba:	90                   	nop    
  1005bb:	90                   	nop    
  1005bc:	90                   	nop    
  1005bd:	90                   	nop    
  1005be:	90                   	nop    
  1005bf:	90                   	nop    
  1005c0:	90                   	nop    
  1005c1:	90                   	nop    
  1005c2:	90                   	nop    
  1005c3:	90                   	nop    
  1005c4:	90                   	nop    
  1005c5:	90                   	nop    
  1005c6:	90                   	nop    
  1005c7:	90                   	nop    
  1005c8:	90                   	nop    
  1005c9:	90                   	nop    
  1005ca:	90                   	nop    
  1005cb:	90                   	nop    
  1005cc:	90                   	nop    
  1005cd:	90                   	nop    
  1005ce:	90                   	nop    
  1005cf:	90                   	nop    
  1005d0:	90                   	nop    
  1005d1:	90                   	nop    
  1005d2:	90                   	nop    
  1005d3:	90                   	nop    
  1005d4:	90                   	nop    
  1005d5:	90                   	nop    
  1005d6:	90                   	nop    
  1005d7:	90                   	nop    
  1005d8:	90                   	nop    
  1005d9:	90                   	nop    
  1005da:	90                   	nop    
  1005db:	90                   	nop    
  1005dc:	90                   	nop    
  1005dd:	90                   	nop    
  1005de:	90                   	nop    
  1005df:	90                   	nop    
  1005e0:	90                   	nop    
  1005e1:	90                   	nop    
  1005e2:	90                   	nop    
  1005e3:	90                   	nop    
  1005e4:	90                   	nop    
  1005e5:	90                   	nop    
  1005e6:	90                   	nop    
  1005e7:	90                   	nop    
  1005e8:	90                   	nop    
  1005e9:	90                   	nop    
  1005ea:	90                   	nop    
  1005eb:	90                   	nop    
  1005ec:	90                   	nop    
  1005ed:	90                   	nop    
  1005ee:	90                   	nop    
  1005ef:	90                   	nop    
  1005f0:	90                   	nop    
  1005f1:	90                   	nop    
  1005f2:	90                   	nop    
  1005f3:	90                   	nop    
  1005f4:	90                   	nop    
  1005f5:	90                   	nop    
  1005f6:	90                   	nop    
  1005f7:	90                   	nop    
  1005f8:	90                   	nop    
  1005f9:	90                   	nop    
  1005fa:	90                   	nop    
  1005fb:	90                   	nop    
  1005fc:	90                   	nop    
  1005fd:	90                   	nop    
  1005fe:	90                   	nop    
  1005ff:	90                   	nop    
  100600:	90                   	nop    
  100601:	90                   	nop    
  100602:	90                   	nop    
  100603:	90                   	nop    
  100604:	90                   	nop    
  100605:	90                   	nop    
  100606:	90                   	nop    
  100607:	90                   	nop    
  100608:	90                   	nop    
  100609:	90                   	nop    
  10060a:	90                   	nop    
  10060b:	90                   	nop    
  10060c:	90                   	nop    
  10060d:	90                   	nop    
  10060e:	90                   	nop    
  10060f:	90                   	nop    
  100610:	90                   	nop    
  100611:	90                   	nop    
  100612:	90                   	nop    
  100613:	90                   	nop    
  100614:	90                   	nop    
  100615:	90                   	nop    
  100616:	90                   	nop    
  100617:	90                   	nop    
  100618:	90                   	nop    
  100619:	90                   	nop    
  10061a:	90                   	nop    
  10061b:	90                   	nop    
  10061c:	90                   	nop    
  10061d:	90                   	nop    
  10061e:	90                   	nop    
  10061f:	90                   	nop    
  100620:	90                   	nop    
  100621:	90                   	nop    
  100622:	90                   	nop    
  100623:	90                   	nop    
  100624:	90                   	nop    
  100625:	90                   	nop    
  100626:	90                   	nop    
  100627:	90                   	nop    
  100628:	90                   	nop    
  100629:	90                   	nop    
  10062a:	90                   	nop    
  10062b:	90                   	nop    
  10062c:	90                   	nop    
  10062d:	90                   	nop    
  10062e:	90                   	nop    
  10062f:	90                   	nop    
  100630:	90                   	nop    
  100631:	90                   	nop    
  100632:	90                   	nop    
  100633:	90                   	nop    
  100634:	90                   	nop    
  100635:	90                   	nop    
  100636:	90                   	nop    
  100637:	90                   	nop    
  100638:	90                   	nop    
  100639:	90                   	nop    
  10063a:	90                   	nop    
  10063b:	90                   	nop    
  10063c:	90                   	nop    
  10063d:	90                   	nop    
  10063e:	90                   	nop    
  10063f:	90                   	nop    
  100640:	90                   	nop    
  100641:	90                   	nop    
  100642:	90                   	nop    
  100643:	90                   	nop    
  100644:	90                   	nop    
  100645:	90                   	nop    
  100646:	90                   	nop    
  100647:	90                   	nop    
  100648:	90                   	nop    
  100649:	90                   	nop    
  10064a:	90                   	nop    
  10064b:	90                   	nop    
  10064c:	90                   	nop    
  10064d:	90                   	nop    
  10064e:	90                   	nop    
  10064f:	90                   	nop    
  100650:	90                   	nop    
  100651:	90                   	nop    
  100652:	90                   	nop    
  100653:	90                   	nop    
  100654:	90                   	nop    
  100655:	90                   	nop    
  100656:	90                   	nop    
  100657:	90                   	nop    
  100658:	90                   	nop    
  100659:	90                   	nop    
  10065a:	90                   	nop    
  10065b:	90                   	nop    
  10065c:	90                   	nop    
  10065d:	90                   	nop    
  10065e:	90                   	nop    
  10065f:	90                   	nop    
  100660:	90                   	nop    
  100661:	90                   	nop    
  100662:	90                   	nop    
  100663:	90                   	nop    
  100664:	90                   	nop    
  100665:	90                   	nop    
  100666:	90                   	nop    
  100667:	90                   	nop    
  100668:	90                   	nop    
  100669:	90                   	nop    
  10066a:	90                   	nop    
  10066b:	90                   	nop    
  10066c:	90                   	nop    
  10066d:	90                   	nop    
  10066e:	90                   	nop    
  10066f:	90                   	nop    
  100670:	90                   	nop    
  100671:	90                   	nop    
  100672:	90                   	nop    
  100673:	90                   	nop    
  100674:	90                   	nop    
  100675:	90                   	nop    
  100676:	90                   	nop    
  100677:	90                   	nop    
  100678:	90                   	nop    
  100679:	90                   	nop    
  10067a:	90                   	nop    
  10067b:	90                   	nop    
  10067c:	90                   	nop    
  10067d:	90                   	nop    
  10067e:	90                   	nop    
  10067f:	90                   	nop    
  100680:	90                   	nop    
  100681:	90                   	nop    
  100682:	90                   	nop    
  100683:	90                   	nop    
  100684:	90                   	nop    
  100685:	90                   	nop    
  100686:	90                   	nop    
  100687:	90                   	nop    
  100688:	90                   	nop    
  100689:	90                   	nop    
  10068a:	90                   	nop    
  10068b:	90                   	nop    
  10068c:	90                   	nop    
  10068d:	90                   	nop    
  10068e:	90                   	nop    
  10068f:	90                   	nop    
  100690:	90                   	nop    
  100691:	90                   	nop    
  100692:	90                   	nop    
  100693:	90                   	nop    
  100694:	90                   	nop    
  100695:	90                   	nop    
  100696:	90                   	nop    
  100697:	90                   	nop    
  100698:	90                   	nop    
  100699:	90                   	nop    
  10069a:	90                   	nop    
  10069b:	90                   	nop    
  10069c:	90                   	nop    
  10069d:	90                   	nop    
  10069e:	90                   	nop    
  10069f:	90                   	nop    
  1006a0:	90                   	nop    
  1006a1:	90                   	nop    
  1006a2:	90                   	nop    
  1006a3:	90                   	nop    
  1006a4:	90                   	nop    
  1006a5:	90                   	nop    
  1006a6:	90                   	nop    
  1006a7:	90                   	nop    
  1006a8:	90                   	nop    
  1006a9:	90                   	nop    
  1006aa:	90                   	nop    
  1006ab:	90                   	nop    
  1006ac:	90                   	nop    
  1006ad:	90                   	nop    
  1006ae:	90                   	nop    
  1006af:	90                   	nop    
  1006b0:	90                   	nop    
  1006b1:	90                   	nop    
  1006b2:	90                   	nop    
  1006b3:	90                   	nop    
  1006b4:	90                   	nop    
  1006b5:	90                   	nop    
  1006b6:	90                   	nop    
  1006b7:	90                   	nop    
  1006b8:	90                   	nop    
  1006b9:	90                   	nop    
  1006ba:	90                   	nop    
  1006bb:	90                   	nop    
  1006bc:	90                   	nop    
  1006bd:	90                   	nop    
  1006be:	90                   	nop    
  1006bf:	90                   	nop    
  1006c0:	90                   	nop    
  1006c1:	90                   	nop    
  1006c2:	90                   	nop    
  1006c3:	90                   	nop    
  1006c4:	90                   	nop    
  1006c5:	90                   	nop    
  1006c6:	90                   	nop    
  1006c7:	90                   	nop    
  1006c8:	90                   	nop    
  1006c9:	90                   	nop    
  1006ca:	90                   	nop    
  1006cb:	90                   	nop    
  1006cc:	90                   	nop    
  1006cd:	90                   	nop    
  1006ce:	90                   	nop    
  1006cf:	90                   	nop    
  1006d0:	90                   	nop    
  1006d1:	90                   	nop    
  1006d2:	90                   	nop    
  1006d3:	90                   	nop    
  1006d4:	90                   	nop    
  1006d5:	90                   	nop    
  1006d6:	90                   	nop    
  1006d7:	90                   	nop    
  1006d8:	90                   	nop    
  1006d9:	90                   	nop    
  1006da:	90                   	nop    
  1006db:	90                   	nop    
  1006dc:	90                   	nop    
  1006dd:	90                   	nop    
  1006de:	90                   	nop    
  1006df:	90                   	nop    
  1006e0:	90                   	nop    
  1006e1:	90                   	nop    
  1006e2:	90                   	nop    
  1006e3:	90                   	nop    
  1006e4:	90                   	nop    
  1006e5:	90                   	nop    
  1006e6:	90                   	nop    
  1006e7:	90                   	nop    
  1006e8:	90                   	nop    
  1006e9:	90                   	nop    
  1006ea:	90                   	nop    
  1006eb:	90                   	nop    
  1006ec:	90                   	nop    
  1006ed:	90                   	nop    
  1006ee:	90                   	nop    
  1006ef:	90                   	nop    
  1006f0:	90                   	nop    
  1006f1:	90                   	nop    
  1006f2:	90                   	nop    
  1006f3:	90                   	nop    
  1006f4:	90                   	nop    
  1006f5:	90                   	nop    
  1006f6:	90                   	nop    
  1006f7:	90                   	nop    
  1006f8:	90                   	nop    
  1006f9:	90                   	nop    
  1006fa:	90                   	nop    
  1006fb:	90                   	nop    
  1006fc:	90                   	nop    
  1006fd:	90                   	nop    
  1006fe:	90                   	nop    
  1006ff:	90                   	nop    
  100700:	90                   	nop    
  100701:	90                   	nop    
  100702:	90                   	nop    
  100703:	90                   	nop    
  100704:	90                   	nop    
  100705:	90                   	nop    
  100706:	90                   	nop    
  100707:	90                   	nop    
  100708:	90                   	nop    
  100709:	90                   	nop    
  10070a:	90                   	nop    
  10070b:	90                   	nop    
  10070c:	90                   	nop    
  10070d:	90                   	nop    
  10070e:	90                   	nop    
  10070f:	90                   	nop    
  100710:	90                   	nop    
  100711:	90                   	nop    
  100712:	90                   	nop    
  100713:	90                   	nop    
  100714:	90                   	nop    
  100715:	90                   	nop    
  100716:	90                   	nop    
  100717:	90                   	nop    
  100718:	90                   	nop    
  100719:	90                   	nop    
  10071a:	90                   	nop    
  10071b:	90                   	nop    
  10071c:	90                   	nop    
  10071d:	90                   	nop    
  10071e:	90                   	nop    
  10071f:	90                   	nop    
  100720:	90                   	nop    
  100721:	90                   	nop    
  100722:	90                   	nop    
  100723:	90                   	nop    
  100724:	90                   	nop    
  100725:	90                   	nop    
  100726:	90                   	nop    
  100727:	90                   	nop    
  100728:	90                   	nop    
  100729:	90                   	nop    
  10072a:	90                   	nop    
  10072b:	90                   	nop    
  10072c:	90                   	nop    
  10072d:	90                   	nop    
  10072e:	90                   	nop    
  10072f:	90                   	nop    
  100730:	90                   	nop    
  100731:	90                   	nop    
  100732:	90                   	nop    
  100733:	90                   	nop    
  100734:	90                   	nop    
  100735:	90                   	nop    
  100736:	90                   	nop    
  100737:	90                   	nop    
  100738:	90                   	nop    
  100739:	90                   	nop    
  10073a:	90                   	nop    
  10073b:	90                   	nop    
  10073c:	90                   	nop    
  10073d:	90                   	nop    
  10073e:	90                   	nop    
  10073f:	90                   	nop    
  100740:	90                   	nop    
  100741:	90                   	nop    
  100742:	90                   	nop    
  100743:	90                   	nop    
  100744:	90                   	nop    
  100745:	90                   	nop    
  100746:	90                   	nop    
  100747:	90                   	nop    
  100748:	90                   	nop    
  100749:	90                   	nop    
  10074a:	90                   	nop    
  10074b:	90                   	nop    
  10074c:	90                   	nop    
  10074d:	90                   	nop    
  10074e:	90                   	nop    
  10074f:	90                   	nop    
  100750:	90                   	nop    
  100751:	90                   	nop    
  100752:	90                   	nop    
  100753:	90                   	nop    
  100754:	90                   	nop    
  100755:	90                   	nop    
  100756:	90                   	nop    
  100757:	90                   	nop    
  100758:	90                   	nop    
  100759:	90                   	nop    
  10075a:	90                   	nop    
  10075b:	90                   	nop    
  10075c:	90                   	nop    
  10075d:	90                   	nop    
  10075e:	90                   	nop    
  10075f:	90                   	nop    
  100760:	90                   	nop    
  100761:	90                   	nop    
  100762:	90                   	nop    
  100763:	90                   	nop    
  100764:	90                   	nop    
  100765:	90                   	nop    
  100766:	90                   	nop    
  100767:	90                   	nop    
  100768:	90                   	nop    
  100769:	90                   	nop    
  10076a:	90                   	nop    
  10076b:	90                   	nop    
  10076c:	90                   	nop    
  10076d:	90                   	nop    
  10076e:	90                   	nop    
  10076f:	90                   	nop    
  100770:	90                   	nop    
  100771:	90                   	nop    
  100772:	90                   	nop    
  100773:	90                   	nop    
  100774:	90                   	nop    
  100775:	90                   	nop    
  100776:	90                   	nop    
  100777:	90                   	nop    
  100778:	90                   	nop    
  100779:	90                   	nop    
  10077a:	90                   	nop    
  10077b:	90                   	nop    
  10077c:	90                   	nop    
  10077d:	90                   	nop    
  10077e:	90                   	nop    
  10077f:	90                   	nop    
  100780:	90                   	nop    
  100781:	90                   	nop    
  100782:	90                   	nop    
  100783:	90                   	nop    
  100784:	90                   	nop    
  100785:	90                   	nop    
  100786:	90                   	nop    
  100787:	90                   	nop    
  100788:	90                   	nop    
  100789:	90                   	nop    
  10078a:	90                   	nop    
  10078b:	90                   	nop    
  10078c:	90                   	nop    
  10078d:	90                   	nop    
  10078e:	90                   	nop    
  10078f:	90                   	nop    
  100790:	90                   	nop    
  100791:	90                   	nop    
  100792:	90                   	nop    
  100793:	90                   	nop    
  100794:	90                   	nop    
  100795:	90                   	nop    
  100796:	90                   	nop    
  100797:	90                   	nop    
  100798:	90                   	nop    
  100799:	90                   	nop    
  10079a:	90                   	nop    
  10079b:	90                   	nop    
  10079c:	90                   	nop    
  10079d:	90                   	nop    
  10079e:	90                   	nop    
  10079f:	90                   	nop    
  1007a0:	90                   	nop    
  1007a1:	90                   	nop    
  1007a2:	90                   	nop    
  1007a3:	90                   	nop    
  1007a4:	90                   	nop    
  1007a5:	90                   	nop    
  1007a6:	90                   	nop    
  1007a7:	90                   	nop    
  1007a8:	90                   	nop    
  1007a9:	90                   	nop    
  1007aa:	90                   	nop    
  1007ab:	90                   	nop    
  1007ac:	90                   	nop    
  1007ad:	90                   	nop    
  1007ae:	90                   	nop    
  1007af:	90                   	nop    
  1007b0:	90                   	nop    
  1007b1:	90                   	nop    
  1007b2:	90                   	nop    
  1007b3:	90                   	nop    
  1007b4:	90                   	nop    
  1007b5:	90                   	nop    
  1007b6:	90                   	nop    
  1007b7:	90                   	nop    
  1007b8:	90                   	nop    
  1007b9:	90                   	nop    
  1007ba:	90                   	nop    
  1007bb:	90                   	nop    
  1007bc:	90                   	nop    
  1007bd:	90                   	nop    
  1007be:	90                   	nop    
  1007bf:	90                   	nop    
  1007c0:	90                   	nop    
  1007c1:	90                   	nop    
  1007c2:	90                   	nop    
  1007c3:	90                   	nop    
  1007c4:	90                   	nop    
  1007c5:	90                   	nop    
  1007c6:	90                   	nop    
  1007c7:	90                   	nop    
  1007c8:	90                   	nop    
  1007c9:	90                   	nop    
  1007ca:	90                   	nop    
  1007cb:	90                   	nop    
  1007cc:	90                   	nop    
  1007cd:	90                   	nop    
  1007ce:	90                   	nop    
  1007cf:	90                   	nop    
  1007d0:	90                   	nop    
  1007d1:	90                   	nop    
  1007d2:	90                   	nop    
  1007d3:	90                   	nop    
  1007d4:	90                   	nop    
  1007d5:	90                   	nop    
  1007d6:	90                   	nop    
  1007d7:	90                   	nop    
  1007d8:	90                   	nop    
  1007d9:	90                   	nop    
  1007da:	90                   	nop    
  1007db:	90                   	nop    
  1007dc:	90                   	nop    
  1007dd:	90                   	nop    
  1007de:	90                   	nop    
  1007df:	90                   	nop    
  1007e0:	90                   	nop    
  1007e1:	90                   	nop    
  1007e2:	90                   	nop    
  1007e3:	90                   	nop    
  1007e4:	90                   	nop    
  1007e5:	90                   	nop    
  1007e6:	90                   	nop    
  1007e7:	90                   	nop    
  1007e8:	90                   	nop    
  1007e9:	90                   	nop    
  1007ea:	90                   	nop    
  1007eb:	90                   	nop    
  1007ec:	90                   	nop    
  1007ed:	90                   	nop    
  1007ee:	90                   	nop    
  1007ef:	90                   	nop    
  1007f0:	90                   	nop    
  1007f1:	90                   	nop    
  1007f2:	90                   	nop    
  1007f3:	90                   	nop    
  1007f4:	90                   	nop    
  1007f5:	90                   	nop    
  1007f6:	90                   	nop    
  1007f7:	90                   	nop    
  1007f8:	90                   	nop    
  1007f9:	90                   	nop    
  1007fa:	90                   	nop    
  1007fb:	90                   	nop    
  1007fc:	90                   	nop    
  1007fd:	90                   	nop    
  1007fe:	90                   	nop    
  1007ff:	90                   	nop    
  100800:	90                   	nop    
  100801:	90                   	nop    
  100802:	90                   	nop    
  100803:	90                   	nop    
  100804:	90                   	nop    
  100805:	90                   	nop    
  100806:	90                   	nop    
  100807:	90                   	nop    
  100808:	90                   	nop    
  100809:	90                   	nop    
  10080a:	90                   	nop    
  10080b:	90                   	nop    
  10080c:	90                   	nop    
  10080d:	90                   	nop    
  10080e:	90                   	nop    
  10080f:	90                   	nop    
  100810:	90                   	nop    
  100811:	90                   	nop    
  100812:	90                   	nop    
  100813:	90                   	nop    
  100814:	90                   	nop    
  100815:	90                   	nop    
  100816:	90                   	nop    
  100817:	90                   	nop    
  100818:	90                   	nop    
  100819:	90                   	nop    
  10081a:	90                   	nop    
  10081b:	90                   	nop    
  10081c:	90                   	nop    
  10081d:	90                   	nop    
  10081e:	90                   	nop    
  10081f:	90                   	nop    
  100820:	90                   	nop    
  100821:	90                   	nop    
  100822:	90                   	nop    
  100823:	90                   	nop    
  100824:	90                   	nop    
  100825:	90                   	nop    
  100826:	90                   	nop    
  100827:	90                   	nop    
  100828:	90                   	nop    
  100829:	90                   	nop    
  10082a:	90                   	nop    
  10082b:	90                   	nop    
  10082c:	90                   	nop    
  10082d:	90                   	nop    
  10082e:	90                   	nop    
  10082f:	90                   	nop    
  100830:	90                   	nop    
  100831:	90                   	nop    
  100832:	90                   	nop    
  100833:	90                   	nop    
  100834:	90                   	nop    
  100835:	90                   	nop    
  100836:	90                   	nop    
  100837:	90                   	nop    
  100838:	90                   	nop    
  100839:	90                   	nop    
  10083a:	90                   	nop    
  10083b:	90                   	nop    
  10083c:	90                   	nop    
  10083d:	90                   	nop    
  10083e:	90                   	nop    
  10083f:	90                   	nop    
  100840:	90                   	nop    
  100841:	90                   	nop    
  100842:	90                   	nop    
  100843:	90                   	nop    
  100844:	90                   	nop    
  100845:	90                   	nop    
  100846:	90                   	nop    
  100847:	90                   	nop    
  100848:	90                   	nop    
  100849:	90                   	nop    
  10084a:	90                   	nop    
  10084b:	90                   	nop    
  10084c:	90                   	nop    
  10084d:	90                   	nop    
  10084e:	90                   	nop    
  10084f:	90                   	nop    
  100850:	90                   	nop    
  100851:	90                   	nop    
  100852:	90                   	nop    
  100853:	90                   	nop    
  100854:	90                   	nop    
  100855:	90                   	nop    
  100856:	90                   	nop    
  100857:	90                   	nop    
  100858:	90                   	nop    
  100859:	90                   	nop    
  10085a:	90                   	nop    
  10085b:	90                   	nop    
  10085c:	90                   	nop    
  10085d:	90                   	nop    
  10085e:	90                   	nop    
  10085f:	90                   	nop    
  100860:	90                   	nop    
  100861:	90                   	nop    
  100862:	90                   	nop    
  100863:	90                   	nop    
  100864:	90                   	nop    
  100865:	90                   	nop    
  100866:	90                   	nop    
  100867:	90                   	nop    
  100868:	90                   	nop    
  100869:	90                   	nop    
  10086a:	90                   	nop    
  10086b:	90                   	nop    
  10086c:	90                   	nop    
  10086d:	90                   	nop    
  10086e:	90                   	nop    
  10086f:	90                   	nop    
  100870:	90                   	nop    
  100871:	90                   	nop    
  100872:	90                   	nop    
  100873:	90                   	nop    
  100874:	90                   	nop    
  100875:	90                   	nop    
  100876:	90                   	nop    
  100877:	90                   	nop    
  100878:	90                   	nop    
  100879:	90                   	nop    
  10087a:	90                   	nop    
  10087b:	90                   	nop    
  10087c:	90                   	nop    
  10087d:	90                   	nop    
  10087e:	90                   	nop    
  10087f:	90                   	nop    
  100880:	90                   	nop    
  100881:	90                   	nop    
  100882:	90                   	nop    
  100883:	90                   	nop    
  100884:	90                   	nop    
  100885:	90                   	nop    
  100886:	90                   	nop    
  100887:	90                   	nop    
  100888:	90                   	nop    
  100889:	90                   	nop    
  10088a:	90                   	nop    
  10088b:	90                   	nop    
  10088c:	90                   	nop    
  10088d:	90                   	nop    
  10088e:	90                   	nop    
  10088f:	90                   	nop    
  100890:	90                   	nop    
  100891:	90                   	nop    
  100892:	90                   	nop    
  100893:	90                   	nop    
  100894:	90                   	nop    
  100895:	90                   	nop    
  100896:	90                   	nop    
  100897:	90                   	nop    
  100898:	90                   	nop    
  100899:	90                   	nop    
  10089a:	90                   	nop    
  10089b:	90                   	nop    
  10089c:	90                   	nop    
  10089d:	90                   	nop    
  10089e:	90                   	nop    
  10089f:	90                   	nop    
  1008a0:	90                   	nop    
  1008a1:	90                   	nop    
  1008a2:	90                   	nop    
  1008a3:	90                   	nop    
  1008a4:	90                   	nop    
  1008a5:	90                   	nop    
  1008a6:	90                   	nop    
  1008a7:	90                   	nop    
  1008a8:	90                   	nop    
  1008a9:	90                   	nop    
  1008aa:	90                   	nop    
  1008ab:	90                   	nop    
  1008ac:	90                   	nop    
  1008ad:	90                   	nop    
  1008ae:	90                   	nop    
  1008af:	90                   	nop    
  1008b0:	90                   	nop    
  1008b1:	90                   	nop    
  1008b2:	90                   	nop    
  1008b3:	90                   	nop    
  1008b4:	90                   	nop    
  1008b5:	90                   	nop    
  1008b6:	90                   	nop    
  1008b7:	90                   	nop    
  1008b8:	90                   	nop    
  1008b9:	90                   	nop    
  1008ba:	90                   	nop    
  1008bb:	90                   	nop    
  1008bc:	90                   	nop    
  1008bd:	90                   	nop    
  1008be:	90                   	nop    
  1008bf:	90                   	nop    
  1008c0:	90                   	nop    
  1008c1:	90                   	nop    
  1008c2:	90                   	nop    
  1008c3:	90                   	nop    
  1008c4:	90                   	nop    
  1008c5:	90                   	nop    
  1008c6:	90                   	nop    
  1008c7:	90                   	nop    
  1008c8:	90                   	nop    
  1008c9:	90                   	nop    
  1008ca:	90                   	nop    
  1008cb:	90                   	nop    
  1008cc:	90                   	nop    
  1008cd:	90                   	nop    
  1008ce:	90                   	nop    
  1008cf:	90                   	nop    
  1008d0:	90                   	nop    
  1008d1:	90                   	nop    
  1008d2:	90                   	nop    
  1008d3:	90                   	nop    
  1008d4:	90                   	nop    
  1008d5:	90                   	nop    
  1008d6:	90                   	nop    
  1008d7:	90                   	nop    
  1008d8:	90                   	nop    
  1008d9:	90                   	nop    
  1008da:	90                   	nop    
  1008db:	90                   	nop    
  1008dc:	90                   	nop    
  1008dd:	90                   	nop    
  1008de:	90                   	nop    
  1008df:	90                   	nop    
  1008e0:	90                   	nop    
  1008e1:	90                   	nop    
  1008e2:	90                   	nop    
  1008e3:	90                   	nop    
  1008e4:	90                   	nop    
  1008e5:	90                   	nop    
  1008e6:	90                   	nop    
  1008e7:	90                   	nop    
  1008e8:	90                   	nop    
  1008e9:	90                   	nop    
  1008ea:	90                   	nop    
  1008eb:	90                   	nop    
  1008ec:	90                   	nop    
  1008ed:	90                   	nop    
  1008ee:	90                   	nop    
  1008ef:	90                   	nop    
  1008f0:	90                   	nop    
  1008f1:	90                   	nop    
  1008f2:	90                   	nop    
  1008f3:	90                   	nop    
  1008f4:	90                   	nop    
  1008f5:	90                   	nop    
  1008f6:	90                   	nop    
  1008f7:	90                   	nop    
  1008f8:	90                   	nop    
  1008f9:	90                   	nop    
  1008fa:	90                   	nop    
  1008fb:	90                   	nop    
  1008fc:	90                   	nop    
  1008fd:	90                   	nop    
  1008fe:	90                   	nop    
  1008ff:	90                   	nop    
  100900:	90                   	nop    
  100901:	90                   	nop    
  100902:	90                   	nop    
  100903:	90                   	nop    
  100904:	90                   	nop    
  100905:	90                   	nop    
  100906:	90                   	nop    
  100907:	90                   	nop    
  100908:	90                   	nop    
  100909:	90                   	nop    
  10090a:	90                   	nop    
  10090b:	90                   	nop    
  10090c:	90                   	nop    
  10090d:	90                   	nop    
  10090e:	90                   	nop    
  10090f:	90                   	nop    
  100910:	90                   	nop    
  100911:	90                   	nop    
  100912:	90                   	nop    
  100913:	90                   	nop    
  100914:	90                   	nop    
  100915:	90                   	nop    
  100916:	90                   	nop    
  100917:	90                   	nop    
  100918:	90                   	nop    
  100919:	90                   	nop    
  10091a:	90                   	nop    
  10091b:	90                   	nop    
  10091c:	90                   	nop    
  10091d:	90                   	nop    
  10091e:	90                   	nop    
  10091f:	90                   	nop    
  100920:	90                   	nop    
  100921:	90                   	nop    
  100922:	90                   	nop    
  100923:	90                   	nop    
  100924:	90                   	nop    
  100925:	90                   	nop    
  100926:	90                   	nop    
  100927:	90                   	nop    
  100928:	90                   	nop    
  100929:	90                   	nop    
  10092a:	90                   	nop    
  10092b:	90                   	nop    
  10092c:	90                   	nop    
  10092d:	90                   	nop    
  10092e:	90                   	nop    
  10092f:	90                   	nop    
  100930:	90                   	nop    
  100931:	90                   	nop    
  100932:	90                   	nop    
  100933:	90                   	nop    
  100934:	90                   	nop    
  100935:	90                   	nop    
  100936:	90                   	nop    
  100937:	90                   	nop    
  100938:	90                   	nop    
  100939:	90                   	nop    
  10093a:	90                   	nop    
  10093b:	90                   	nop    
  10093c:	90                   	nop    
  10093d:	90                   	nop    
  10093e:	90                   	nop    
  10093f:	90                   	nop    
  100940:	90                   	nop    
  100941:	90                   	nop    
  100942:	90                   	nop    
  100943:	90                   	nop    
  100944:	90                   	nop    
  100945:	90                   	nop    
  100946:	90                   	nop    
  100947:	90                   	nop    
  100948:	90                   	nop    
  100949:	90                   	nop    
  10094a:	90                   	nop    
  10094b:	90                   	nop    
  10094c:	90                   	nop    
  10094d:	90                   	nop    
  10094e:	90                   	nop    
  10094f:	90                   	nop    
  100950:	90                   	nop    
  100951:	90                   	nop    
  100952:	90                   	nop    
  100953:	90                   	nop    
  100954:	90                   	nop    
  100955:	90                   	nop    
  100956:	90                   	nop    
  100957:	90                   	nop    
  100958:	90                   	nop    
  100959:	90                   	nop    
  10095a:	90                   	nop    
  10095b:	90                   	nop    
  10095c:	90                   	nop    
  10095d:	90                   	nop    
  10095e:	90                   	nop    
  10095f:	90                   	nop    
  100960:	90                   	nop    
  100961:	90                   	nop    
  100962:	90                   	nop    
  100963:	90                   	nop    
  100964:	90                   	nop    
  100965:	90                   	nop    
  100966:	90                   	nop    
  100967:	90                   	nop    
  100968:	90                   	nop    
  100969:	90                   	nop    
  10096a:	90                   	nop    
  10096b:	90                   	nop    
  10096c:	90                   	nop    
  10096d:	90                   	nop    
  10096e:	90                   	nop    
  10096f:	90                   	nop    
  100970:	90                   	nop    
  100971:	90                   	nop    
  100972:	90                   	nop    
  100973:	90                   	nop    
  100974:	90                   	nop    
  100975:	90                   	nop    
  100976:	90                   	nop    
  100977:	90                   	nop    
  100978:	90                   	nop    
  100979:	90                   	nop    
  10097a:	90                   	nop    
  10097b:	90                   	nop    
  10097c:	90                   	nop    
  10097d:	90                   	nop    
  10097e:	90                   	nop    
  10097f:	90                   	nop    
  100980:	90                   	nop    
  100981:	90                   	nop    
  100982:	90                   	nop    
  100983:	90                   	nop    
  100984:	90                   	nop    
  100985:	90                   	nop    
  100986:	90                   	nop    
  100987:	90                   	nop    
  100988:	90                   	nop    
  100989:	90                   	nop    
  10098a:	90                   	nop    
  10098b:	90                   	nop    
  10098c:	90                   	nop    
  10098d:	90                   	nop    
  10098e:	90                   	nop    
  10098f:	90                   	nop    
  100990:	90                   	nop    
  100991:	90                   	nop    
  100992:	90                   	nop    
  100993:	90                   	nop    
  100994:	90                   	nop    
  100995:	90                   	nop    
  100996:	90                   	nop    
  100997:	90                   	nop    
  100998:	90                   	nop    
  100999:	90                   	nop    
  10099a:	90                   	nop    
  10099b:	90                   	nop    
  10099c:	90                   	nop    
  10099d:	90                   	nop    
  10099e:	90                   	nop    
  10099f:	90                   	nop    
  1009a0:	90                   	nop    
  1009a1:	90                   	nop    
  1009a2:	90                   	nop    
  1009a3:	90                   	nop    
  1009a4:	90                   	nop    
  1009a5:	90                   	nop    
  1009a6:	90                   	nop    
  1009a7:	90                   	nop    
  1009a8:	90                   	nop    
  1009a9:	90                   	nop    
  1009aa:	90                   	nop    
  1009ab:	90                   	nop    
  1009ac:	90                   	nop    
  1009ad:	90                   	nop    
  1009ae:	90                   	nop    
  1009af:	90                   	nop    
  1009b0:	90                   	nop    
  1009b1:	90                   	nop    
  1009b2:	90                   	nop    
  1009b3:	90                   	nop    
  1009b4:	90                   	nop    
  1009b5:	90                   	nop    
  1009b6:	90                   	nop    
  1009b7:	90                   	nop    
  1009b8:	90                   	nop    
  1009b9:	90                   	nop    
  1009ba:	90                   	nop    
  1009bb:	90                   	nop    
  1009bc:	90                   	nop    
  1009bd:	90                   	nop    
  1009be:	90                   	nop    
  1009bf:	90                   	nop    
  1009c0:	90                   	nop    
  1009c1:	90                   	nop    
  1009c2:	90                   	nop    
  1009c3:	90                   	nop    
  1009c4:	90                   	nop    
  1009c5:	90                   	nop    
  1009c6:	90                   	nop    
  1009c7:	90                   	nop    
  1009c8:	90                   	nop    
  1009c9:	90                   	nop    
  1009ca:	90                   	nop    
  1009cb:	90                   	nop    
  1009cc:	90                   	nop    
  1009cd:	90                   	nop    
  1009ce:	90                   	nop    
  1009cf:	90                   	nop    
  1009d0:	90                   	nop    
  1009d1:	90                   	nop    
  1009d2:	90                   	nop    
  1009d3:	90                   	nop    
  1009d4:	90                   	nop    
  1009d5:	90                   	nop    
  1009d6:	90                   	nop    
  1009d7:	90                   	nop    
  1009d8:	90                   	nop    
  1009d9:	90                   	nop    
  1009da:	90                   	nop    
  1009db:	90                   	nop    
  1009dc:	90                   	nop    
  1009dd:	90                   	nop    
  1009de:	90                   	nop    
  1009df:	90                   	nop    
  1009e0:	90                   	nop    
  1009e1:	90                   	nop    
  1009e2:	90                   	nop    
  1009e3:	90                   	nop    
  1009e4:	90                   	nop    
  1009e5:	90                   	nop    
  1009e6:	90                   	nop    
  1009e7:	90                   	nop    
  1009e8:	90                   	nop    
  1009e9:	90                   	nop    
  1009ea:	90                   	nop    
  1009eb:	90                   	nop    
  1009ec:	90                   	nop    
  1009ed:	90                   	nop    
  1009ee:	90                   	nop    
  1009ef:	90                   	nop    
  1009f0:	90                   	nop    
  1009f1:	90                   	nop    
  1009f2:	90                   	nop    
  1009f3:	90                   	nop    
  1009f4:	90                   	nop    
  1009f5:	90                   	nop    
  1009f6:	90                   	nop    
  1009f7:	90                   	nop    
  1009f8:	90                   	nop    
  1009f9:	90                   	nop    
  1009fa:	90                   	nop    
  1009fb:	90                   	nop    
  1009fc:	90                   	nop    
  1009fd:	90                   	nop    
  1009fe:	90                   	nop    
  1009ff:	90                   	nop    
  100a00:	90                   	nop    
  100a01:	90                   	nop    
  100a02:	90                   	nop    
  100a03:	90                   	nop    
  100a04:	90                   	nop    
  100a05:	90                   	nop    
  100a06:	90                   	nop    
  100a07:	90                   	nop    
  100a08:	90                   	nop    
  100a09:	90                   	nop    
  100a0a:	90                   	nop    
  100a0b:	90                   	nop    
  100a0c:	90                   	nop    
  100a0d:	90                   	nop    
  100a0e:	90                   	nop    
  100a0f:	90                   	nop    
  100a10:	90                   	nop    
  100a11:	90                   	nop    
  100a12:	90                   	nop    
  100a13:	90                   	nop    
  100a14:	90                   	nop    
  100a15:	90                   	nop    
  100a16:	90                   	nop    
  100a17:	90                   	nop    
  100a18:	90                   	nop    
  100a19:	90                   	nop    
  100a1a:	90                   	nop    
  100a1b:	90                   	nop    
  100a1c:	90                   	nop    
  100a1d:	90                   	nop    
  100a1e:	90                   	nop    
  100a1f:	90                   	nop    
  100a20:	90                   	nop    
  100a21:	90                   	nop    
  100a22:	90                   	nop    
  100a23:	90                   	nop    
  100a24:	90                   	nop    
  100a25:	90                   	nop    
  100a26:	90                   	nop    
  100a27:	90                   	nop    
  100a28:	90                   	nop    
  100a29:	90                   	nop    
  100a2a:	90                   	nop    
  100a2b:	90                   	nop    
  100a2c:	90                   	nop    
  100a2d:	90                   	nop    
  100a2e:	90                   	nop    
  100a2f:	90                   	nop    
  100a30:	90                   	nop    
  100a31:	90                   	nop    
  100a32:	90                   	nop    
  100a33:	90                   	nop    
  100a34:	90                   	nop    
  100a35:	90                   	nop    
  100a36:	90                   	nop    
  100a37:	90                   	nop    
  100a38:	90                   	nop    
  100a39:	90                   	nop    
  100a3a:	90                   	nop    
  100a3b:	90                   	nop    
  100a3c:	90                   	nop    
  100a3d:	90                   	nop    
  100a3e:	90                   	nop    
  100a3f:	90                   	nop    
  100a40:	90                   	nop    
  100a41:	90                   	nop    
  100a42:	90                   	nop    
  100a43:	90                   	nop    
  100a44:	90                   	nop    
  100a45:	90                   	nop    
  100a46:	90                   	nop    
  100a47:	90                   	nop    
  100a48:	90                   	nop    
  100a49:	90                   	nop    
  100a4a:	90                   	nop    
  100a4b:	90                   	nop    
  100a4c:	90                   	nop    
  100a4d:	90                   	nop    
  100a4e:	90                   	nop    
  100a4f:	90                   	nop    
  100a50:	90                   	nop    
  100a51:	90                   	nop    
  100a52:	90                   	nop    
  100a53:	90                   	nop    
  100a54:	90                   	nop    
  100a55:	90                   	nop    
  100a56:	90                   	nop    
  100a57:	90                   	nop    
  100a58:	90                   	nop    
  100a59:	90                   	nop    
  100a5a:	90                   	nop    
  100a5b:	90                   	nop    
  100a5c:	90                   	nop    
  100a5d:	90                   	nop    
  100a5e:	90                   	nop    
  100a5f:	90                   	nop    
  100a60:	90                   	nop    
  100a61:	90                   	nop    
  100a62:	90                   	nop    
  100a63:	90                   	nop    
  100a64:	90                   	nop    
  100a65:	90                   	nop    
  100a66:	90                   	nop    
  100a67:	90                   	nop    
  100a68:	90                   	nop    
  100a69:	90                   	nop    
  100a6a:	90                   	nop    
  100a6b:	90                   	nop    
  100a6c:	90                   	nop    
  100a6d:	90                   	nop    
  100a6e:	90                   	nop    
  100a6f:	90                   	nop    
  100a70:	90                   	nop    
  100a71:	90                   	nop    
  100a72:	90                   	nop    
  100a73:	90                   	nop    
  100a74:	90                   	nop    
  100a75:	90                   	nop    
  100a76:	90                   	nop    
  100a77:	90                   	nop    
  100a78:	90                   	nop    
  100a79:	90                   	nop    
  100a7a:	90                   	nop    
  100a7b:	90                   	nop    
  100a7c:	90                   	nop    
  100a7d:	90                   	nop    
  100a7e:	90                   	nop    
  100a7f:	90                   	nop    
  100a80:	90                   	nop    
  100a81:	90                   	nop    
  100a82:	90                   	nop    
  100a83:	90                   	nop    
  100a84:	90                   	nop    
  100a85:	90                   	nop    
  100a86:	90                   	nop    
  100a87:	90                   	nop    
  100a88:	90                   	nop    
  100a89:	90                   	nop    
  100a8a:	90                   	nop    
  100a8b:	90                   	nop    
  100a8c:	90                   	nop    
  100a8d:	90                   	nop    
  100a8e:	90                   	nop    
  100a8f:	90                   	nop    
  100a90:	90                   	nop    
  100a91:	90                   	nop    
  100a92:	90                   	nop    
  100a93:	90                   	nop    
  100a94:	90                   	nop    
  100a95:	90                   	nop    
  100a96:	90                   	nop    
  100a97:	90                   	nop    
  100a98:	90                   	nop    
  100a99:	90                   	nop    
  100a9a:	90                   	nop    
  100a9b:	90                   	nop    
  100a9c:	90                   	nop    
  100a9d:	90                   	nop    
  100a9e:	90                   	nop    
  100a9f:	90                   	nop    
  100aa0:	90                   	nop    
  100aa1:	90                   	nop    
  100aa2:	90                   	nop    
  100aa3:	90                   	nop    
  100aa4:	90                   	nop    
  100aa5:	90                   	nop    
  100aa6:	90                   	nop    
  100aa7:	90                   	nop    
  100aa8:	90                   	nop    
  100aa9:	90                   	nop    
  100aaa:	90                   	nop    
  100aab:	90                   	nop    
  100aac:	90                   	nop    
  100aad:	90                   	nop    
  100aae:	90                   	nop    
  100aaf:	90                   	nop    
  100ab0:	90                   	nop    
  100ab1:	90                   	nop    
  100ab2:	90                   	nop    
  100ab3:	90                   	nop    
  100ab4:	90                   	nop    
  100ab5:	90                   	nop    
  100ab6:	90                   	nop    
  100ab7:	90                   	nop    
  100ab8:	90                   	nop    
  100ab9:	90                   	nop    
  100aba:	90                   	nop    
  100abb:	90                   	nop    
  100abc:	90                   	nop    
  100abd:	90                   	nop    
  100abe:	90                   	nop    
  100abf:	90                   	nop    
  100ac0:	90                   	nop    
  100ac1:	90                   	nop    
  100ac2:	90                   	nop    
  100ac3:	90                   	nop    
  100ac4:	90                   	nop    
  100ac5:	90                   	nop    
  100ac6:	90                   	nop    
  100ac7:	90                   	nop    
  100ac8:	90                   	nop    
  100ac9:	90                   	nop    
  100aca:	90                   	nop    
  100acb:	90                   	nop    
  100acc:	90                   	nop    
  100acd:	90                   	nop    
  100ace:	90                   	nop    
  100acf:	90                   	nop    
  100ad0:	90                   	nop    
  100ad1:	90                   	nop    
  100ad2:	90                   	nop    
  100ad3:	90                   	nop    
  100ad4:	90                   	nop    
  100ad5:	90                   	nop    
  100ad6:	90                   	nop    
  100ad7:	90                   	nop    
  100ad8:	90                   	nop    
  100ad9:	90                   	nop    
  100ada:	90                   	nop    
  100adb:	90                   	nop    
  100adc:	90                   	nop    
  100add:	90                   	nop    
  100ade:	90                   	nop    
  100adf:	90                   	nop    
  100ae0:	90                   	nop    
  100ae1:	90                   	nop    
  100ae2:	90                   	nop    
  100ae3:	90                   	nop    
  100ae4:	90                   	nop    
  100ae5:	90                   	nop    
  100ae6:	90                   	nop    
  100ae7:	90                   	nop    
  100ae8:	90                   	nop    
  100ae9:	90                   	nop    
  100aea:	90                   	nop    
  100aeb:	90                   	nop    
  100aec:	90                   	nop    
  100aed:	90                   	nop    
  100aee:	90                   	nop    
  100aef:	90                   	nop    
  100af0:	90                   	nop    
  100af1:	90                   	nop    
  100af2:	90                   	nop    
  100af3:	90                   	nop    
  100af4:	90                   	nop    
  100af5:	90                   	nop    
  100af6:	90                   	nop    
  100af7:	90                   	nop    
  100af8:	90                   	nop    
  100af9:	90                   	nop    
  100afa:	90                   	nop    
  100afb:	90                   	nop    
  100afc:	90                   	nop    
  100afd:	90                   	nop    
  100afe:	90                   	nop    
  100aff:	90                   	nop    
  100b00:	90                   	nop    
  100b01:	90                   	nop    
  100b02:	90                   	nop    
  100b03:	90                   	nop    
  100b04:	90                   	nop    
  100b05:	90                   	nop    
  100b06:	90                   	nop    
  100b07:	90                   	nop    
  100b08:	90                   	nop    
  100b09:	90                   	nop    
  100b0a:	90                   	nop    
  100b0b:	90                   	nop    
  100b0c:	90                   	nop    
  100b0d:	90                   	nop    
  100b0e:	90                   	nop    
  100b0f:	90                   	nop    
  100b10:	90                   	nop    
  100b11:	90                   	nop    
  100b12:	90                   	nop    
  100b13:	90                   	nop    
  100b14:	90                   	nop    
  100b15:	90                   	nop    
  100b16:	90                   	nop    
  100b17:	90                   	nop    
  100b18:	90                   	nop    
  100b19:	90                   	nop    
  100b1a:	90                   	nop    
  100b1b:	90                   	nop    
  100b1c:	90                   	nop    
  100b1d:	90                   	nop    
  100b1e:	90                   	nop    
  100b1f:	90                   	nop    
  100b20:	90                   	nop    
  100b21:	90                   	nop    
  100b22:	90                   	nop    
  100b23:	90                   	nop    
  100b24:	90                   	nop    
  100b25:	90                   	nop    
  100b26:	90                   	nop    
  100b27:	90                   	nop    
  100b28:	90                   	nop    
  100b29:	90                   	nop    
  100b2a:	90                   	nop    
  100b2b:	90                   	nop    
  100b2c:	90                   	nop    
  100b2d:	90                   	nop    
  100b2e:	90                   	nop    
  100b2f:	90                   	nop    
  100b30:	90                   	nop    
  100b31:	90                   	nop    
  100b32:	90                   	nop    
  100b33:	90                   	nop    
  100b34:	90                   	nop    
  100b35:	90                   	nop    
  100b36:	90                   	nop    
  100b37:	90                   	nop    
  100b38:	90                   	nop    
  100b39:	90                   	nop    
  100b3a:	90                   	nop    
  100b3b:	90                   	nop    
  100b3c:	90                   	nop    
  100b3d:	90                   	nop    
  100b3e:	90                   	nop    
  100b3f:	90                   	nop    
  100b40:	90                   	nop    
  100b41:	90                   	nop    
  100b42:	90                   	nop    
  100b43:	90                   	nop    
  100b44:	90                   	nop    
  100b45:	90                   	nop    
  100b46:	90                   	nop    
  100b47:	90                   	nop    
  100b48:	90                   	nop    
  100b49:	90                   	nop    
  100b4a:	90                   	nop    
  100b4b:	90                   	nop    
  100b4c:	90                   	nop    
  100b4d:	90                   	nop    
  100b4e:	90                   	nop    
  100b4f:	90                   	nop    
  100b50:	90                   	nop    
  100b51:	90                   	nop    
  100b52:	90                   	nop    
  100b53:	90                   	nop    
  100b54:	90                   	nop    
  100b55:	90                   	nop    
  100b56:	90                   	nop    
  100b57:	90                   	nop    
  100b58:	90                   	nop    
  100b59:	90                   	nop    
  100b5a:	90                   	nop    
  100b5b:	90                   	nop    
  100b5c:	90                   	nop    
  100b5d:	90                   	nop    
  100b5e:	90                   	nop    
  100b5f:	90                   	nop    
  100b60:	90                   	nop    
  100b61:	90                   	nop    
  100b62:	90                   	nop    
  100b63:	90                   	nop    
  100b64:	90                   	nop    
  100b65:	90                   	nop    
  100b66:	90                   	nop    
  100b67:	90                   	nop    
  100b68:	90                   	nop    
  100b69:	90                   	nop    
  100b6a:	90                   	nop    
  100b6b:	90                   	nop    
  100b6c:	90                   	nop    
  100b6d:	90                   	nop    
  100b6e:	90                   	nop    
  100b6f:	90                   	nop    
  100b70:	90                   	nop    
  100b71:	90                   	nop    
  100b72:	90                   	nop    
  100b73:	90                   	nop    
  100b74:	90                   	nop    
  100b75:	90                   	nop    
  100b76:	90                   	nop    
  100b77:	90                   	nop    
  100b78:	90                   	nop    
  100b79:	90                   	nop    
  100b7a:	90                   	nop    
  100b7b:	90                   	nop    
  100b7c:	90                   	nop    
  100b7d:	90                   	nop    
  100b7e:	90                   	nop    
  100b7f:	90                   	nop    
  100b80:	90                   	nop    
  100b81:	90                   	nop    
  100b82:	90                   	nop    
  100b83:	90                   	nop    
  100b84:	90                   	nop    
  100b85:	90                   	nop    
  100b86:	90                   	nop    
  100b87:	90                   	nop    
  100b88:	90                   	nop    
  100b89:	90                   	nop    
  100b8a:	90                   	nop    
  100b8b:	90                   	nop    
  100b8c:	90                   	nop    
  100b8d:	90                   	nop    
  100b8e:	90                   	nop    
  100b8f:	90                   	nop    
  100b90:	90                   	nop    
  100b91:	90                   	nop    
  100b92:	90                   	nop    
  100b93:	90                   	nop    
  100b94:	90                   	nop    
  100b95:	90                   	nop    
  100b96:	90                   	nop    
  100b97:	90                   	nop    
  100b98:	90                   	nop    
  100b99:	90                   	nop    
  100b9a:	90                   	nop    
  100b9b:	90                   	nop    
  100b9c:	90                   	nop    
  100b9d:	90                   	nop    
  100b9e:	90                   	nop    
  100b9f:	90                   	nop    
  100ba0:	90                   	nop    
  100ba1:	90                   	nop    
  100ba2:	90                   	nop    
  100ba3:	90                   	nop    
  100ba4:	90                   	nop    
  100ba5:	90                   	nop    
  100ba6:	90                   	nop    
  100ba7:	90                   	nop    
  100ba8:	90                   	nop    
  100ba9:	90                   	nop    
  100baa:	90                   	nop    
  100bab:	90                   	nop    
  100bac:	90                   	nop    
  100bad:	90                   	nop    
  100bae:	90                   	nop    
  100baf:	90                   	nop    
  100bb0:	90                   	nop    
  100bb1:	90                   	nop    
  100bb2:	90                   	nop    
  100bb3:	90                   	nop    
  100bb4:	90                   	nop    
  100bb5:	90                   	nop    
  100bb6:	90                   	nop    
  100bb7:	90                   	nop    
  100bb8:	90                   	nop    
  100bb9:	90                   	nop    
  100bba:	90                   	nop    
  100bbb:	90                   	nop    
  100bbc:	90                   	nop    
  100bbd:	90                   	nop    
  100bbe:	90                   	nop    
  100bbf:	90                   	nop    
  100bc0:	90                   	nop    
  100bc1:	90                   	nop    
  100bc2:	90                   	nop    
  100bc3:	90                   	nop    
  100bc4:	90                   	nop    
  100bc5:	90                   	nop    
  100bc6:	90                   	nop    
  100bc7:	90                   	nop    
  100bc8:	90                   	nop    
  100bc9:	90                   	nop    
  100bca:	90                   	nop    
  100bcb:	90                   	nop    
  100bcc:	90                   	nop    
  100bcd:	90                   	nop    
  100bce:	90                   	nop    
  100bcf:	90                   	nop    
  100bd0:	90                   	nop    
  100bd1:	90                   	nop    
  100bd2:	90                   	nop    
  100bd3:	90                   	nop    
  100bd4:	90                   	nop    
  100bd5:	90                   	nop    
  100bd6:	90                   	nop    
  100bd7:	90                   	nop    
  100bd8:	90                   	nop    
  100bd9:	90                   	nop    
  100bda:	90                   	nop    
  100bdb:	90                   	nop    
  100bdc:	90                   	nop    
  100bdd:	90                   	nop    
  100bde:	90                   	nop    
  100bdf:	90                   	nop    
  100be0:	90                   	nop    
  100be1:	90                   	nop    
  100be2:	90                   	nop    
  100be3:	90                   	nop    
  100be4:	90                   	nop    
  100be5:	90                   	nop    
  100be6:	90                   	nop    
  100be7:	90                   	nop    
  100be8:	90                   	nop    
  100be9:	90                   	nop    
  100bea:	90                   	nop    
  100beb:	90                   	nop    
  100bec:	90                   	nop    
  100bed:	90                   	nop    
  100bee:	90                   	nop    
  100bef:	90                   	nop    
  100bf0:	90                   	nop    
  100bf1:	90                   	nop    
  100bf2:	90                   	nop    
  100bf3:	90                   	nop    
  100bf4:	90                   	nop    
  100bf5:	90                   	nop    
  100bf6:	90                   	nop    
  100bf7:	90                   	nop    
  100bf8:	90                   	nop    
  100bf9:	90                   	nop    
  100bfa:	90                   	nop    
  100bfb:	90                   	nop    
  100bfc:	90                   	nop    
  100bfd:	90                   	nop    
  100bfe:	90                   	nop    
  100bff:	90                   	nop    
  100c00:	90                   	nop    
  100c01:	90                   	nop    
  100c02:	90                   	nop    
  100c03:	90                   	nop    
  100c04:	90                   	nop    
  100c05:	90                   	nop    
  100c06:	90                   	nop    
  100c07:	90                   	nop    
  100c08:	90                   	nop    
  100c09:	90                   	nop    
  100c0a:	90                   	nop    
  100c0b:	90                   	nop    
  100c0c:	90                   	nop    
  100c0d:	90                   	nop    
  100c0e:	90                   	nop    
  100c0f:	90                   	nop    
  100c10:	90                   	nop    
  100c11:	90                   	nop    
  100c12:	90                   	nop    
  100c13:	90                   	nop    
  100c14:	90                   	nop    
  100c15:	90                   	nop    
  100c16:	90                   	nop    
  100c17:	90                   	nop    
  100c18:	90                   	nop    
  100c19:	90                   	nop    
  100c1a:	90                   	nop    
  100c1b:	90                   	nop    
  100c1c:	90                   	nop    
  100c1d:	90                   	nop    
  100c1e:	90                   	nop    
  100c1f:	90                   	nop    
  100c20:	90                   	nop    
  100c21:	90                   	nop    
  100c22:	90                   	nop    
  100c23:	90                   	nop    
  100c24:	90                   	nop    
  100c25:	90                   	nop    
  100c26:	90                   	nop    
  100c27:	90                   	nop    
  100c28:	90                   	nop    
  100c29:	90                   	nop    
  100c2a:	90                   	nop    
  100c2b:	90                   	nop    
  100c2c:	90                   	nop    
  100c2d:	90                   	nop    
  100c2e:	90                   	nop    
  100c2f:	90                   	nop    
  100c30:	90                   	nop    
  100c31:	90                   	nop    
  100c32:	90                   	nop    
  100c33:	90                   	nop    
  100c34:	90                   	nop    
  100c35:	90                   	nop    
  100c36:	90                   	nop    
  100c37:	90                   	nop    
  100c38:	90                   	nop    
  100c39:	90                   	nop    
  100c3a:	90                   	nop    
  100c3b:	90                   	nop    
  100c3c:	90                   	nop    
  100c3d:	90                   	nop    
  100c3e:	90                   	nop    
  100c3f:	90                   	nop    
  100c40:	90                   	nop    
  100c41:	90                   	nop    
  100c42:	90                   	nop    
  100c43:	90                   	nop    
  100c44:	90                   	nop    
  100c45:	90                   	nop    
  100c46:	90                   	nop    
  100c47:	90                   	nop    
  100c48:	90                   	nop    
  100c49:	90                   	nop    
  100c4a:	90                   	nop    
  100c4b:	90                   	nop    
  100c4c:	90                   	nop    
  100c4d:	90                   	nop    
  100c4e:	90                   	nop    
  100c4f:	90                   	nop    
  100c50:	90                   	nop    
  100c51:	90                   	nop    
  100c52:	90                   	nop    
  100c53:	90                   	nop    
  100c54:	90                   	nop    
  100c55:	90                   	nop    
  100c56:	90                   	nop    
  100c57:	90                   	nop    
  100c58:	90                   	nop    
  100c59:	90                   	nop    
  100c5a:	90                   	nop    
  100c5b:	90                   	nop    
  100c5c:	90                   	nop    
  100c5d:	90                   	nop    
  100c5e:	90                   	nop    
  100c5f:	90                   	nop    
  100c60:	90                   	nop    
  100c61:	90                   	nop    
  100c62:	90                   	nop    
  100c63:	90                   	nop    
  100c64:	90                   	nop    
  100c65:	90                   	nop    
  100c66:	90                   	nop    
  100c67:	90                   	nop    
  100c68:	90                   	nop    
  100c69:	90                   	nop    
  100c6a:	90                   	nop    
  100c6b:	90                   	nop    
  100c6c:	90                   	nop    
  100c6d:	90                   	nop    
  100c6e:	90                   	nop    
  100c6f:	90                   	nop    
  100c70:	90                   	nop    
  100c71:	90                   	nop    
  100c72:	90                   	nop    
  100c73:	90                   	nop    
  100c74:	90                   	nop    
  100c75:	90                   	nop    
  100c76:	90                   	nop    
  100c77:	90                   	nop    
  100c78:	90                   	nop    
  100c79:	90                   	nop    
  100c7a:	90                   	nop    
  100c7b:	90                   	nop    
  100c7c:	90                   	nop    
  100c7d:	90                   	nop    
  100c7e:	90                   	nop    
  100c7f:	90                   	nop    
  100c80:	90                   	nop    
  100c81:	90                   	nop    
  100c82:	90                   	nop    
  100c83:	90                   	nop    
  100c84:	90                   	nop    
  100c85:	90                   	nop    
  100c86:	90                   	nop    
  100c87:	90                   	nop    
  100c88:	90                   	nop    
  100c89:	90                   	nop    
  100c8a:	90                   	nop    
  100c8b:	90                   	nop    
  100c8c:	90                   	nop    
  100c8d:	90                   	nop    
  100c8e:	90                   	nop    
  100c8f:	90                   	nop    
  100c90:	90                   	nop    
  100c91:	90                   	nop    
  100c92:	90                   	nop    
  100c93:	90                   	nop    
  100c94:	90                   	nop    
  100c95:	90                   	nop    
  100c96:	90                   	nop    
  100c97:	90                   	nop    
  100c98:	90                   	nop    
  100c99:	90                   	nop    
  100c9a:	90                   	nop    
  100c9b:	90                   	nop    
  100c9c:	90                   	nop    
  100c9d:	90                   	nop    
  100c9e:	90                   	nop    
  100c9f:	90                   	nop    
  100ca0:	90                   	nop    
  100ca1:	90                   	nop    
  100ca2:	90                   	nop    
  100ca3:	90                   	nop    
  100ca4:	90                   	nop    
  100ca5:	90                   	nop    
  100ca6:	90                   	nop    
  100ca7:	90                   	nop    
  100ca8:	90                   	nop    
  100ca9:	90                   	nop    
  100caa:	90                   	nop    
  100cab:	90                   	nop    
  100cac:	90                   	nop    
  100cad:	90                   	nop    
  100cae:	90                   	nop    
  100caf:	90                   	nop    
  100cb0:	90                   	nop    
  100cb1:	90                   	nop    
  100cb2:	90                   	nop    
  100cb3:	90                   	nop    
  100cb4:	90                   	nop    
  100cb5:	90                   	nop    
  100cb6:	90                   	nop    
  100cb7:	90                   	nop    
  100cb8:	90                   	nop    
  100cb9:	90                   	nop    
  100cba:	90                   	nop    
  100cbb:	90                   	nop    
  100cbc:	90                   	nop    
  100cbd:	90                   	nop    
  100cbe:	90                   	nop    
  100cbf:	90                   	nop    
  100cc0:	90                   	nop    
  100cc1:	90                   	nop    
  100cc2:	90                   	nop    
  100cc3:	90                   	nop    
  100cc4:	90                   	nop    
  100cc5:	90                   	nop    
  100cc6:	90                   	nop    
  100cc7:	90                   	nop    
  100cc8:	90                   	nop    
  100cc9:	90                   	nop    
  100cca:	90                   	nop    
  100ccb:	90                   	nop    
  100ccc:	90                   	nop    
  100ccd:	90                   	nop    
  100cce:	90                   	nop    
  100ccf:	90                   	nop    
  100cd0:	90                   	nop    
  100cd1:	90                   	nop    
  100cd2:	90                   	nop    
  100cd3:	90                   	nop    
  100cd4:	90                   	nop    
  100cd5:	90                   	nop    
  100cd6:	90                   	nop    
  100cd7:	90                   	nop    
  100cd8:	90                   	nop    
  100cd9:	90                   	nop    
  100cda:	90                   	nop    
  100cdb:	90                   	nop    
  100cdc:	90                   	nop    
  100cdd:	90                   	nop    
  100cde:	90                   	nop    
  100cdf:	90                   	nop    
  100ce0:	90                   	nop    
  100ce1:	90                   	nop    
  100ce2:	90                   	nop    
  100ce3:	90                   	nop    
  100ce4:	90                   	nop    
  100ce5:	90                   	nop    
  100ce6:	90                   	nop    
  100ce7:	90                   	nop    
  100ce8:	90                   	nop    
  100ce9:	90                   	nop    
  100cea:	90                   	nop    
  100ceb:	90                   	nop    
  100cec:	90                   	nop    
  100ced:	90                   	nop    
  100cee:	90                   	nop    
  100cef:	90                   	nop    
  100cf0:	90                   	nop    
  100cf1:	90                   	nop    
  100cf2:	90                   	nop    
  100cf3:	90                   	nop    
  100cf4:	90                   	nop    
  100cf5:	90                   	nop    
  100cf6:	90                   	nop    
  100cf7:	90                   	nop    
  100cf8:	90                   	nop    
  100cf9:	90                   	nop    
  100cfa:	90                   	nop    
  100cfb:	90                   	nop    
  100cfc:	90                   	nop    
  100cfd:	90                   	nop    
  100cfe:	90                   	nop    
  100cff:	90                   	nop    
  100d00:	90                   	nop    
  100d01:	90                   	nop    
  100d02:	90                   	nop    
  100d03:	90                   	nop    
  100d04:	90                   	nop    
  100d05:	90                   	nop    
  100d06:	90                   	nop    
  100d07:	90                   	nop    
  100d08:	90                   	nop    
  100d09:	90                   	nop    
  100d0a:	90                   	nop    
  100d0b:	90                   	nop    
  100d0c:	90                   	nop    
  100d0d:	90                   	nop    
  100d0e:	90                   	nop    
  100d0f:	90                   	nop    
  100d10:	90                   	nop    
  100d11:	90                   	nop    
  100d12:	90                   	nop    
  100d13:	90                   	nop    
  100d14:	90                   	nop    
  100d15:	90                   	nop    
  100d16:	90                   	nop    
  100d17:	90                   	nop    
  100d18:	90                   	nop    
  100d19:	90                   	nop    
  100d1a:	90                   	nop    
  100d1b:	90                   	nop    
  100d1c:	90                   	nop    
  100d1d:	90                   	nop    
  100d1e:	90                   	nop    
  100d1f:	90                   	nop    
  100d20:	90                   	nop    
  100d21:	90                   	nop    
  100d22:	90                   	nop    
  100d23:	90                   	nop    
  100d24:	90                   	nop    
  100d25:	90                   	nop    
  100d26:	90                   	nop    
  100d27:	90                   	nop    
  100d28:	90                   	nop    
  100d29:	90                   	nop    
  100d2a:	90                   	nop    
  100d2b:	90                   	nop    
  100d2c:	90                   	nop    
  100d2d:	90                   	nop    
  100d2e:	90                   	nop    
  100d2f:	90                   	nop    
  100d30:	90                   	nop    
  100d31:	90                   	nop    
  100d32:	90                   	nop    
  100d33:	90                   	nop    
  100d34:	90                   	nop    
  100d35:	90                   	nop    
  100d36:	90                   	nop    
  100d37:	90                   	nop    
  100d38:	90                   	nop    
  100d39:	90                   	nop    
  100d3a:	90                   	nop    
  100d3b:	90                   	nop    
  100d3c:	90                   	nop    
  100d3d:	90                   	nop    
  100d3e:	90                   	nop    
  100d3f:	90                   	nop    
  100d40:	90                   	nop    
  100d41:	90                   	nop    
  100d42:	90                   	nop    
  100d43:	90                   	nop    
  100d44:	90                   	nop    
  100d45:	90                   	nop    
  100d46:	90                   	nop    
  100d47:	90                   	nop    
  100d48:	90                   	nop    
  100d49:	90                   	nop    
  100d4a:	90                   	nop    
  100d4b:	90                   	nop    
  100d4c:	90                   	nop    
  100d4d:	90                   	nop    
  100d4e:	90                   	nop    
  100d4f:	90                   	nop    
  100d50:	90                   	nop    
  100d51:	90                   	nop    
  100d52:	90                   	nop    
  100d53:	90                   	nop    
  100d54:	90                   	nop    
  100d55:	90                   	nop    
  100d56:	90                   	nop    
  100d57:	90                   	nop    
  100d58:	90                   	nop    
  100d59:	90                   	nop    
  100d5a:	90                   	nop    
  100d5b:	90                   	nop    
  100d5c:	90                   	nop    
  100d5d:	90                   	nop    
  100d5e:	90                   	nop    
  100d5f:	90                   	nop    
  100d60:	90                   	nop    
  100d61:	90                   	nop    
  100d62:	90                   	nop    
  100d63:	90                   	nop    
  100d64:	90                   	nop    
  100d65:	90                   	nop    
  100d66:	90                   	nop    
  100d67:	90                   	nop    
  100d68:	90                   	nop    
  100d69:	90                   	nop    
  100d6a:	90                   	nop    
  100d6b:	90                   	nop    
  100d6c:	90                   	nop    
  100d6d:	90                   	nop    
  100d6e:	90                   	nop    
  100d6f:	90                   	nop    
  100d70:	90                   	nop    
  100d71:	90                   	nop    
  100d72:	90                   	nop    
  100d73:	90                   	nop    
  100d74:	90                   	nop    
  100d75:	90                   	nop    
  100d76:	90                   	nop    
  100d77:	90                   	nop    
  100d78:	90                   	nop    
  100d79:	90                   	nop    
  100d7a:	90                   	nop    
  100d7b:	90                   	nop    
  100d7c:	90                   	nop    
  100d7d:	90                   	nop    
  100d7e:	90                   	nop    
  100d7f:	90                   	nop    
  100d80:	90                   	nop    
  100d81:	90                   	nop    
  100d82:	90                   	nop    
  100d83:	90                   	nop    
  100d84:	90                   	nop    
  100d85:	90                   	nop    
  100d86:	90                   	nop    
  100d87:	90                   	nop    
  100d88:	90                   	nop    
  100d89:	90                   	nop    
  100d8a:	90                   	nop    
  100d8b:	90                   	nop    
  100d8c:	90                   	nop    
  100d8d:	90                   	nop    
  100d8e:	90                   	nop    
  100d8f:	90                   	nop    
  100d90:	90                   	nop    
  100d91:	90                   	nop    
  100d92:	90                   	nop    
  100d93:	90                   	nop    
  100d94:	90                   	nop    
  100d95:	90                   	nop    
  100d96:	90                   	nop    
  100d97:	90                   	nop    
  100d98:	90                   	nop    
  100d99:	90                   	nop    
  100d9a:	90                   	nop    
  100d9b:	90                   	nop    
  100d9c:	90                   	nop    
  100d9d:	90                   	nop    
  100d9e:	90                   	nop    
  100d9f:	90                   	nop    
  100da0:	90                   	nop    
  100da1:	90                   	nop    
  100da2:	90                   	nop    
  100da3:	90                   	nop    
  100da4:	90                   	nop    
  100da5:	90                   	nop    
  100da6:	90                   	nop    
  100da7:	90                   	nop    
  100da8:	90                   	nop    
  100da9:	90                   	nop    
  100daa:	90                   	nop    
  100dab:	90                   	nop    
  100dac:	90                   	nop    
  100dad:	90                   	nop    
  100dae:	90                   	nop    
  100daf:	90                   	nop    
  100db0:	90                   	nop    
  100db1:	90                   	nop    
  100db2:	90                   	nop    
  100db3:	90                   	nop    
  100db4:	90                   	nop    
  100db5:	90                   	nop    
  100db6:	90                   	nop    
  100db7:	90                   	nop    
  100db8:	90                   	nop    
  100db9:	90                   	nop    
  100dba:	90                   	nop    
  100dbb:	90                   	nop    
  100dbc:	90                   	nop    
  100dbd:	90                   	nop    
  100dbe:	90                   	nop    
  100dbf:	90                   	nop    
  100dc0:	90                   	nop    
  100dc1:	90                   	nop    
  100dc2:	90                   	nop    
  100dc3:	90                   	nop    
  100dc4:	90                   	nop    
  100dc5:	90                   	nop    
  100dc6:	90                   	nop    
  100dc7:	90                   	nop    
  100dc8:	90                   	nop    
  100dc9:	90                   	nop    
  100dca:	90                   	nop    
  100dcb:	90                   	nop    
  100dcc:	90                   	nop    
  100dcd:	90                   	nop    
  100dce:	90                   	nop    
  100dcf:	90                   	nop    
  100dd0:	90                   	nop    
  100dd1:	90                   	nop    
  100dd2:	90                   	nop    
  100dd3:	90                   	nop    
  100dd4:	90                   	nop    
  100dd5:	90                   	nop    
  100dd6:	90                   	nop    
  100dd7:	90                   	nop    
  100dd8:	90                   	nop    
  100dd9:	90                   	nop    
  100dda:	90                   	nop    
  100ddb:	90                   	nop    
  100ddc:	90                   	nop    
  100ddd:	90                   	nop    
  100dde:	90                   	nop    
  100ddf:	90                   	nop    
  100de0:	90                   	nop    
  100de1:	90                   	nop    
  100de2:	90                   	nop    
  100de3:	90                   	nop    
  100de4:	90                   	nop    
  100de5:	90                   	nop    
  100de6:	90                   	nop    
  100de7:	90                   	nop    
  100de8:	90                   	nop    
  100de9:	90                   	nop    
  100dea:	90                   	nop    
  100deb:	90                   	nop    
  100dec:	90                   	nop    
  100ded:	90                   	nop    
  100dee:	90                   	nop    
  100def:	90                   	nop    
  100df0:	90                   	nop    
  100df1:	90                   	nop    
  100df2:	90                   	nop    
  100df3:	90                   	nop    
  100df4:	90                   	nop    
  100df5:	90                   	nop    
  100df6:	90                   	nop    
  100df7:	90                   	nop    
  100df8:	90                   	nop    
  100df9:	90                   	nop    
  100dfa:	90                   	nop    
  100dfb:	90                   	nop    
  100dfc:	90                   	nop    
  100dfd:	90                   	nop    
  100dfe:	90                   	nop    
  100dff:	90                   	nop    
  100e00:	90                   	nop    
  100e01:	90                   	nop    
  100e02:	90                   	nop    
  100e03:	90                   	nop    
  100e04:	90                   	nop    
  100e05:	90                   	nop    
  100e06:	90                   	nop    
  100e07:	90                   	nop    
  100e08:	90                   	nop    
  100e09:	90                   	nop    
  100e0a:	90                   	nop    
  100e0b:	90                   	nop    
  100e0c:	90                   	nop    
  100e0d:	90                   	nop    
  100e0e:	90                   	nop    
  100e0f:	90                   	nop    
  100e10:	90                   	nop    
  100e11:	90                   	nop    
  100e12:	90                   	nop    
  100e13:	90                   	nop    
  100e14:	90                   	nop    
  100e15:	90                   	nop    
  100e16:	90                   	nop    
  100e17:	90                   	nop    
  100e18:	90                   	nop    
  100e19:	90                   	nop    
  100e1a:	90                   	nop    
  100e1b:	90                   	nop    
  100e1c:	90                   	nop    
  100e1d:	90                   	nop    
  100e1e:	90                   	nop    
  100e1f:	90                   	nop    
  100e20:	90                   	nop    
  100e21:	90                   	nop    
  100e22:	90                   	nop    
  100e23:	90                   	nop    
  100e24:	90                   	nop    
  100e25:	90                   	nop    
  100e26:	90                   	nop    
  100e27:	90                   	nop    
  100e28:	90                   	nop    
  100e29:	90                   	nop    
  100e2a:	90                   	nop    
  100e2b:	90                   	nop    
  100e2c:	90                   	nop    
  100e2d:	90                   	nop    
  100e2e:	90                   	nop    
  100e2f:	90                   	nop    
  100e30:	90                   	nop    
  100e31:	90                   	nop    
  100e32:	90                   	nop    
  100e33:	90                   	nop    
  100e34:	90                   	nop    
  100e35:	90                   	nop    
  100e36:	90                   	nop    
  100e37:	90                   	nop    
  100e38:	90                   	nop    
  100e39:	90                   	nop    
  100e3a:	90                   	nop    
  100e3b:	90                   	nop    
  100e3c:	90                   	nop    
  100e3d:	90                   	nop    
  100e3e:	90                   	nop    
  100e3f:	90                   	nop    
  100e40:	90                   	nop    
  100e41:	90                   	nop    
  100e42:	90                   	nop    
  100e43:	90                   	nop    
  100e44:	90                   	nop    
  100e45:	90                   	nop    
  100e46:	90                   	nop    
  100e47:	90                   	nop    
  100e48:	90                   	nop    
  100e49:	90                   	nop    
  100e4a:	90                   	nop    
  100e4b:	90                   	nop    
  100e4c:	90                   	nop    
  100e4d:	90                   	nop    
  100e4e:	90                   	nop    
  100e4f:	90                   	nop    
  100e50:	90                   	nop    
  100e51:	90                   	nop    
  100e52:	90                   	nop    
  100e53:	90                   	nop    
  100e54:	90                   	nop    
  100e55:	90                   	nop    
  100e56:	90                   	nop    
  100e57:	90                   	nop    
  100e58:	90                   	nop    
  100e59:	90                   	nop    
  100e5a:	90                   	nop    
  100e5b:	90                   	nop    
  100e5c:	90                   	nop    
  100e5d:	90                   	nop    
  100e5e:	90                   	nop    
  100e5f:	90                   	nop    
  100e60:	90                   	nop    
  100e61:	90                   	nop    
  100e62:	90                   	nop    
  100e63:	90                   	nop    
  100e64:	90                   	nop    
  100e65:	90                   	nop    
  100e66:	90                   	nop    
  100e67:	90                   	nop    
  100e68:	90                   	nop    
  100e69:	90                   	nop    
  100e6a:	90                   	nop    
  100e6b:	90                   	nop    
  100e6c:	90                   	nop    
  100e6d:	90                   	nop    
  100e6e:	90                   	nop    
  100e6f:	90                   	nop    
  100e70:	90                   	nop    
  100e71:	90                   	nop    
  100e72:	90                   	nop    
  100e73:	90                   	nop    
  100e74:	90                   	nop    
  100e75:	90                   	nop    
  100e76:	90                   	nop    
  100e77:	90                   	nop    
  100e78:	90                   	nop    
  100e79:	90                   	nop    
  100e7a:	90                   	nop    
  100e7b:	90                   	nop    
  100e7c:	90                   	nop    
  100e7d:	90                   	nop    
  100e7e:	90                   	nop    
  100e7f:	90                   	nop    
  100e80:	90                   	nop    
  100e81:	90                   	nop    
  100e82:	90                   	nop    
  100e83:	90                   	nop    
  100e84:	90                   	nop    
  100e85:	90                   	nop    
  100e86:	90                   	nop    
  100e87:	90                   	nop    
  100e88:	90                   	nop    
  100e89:	90                   	nop    
  100e8a:	90                   	nop    
  100e8b:	90                   	nop    
  100e8c:	90                   	nop    
  100e8d:	90                   	nop    
  100e8e:	90                   	nop    
  100e8f:	90                   	nop    
  100e90:	90                   	nop    
  100e91:	90                   	nop    
  100e92:	90                   	nop    
  100e93:	90                   	nop    
  100e94:	90                   	nop    
  100e95:	90                   	nop    
  100e96:	90                   	nop    
  100e97:	90                   	nop    
  100e98:	90                   	nop    
  100e99:	90                   	nop    
  100e9a:	90                   	nop    
  100e9b:	90                   	nop    
  100e9c:	90                   	nop    
  100e9d:	90                   	nop    
  100e9e:	90                   	nop    
  100e9f:	90                   	nop    
  100ea0:	90                   	nop    
  100ea1:	90                   	nop    
  100ea2:	90                   	nop    
  100ea3:	90                   	nop    
  100ea4:	90                   	nop    
  100ea5:	90                   	nop    
  100ea6:	90                   	nop    
  100ea7:	90                   	nop    
  100ea8:	90                   	nop    
  100ea9:	90                   	nop    
  100eaa:	90                   	nop    
  100eab:	90                   	nop    
  100eac:	90                   	nop    
  100ead:	90                   	nop    
  100eae:	90                   	nop    
  100eaf:	90                   	nop    
  100eb0:	90                   	nop    
  100eb1:	90                   	nop    
  100eb2:	90                   	nop    
  100eb3:	90                   	nop    
  100eb4:	90                   	nop    
  100eb5:	90                   	nop    
  100eb6:	90                   	nop    
  100eb7:	90                   	nop    
  100eb8:	90                   	nop    
  100eb9:	90                   	nop    
  100eba:	90                   	nop    
  100ebb:	90                   	nop    
  100ebc:	90                   	nop    
  100ebd:	90                   	nop    
  100ebe:	90                   	nop    
  100ebf:	90                   	nop    
  100ec0:	90                   	nop    
  100ec1:	90                   	nop    
  100ec2:	90                   	nop    
  100ec3:	90                   	nop    
  100ec4:	90                   	nop    
  100ec5:	90                   	nop    
  100ec6:	90                   	nop    
  100ec7:	90                   	nop    
  100ec8:	90                   	nop    
  100ec9:	90                   	nop    
  100eca:	90                   	nop    
  100ecb:	90                   	nop    
  100ecc:	90                   	nop    
  100ecd:	90                   	nop    
  100ece:	90                   	nop    
  100ecf:	90                   	nop    
  100ed0:	90                   	nop    
  100ed1:	90                   	nop    
  100ed2:	90                   	nop    
  100ed3:	90                   	nop    
  100ed4:	90                   	nop    
  100ed5:	90                   	nop    
  100ed6:	90                   	nop    
  100ed7:	90                   	nop    
  100ed8:	90                   	nop    
  100ed9:	90                   	nop    
  100eda:	90                   	nop    
  100edb:	90                   	nop    
  100edc:	90                   	nop    
  100edd:	90                   	nop    
  100ede:	90                   	nop    
  100edf:	90                   	nop    
  100ee0:	90                   	nop    
  100ee1:	90                   	nop    
  100ee2:	90                   	nop    
  100ee3:	90                   	nop    
  100ee4:	90                   	nop    
  100ee5:	90                   	nop    
  100ee6:	90                   	nop    
  100ee7:	90                   	nop    
  100ee8:	90                   	nop    
  100ee9:	90                   	nop    
  100eea:	90                   	nop    
  100eeb:	90                   	nop    
  100eec:	90                   	nop    
  100eed:	90                   	nop    
  100eee:	90                   	nop    
  100eef:	90                   	nop    
  100ef0:	90                   	nop    
  100ef1:	90                   	nop    
  100ef2:	90                   	nop    
  100ef3:	90                   	nop    
  100ef4:	90                   	nop    
  100ef5:	90                   	nop    
  100ef6:	90                   	nop    
  100ef7:	90                   	nop    
  100ef8:	90                   	nop    
  100ef9:	90                   	nop    
  100efa:	90                   	nop    
  100efb:	90                   	nop    
  100efc:	90                   	nop    
  100efd:	90                   	nop    
  100efe:	90                   	nop    
  100eff:	90                   	nop    
  100f00:	90                   	nop    
  100f01:	90                   	nop    
  100f02:	90                   	nop    
  100f03:	90                   	nop    
  100f04:	90                   	nop    
  100f05:	90                   	nop    
  100f06:	90                   	nop    
  100f07:	90                   	nop    
  100f08:	90                   	nop    
  100f09:	90                   	nop    
  100f0a:	90                   	nop    
  100f0b:	90                   	nop    
  100f0c:	90                   	nop    
  100f0d:	90                   	nop    
  100f0e:	90                   	nop    
  100f0f:	90                   	nop    
  100f10:	90                   	nop    
  100f11:	90                   	nop    
  100f12:	90                   	nop    
  100f13:	90                   	nop    
  100f14:	90                   	nop    
  100f15:	90                   	nop    
  100f16:	90                   	nop    
  100f17:	90                   	nop    
  100f18:	90                   	nop    
  100f19:	90                   	nop    
  100f1a:	90                   	nop    
  100f1b:	90                   	nop    
  100f1c:	90                   	nop    
  100f1d:	90                   	nop    
  100f1e:	90                   	nop    
  100f1f:	90                   	nop    
  100f20:	90                   	nop    
  100f21:	90                   	nop    
  100f22:	90                   	nop    
  100f23:	90                   	nop    
  100f24:	90                   	nop    
  100f25:	90                   	nop    
  100f26:	90                   	nop    
  100f27:	90                   	nop    
  100f28:	90                   	nop    
  100f29:	90                   	nop    
  100f2a:	90                   	nop    
  100f2b:	90                   	nop    
  100f2c:	90                   	nop    
  100f2d:	90                   	nop    
  100f2e:	90                   	nop    
  100f2f:	90                   	nop    
  100f30:	90                   	nop    
  100f31:	90                   	nop    
  100f32:	90                   	nop    
  100f33:	90                   	nop    
  100f34:	90                   	nop    
  100f35:	90                   	nop    
  100f36:	90                   	nop    
  100f37:	90                   	nop    
  100f38:	90                   	nop    
  100f39:	90                   	nop    
  100f3a:	90                   	nop    
  100f3b:	90                   	nop    
  100f3c:	90                   	nop    
  100f3d:	90                   	nop    
  100f3e:	90                   	nop    
  100f3f:	90                   	nop    
  100f40:	90                   	nop    
  100f41:	90                   	nop    
  100f42:	90                   	nop    
  100f43:	90                   	nop    
  100f44:	90                   	nop    
  100f45:	90                   	nop    
  100f46:	90                   	nop    
  100f47:	90                   	nop    
  100f48:	90                   	nop    
  100f49:	90                   	nop    
  100f4a:	90                   	nop    
  100f4b:	90                   	nop    
  100f4c:	90                   	nop    
  100f4d:	90                   	nop    
  100f4e:	90                   	nop    
  100f4f:	90                   	nop    
  100f50:	90                   	nop    
  100f51:	90                   	nop    
  100f52:	90                   	nop    
  100f53:	90                   	nop    
  100f54:	90                   	nop    
  100f55:	90                   	nop    
  100f56:	90                   	nop    
  100f57:	90                   	nop    
  100f58:	90                   	nop    
  100f59:	90                   	nop    
  100f5a:	90                   	nop    
  100f5b:	90                   	nop    
  100f5c:	90                   	nop    
  100f5d:	90                   	nop    
  100f5e:	90                   	nop    
  100f5f:	90                   	nop    
  100f60:	90                   	nop    
  100f61:	90                   	nop    
  100f62:	90                   	nop    
  100f63:	90                   	nop    
  100f64:	90                   	nop    
  100f65:	90                   	nop    
  100f66:	90                   	nop    
  100f67:	90                   	nop    
  100f68:	90                   	nop    
  100f69:	90                   	nop    
  100f6a:	90                   	nop    
  100f6b:	90                   	nop    
  100f6c:	90                   	nop    
  100f6d:	90                   	nop    
  100f6e:	90                   	nop    
  100f6f:	90                   	nop    
  100f70:	90                   	nop    
  100f71:	90                   	nop    
  100f72:	90                   	nop    
  100f73:	90                   	nop    
  100f74:	90                   	nop    
  100f75:	90                   	nop    
  100f76:	90                   	nop    
  100f77:	90                   	nop    
  100f78:	90                   	nop    
  100f79:	90                   	nop    
  100f7a:	90                   	nop    
  100f7b:	90                   	nop    
  100f7c:	90                   	nop    
  100f7d:	90                   	nop    
  100f7e:	90                   	nop    
  100f7f:	90                   	nop    
  100f80:	90                   	nop    
  100f81:	90                   	nop    
  100f82:	90                   	nop    
  100f83:	90                   	nop    
  100f84:	90                   	nop    
  100f85:	90                   	nop    
  100f86:	90                   	nop    
  100f87:	90                   	nop    
  100f88:	90                   	nop    
  100f89:	90                   	nop    
  100f8a:	90                   	nop    
  100f8b:	90                   	nop    
  100f8c:	90                   	nop    
  100f8d:	90                   	nop    
  100f8e:	90                   	nop    
  100f8f:	90                   	nop    
  100f90:	90                   	nop    
  100f91:	90                   	nop    
  100f92:	90                   	nop    
  100f93:	90                   	nop    
  100f94:	90                   	nop    
  100f95:	90                   	nop    
  100f96:	90                   	nop    
  100f97:	90                   	nop    
  100f98:	90                   	nop    
  100f99:	90                   	nop    
  100f9a:	90                   	nop    
  100f9b:	90                   	nop    
  100f9c:	90                   	nop    
  100f9d:	90                   	nop    
  100f9e:	90                   	nop    
  100f9f:	90                   	nop    
  100fa0:	90                   	nop    
  100fa1:	90                   	nop    
  100fa2:	90                   	nop    
  100fa3:	90                   	nop    
  100fa4:	90                   	nop    
  100fa5:	90                   	nop    
  100fa6:	90                   	nop    
  100fa7:	90                   	nop    
  100fa8:	90                   	nop    
  100fa9:	90                   	nop    
  100faa:	90                   	nop    
  100fab:	90                   	nop    
  100fac:	90                   	nop    
  100fad:	90                   	nop    
  100fae:	90                   	nop    
  100faf:	90                   	nop    
  100fb0:	90                   	nop    
  100fb1:	90                   	nop    
  100fb2:	90                   	nop    
  100fb3:	90                   	nop    
  100fb4:	90                   	nop    
  100fb5:	90                   	nop    
  100fb6:	90                   	nop    
  100fb7:	90                   	nop    
  100fb8:	90                   	nop    
  100fb9:	90                   	nop    
  100fba:	90                   	nop    
  100fbb:	90                   	nop    
  100fbc:	90                   	nop    
  100fbd:	90                   	nop    
  100fbe:	90                   	nop    
  100fbf:	90                   	nop    
  100fc0:	90                   	nop    
  100fc1:	90                   	nop    
  100fc2:	90                   	nop    
  100fc3:	90                   	nop    
  100fc4:	90                   	nop    
  100fc5:	90                   	nop    
  100fc6:	90                   	nop    
  100fc7:	90                   	nop    
  100fc8:	90                   	nop    
  100fc9:	90                   	nop    
  100fca:	90                   	nop    
  100fcb:	90                   	nop    
  100fcc:	90                   	nop    
  100fcd:	90                   	nop    
  100fce:	90                   	nop    
  100fcf:	90                   	nop    
  100fd0:	90                   	nop    
  100fd1:	90                   	nop    
  100fd2:	90                   	nop    
  100fd3:	90                   	nop    
  100fd4:	90                   	nop    
  100fd5:	90                   	nop    
  100fd6:	90                   	nop    
  100fd7:	90                   	nop    
  100fd8:	90                   	nop    
  100fd9:	90                   	nop    
  100fda:	90                   	nop    
  100fdb:	90                   	nop    
  100fdc:	90                   	nop    
  100fdd:	90                   	nop    
  100fde:	90                   	nop    
  100fdf:	90                   	nop    
  100fe0:	90                   	nop    
  100fe1:	90                   	nop    
  100fe2:	90                   	nop    
  100fe3:	90                   	nop    
  100fe4:	90                   	nop    
  100fe5:	90                   	nop    
  100fe6:	90                   	nop    
  100fe7:	90                   	nop    
  100fe8:	90                   	nop    
  100fe9:	90                   	nop    
  100fea:	90                   	nop    
  100feb:	90                   	nop    
  100fec:	90                   	nop    
  100fed:	90                   	nop    
  100fee:	90                   	nop    
  100fef:	90                   	nop    
  100ff0:	90                   	nop    
  100ff1:	90                   	nop    
  100ff2:	90                   	nop    
  100ff3:	90                   	nop    
  100ff4:	90                   	nop    
  100ff5:	90                   	nop    
  100ff6:	90                   	nop    
  100ff7:	90                   	nop    
  100ff8:	90                   	nop    
  100ff9:	90                   	nop    
  100ffa:	90                   	nop    
  100ffb:	90                   	nop    
  100ffc:	90                   	nop    
  100ffd:	90                   	nop    
  100ffe:	90                   	nop    
  100fff:	90                   	nop    

0000000000101000 <pml4_base>:
  101000:	07                   	(bad)  
  101001:	30 10                	xor    %dl,(%rax)
	...

0000000000102000 <level2_ident_pgt>:
  102000:	83 00 00             	addl   $0x0,(%rax)
  102003:	00 00                	add    %al,(%rax)
  102005:	00 00                	add    %al,(%rax)
  102007:	00 83 00 20 00 00    	add    %al,0x2000(%rbx)
  10200d:	00 00                	add    %al,(%rax)
  10200f:	00 83 00 40 00 00    	add    %al,0x4000(%rbx)
  102015:	00 00                	add    %al,(%rax)
  102017:	00 83 00 60 00 00    	add    %al,0x6000(%rbx)
  10201d:	00 00                	add    %al,(%rax)
  10201f:	00 83 00 80 00 00    	add    %al,0x8000(%rbx)
  102025:	00 00                	add    %al,(%rax)
  102027:	00 83 00 a0 00 00    	add    %al,0xa000(%rbx)
  10202d:	00 00                	add    %al,(%rax)
  10202f:	00 83 00 c0 00 00    	add    %al,0xc000(%rbx)
  102035:	00 00                	add    %al,(%rax)
  102037:	00 83 00 e0 00 00    	add    %al,0xe000(%rbx)
  10203d:	00 00                	add    %al,(%rax)
  10203f:	00 83 00 00 01 00    	add    %al,0x10000(%rbx)
  102045:	00 00                	add    %al,(%rax)
  102047:	00 83 00 20 01 00    	add    %al,0x12000(%rbx)
  10204d:	00 00                	add    %al,(%rax)
  10204f:	00 83 00 40 01 00    	add    %al,0x14000(%rbx)
  102055:	00 00                	add    %al,(%rax)
  102057:	00 83 00 60 01 00    	add    %al,0x16000(%rbx)
  10205d:	00 00                	add    %al,(%rax)
  10205f:	00 83 00 80 01 00    	add    %al,0x18000(%rbx)
  102065:	00 00                	add    %al,(%rax)
  102067:	00 83 00 a0 01 00    	add    %al,0x1a000(%rbx)
  10206d:	00 00                	add    %al,(%rax)
  10206f:	00 83 00 c0 01 00    	add    %al,0x1c000(%rbx)
  102075:	00 00                	add    %al,(%rax)
  102077:	00 83 00 e0 01 00    	add    %al,0x1e000(%rbx)
  10207d:	00 00                	add    %al,(%rax)
  10207f:	00 83 00 00 02 00    	add    %al,0x20000(%rbx)
  102085:	00 00                	add    %al,(%rax)
  102087:	00 83 00 20 02 00    	add    %al,0x22000(%rbx)
  10208d:	00 00                	add    %al,(%rax)
  10208f:	00 83 00 40 02 00    	add    %al,0x24000(%rbx)
  102095:	00 00                	add    %al,(%rax)
  102097:	00 83 00 60 02 00    	add    %al,0x26000(%rbx)
  10209d:	00 00                	add    %al,(%rax)
	...

00000000001020a0 <temp_boot_pmds>:
	...

0000000000103000 <level3_ident_pgt>:
  103000:	07                   	(bad)  
  103001:	20 10                	and    %dl,(%rax)
	...

0000000000104000 <_D6kernel10CHECK_FLAGFkkZk>:
	Params:
		flags = The flags from the multiboot header the kernel wishes to check.
		bit = The number of the bit the kernel would like to check for data.
	Returns: Whether the bit "bit" in "flags" has a value (1 if it is set, 0 if it is not)
*/
uint CHECK_FLAG(uint flags, uint bit)
  104000:	55                   	push   %rbp
  104001:	48 89 e5             	mov    %rsp,%rbp
  104004:	89 7d fc             	mov    %edi,-0x4(%rbp)
  104007:	89 75 f8             	mov    %esi,-0x8(%rbp)
{
	return ((flags) & (1 << (bit)));
  10400a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  10400d:	b8 01 00 00 00       	mov    $0x1,%eax
  104012:	d3 e0                	shl    %cl,%eax
  104014:	23 45 fc             	and    -0x4(%rbp),%eax
}
  104017:	c9                   	leaveq 
  104018:	c3                   	retq   

0000000000104019 <_D6kernel15set_rflags_ioplFZv>:

/**
This method sets sets the Input/Output Permission Level to 3, so
that it will not check the IO permissions bitmap when access is requested.
*/
void set_rflags_iopl()
  104019:	55                   	push   %rbp
  10401a:	48 89 e5             	mov    %rsp,%rbp
	/* popf RFLAGS to set (IOPL) bits 12 & 13 = 1 */
	/* 0x3000 = 11000000000000 => bits 12 and 13 are 1*/
	asm
	 {
		"pushf";
		"popq %%rax";
  10401d:	9c                   	pushfq 
		"or $0x3000, %%rax";
  10401e:	58                   	pop    %rax
		"pushq %%rax";
  10401f:	48 0d 00 30 00 00    	or     $0x3000,%rax
		"popf";
  104025:	50                   	push   %rax
	}
  104026:	9d                   	popfq  
}
  104027:	c9                   	leaveq 
  104028:	c3                   	retq   

0000000000104029 <cmain>:
	Params:
		magic = the magic number returned by the GRUB bootloader
		addr = the address of the multiboot header, passed to the kernel to by the
			GRUB bootloader.
*/
extern(C) void cmain(uint magic, uint addr)
  104029:	55                   	push   %rbp
  10402a:	48 89 e5             	mov    %rsp,%rbp
  10402d:	48 81 ec b0 01 00 00 	sub    $0x1b0,%rsp
  104034:	89 bd 7c fe ff ff    	mov    %edi,-0x184(%rbp)
  10403a:	89 b5 78 fe ff ff    	mov    %esi,-0x188(%rbp)
{
	/// declare a pointer to the multiboot header.
	multiboot_info_t *mbi;
  104040:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  104047:	00 

	/// set flags.
	set_rflags_iopl();
  104048:	e8 cc ff ff ff       	callq  104019 <_D6kernel15set_rflags_ioplFZv>

	/// install the Global Descriptor Table (GDT) and the Interrupt Descriptor Table (IDT)
	GDT.install();
  10404d:	e8 6d 3d 00 00       	callq  107dbf <_D3gdt3GDT7installFZv>
	idt.install();
  104052:	e8 a2 19 00 00       	callq  1059f9 <_D3idt7installFZv>

	idt.setCustomHandler(idt.Type.PageFault, &handle_faults);
  104057:	be dc 7f 10 00       	mov    $0x107fdc,%esi
  10405c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  104061:	bf 0e 00 00 00       	mov    $0xe,%edi
  104066:	e8 a1 1d 00 00       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>

	if( enable_kgdb ){
  10406b:	0f b6 05 3e 1b 02 00 	movzbl 0x21b3e(%rip),%eax        # 125bb0 <_D6config11enable_kgdbb>
  104072:	84 c0                	test   %al,%al
  104074:	74 0a                	je     104080 <cmain+0x57>
		set_debug_traps();
  104076:	e8 ff 52 00 00       	callq  10937a <_D9kgdb_stub15set_debug_trapsFZv>
		breakpoint();
  10407b:	e8 e3 52 00 00       	callq  109363 <_D9kgdb_stub10breakpointFZv>
	}

	/// Create a handler to deal with data in the LSTAR memory location. This handler
	/// will deal with system interrupts.
	lstar.set_handler(&lstar.syscallHandler);
  104080:	bf 6c 7e 10 00       	mov    $0x107e6c,%edi
  104085:	e8 13 3e 00 00       	callq  107e9d <_D5lstar11set_handlerFPFZvZv>

	/// Turn general interrupts on, so the computer can deal with errors and faults.
	asm{sti;}
  10408a:	fb                   	sti    

	/// Clear the screen in order to begin printing.
	/// Console.cls();

	/// Print initial booting information.
	kprintf("Booting ");
  10408b:	48 c7 85 80 fe ff ff 	movq   $0x8,-0x180(%rbp)
  104092:	08 00 00 00 
  104096:	48 c7 85 88 fe ff ff 	movq   $0x1170c0,-0x178(%rbp)
  10409d:	c0 70 11 00 
  1040a1:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1040a8:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  1040af:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1040b4:	b8 00 00 00 00       	mov    $0x0,%eax
  1040b9:	e8 cb 0f 00 00       	callq  105089 <_D3vga7Console7kprintfFAaYv>
	Console.setColors(Color.Black, Color.HighRed);
  1040be:	be 0c 00 00 00       	mov    $0xc,%esi
  1040c3:	bf 00 00 00 00       	mov    $0x0,%edi
  1040c8:	e8 94 09 00 00       	callq  104a61 <_D3vga7Console9setColorsFE3vga5ColorE3vga5ColorZv>
	kprintf("PaGanOS");
  1040cd:	48 c7 85 90 fe ff ff 	movq   $0x7,-0x170(%rbp)
  1040d4:	07 00 00 00 
  1040d8:	48 c7 85 98 fe ff ff 	movq   $0x1170c9,-0x168(%rbp)
  1040df:	c9 70 11 00 
  1040e3:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1040ea:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
  1040f1:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1040f6:	b8 00 00 00 00       	mov    $0x0,%eax
  1040fb:	e8 89 0f 00 00       	callq  105089 <_D3vga7Console7kprintfFAaYv>
	Console.resetColors();
  104100:	e8 06 09 00 00       	callq  104a0b <_D3vga7Console11resetColorsFZv>
	kprintfln("...\n");
  104105:	48 c7 85 a0 fe ff ff 	movq   $0x4,-0x160(%rbp)
  10410c:	04 00 00 00 
  104110:	48 c7 85 a8 fe ff ff 	movq   $0x1170d1,-0x158(%rbp)
  104117:	d1 70 11 00 
  10411b:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  104122:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  104129:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  10412e:	b8 00 00 00 00       	mov    $0x0,%eax
  104133:	e8 c6 10 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	/// Make sure that the magic number, passed to the kernel, is a valid GRUB magic number.
	/// If it is not, print to the screen that the magic number is invalid and end execution.
	/// Invalid magic numbers can indicate that the system was illegally booted, or that the 
	// system was booted by a bootloader other than GRUB.
	if(magic != MULTIBOOT_BOOTLOADER_MAGIC)
  104138:	81 bd 7c fe ff ff 02 	cmpl   $0x2badb002,-0x184(%rbp)
  10413f:	b0 ad 2b 
  104142:	74 3e                	je     104182 <cmain+0x159>
	{
		kprintfln("Invalid magic number: 0x%x", cast(uint)magic);
  104144:	48 c7 85 b0 fe ff ff 	movq   $0x1a,-0x150(%rbp)
  10414b:	1a 00 00 00 
  10414f:	48 c7 85 b8 fe ff ff 	movq   $0x1170d6,-0x148(%rbp)
  104156:	d6 70 11 00 
  10415a:	8b 8d 7c fe ff ff    	mov    -0x184(%rbp),%ecx
  104160:	48 8b b5 b0 fe ff ff 	mov    -0x150(%rbp),%rsi
  104167:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  10416e:	bf c0 00 12 00       	mov    $0x1200c0,%edi
  104173:	b8 00 00 00 00       	mov    $0x0,%eax
  104178:	e8 81 10 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		return;
  10417d:	e9 f8 05 00 00       	jmpq   10477a <cmain+0x751>
	}

	/// Set MBI to the address of the Multiboot information structure, passed to the kernel
	/// by GRUB.
	mbi = cast(multiboot_info_t*)addr;
  104182:	8b 85 78 fe ff ff    	mov    -0x188(%rbp),%eax
  104188:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

	/// Print out all the values of the flags presented to the operating system by GRUB.
	kprintfln("flags = 0x%x", cast(uint)mbi.flags);
  10418c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104190:	8b 08                	mov    (%rax),%ecx
  104192:	48 c7 85 c0 fe ff ff 	movq   $0xc,-0x140(%rbp)
  104199:	0c 00 00 00 
  10419d:	48 c7 85 c8 fe ff ff 	movq   $0x1170f1,-0x138(%rbp)
  1041a4:	f1 70 11 00 
  1041a8:	48 8b b5 c0 fe ff ff 	mov    -0x140(%rbp),%rsi
  1041af:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  1041b6:	bf c0 00 12 00       	mov    $0x1200c0,%edi
  1041bb:	b8 00 00 00 00       	mov    $0x0,%eax
  1041c0:	e8 39 10 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	/// Are mem_* valid
	if(CHECK_FLAG(mbi.flags, 0))
  1041c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1041c9:	8b 38                	mov    (%rax),%edi
  1041cb:	be 00 00 00 00       	mov    $0x0,%esi
  1041d0:	e8 2b fe ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  1041d5:	85 c0                	test   %eax,%eax
  1041d7:	74 4c                	je     104225 <cmain+0x1fc>
		kprintfln("mem_lower = %uKB, mem_upper = %uKB", cast(uint)mbi.mem_lower, cast(uint)mbi.mem_upper);
  1041d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1041dd:	48 83 c0 08          	add    $0x8,%rax
  1041e1:	8b 08                	mov    (%rax),%ecx
  1041e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1041e7:	48 83 c0 04          	add    $0x4,%rax
  1041eb:	8b 00                	mov    (%rax),%eax
  1041ed:	48 c7 85 d0 fe ff ff 	movq   $0x22,-0x130(%rbp)
  1041f4:	22 00 00 00 
  1041f8:	48 c7 85 d8 fe ff ff 	movq   $0x117100,-0x128(%rbp)
  1041ff:	00 71 11 00 
  104203:	48 8b b5 d0 fe ff ff 	mov    -0x130(%rbp),%rsi
  10420a:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  104211:	41 89 c8             	mov    %ecx,%r8d
  104214:	89 c1                	mov    %eax,%ecx
  104216:	bf e0 00 12 00       	mov    $0x1200e0,%edi
  10421b:	b8 00 00 00 00       	mov    $0x0,%eax
  104220:	e8 d9 0f 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	/// Check to make sure the boot device is valid.
	if(CHECK_FLAG(mbi.flags, 1))
  104225:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104229:	8b 38                	mov    (%rax),%edi
  10422b:	be 01 00 00 00       	mov    $0x1,%esi
  104230:	e8 cb fd ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  104235:	85 c0                	test   %eax,%eax
  104237:	74 3d                	je     104276 <cmain+0x24d>
		kprintfln("boot_device = 0x%x", cast(uint)mbi.boot_device);
  104239:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10423d:	48 83 c0 0c          	add    $0xc,%rax
  104241:	8b 08                	mov    (%rax),%ecx
  104243:	48 c7 85 e0 fe ff ff 	movq   $0x12,-0x120(%rbp)
  10424a:	12 00 00 00 
  10424e:	48 c7 85 e8 fe ff ff 	movq   $0x117123,-0x118(%rbp)
  104255:	23 71 11 00 
  104259:	48 8b b5 e0 fe ff ff 	mov    -0x120(%rbp),%rsi
  104260:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  104267:	bf c0 00 12 00       	mov    $0x1200c0,%edi
  10426c:	b8 00 00 00 00       	mov    $0x0,%eax
  104271:	e8 88 0f 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	/// Is the command line passed?
	if(CHECK_FLAG(mbi.flags, 2))
  104276:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10427a:	8b 38                	mov    (%rax),%edi
  10427c:	be 02 00 00 00       	mov    $0x2,%esi
  104281:	e8 7a fd ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  104286:	85 c0                	test   %eax,%eax
  104288:	74 5f                	je     1042e9 <cmain+0x2c0>
		kprintfln("cmdline = %s", system.toString(cast(char*)mbi.cmdline));
  10428a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10428e:	48 83 c0 10          	add    $0x10,%rax
  104292:	8b 00                	mov    (%rax),%eax
  104294:	89 c0                	mov    %eax,%eax
  104296:	48 89 c6             	mov    %rax,%rsi
  104299:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  1042a0:	e8 8b 15 00 00       	callq  105830 <_D6system8toStringFPaZAa>
  1042a5:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  1042ac:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  1042b3:	48 c7 85 00 ff ff ff 	movq   $0xc,-0x100(%rbp)
  1042ba:	0c 00 00 00 
  1042be:	48 c7 85 08 ff ff ff 	movq   $0x117136,-0xf8(%rbp)
  1042c5:	36 71 11 00 
  1042c9:	48 8b b5 00 ff ff ff 	mov    -0x100(%rbp),%rsi
  1042d0:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  1042d7:	49 89 c0             	mov    %rax,%r8
  1042da:	bf 00 01 12 00       	mov    $0x120100,%edi
  1042df:	b8 00 00 00 00       	mov    $0x0,%eax
  1042e4:	e8 15 0f 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	/// This if statement calls the function CHECK_FLAG on the flags of the GRUB multiboot header.
	/// It then checks to make sure the flags are valid (indicating proper, secure booting).
	if(CHECK_FLAG(mbi.flags, 3))
  1042e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1042ed:	8b 38                	mov    (%rax),%edi
  1042ef:	be 03 00 00 00       	mov    $0x3,%esi
  1042f4:	e8 07 fd ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  1042f9:	85 c0                	test   %eax,%eax
  1042fb:	0f 84 30 01 00 00    	je     104431 <cmain+0x408>
	{
		/// print out the number of modules loaded by GRUB, and the physical memory address of the first module in memory.
		kprintfln("mods_count = %d, mods_addr = 0x%x", cast(int)mbi.mods_count, cast(int)mbi.mods_addr);
  104301:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104305:	48 83 c0 18          	add    $0x18,%rax
  104309:	8b 00                	mov    (%rax),%eax
  10430b:	89 c1                	mov    %eax,%ecx
  10430d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104311:	48 83 c0 14          	add    $0x14,%rax
  104315:	8b 00                	mov    (%rax),%eax
  104317:	48 c7 85 10 ff ff ff 	movq   $0x21,-0xf0(%rbp)
  10431e:	21 00 00 00 
  104322:	48 c7 85 18 ff ff ff 	movq   $0x117148,-0xe8(%rbp)
  104329:	48 71 11 00 
  10432d:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  104334:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  10433b:	41 89 c8             	mov    %ecx,%r8d
  10433e:	89 c1                	mov    %eax,%ecx
  104340:	bf 20 01 12 00       	mov    $0x120120,%edi
  104345:	b8 00 00 00 00       	mov    $0x0,%eax
  10434a:	e8 af 0e 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

		module_t* mod;
  10434f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  104356:	00 
		int i;
  104357:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)

		/// Go through all of the modules loaded by GRUB.
		for(i = 0, mod = cast(module_t*)mbi.mods_addr; i < mbi.mods_count; i++, mod++)
  10435e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  104365:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104369:	48 83 c0 18          	add    $0x18,%rax
  10436d:	8b 00                	mov    (%rax),%eax
  10436f:	89 c0                	mov    %eax,%eax
  104371:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  104375:	8b 55 dc             	mov    -0x24(%rbp),%edx
  104378:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10437c:	8b 40 14             	mov    0x14(%rax),%eax
  10437f:	39 c2                	cmp    %eax,%edx
  104381:	0f 92 c0             	setb   %al
  104384:	83 f0 01             	xor    $0x1,%eax
  104387:	84 c0                	test   %al,%al
  104389:	0f 85 8f 00 00 00    	jne    10441e <cmain+0x3f5>
		{
			/// print out the memory address of the beginning of that module, the address of the end of that module,
			/// and the name of that module.
			kprintfln(" mod_start = 0x%x, mod_end = 0x%x, string = %s",
  10438f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  104393:	48 83 c0 08          	add    $0x8,%rax
  104397:	8b 00                	mov    (%rax),%eax
  104399:	89 c0                	mov    %eax,%eax
  10439b:	48 89 c6             	mov    %rax,%rsi
  10439e:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  1043a5:	e8 86 14 00 00       	callq  105830 <_D6system8toStringFPaZAa>
  1043aa:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  1043b1:	48 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%rcx
  1043b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1043bc:	48 83 c0 04          	add    $0x4,%rax
  1043c0:	8b 30                	mov    (%rax),%esi
  1043c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1043c6:	8b 00                	mov    (%rax),%eax
  1043c8:	48 c7 85 30 ff ff ff 	movq   $0x2e,-0xd0(%rbp)
  1043cf:	2e 00 00 00 
  1043d3:	48 c7 85 38 ff ff ff 	movq   $0x117170,-0xc8(%rbp)
  1043da:	70 71 11 00 
  1043de:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
  1043e5:	4c 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%r10
  1043ec:	48 89 14 24          	mov    %rdx,(%rsp)
  1043f0:	49 89 c9             	mov    %rcx,%r9
  1043f3:	41 89 f0             	mov    %esi,%r8d
  1043f6:	89 c1                	mov    %eax,%ecx
  1043f8:	48 89 fe             	mov    %rdi,%rsi
  1043fb:	4c 89 d2             	mov    %r10,%rdx
  1043fe:	bf 40 01 12 00       	mov    $0x120140,%edi
  104403:	b8 00 00 00 00       	mov    $0x0,%eax
  104408:	e8 f1 0d 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  10440d:	ff 45 dc             	incl   -0x24(%rbp)
  104410:	b8 10 00 00 00       	mov    $0x10,%eax
  104415:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  104419:	e9 57 ff ff ff       	jmpq   104375 <cmain+0x34c>
				cast(uint)mod.mod_end,
				system.toString(cast(char*)mod.string));
		}

		/// Use the jumpTo() method (see below) to execute the first module.
		jumpTo(0, mbi);
  10441e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  104422:	bf 00 00 00 00       	mov    $0x0,%edi
  104427:	e8 50 03 00 00       	callq  10477c <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv>
		return;
  10442c:	e9 49 03 00 00       	jmpq   10477a <cmain+0x751>
	}

	/// Bits 4 and 5 are mutually exclusive!
	if(CHECK_FLAG(mbi.flags, 4) && CHECK_FLAG(mbi.flags, 5))
  104431:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104435:	8b 38                	mov    (%rax),%edi
  104437:	be 04 00 00 00       	mov    $0x4,%esi
  10443c:	e8 bf fb ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  104441:	85 c0                	test   %eax,%eax
  104443:	74 4c                	je     104491 <cmain+0x468>
  104445:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104449:	8b 38                	mov    (%rax),%edi
  10444b:	be 05 00 00 00       	mov    $0x5,%esi
  104450:	e8 ab fb ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  104455:	85 c0                	test   %eax,%eax
  104457:	74 38                	je     104491 <cmain+0x468>
	{
		kprintfln("Both bits 4 and 5 are set.");
  104459:	48 c7 85 40 ff ff ff 	movq   $0x1a,-0xc0(%rbp)
  104460:	1a 00 00 00 
  104464:	48 c7 85 48 ff ff ff 	movq   $0x11719f,-0xb8(%rbp)
  10446b:	9f 71 11 00 
  10446f:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
  104476:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  10447d:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  104482:	b8 00 00 00 00       	mov    $0x0,%eax
  104487:	e8 72 0d 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		return;
  10448c:	e9 e9 02 00 00       	jmpq   10477a <cmain+0x751>
	}

	/// Check to make sure the symbol table of the compiled kernel file is valid.
	if(CHECK_FLAG(mbi.flags, 4))
  104491:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104495:	8b 38                	mov    (%rax),%edi
  104497:	be 04 00 00 00       	mov    $0x4,%esi
  10449c:	e8 5f fb ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  1044a1:	85 c0                	test   %eax,%eax
  1044a3:	74 61                	je     104506 <cmain+0x4dd>
	{
		/// get a pointer to the symbol table, returned by GRUB in the multiboot header.
		aout_symbol_table_t* aout_sym = &(mbi.aout_sym);
  1044a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1044a9:	48 83 c0 1c          	add    $0x1c,%rax
  1044ad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		/// If it is valid, print out information about the compiled kernel's symbol table.
		kprintfln("aout_symbol_table: tabsize = 0x%0x, strsize = 0x%x, addr = 0x%x",
  1044b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1044b5:	48 83 c0 08          	add    $0x8,%rax
  1044b9:	8b 08                	mov    (%rax),%ecx
  1044bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1044bf:	48 83 c0 04          	add    $0x4,%rax
  1044c3:	8b 38                	mov    (%rax),%edi
  1044c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1044c9:	8b 00                	mov    (%rax),%eax
  1044cb:	48 c7 85 50 ff ff ff 	movq   $0x3f,-0xb0(%rbp)
  1044d2:	3f 00 00 00 
  1044d6:	48 c7 85 58 ff ff ff 	movq   $0x1171c0,-0xa8(%rbp)
  1044dd:	c0 71 11 00 
  1044e1:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  1044e8:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  1044ef:	41 89 c9             	mov    %ecx,%r9d
  1044f2:	41 89 f8             	mov    %edi,%r8d
  1044f5:	89 c1                	mov    %eax,%ecx
  1044f7:	bf 60 01 12 00       	mov    $0x120160,%edi
  1044fc:	b8 00 00 00 00       	mov    $0x0,%eax
  104501:	e8 f8 0c 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			cast(uint)aout_sym.strsize,
			cast(uint)aout_sym.addr);
	}

	/// Check to make sure the section header of the compiled kernel is valid.
	if(CHECK_FLAG(mbi.flags, 5))
  104506:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10450a:	8b 38                	mov    (%rax),%edi
  10450c:	be 05 00 00 00       	mov    $0x5,%esi
  104511:	e8 ea fa ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  104516:	85 c0                	test   %eax,%eax
  104518:	74 73                	je     10458d <cmain+0x564>
	{
		elf_section_header_table_t* elf_sec = &(mbi.elf_sec);
  10451a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10451e:	48 83 c0 1c          	add    $0x1c,%rax
  104522:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/// If it is valid, print out information about the compiled kernel's section table.
		kprintfln("elf_sec: num = %u, size = 0x%x, addr = 0x%x, shndx = 0x%x",
  104526:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10452a:	48 83 c0 0c          	add    $0xc,%rax
  10452e:	44 8b 00             	mov    (%rax),%r8d
  104531:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  104535:	48 83 c0 08          	add    $0x8,%rax
  104539:	8b 10                	mov    (%rax),%edx
  10453b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10453f:	48 83 c0 04          	add    $0x4,%rax
  104543:	8b 08                	mov    (%rax),%ecx
  104545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  104549:	8b 00                	mov    (%rax),%eax
  10454b:	48 c7 85 60 ff ff ff 	movq   $0x39,-0xa0(%rbp)
  104552:	39 00 00 00 
  104556:	48 c7 85 68 ff ff ff 	movq   $0x117200,-0x98(%rbp)
  10455d:	00 72 11 00 
  104561:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  104568:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  10456f:	44 89 04 24          	mov    %r8d,(%rsp)
  104573:	41 89 d1             	mov    %edx,%r9d
  104576:	41 89 c8             	mov    %ecx,%r8d
  104579:	89 c1                	mov    %eax,%ecx
  10457b:	48 89 fa             	mov    %rdi,%rdx
  10457e:	bf 80 01 12 00       	mov    $0x120180,%edi
  104583:	b8 00 00 00 00       	mov    $0x0,%eax
  104588:	e8 71 0c 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			cast(uint)elf_sec.num, cast(uint)elf_sec.size,
			cast(uint)elf_sec.addr, cast(uint)elf_sec.shndx);
	}

	/// This checks to make sure that the memory map of the bootloader is valid.
	if(CHECK_FLAG(mbi.flags, 6))
  10458d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104591:	8b 38                	mov    (%rax),%edi
  104593:	be 06 00 00 00       	mov    $0x6,%esi
  104598:	e8 63 fa ff ff       	callq  104000 <_D6kernel10CHECK_FLAGFkkZk>
  10459d:	85 c0                	test   %eax,%eax
  10459f:	0f 84 17 01 00 00    	je     1046bc <cmain+0x693>
	{
		kprintfln("mmap_addr = 0x%x, mmap_length = 0x%x", cast(uint)mbi.mmap_addr, cast(uint)mbi.mmap_length);
  1045a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1045a9:	48 83 c0 2c          	add    $0x2c,%rax
  1045ad:	8b 08                	mov    (%rax),%ecx
  1045af:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1045b3:	48 83 c0 30          	add    $0x30,%rax
  1045b7:	8b 00                	mov    (%rax),%eax
  1045b9:	48 c7 85 70 ff ff ff 	movq   $0x24,-0x90(%rbp)
  1045c0:	24 00 00 00 
  1045c4:	48 c7 85 78 ff ff ff 	movq   $0x117240,-0x88(%rbp)
  1045cb:	40 72 11 00 
  1045cf:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  1045d6:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  1045dd:	41 89 c8             	mov    %ecx,%r8d
  1045e0:	89 c1                	mov    %eax,%ecx
  1045e2:	bf e0 00 12 00       	mov    $0x1200e0,%edi
  1045e7:	b8 00 00 00 00       	mov    $0x0,%eax
  1045ec:	e8 0d 0c 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

		for(memory_map_t* mmap = cast(memory_map_t*)mbi.mmap_addr;
  1045f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1045f5:	48 83 c0 30          	add    $0x30,%rax
  1045f9:	8b 00                	mov    (%rax),%eax
  1045fb:	89 c0                	mov    %eax,%eax
  1045fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  104601:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  104605:	89 c1                	mov    %eax,%ecx
  104607:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10460b:	8b 50 30             	mov    0x30(%rax),%edx
  10460e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  104612:	8b 40 2c             	mov    0x2c(%rax),%eax
  104615:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  104618:	39 c1                	cmp    %eax,%ecx
  10461a:	0f 92 c0             	setb   %al
  10461d:	83 f0 01             	xor    $0x1,%eax
  104620:	84 c0                	test   %al,%al
  104622:	0f 85 94 00 00 00    	jne    1046bc <cmain+0x693>
			cast(uint)mmap < mbi.mmap_addr + mbi.mmap_length;
			mmap = cast(memory_map_t*)(cast(uint)mmap + mmap.size + uint.sizeof))
		{
			kprintfln(" size = 0x%x, base_addr = 0x%x%x, length = 0x%x%x, type = 0x%x",
  104628:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10462c:	48 83 c0 14          	add    $0x14,%rax
  104630:	8b 38                	mov    (%rax),%edi
  104632:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  104636:	48 83 c0 0c          	add    $0xc,%rax
  10463a:	44 8b 00             	mov    (%rax),%r8d
  10463d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  104641:	48 83 c0 10          	add    $0x10,%rax
  104645:	44 8b 08             	mov    (%rax),%r9d
  104648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10464c:	48 83 c0 04          	add    $0x4,%rax
  104650:	44 8b 10             	mov    (%rax),%r10d
  104653:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  104657:	48 83 c0 08          	add    $0x8,%rax
  10465b:	44 8b 18             	mov    (%rax),%r11d
  10465e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  104662:	8b 08                	mov    (%rax),%ecx
  104664:	48 c7 45 80 3e 00 00 	movq   $0x3e,-0x80(%rbp)
  10466b:	00 
  10466c:	48 c7 45 88 68 72 11 	movq   $0x117268,-0x78(%rbp)
  104673:	00 
  104674:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
  104678:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10467c:	89 7c 24 10          	mov    %edi,0x10(%rsp)
  104680:	44 89 44 24 08       	mov    %r8d,0x8(%rsp)
  104685:	44 89 0c 24          	mov    %r9d,(%rsp)
  104689:	45 89 d1             	mov    %r10d,%r9d
  10468c:	45 89 d8             	mov    %r11d,%r8d
  10468f:	bf a0 01 12 00       	mov    $0x1201a0,%edi
  104694:	b8 00 00 00 00       	mov    $0x0,%eax
  104699:	e8 60 0b 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  10469e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1046a2:	89 c2                	mov    %eax,%edx
  1046a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1046a8:	8b 00                	mov    (%rax),%eax
  1046aa:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  1046ad:	89 c0                	mov    %eax,%eax
  1046af:	48 83 c0 04          	add    $0x4,%rax
  1046b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1046b7:	e9 45 ff ff ff       	jmpq   104601 <cmain+0x5d8>
				cast(uint)mmap.type);
		}
	}

	/// Print out our slogan. Literally, "We came, we saw, we conquered."
	Console.setColors(Color.Yellow, Color.LowBlue);
  1046bc:	be 01 00 00 00       	mov    $0x1,%esi
  1046c1:	bf 0e 00 00 00       	mov    $0xe,%edi
  1046c6:	e8 96 03 00 00       	callq  104a61 <_D3vga7Console9setColorsFE3vga5ColorE3vga5ColorZv>
	kprintfln("\nVenimus, vidimus, vicimus!  --PittGeeks");
  1046cb:	48 c7 45 90 28 00 00 	movq   $0x28,-0x70(%rbp)
  1046d2:	00 
  1046d3:	48 c7 45 98 a8 72 11 	movq   $0x1172a8,-0x68(%rbp)
  1046da:	00 
  1046db:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  1046df:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  1046e3:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1046e8:	b8 00 00 00 00       	mov    $0x0,%eax
  1046ed:	e8 0c 0b 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	Console.resetColors();
  1046f2:	e8 14 03 00 00       	callq  104a0b <_D3vga7Console11resetColorsFZv>

	/// Print out memory information, including the size of system integers. This
	/// will let us debug problems in changing from 32-bit to 64-bit.
	kprintfln("(int*).sizeof == %d", (int*).sizeof);
  1046f7:	48 c7 45 a0 13 00 00 	movq   $0x13,-0x60(%rbp)
  1046fe:	00 
  1046ff:	48 c7 45 a8 d1 72 11 	movq   $0x1172d1,-0x58(%rbp)
  104706:	00 
  104707:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  10470b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  10470f:	b9 08 00 00 00       	mov    $0x8,%ecx
  104714:	bf c0 01 12 00       	mov    $0x1201c0,%edi
  104719:	b8 00 00 00 00       	mov    $0x0,%eax
  10471e:	e8 db 0a 00 00       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	// kprintfln("TESTING SYSCALL INTERRUPT");
	// asm{int 128;}
	
	/// This is alternate code, attempting to call a system call without a 128 interrupt.
	// first, set a syscall type into eax.
	kprintf("SETTING EAX TO 0\n");
  104723:	48 c7 45 b0 11 00 00 	movq   $0x11,-0x50(%rbp)
  10472a:	00 
  10472b:	48 c7 45 b8 e5 72 11 	movq   $0x1172e5,-0x48(%rbp)
  104732:	00 
  104733:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  104737:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  10473b:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  104740:	b8 00 00 00 00       	mov    $0x0,%eax
  104745:	e8 3f 09 00 00       	callq  105089 <_D3vga7Console7kprintfFAaYv>
	asm {
		"mov %0, %%eax":
		/* no output */:
		"r" 1:
		"eax";
	}
  10474a:	ba 01 00 00 00       	mov    $0x1,%edx
  10474f:	89 d0                	mov    %edx,%eax

	kprintf("CALLING THE SYSCALL.\n");
  104751:	48 c7 45 c0 15 00 00 	movq   $0x15,-0x40(%rbp)
  104758:	00 
  104759:	48 c7 45 c8 f7 72 11 	movq   $0x1172f7,-0x38(%rbp)
  104760:	00 
  104761:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  104765:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  104769:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  10476e:	b8 00 00 00 00       	mov    $0x0,%eax
  104773:	e8 11 09 00 00       	callq  105089 <_D3vga7Console7kprintfFAaYv>
	asm {
		"syscall";
	}
  104778:	0f 05                	syscall 
	
	/// CURRENT TEST CODE
	// int a = 0, b = cast(int) addr;
	// int foo = b/a;
	// kprintfln("%d", foo);
}
  10477a:	c9                   	leaveq 
  10477b:	c3                   	retq   

000000000010477c <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv>:
	Params:
		moduleNumber = The number of the module the kernel wishes to execute. Integer value.
		mbi = A pointer to the multiboot information structure, allowing this function
			to interperet the module data properly.
*/
void jumpTo(uint moduleNumber, multiboot_info_t* mbi)
  10477c:	55                   	push   %rbp
  10477d:	48 89 e5             	mov    %rsp,%rbp
  104780:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  104787:	89 7d 9c             	mov    %edi,-0x64(%rbp)
  10478a:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
{
	/// get a pointer to the loaded module.
	module_t* mod = &(cast(module_t*)mbi.mods_addr)[moduleNumber];
  10478e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  104792:	48 83 c0 18          	add    $0x18,%rax
  104796:	8b 00                	mov    (%rax),%eax
  104798:	89 c0                	mov    %eax,%eax
  10479a:	48 89 c2             	mov    %rax,%rdx
  10479d:	8b 45 9c             	mov    -0x64(%rbp),%eax
  1047a0:	48 c1 e0 04          	shl    $0x4,%rax
  1047a4:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  1047a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	/// get the memory address of the module's starting point.
	/// also, get a pointer to the module's ELF header.
	void* start = cast(void*)mod.mod_start;
  1047ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1047b0:	8b 00                	mov    (%rax),%eax
  1047b2:	89 c0                	mov    %eax,%eax
  1047b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	Elf64_Ehdr* header = cast(Elf64_Ehdr*)start;
  1047b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1047bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	/// find all the sections in the module's ELF Section header.
	Elf64_Shdr[] sections = (cast(Elf64_Shdr*)(start + header.e_shoff))[0 .. header.e_shnum];
  1047c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1047c4:	48 83 c0 3c          	add    $0x3c,%rax
  1047c8:	0f b7 00             	movzwl (%rax),%eax
  1047cb:	0f b7 d0             	movzwl %ax,%edx
  1047ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1047d2:	48 83 c0 28          	add    $0x28,%rax
  1047d6:	48 8b 00             	mov    (%rax),%rax
  1047d9:	48 03 45 f0          	add    -0x10(%rbp),%rax
  1047dd:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  1047e1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Elf64_Shdr* strTable = &sections[header.e_shstrndx];
  1047e5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1047e9:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  1047f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1047f4:	48 83 c0 3e          	add    $0x3e,%rax
  1047f8:	0f b7 00             	movzwl (%rax),%eax
  1047fb:	0f b7 c0             	movzwl %ax,%eax
  1047fe:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  104805:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  104809:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
  104810:	73 10                	jae    104822 <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv+0xa6>
  104812:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  104819:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  104820:	eb 22                	jmp    104844 <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv+0xc8>
  104822:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  104829:	00 
  10482a:	48 c7 45 b8 0d 73 11 	movq   $0x11730d,-0x48(%rbp)
  104831:	00 
  104832:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  104836:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10483a:	ba 16 01 00 00       	mov    $0x116,%edx
  10483f:	e8 f1 04 01 00       	callq  114d35 <_d_array_bounds>
  104844:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10484b:	48 c1 e0 06          	shl    $0x6,%rax
  10484f:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  104856:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	
	/// go to the first section in the section header.
	Elf64_Shdr* text = &sections[1];
  10485a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10485e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  104862:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  104866:	48 83 f8 01          	cmp    $0x1,%rax
  10486a:	76 0a                	jbe    104876 <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv+0xfa>
  10486c:	48 c7 45 88 01 00 00 	movq   $0x1,-0x78(%rbp)
  104873:	00 
  104874:	eb 22                	jmp    104898 <_D6kernel6jumpToFkPS9multiboot16multiboot_info_tZv+0x11c>
  104876:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
  10487d:	00 
  10487e:	48 c7 45 c8 0d 73 11 	movq   $0x11730d,-0x38(%rbp)
  104885:	00 
  104886:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10488a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10488e:	ba 19 01 00 00       	mov    $0x119,%edx
  104893:	e8 9d 04 01 00       	callq  114d35 <_d_array_bounds>
  104898:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10489c:	48 c1 e0 06          	shl    $0x6,%rax
  1048a0:	48 03 45 80          	add    -0x80(%rbp),%rax
  1048a4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	/// declare a void function which can be called to jump to the memory position of
	/// __start().
	void function() entry = cast(void function())(start + text.sh_offset);
  1048a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1048ac:	48 83 c0 18          	add    $0x18,%rax
  1048b0:	48 8b 00             	mov    (%rax),%rax
  1048b3:	48 03 45 f0          	add    -0x10(%rbp),%rax
  1048b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	entry();
  1048bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1048bf:	ff d0                	callq  *%rax
}
  1048c1:	c9                   	leaveq 
  1048c2:	c3                   	retq   
  1048c3:	90                   	nop    

00000000001048c4 <_D3vga7Console3clsFZv>:
	private ubyte colors = DefaultColors;

	/**
	This method clears the screen and returns the cursor to its default position.
	*/
	void cls()
  1048c4:	55                   	push   %rbp
  1048c5:	48 89 e5             	mov    %rsp,%rbp
	{
		/// Set all pieces of video memory to nothing.
		for(int i = 0; i < Columns * Lines * 2; i++)
  1048c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  1048cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1048d2:	89 c2                	mov    %eax,%edx
  1048d4:	b8 80 07 00 00       	mov    $0x780,%eax
  1048d9:	01 c0                	add    %eax,%eax
  1048db:	39 c2                	cmp    %eax,%edx
  1048dd:	0f 92 c0             	setb   %al
  1048e0:	83 f0 01             	xor    $0x1,%eax
  1048e3:	84 c0                	test   %al,%al
  1048e5:	75 1d                	jne    104904 <_D3vga7Console3clsFZv+0x40>
			volatile *(VideoMem + i) = 0;
  1048e7:	48 8b 15 f2 b8 01 00 	mov    0x1b8f2(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  1048ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1048f1:	48 98                	cltq   
  1048f3:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  1048f7:	c6 00 00             	movb   $0x0,(%rax)
  1048fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1048fd:	ff c0                	inc    %eax
  1048ff:	89 45 fc             	mov    %eax,-0x4(%rbp)
  104902:	eb cb                	jmp    1048cf <_D3vga7Console3clsFZv+0xb>

		xpos = 0;
  104904:	c7 05 72 f5 01 00 00 	movl   $0x0,0x1f572(%rip)        # 123e80 <_D3vga7Console4xposi>
  10490b:	00 00 00 
		ypos = 0;
  10490e:	c7 05 6c f5 01 00 00 	movl   $0x0,0x1f56c(%rip)        # 123e84 <_D3vga7Console4yposi>
  104915:	00 00 00 
	}
  104918:	c9                   	leaveq 
  104919:	c3                   	retq   

000000000010491a <_D3vga7Console7putcharFaZv>:
	/**
	This method places a character (c) on the screen at the current cursor location.
		Params:
			c = The character you wish to print to the screen.
	*/
	void putchar(char c)
  10491a:	55                   	push   %rbp
  10491b:	48 89 e5             	mov    %rsp,%rbp
  10491e:	48 83 ec 10          	sub    $0x10,%rsp
  104922:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		/// Check to make sure that c is not a standard escape sequence.
		if(c == '\n' || c == '\r')
  104926:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10492a:	0f b6 c0             	movzbl %al,%eax
  10492d:	83 f8 0a             	cmp    $0xa,%eax
  104930:	74 0c                	je     10493e <_D3vga7Console7putcharFaZv+0x24>
  104932:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  104936:	0f b6 c0             	movzbl %al,%eax
  104939:	83 f8 0d             	cmp    $0xd,%eax
  10493c:	75 36                	jne    104974 <_D3vga7Console7putcharFaZv+0x5a>
		{
			/// If it is, increase the cursor's y-position, thus creating a new line.
			newline:
				xpos = 0;
  10493e:	c7 05 38 f5 01 00 00 	movl   $0x0,0x1f538(%rip)        # 123e80 <_D3vga7Console4xposi>
  104945:	00 00 00 
				ypos++;
  104948:	8b 05 36 f5 01 00    	mov    0x1f536(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  10494e:	ff c0                	inc    %eax
  104950:	89 05 2e f5 01 00    	mov    %eax,0x1f52e(%rip)        # 123e84 <_D3vga7Console4yposi>

				/// If the printing has reached the end of the screen, set the y-cursor to the top of the screen.
				if(ypos >= Lines)
  104956:	8b 05 28 f5 01 00    	mov    0x1f528(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  10495c:	83 f8 18             	cmp    $0x18,%eax
  10495f:	0f 82 a4 00 00 00    	jb     104a09 <_D3vga7Console7putcharFaZv+0xef>
					scrollDisplay(1);
  104965:	bf 01 00 00 00       	mov    $0x1,%edi
  10496a:	e8 18 01 00 00       	callq  104a87 <_D3vga7Console13scrollDisplayFiZv>

				return;
  10496f:	e9 95 00 00 00       	jmpq   104a09 <_D3vga7Console7putcharFaZv+0xef>
		}

		/// Set the current piece of video memory to the character to print.
		volatile *(VideoMem + (xpos + ypos * Columns) * 2) = c & 0xFF;
  104974:	48 8b 35 65 b8 01 00 	mov    0x1b865(%rip),%rsi        # 1201e0 <_D3vga7Console8VideoMemPh>
  10497b:	8b 05 ff f4 01 00    	mov    0x1f4ff(%rip),%eax        # 123e80 <_D3vga7Console4xposi>
  104981:	89 c1                	mov    %eax,%ecx
  104983:	8b 05 fb f4 01 00    	mov    0x1f4fb(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  104989:	89 c2                	mov    %eax,%edx
  10498b:	c1 e2 04             	shl    $0x4,%edx
  10498e:	8d 04 95 00 00 00 00 	lea    0x0(,%rdx,4),%eax
  104995:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  104998:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10499b:	01 c0                	add    %eax,%eax
  10499d:	89 c0                	mov    %eax,%eax
  10499f:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  1049a3:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  1049a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1049ac:	21 d0                	and    %edx,%eax
  1049ae:	88 01                	mov    %al,(%rcx)
		volatile *(VideoMem + (xpos + ypos * Columns) * 2 + 1) = colors;
  1049b0:	48 8b 35 29 b8 01 00 	mov    0x1b829(%rip),%rsi        # 1201e0 <_D3vga7Console8VideoMemPh>
  1049b7:	8b 05 c3 f4 01 00    	mov    0x1f4c3(%rip),%eax        # 123e80 <_D3vga7Console4xposi>
  1049bd:	89 c1                	mov    %eax,%ecx
  1049bf:	8b 05 bf f4 01 00    	mov    0x1f4bf(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  1049c5:	89 c2                	mov    %eax,%edx
  1049c7:	c1 e2 04             	shl    $0x4,%edx
  1049ca:	8d 04 95 00 00 00 00 	lea    0x0(,%rdx,4),%eax
  1049d1:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  1049d4:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  1049d7:	01 c0                	add    %eax,%eax
  1049d9:	89 c0                	mov    %eax,%eax
  1049db:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  1049df:	48 8d 50 01          	lea    0x1(%rax),%rdx
  1049e3:	0f b6 05 fe b7 01 00 	movzbl 0x1b7fe(%rip),%eax        # 1201e8 <_D3vga7Console6colorsh>
  1049ea:	88 02                	mov    %al,(%rdx)
	
		/// Increase the cursor position.
		xpos++;
  1049ec:	8b 05 8e f4 01 00    	mov    0x1f48e(%rip),%eax        # 123e80 <_D3vga7Console4xposi>
  1049f2:	ff c0                	inc    %eax
  1049f4:	89 05 86 f4 01 00    	mov    %eax,0x1f486(%rip)        # 123e80 <_D3vga7Console4xposi>
	
		/// If you have reached the end of the screen, create a new line (declared above).
		if(xpos >= Columns)
  1049fa:	8b 05 80 f4 01 00    	mov    0x1f480(%rip),%eax        # 123e80 <_D3vga7Console4xposi>
  104a00:	83 f8 50             	cmp    $0x50,%eax
  104a03:	0f 83 35 ff ff ff    	jae    10493e <_D3vga7Console7putcharFaZv+0x24>
			goto newline;
	}
  104a09:	c9                   	leaveq 
  104a0a:	c3                   	retq   

0000000000104a0b <_D3vga7Console11resetColorsFZv>:
	
	/**
	This function sets the console colors back to their defaults.
	*/
	void resetColors()
  104a0b:	55                   	push   %rbp
  104a0c:	48 89 e5             	mov    %rsp,%rbp
	{
	    colors = DefaultColors;
  104a0f:	c6 05 d2 b7 01 00 07 	movb   $0x7,0x1b7d2(%rip)        # 1201e8 <_D3vga7Console6colorsh>
	}
  104a16:	c9                   	leaveq 
  104a17:	c3                   	retq   

0000000000104a18 <_D3vga7Console12setForeColorFE3vga5ColorZv>:
	/**
	This function sets the forecolor (font color) to the given color.
		Params:
			newcol = The new color to set the font color to.
	*/
	void setForeColor(Color newcol)
  104a18:	55                   	push   %rbp
  104a19:	48 89 e5             	mov    %rsp,%rbp
  104a1c:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		colors &= newcol | 0xF0;
  104a20:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  104a24:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  104a29:	09 c2                	or     %eax,%edx
  104a2b:	0f b6 05 b6 b7 01 00 	movzbl 0x1b7b6(%rip),%eax        # 1201e8 <_D3vga7Console6colorsh>
  104a32:	21 d0                	and    %edx,%eax
  104a34:	88 05 ae b7 01 00    	mov    %al,0x1b7ae(%rip)        # 1201e8 <_D3vga7Console6colorsh>
	}
  104a3a:	c9                   	leaveq 
  104a3b:	c3                   	retq   

0000000000104a3c <_D3vga7Console12setBackColorFE3vga5ColorZv>:
	/**
	 Sets the current text background to a new color.
		Params:
			newcol = The new color to set the background color to.
	*/
	void setBackColor(Color newcol)
  104a3c:	55                   	push   %rbp
  104a3d:	48 89 e5             	mov    %rsp,%rbp
  104a40:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	{
		colors &= (newcol << 4) | 0x0F;
  104a44:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  104a48:	c1 e0 04             	shl    $0x4,%eax
  104a4b:	89 c2                	mov    %eax,%edx
  104a4d:	83 ca 0f             	or     $0xf,%edx
  104a50:	0f b6 05 91 b7 01 00 	movzbl 0x1b791(%rip),%eax        # 1201e8 <_D3vga7Console6colorsh>
  104a57:	21 d0                	and    %edx,%eax
  104a59:	88 05 89 b7 01 00    	mov    %al,0x1b789(%rip)        # 1201e8 <_D3vga7Console6colorsh>
	}
  104a5f:	c9                   	leaveq 
  104a60:	c3                   	retq   

0000000000104a61 <_D3vga7Console9setColorsFE3vga5ColorE3vga5ColorZv>:
	Allows, in one function call, to set both the background and text color.
		Params:
			forecolor = The color to set the text color to.
			backcolor = The color to set the background color to.
	*/
	void setColors(Color forecolor, Color backcolor)
  104a61:	55                   	push   %rbp
  104a62:	48 89 e5             	mov    %rsp,%rbp
  104a65:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
  104a69:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
	{
		colors = (forecolor & 0x0F) | (backcolor << 4);
  104a6d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  104a71:	89 c2                	mov    %eax,%edx
  104a73:	83 e2 0f             	and    $0xf,%edx
  104a76:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  104a7a:	c1 e0 04             	shl    $0x4,%eax
  104a7d:	09 d0                	or     %edx,%eax
  104a7f:	88 05 63 b7 01 00    	mov    %al,0x1b763(%rip)        # 1201e8 <_D3vga7Console6colorsh>
	}
  104a85:	c9                   	leaveq 
  104a86:	c3                   	retq   

0000000000104a87 <_D3vga7Console13scrollDisplayFiZv>:
	the length of a standard screen.
		Params:
			numlines = The number of lines that should be added to the bottom of the screen
				after the scrolling is complete.
	*/
	void scrollDisplay(int numlines)
  104a87:	55                   	push   %rbp
  104a88:	48 89 e5             	mov    %rsp,%rbp
  104a8b:	48 83 ec 28          	sub    $0x28,%rsp
  104a8f:	89 7d dc             	mov    %edi,-0x24(%rbp)
	{
		/// The function received no lines. Do nothing.
		if(numlines <= 0)
  104a92:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  104a96:	0f 8e 79 01 00 00    	jle    104c15 <_D3vga7Console13scrollDisplayFiZv+0x18e>
			return;
	
		/// If you cannot increase that far, clear the screen, instead of using the processor
		/// power to go through each line.
		if(numlines >= Lines)
  104a9c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  104a9f:	83 f8 18             	cmp    $0x18,%eax
  104aa2:	72 0a                	jb     104aae <_D3vga7Console13scrollDisplayFiZv+0x27>
		{
			cls();
  104aa4:	e8 1b fe ff ff       	callq  1048c4 <_D3vga7Console3clsFZv>
			return;
  104aa9:	e9 67 01 00 00       	jmpq   104c15 <_D3vga7Console13scrollDisplayFiZv+0x18e>
		}

		int cury = 0;
  104aae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
		int offset1 = 0;
  104ab5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
		int offset2 = numlines * Columns;
  104abc:	8b 45 dc             	mov    -0x24(%rbp),%eax
  104abf:	89 c2                	mov    %eax,%edx
  104ac1:	c1 e2 04             	shl    $0x4,%edx
  104ac4:	8d 04 95 00 00 00 00 	lea    0x0(,%rdx,4),%eax
  104acb:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  104ace:	89 45 ec             	mov    %eax,-0x14(%rbp)

		/// Go through everything in memory and copy it the proper amount
		/// to increase the number of lines on the screen.
		for(; cury < Lines - numlines; cury++)
  104ad1:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  104ad4:	8b 55 dc             	mov    -0x24(%rbp),%edx
  104ad7:	b8 18 00 00 00       	mov    $0x18,%eax
  104adc:	29 d0                	sub    %edx,%eax
  104ade:	39 c1                	cmp    %eax,%ecx
  104ae0:	0f 92 c0             	setb   %al
  104ae3:	83 f0 01             	xor    $0x1,%eax
  104ae6:	84 c0                	test   %al,%al
  104ae8:	0f 85 97 00 00 00    	jne    104b85 <_D3vga7Console13scrollDisplayFiZv+0xfe>
		{
			for(int curx = 0; curx < Columns; curx++)
  104aee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  104af5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  104af8:	83 f8 4f             	cmp    $0x4f,%eax
  104afb:	0f 96 c0             	setbe  %al
  104afe:	83 f0 01             	xor    $0x1,%eax
  104b01:	84 c0                	test   %al,%al
  104b03:	75 6f                	jne    104b74 <_D3vga7Console13scrollDisplayFiZv+0xed>
			{
				*(VideoMem + (curx + offset1) * 2) = *(VideoMem + (curx + offset1 + offset2) * 2);
  104b05:	48 8b 15 d4 b6 01 00 	mov    0x1b6d4(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104b0c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104b0f:	03 45 f8             	add    -0x8(%rbp),%eax
  104b12:	01 c0                	add    %eax,%eax
  104b14:	48 98                	cltq   
  104b16:	48 01 c2             	add    %rax,%rdx
  104b19:	48 8b 0d c0 b6 01 00 	mov    0x1b6c0(%rip),%rcx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104b20:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104b23:	03 45 f8             	add    -0x8(%rbp),%eax
  104b26:	03 45 ec             	add    -0x14(%rbp),%eax
  104b29:	01 c0                	add    %eax,%eax
  104b2b:	48 98                	cltq   
  104b2d:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  104b31:	0f b6 00             	movzbl (%rax),%eax
  104b34:	88 02                	mov    %al,(%rdx)
				*(VideoMem + (curx + offset1) * 2 + 1) = *(VideoMem + (curx + offset1 + offset2) * 2 + 1);
  104b36:	48 8b 15 a3 b6 01 00 	mov    0x1b6a3(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104b3d:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104b40:	03 45 f8             	add    -0x8(%rbp),%eax
  104b43:	01 c0                	add    %eax,%eax
  104b45:	48 98                	cltq   
  104b47:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  104b4b:	48 8d 48 01          	lea    0x1(%rax),%rcx
  104b4f:	48 8b 15 8a b6 01 00 	mov    0x1b68a(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104b56:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104b59:	03 45 f8             	add    -0x8(%rbp),%eax
  104b5c:	03 45 ec             	add    -0x14(%rbp),%eax
  104b5f:	01 c0                	add    %eax,%eax
  104b61:	48 98                	cltq   
  104b63:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  104b67:	48 ff c0             	inc    %rax
  104b6a:	0f b6 00             	movzbl (%rax),%eax
  104b6d:	88 01                	mov    %al,(%rcx)
  104b6f:	ff 45 f8             	incl   -0x8(%rbp)
  104b72:	eb 81                	jmp    104af5 <_D3vga7Console13scrollDisplayFiZv+0x6e>
			}

			offset1 += Columns;
  104b74:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104b77:	83 c0 50             	add    $0x50,%eax
  104b7a:	89 45 f0             	mov    %eax,-0x10(%rbp)
  104b7d:	ff 45 f4             	incl   -0xc(%rbp)
  104b80:	e9 4c ff ff ff       	jmpq   104ad1 <_D3vga7Console13scrollDisplayFiZv+0x4a>
		}

		for(; cury < Lines; cury++)
  104b85:	8b 45 f4             	mov    -0xc(%rbp),%eax
  104b88:	83 f8 17             	cmp    $0x17,%eax
  104b8b:	0f 96 c0             	setbe  %al
  104b8e:	83 f0 01             	xor    $0x1,%eax
  104b91:	84 c0                	test   %al,%al
  104b93:	75 5d                	jne    104bf2 <_D3vga7Console13scrollDisplayFiZv+0x16b>
		{
			for(int curx = 0; curx < Columns; curx++)
  104b95:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  104b9c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  104b9f:	83 f8 4f             	cmp    $0x4f,%eax
  104ba2:	0f 96 c0             	setbe  %al
  104ba5:	83 f0 01             	xor    $0x1,%eax
  104ba8:	84 c0                	test   %al,%al
  104baa:	75 38                	jne    104be4 <_D3vga7Console13scrollDisplayFiZv+0x15d>
			{
				*(VideoMem + (curx + offset1) * 2) = 0x00;
  104bac:	48 8b 15 2d b6 01 00 	mov    0x1b62d(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104bb3:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104bb6:	03 45 fc             	add    -0x4(%rbp),%eax
  104bb9:	01 c0                	add    %eax,%eax
  104bbb:	48 98                	cltq   
  104bbd:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  104bc1:	c6 00 00             	movb   $0x0,(%rax)
				*(VideoMem + (curx + offset1) * 2 + 1) = 0x00;
  104bc4:	48 8b 15 15 b6 01 00 	mov    0x1b615(%rip),%rdx        # 1201e0 <_D3vga7Console8VideoMemPh>
  104bcb:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104bce:	03 45 fc             	add    -0x4(%rbp),%eax
  104bd1:	01 c0                	add    %eax,%eax
  104bd3:	48 98                	cltq   
  104bd5:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  104bd9:	48 ff c0             	inc    %rax
  104bdc:	c6 00 00             	movb   $0x0,(%rax)
  104bdf:	ff 45 fc             	incl   -0x4(%rbp)
  104be2:	eb b8                	jmp    104b9c <_D3vga7Console13scrollDisplayFiZv+0x115>
			}

			offset1 += Columns;
  104be4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  104be7:	83 c0 50             	add    $0x50,%eax
  104bea:	89 45 f0             	mov    %eax,-0x10(%rbp)
  104bed:	ff 45 f4             	incl   -0xc(%rbp)
  104bf0:	eb 93                	jmp    104b85 <_D3vga7Console13scrollDisplayFiZv+0xfe>
	    }
	
		ypos -= numlines;
  104bf2:	8b 05 8c f2 01 00    	mov    0x1f28c(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  104bf8:	2b 45 dc             	sub    -0x24(%rbp),%eax
  104bfb:	89 05 83 f2 01 00    	mov    %eax,0x1f283(%rip)        # 123e84 <_D3vga7Console4yposi>
	
		if(ypos < 0)
  104c01:	8b 05 7d f2 01 00    	mov    0x1f27d(%rip),%eax        # 123e84 <_D3vga7Console4yposi>
  104c07:	85 c0                	test   %eax,%eax
  104c09:	79 0a                	jns    104c15 <_D3vga7Console13scrollDisplayFiZv+0x18e>
			ypos = 0;
  104c0b:	c7 05 6f f2 01 00 00 	movl   $0x0,0x1f26f(%rip)        # 123e84 <_D3vga7Console4yposi>
  104c12:	00 00 00 
	}
  104c15:	c9                   	leaveq 
  104c16:	c3                   	retq   

0000000000104c17 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv>:
			arguments = A set of arguments that should be printed into the string, depending on which escape sequences have been used.
				E.G. if a %d escape sequence is included in the string, an integer should be passed as an argument.
			argptr = A variatic list pointing to the actual values of the arguments. Because this is variatic, it has an indeterminant length
				at runtime.
	*/
	void kvprintf(char[] format, TypeInfo[] arguments, va_list argptr)
  104c17:	55                   	push   %rbp
  104c18:	48 89 e5             	mov    %rsp,%rbp
  104c1b:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  104c22:	49 89 d1             	mov    %rdx,%r9
  104c25:	4c 89 85 08 ff ff ff 	mov    %r8,-0xf8(%rbp)
  104c2c:	48 89 f8             	mov    %rdi,%rax
  104c2f:	48 89 f2             	mov    %rsi,%rdx
  104c32:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  104c39:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  104c40:	4c 89 c8             	mov    %r9,%rax
  104c43:	48 89 ca             	mov    %rcx,%rdx
  104c46:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  104c4d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
	{
		char[20] buf;
  104c54:	48 c7 85 60 ff ff ff 	movq   $0x14,-0xa0(%rbp)
  104c5b:	14 00 00 00 
  104c5f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  104c66:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  104c6d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  104c74:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  104c78:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  104c7f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  104c83:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  104c88:	0f 95 c0             	setne  %al
  104c8b:	83 f0 01             	xor    $0x1,%eax
  104c8e:	84 c0                	test   %al,%al
  104c90:	75 11                	jne    104ca3 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x8c>
  104c92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  104c96:	c6 00 ff             	movb   $0xff,(%rax)
  104c99:	48 ff 45 c8          	incq   -0x38(%rbp)
  104c9d:	48 ff 4d d0          	decq   -0x30(%rbp)
  104ca1:	eb e0                	jmp    104c83 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x6c>

		for(int i = 0; i < format.length; i++)
  104ca3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  104caa:	8b 45 d8             	mov    -0x28(%rbp),%eax
  104cad:	48 63 d0             	movslq %eax,%rdx
  104cb0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  104cb7:	48 39 c2             	cmp    %rax,%rdx
  104cba:	0f 92 c0             	setb   %al
  104cbd:	83 f0 01             	xor    $0x1,%eax
  104cc0:	84 c0                	test   %al,%al
  104cc2:	0f 85 bf 03 00 00    	jne    105087 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x470>
		{
			char c = format[i];
  104cc8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  104ccf:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
  104cd6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  104cd9:	48 63 d0             	movslq %eax,%rdx
  104cdc:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  104ce3:	48 39 c2             	cmp    %rax,%rdx
  104ce6:	73 0e                	jae    104cf6 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0xdf>
  104ce8:	8b 45 d8             	mov    -0x28(%rbp),%eax
  104ceb:	48 98                	cltq   
  104ced:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  104cf4:	eb 2e                	jmp    104d24 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x10d>
  104cf6:	48 c7 85 70 ff ff ff 	movq   $0x5,-0x90(%rbp)
  104cfd:	05 00 00 00 
  104d01:	48 c7 85 78 ff ff ff 	movq   $0x117321,-0x88(%rbp)
  104d08:	21 73 11 00 
  104d0c:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  104d13:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  104d1a:	ba d8 00 00 00       	mov    $0xd8,%edx
  104d1f:	e8 11 00 01 00       	callq  114d35 <_d_array_bounds>
  104d24:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  104d2b:	48 03 85 a0 fe ff ff 	add    -0x160(%rbp),%rax
  104d32:	0f b6 00             	movzbl (%rax),%eax
  104d35:	88 45 df             	mov    %al,-0x21(%rbp)

			if(c != '%')
  104d38:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  104d3c:	83 f8 25             	cmp    $0x25,%eax
  104d3f:	74 0e                	je     104d4f <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x138>
				putchar(c);
  104d41:	0f b6 7d df          	movzbl -0x21(%rbp),%edi
  104d45:	e8 d0 fb ff ff       	callq  10491a <_D3vga7Console7putcharFaZv>
  104d4a:	e9 30 03 00 00       	jmpq   10507f <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x468>
			else
			{
				char[] p;
  104d4f:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  104d56:	00 00 00 00 
  104d5a:	48 c7 85 38 ff ff ff 	movq   $0x0,-0xc8(%rbp)
  104d61:	00 00 00 00 
				c = format[++i];
  104d65:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  104d6c:	48 89 95 b0 fe ff ff 	mov    %rdx,-0x150(%rbp)
  104d73:	ff 45 d8             	incl   -0x28(%rbp)
  104d76:	8b 45 d8             	mov    -0x28(%rbp),%eax
  104d79:	48 98                	cltq   
  104d7b:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  104d82:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  104d89:	48 39 85 c0 fe ff ff 	cmp    %rax,-0x140(%rbp)
  104d90:	73 10                	jae    104da2 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x18b>
  104d92:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
  104d99:	48 89 8d b8 fe ff ff 	mov    %rcx,-0x148(%rbp)
  104da0:	eb 22                	jmp    104dc4 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x1ad>
  104da2:	48 c7 45 80 05 00 00 	movq   $0x5,-0x80(%rbp)
  104da9:	00 
  104daa:	48 c7 45 88 21 73 11 	movq   $0x117321,-0x78(%rbp)
  104db1:	00 
  104db2:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  104db6:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  104dba:	ba df 00 00 00       	mov    $0xdf,%edx
  104dbf:	e8 71 ff 00 00       	callq  114d35 <_d_array_bounds>
  104dc4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  104dcb:	48 03 85 b0 fe ff ff 	add    -0x150(%rbp),%rax
  104dd2:	0f b6 00             	movzbl (%rax),%eax
  104dd5:	88 45 df             	mov    %al,-0x21(%rbp)
								putchar(ch);
							break;

					default:
						/// This is unknown. Print out nothing.
						break;
  104dd8:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  104ddc:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
  104de2:	83 bd cc fe ff ff 73 	cmpl   $0x73,-0x134(%rbp)
  104de9:	0f 84 e6 00 00 00    	je     104ed5 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x2be>
  104def:	83 bd cc fe ff ff 73 	cmpl   $0x73,-0x134(%rbp)
  104df6:	7f 0e                	jg     104e06 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x1ef>
  104df8:	83 bd cc fe ff ff 64 	cmpl   $0x64,-0x134(%rbp)
  104dff:	74 1c                	je     104e1d <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x206>
  104e01:	e9 79 02 00 00       	jmpq   10507f <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x468>
  104e06:	83 bd cc fe ff ff 75 	cmpl   $0x75,-0x134(%rbp)
  104e0d:	74 0e                	je     104e1d <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x206>
  104e0f:	83 bd cc fe ff ff 78 	cmpl   $0x78,-0x134(%rbp)
  104e16:	74 05                	je     104e1d <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x206>
  104e18:	e9 62 02 00 00       	jmpq   10507f <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x468>
				switch (c)
				{
					case 'd':
					case 'u':
					case 'x':
						p = itoa(buf, c, va_arg!(int)(argptr));
  104e1d:	48 8b 95 08 ff ff ff 	mov    -0xf8(%rbp),%rdx
  104e24:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
  104e2b:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  104e32:	8b 01                	mov    (%rcx),%eax
  104e34:	83 f8 30             	cmp    $0x30,%eax
  104e37:	73 37                	jae    104e70 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x259>
  104e39:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  104e40:	48 8b 50 10          	mov    0x10(%rax),%rdx
  104e44:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  104e4b:	8b 01                	mov    (%rcx),%eax
  104e4d:	89 c0                	mov    %eax,%eax
  104e4f:	48 01 c2             	add    %rax,%rdx
  104e52:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
  104e59:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  104e60:	8b 02                	mov    (%rdx),%eax
  104e62:	83 c0 08             	add    $0x8,%eax
  104e65:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  104e6c:	89 01                	mov    %eax,(%rcx)
  104e6e:	eb 21                	jmp    104e91 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x27a>
  104e70:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  104e77:	48 8b 42 08          	mov    0x8(%rdx),%rax
  104e7b:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  104e82:	48 83 c0 08          	add    $0x8,%rax
  104e86:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
  104e8d:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104e91:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  104e98:	8b 00                	mov    (%rax),%eax
  104e9a:	48 63 c8             	movslq %eax,%rcx
  104e9d:	0f b6 7d df          	movzbl -0x21(%rbp),%edi
  104ea1:	48 c7 45 90 14 00 00 	movq   $0x14,-0x70(%rbp)
  104ea8:	00 
  104ea9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  104eb0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  104eb4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  104ebb:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  104ebf:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  104ec3:	49 89 c8             	mov    %rcx,%r8
  104ec6:	89 f9                	mov    %edi,%ecx
  104ec8:	48 89 c7             	mov    %rax,%rdi
  104ecb:	e8 ad 04 00 00       	callq  10537d <_D3vga4itoaFAaalZAa>
						goto string;
  104ed0:	e9 5c 01 00 00       	jmpq   105031 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x41a>

					case 's':
						p = va_arg!(char[])(argptr);
  104ed5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  104edc:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  104ee3:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  104eea:	8b 02                	mov    (%rdx),%eax
  104eec:	83 f8 30             	cmp    $0x30,%eax
  104eef:	73 37                	jae    104f28 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x311>
  104ef1:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  104ef8:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  104efc:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  104f03:	8b 01                	mov    (%rcx),%eax
  104f05:	89 c0                	mov    %eax,%eax
  104f07:	48 01 c2             	add    %rax,%rdx
  104f0a:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
  104f11:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  104f18:	8b 02                	mov    (%rdx),%eax
  104f1a:	83 c0 08             	add    $0x8,%eax
  104f1d:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  104f24:	89 01                	mov    %eax,(%rcx)
  104f26:	eb 21                	jmp    104f49 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x332>
  104f28:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  104f2f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  104f33:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  104f3a:	48 83 c0 08          	add    $0x8,%rax
  104f3e:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  104f45:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104f49:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  104f50:	48 8b 00             	mov    (%rax),%rax
  104f53:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  104f57:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  104f5e:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  104f65:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  104f6c:	8b 02                	mov    (%rdx),%eax
  104f6e:	83 f8 30             	cmp    $0x30,%eax
  104f71:	73 37                	jae    104faa <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x393>
  104f73:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  104f7a:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  104f7e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  104f85:	8b 01                	mov    (%rcx),%eax
  104f87:	89 c0                	mov    %eax,%eax
  104f89:	48 01 c2             	add    %rax,%rdx
  104f8c:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  104f93:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  104f9a:	8b 02                	mov    (%rdx),%eax
  104f9c:	83 c0 08             	add    $0x8,%eax
  104f9f:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  104fa6:	89 01                	mov    %eax,(%rcx)
  104fa8:	eb 21                	jmp    104fcb <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x3b4>
  104faa:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  104fb1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  104fb5:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  104fbc:	48 83 c0 08          	add    $0x8,%rax
  104fc0:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  104fc7:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104fcb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  104fd2:	48 8b 00             	mov    (%rax),%rax
  104fd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  104fd9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  104fdd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  104fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  104fe5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  104fe9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  104fed:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  104ff1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  104ff5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  104ff9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  104ffd:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  105004:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  105008:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
						if(p.ptr is null)
  10500f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  105016:	48 85 c0             	test   %rax,%rax
  105019:	75 16                	jne    105031 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x41a>
							p = "(null)";
  10501b:	48 c7 85 30 ff ff ff 	movq   $0x6,-0xd0(%rbp)
  105022:	06 00 00 00 
  105026:	48 c7 85 38 ff ff ff 	movq   $0x117327,-0xc8(%rbp)
  10502d:	27 73 11 00 

						string:
							foreach(ch; p)
  105031:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  105038:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  10503f:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  105046:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  10504a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  105051:	48 03 85 00 ff ff ff 	add    -0x100(%rbp),%rax
  105058:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10505c:	0f 95 c0             	setne  %al
  10505f:	83 f0 01             	xor    $0x1,%eax
  105062:	84 c0                	test   %al,%al
  105064:	75 19                	jne    10507f <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x468>
  105066:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10506a:	0f b6 00             	movzbl (%rax),%eax
  10506d:	88 45 ff             	mov    %al,-0x1(%rbp)
								putchar(ch);
  105070:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  105074:	e8 a1 f8 ff ff       	callq  10491a <_D3vga7Console7putcharFaZv>
  105079:	48 ff 45 f0          	incq   -0x10(%rbp)
  10507d:	eb cb                	jmp    10504a <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x433>

		for(int i = 0; i < format.length; i++)
		{
			char c = format[i];

			if(c != '%')
  10507f:	ff 45 d8             	incl   -0x28(%rbp)
  105082:	e9 23 fc ff ff       	jmpq   104caa <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv+0x93>
						/// This is unknown. Print out nothing.
						break;
				}
			}
		}
	}
  105087:	c9                   	leaveq 
  105088:	c3                   	retq   

0000000000105089 <_D3vga7Console7kprintfFAaYv>:
		Params:
			format = the actual string, containing information and escape sequences.
			... = a variatic list containing the variables that correspond to the escape sequences in "format."
				E.G. in the "format" string "The number is %d," %d must have an integer tied to it to be printed.
	*/
	void kprintf(char[] format, ...)
  105089:	55                   	push   %rbp
  10508a:	48 89 e5             	mov    %rsp,%rbp
  10508d:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
  105094:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  10509b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  1050a2:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  1050a9:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  1050b0:	0f b6 c0             	movzbl %al,%eax
  1050b3:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  1050ba:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  1050c1:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  1050c8:	00 
  1050c9:	48 c7 85 e0 fe ff ff 	movq   $0x105108,-0x120(%rbp)
  1050d0:	08 51 10 00 
  1050d4:	48 29 85 e0 fe ff ff 	sub    %rax,-0x120(%rbp)
  1050db:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  1050df:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  1050e6:	ff e1                	jmpq   *%rcx
  1050e8:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  1050ec:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  1050f0:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  1050f4:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  1050f8:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  1050fc:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  105100:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  105104:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  105108:	48 89 f0             	mov    %rsi,%rax
  10510b:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  105112:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
	{
		va_list begin = void;
		va_start(begin, format);
		kvprintf(format, _arguments, begin);
  105119:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  105120:	c7 00 18 00 00 00    	movl   $0x18,(%rax)
  105126:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  10512d:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  105134:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  10513b:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  10513f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  105143:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  10514a:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  105151:	48 89 48 10          	mov    %rcx,0x10(%rax)
		Params:
			format = the actual string, containing information and escape sequences.
			... = a variatic list containing the variables that correspond to the escape sequences in "format."
				E.G. in the "format" string "The number is %d," %d must have an integer tied to it to be printed.
	*/
	void kprintf(char[] format, ...)
  105155:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  10515c:	48 8b 42 10          	mov    0x10(%rdx),%rax
  105160:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  105167:	48 8b 42 18          	mov    0x18(%rdx),%rax
  10516b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	{
		va_list begin = void;
		va_start(begin, format);
  105172:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  105179:	c7 00 18 00 00 00    	movl   $0x18,(%rax)
  10517f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  105186:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  10518d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  105194:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  105198:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10519c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  1051a3:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  1051aa:	48 89 48 10          	mov    %rcx,0x10(%rax)
		kvprintf(format, _arguments, begin);
  1051ae:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  1051b5:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  1051bc:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  1051c3:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
  1051ca:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
  1051d1:	49 89 c0             	mov    %rax,%r8
  1051d4:	e8 3e fa ff ff       	callq  104c17 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv>
	}
  1051d9:	eb 21                	jmp    1051fc <_D3vga7Console7kprintfFAaYv+0x173>
  1051db:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  1051e2:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
	*/
	void kprintf(char[] format, ...)
	{
		va_list begin = void;
		va_start(begin, format);
		kvprintf(format, _arguments, begin);
  1051e9:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  1051f0:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
  1051f7:	e8 ca fe 00 00       	callq  1150c6 <_Unwind_Resume>
	}
  1051fc:	c9                   	leaveq 
  1051fd:	c3                   	retq   

00000000001051fe <_D3vga7Console9kprintflnFAaYv>:
	
	/*
	This function works in much the same way as kprintf, but adds a newline after printing.
	See kprintf for information on input and output values.
	*/
	void kprintfln(char[] format, ...)
  1051fe:	55                   	push   %rbp
  1051ff:	48 89 e5             	mov    %rsp,%rbp
  105202:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
  105209:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  105210:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  105217:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10521e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  105225:	0f b6 c0             	movzbl %al,%eax
  105228:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  10522f:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  105236:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  10523d:	00 
  10523e:	48 c7 85 e0 fe ff ff 	movq   $0x10527d,-0x120(%rbp)
  105245:	7d 52 10 00 
  105249:	48 29 85 e0 fe ff ff 	sub    %rax,-0x120(%rbp)
  105250:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  105254:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
  10525b:	ff e1                	jmpq   *%rcx
  10525d:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  105261:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  105265:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  105269:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  10526d:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  105271:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  105275:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  105279:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  10527d:	48 89 f0             	mov    %rsi,%rax
  105280:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  105287:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
	{
		va_list begin = void;
		va_start(begin, format);
		kvprintf(format, _arguments, begin);
		putchar('\n');
  10528e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  105295:	c7 00 18 00 00 00    	movl   $0x18,(%rax)
  10529b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  1052a2:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  1052a9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  1052b0:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  1052b4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  1052b8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  1052bf:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  1052c6:	48 89 48 10          	mov    %rcx,0x10(%rax)
	
	/*
	This function works in much the same way as kprintf, but adds a newline after printing.
	See kprintf for information on input and output values.
	*/
	void kprintfln(char[] format, ...)
  1052ca:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  1052d1:	48 8b 42 10          	mov    0x10(%rdx),%rax
  1052d5:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  1052dc:	48 8b 42 18          	mov    0x18(%rdx),%rax
  1052e0:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
	{
		va_list begin = void;
		va_start(begin, format);
  1052e7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  1052ee:	c7 00 18 00 00 00    	movl   $0x18,(%rax)
  1052f4:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  1052fb:	c7 40 04 30 00 00 00 	movl   $0x30,0x4(%rax)
  105302:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  105309:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  10530d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  105311:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  105318:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  10531f:	48 89 48 10          	mov    %rcx,0x10(%rax)
		kvprintf(format, _arguments, begin);
  105323:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  10532a:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  105331:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  105338:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
  10533f:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
  105346:	49 89 c0             	mov    %rax,%r8
  105349:	e8 c9 f8 ff ff       	callq  104c17 <_D3vga7Console8kvprintfFAaAC8TypeInfoG1S3gcc8builtins13__va_list_tagZv>
		putchar('\n');
  10534e:	bf 0a 00 00 00       	mov    $0xa,%edi
  105353:	e8 c2 f5 ff ff       	callq  10491a <_D3vga7Console7putcharFaZv>
	}
  105358:	eb 21                	jmp    10537b <_D3vga7Console9kprintflnFAaYv+0x17d>
  10535a:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  105361:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
	void kprintfln(char[] format, ...)
	{
		va_list begin = void;
		va_start(begin, format);
		kvprintf(format, _arguments, begin);
		putchar('\n');
  105368:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  10536f:	48 8b bd d8 fe ff ff 	mov    -0x128(%rbp),%rdi
  105376:	e8 4b fd 00 00       	callq  1150c6 <_Unwind_Resume>
	}
  10537b:	c9                   	leaveq 
  10537c:	c3                   	retq   

000000000010537d <_D3vga4itoaFAaalZAa>:
		base = The base of the integer value. If "d," it will be assumed to be decimal. If "x," the integer
			will be hexadecimal.
		d = The integer to translate.
	Returns: The translated string in a character array.
*/
char[] itoa(char[] buf, char base, long d)
  10537d:	55                   	push   %rbp
  10537e:	48 89 e5             	mov    %rsp,%rbp
  105381:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  105388:	48 89 bd f0 fe ff ff 	mov    %rdi,-0x110(%rbp)
  10538f:	88 8d 6f ff ff ff    	mov    %cl,-0x91(%rbp)
  105395:	4c 89 85 60 ff ff ff 	mov    %r8,-0xa0(%rbp)
  10539c:	48 89 f0             	mov    %rsi,%rax
  10539f:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  1053a6:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	size_t p = buf.length - 1;
  1053ad:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  1053b4:	48 ff c8             	dec    %rax
  1053b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t startIdx = 0;
  1053bb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1053c2:	00 
	ulong ud = d;
  1053c3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1053ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;
  1053ce:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)

	int divisor = 10;
  1053d2:	c7 45 d0 0a 00 00 00 	movl   $0xa,-0x30(%rbp)

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  1053d9:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  1053e0:	83 f8 64             	cmp    $0x64,%eax
  1053e3:	75 1e                	jne    105403 <_D3vga4itoaFAaalZAa+0x86>
  1053e5:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  1053ec:	00 
  1053ed:	79 14                	jns    105403 <_D3vga4itoaFAaalZAa+0x86>
	{
		negative = true;
  1053ef:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
		ud = -d;
  1053f3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1053fa:	48 f7 d8             	neg    %rax
  1053fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	bool negative = false;

	int divisor = 10;

	// If %d is specified and D is minus, put `-' in the head.
	if(base == 'd' && d < 0)
  105401:	eb 13                	jmp    105416 <_D3vga4itoaFAaalZAa+0x99>
	{
		negative = true;
		ud = -d;
	}
	else if(base == 'x')
  105403:	0f b6 85 6f ff ff ff 	movzbl -0x91(%rbp),%eax
  10540a:	83 f8 78             	cmp    $0x78,%eax
  10540d:	75 07                	jne    105416 <_D3vga4itoaFAaalZAa+0x99>
		divisor = 16;
  10540f:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)

	// Divide UD by DIVISOR until UD == 0.
	do
	{
		int remainder = ud % divisor;
  105416:	8b 45 d0             	mov    -0x30(%rbp),%eax
  105419:	48 63 d0             	movslq %eax,%rdx
  10541c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  105420:	48 89 d1             	mov    %rdx,%rcx
  105423:	ba 00 00 00 00       	mov    $0x0,%edx
  105428:	48 f7 f1             	div    %rcx
  10542b:	48 89 d0             	mov    %rdx,%rax
  10542e:	89 45 f4             	mov    %eax,-0xc(%rbp)
		buf[p--] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  105431:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  105438:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  10543f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  105443:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  10544a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  105451:	48 39 85 08 ff ff ff 	cmp    %rax,-0xf8(%rbp)
  105458:	0f 92 c0             	setb   %al
  10545b:	48 ff 4d e8          	decq   -0x18(%rbp)
  10545f:	84 c0                	test   %al,%al
  105461:	74 10                	je     105473 <_D3vga4itoaFAaalZAa+0xf6>
  105463:	48 8b 8d 08 ff ff ff 	mov    -0xf8(%rbp),%rcx
  10546a:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  105471:	eb 22                	jmp    105495 <_D3vga4itoaFAaalZAa+0x118>
  105473:	48 c7 45 80 05 00 00 	movq   $0x5,-0x80(%rbp)
  10547a:	00 
  10547b:	48 c7 45 88 21 73 11 	movq   $0x117321,-0x78(%rbp)
  105482:	00 
  105483:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  105487:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  10548b:	ba 3c 01 00 00       	mov    $0x13c,%edx
  105490:	e8 a0 f8 00 00       	callq  114d35 <_d_array_bounds>
  105495:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  10549c:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  1054a3:	48 01 c2             	add    %rax,%rdx
  1054a6:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  1054ad:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  1054b1:	7d 0e                	jge    1054c1 <_D3vga4itoaFAaalZAa+0x144>
  1054b3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1054b6:	83 c0 30             	add    $0x30,%eax
  1054b9:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  1054bf:	eb 0c                	jmp    1054cd <_D3vga4itoaFAaalZAa+0x150>
  1054c1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1054c4:	83 c0 57             	add    $0x57,%eax
  1054c7:	88 85 1f ff ff ff    	mov    %al,-0xe1(%rbp)
  1054cd:	0f b6 8d 1f ff ff ff 	movzbl -0xe1(%rbp),%ecx
  1054d4:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  1054db:	88 08                	mov    %cl,(%rax)
  1054dd:	8b 45 d0             	mov    -0x30(%rbp),%eax
  1054e0:	48 63 d0             	movslq %eax,%rdx
  1054e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1054e7:	48 89 d1             	mov    %rdx,%rcx
  1054ea:	ba 00 00 00 00       	mov    $0x0,%edx
  1054ef:	48 f7 f1             	div    %rcx
  1054f2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1054f6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1054fb:	0f 95 c0             	setne  %al
  1054fe:	83 f0 01             	xor    $0x1,%eax
  105501:	84 c0                	test   %al,%al
  105503:	75 05                	jne    10550a <_D3vga4itoaFAaalZAa+0x18d>
  105505:	e9 0c ff ff ff       	jmpq   105416 <_D3vga4itoaFAaalZAa+0x99>
	}
	while (ud /= divisor)

	if(negative)
  10550a:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
  10550e:	74 75                	je     105585 <_D3vga4itoaFAaalZAa+0x208>
		buf[p--] = '-';
  105510:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  105517:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  10551e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  105522:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  105529:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  105530:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  105537:	0f 92 c0             	setb   %al
  10553a:	48 ff 4d e8          	decq   -0x18(%rbp)
  10553e:	84 c0                	test   %al,%al
  105540:	74 10                	je     105552 <_D3vga4itoaFAaalZAa+0x1d5>
  105542:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  105549:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  105550:	eb 22                	jmp    105574 <_D3vga4itoaFAaalZAa+0x1f7>
  105552:	48 c7 45 90 05 00 00 	movq   $0x5,-0x70(%rbp)
  105559:	00 
  10555a:	48 c7 45 98 21 73 11 	movq   $0x117321,-0x68(%rbp)
  105561:	00 
  105562:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  105566:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  10556a:	ba 41 01 00 00       	mov    $0x141,%edx
  10556f:	e8 c1 f7 00 00       	callq  114d35 <_d_array_bounds>
  105574:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  10557b:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  105582:	c6 00 2d             	movb   $0x2d,(%rax)

	return buf[p + 1 .. $];
  105585:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10558c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  105590:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  105597:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10559b:	77 0d                	ja     1055aa <_D3vga4itoaFAaalZAa+0x22d>
  10559d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1055a1:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  1055a8:	eb 22                	jmp    1055cc <_D3vga4itoaFAaalZAa+0x24f>
  1055aa:	48 c7 45 b0 05 00 00 	movq   $0x5,-0x50(%rbp)
  1055b1:	00 
  1055b2:	48 c7 45 b8 21 73 11 	movq   $0x117321,-0x48(%rbp)
  1055b9:	00 
  1055ba:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  1055be:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  1055c2:	ba 43 01 00 00       	mov    $0x143,%edx
  1055c7:	e8 69 f7 00 00       	callq  114d35 <_d_array_bounds>
  1055cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1055d0:	48 ff c2             	inc    %rdx
  1055d3:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  1055da:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
  1055e1:	48 2b 8d 40 ff ff ff 	sub    -0xc0(%rbp),%rcx
  1055e8:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  1055ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1055f6:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  1055fd:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  105604:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  10560b:	77 10                	ja     10561d <_D3vga4itoaFAaalZAa+0x2a0>
  10560d:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  105614:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  10561b:	eb 22                	jmp    10563f <_D3vga4itoaFAaalZAa+0x2c2>
  10561d:	48 c7 45 c0 05 00 00 	movq   $0x5,-0x40(%rbp)
  105624:	00 
  105625:	48 c7 45 c8 21 73 11 	movq   $0x117321,-0x38(%rbp)
  10562c:	00 
  10562d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  105631:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  105635:	ba 43 01 00 00       	mov    $0x143,%edx
  10563a:	e8 f6 f6 00 00       	callq  114d35 <_d_array_bounds>
  10563f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  105646:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10564d:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  105654:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  105658:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  10565c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  105660:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  105667:	48 89 02             	mov    %rax,(%rdx)
  10566a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10566e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  105675:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  105679:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  105680:	c9                   	leaveq 
  105681:	c3                   	retq   

0000000000105682 <_D3std1c6stdarg13__T6va_argTiZ6va_argFG1S3gcc8builtins13__va_list_tagZi>:
	}
}

template va_arg(T)
{
	T va_arg(ref va_list _argptr)
  105682:	55                   	push   %rbp
  105683:	48 89 e5             	mov    %rsp,%rbp
  105686:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
		return T.init;
  10568a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  10568f:	c9                   	leaveq 
  105690:	c3                   	retq   

0000000000105691 <_D3std1c6stdarg14__T6va_argTAaZ6va_argFG1S3gcc8builtins13__va_list_tagZAa>:
	}
}

template va_arg(T)
{
	T va_arg(ref va_list _argptr)
  105691:	55                   	push   %rbp
  105692:	48 89 e5             	mov    %rsp,%rbp
  105695:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
	{
		return T.init;
  105699:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  1056a0:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  1056a7:	00 
	}
  1056a8:	48 89 f8             	mov    %rdi,%rax
  1056ab:	c9                   	leaveq 
  1056ac:	c3                   	retq   

00000000001056ad <_D3std1c6stdarg16__T8va_startTAaZ8va_startFG1S3gcc8builtins13__va_list_tagKAaZv>:
// The va_start and va_arg template functions are magically
// handled by the compiler.

template va_start(T)
{
	void va_start(out va_list ap, inout T parmn)
  1056ad:	55                   	push   %rbp
  1056ae:	48 89 e5             	mov    %rsp,%rbp
  1056b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1056b5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
 	{
	
	}
  1056b9:	c9                   	leaveq 
  1056ba:	c3                   	retq   
  1056bb:	90                   	nop    

00000000001056bc <_D6system6memcpyFPvPvmZPv>:
		dest = A pointer to the piece of memory serving as the copy destination.
		src = A pointer to the piece of memory serving as the copy source.
		count = The number of bytes to copy form src to dest.
	Returns: A void pointer to the start of the destination data (dest).
*/
void* memcpy(void* dest, void* src, size_t count)
  1056bc:	55                   	push   %rbp
  1056bd:	48 89 e5             	mov    %rsp,%rbp
  1056c0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1056c4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  1056c8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* d = cast(ubyte*)dest;
  1056cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1056d0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* s = cast(ubyte*)src;
  1056d4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1056d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = count; count; count--, d++, s++)
  1056dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1056e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1056e4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  1056e9:	0f 95 c0             	setne  %al
  1056ec:	83 f0 01             	xor    $0x1,%eax
  1056ef:	84 c0                	test   %al,%al
  1056f1:	75 25                	jne    105718 <_D6system6memcpyFPvPvmZPv+0x5c>
		*d = *s;
  1056f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1056f7:	0f b6 10             	movzbl (%rax),%edx
  1056fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1056fe:	88 10                	mov    %dl,(%rax)
  105700:	48 ff 4d c8          	decq   -0x38(%rbp)
  105704:	b8 01 00 00 00       	mov    $0x1,%eax
  105709:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  10570d:	b8 01 00 00 00       	mov    $0x1,%eax
  105712:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  105716:	eb cc                	jmp    1056e4 <_D6system6memcpyFPvPvmZPv+0x28>

	return dest;
  105718:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  10571c:	c9                   	leaveq 
  10571d:	c3                   	retq   

000000000010571e <_D6system6memcmpFPvPvmZl>:
	n = The number of bytes to compare.

Returns:
	 0 if they are equal, < 0 if a is less than b, and > 0 if a is greater than b.
*/
long memcmp(void* a, void* b, size_t n)
  10571e:	55                   	push   %rbp
  10571f:	48 89 e5             	mov    %rsp,%rbp
  105722:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  105726:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10572a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	ubyte* str_a = cast(ubyte*)a;
  10572e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  105732:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	ubyte* str_b = cast(ubyte*)b;
  105736:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10573a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	for(size_t i = 0; i < n; i++)
  10573e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  105745:	00 
  105746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10574a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  10574e:	0f 92 c0             	setb   %al
  105751:	83 f0 01             	xor    $0x1,%eax
  105754:	84 c0                	test   %al,%al
  105756:	75 48                	jne    1057a0 <_D6system6memcmpFPvPvmZl+0x82>
	{
		if(*str_a != *str_b)
  105758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10575c:	0f b6 00             	movzbl (%rax),%eax
  10575f:	0f b6 d0             	movzbl %al,%edx
  105762:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  105766:	0f b6 00             	movzbl (%rax),%eax
  105769:	0f b6 c0             	movzbl %al,%eax
  10576c:	39 c2                	cmp    %eax,%edx
  10576e:	74 22                	je     105792 <_D6system6memcmpFPvPvmZl+0x74>
			return *str_a - *str_b;
  105770:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  105774:	0f b6 00             	movzbl (%rax),%eax
  105777:	0f b6 d0             	movzbl %al,%edx
  10577a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10577e:	0f b6 00             	movzbl (%rax),%eax
  105781:	0f b6 c0             	movzbl %al,%eax
  105784:	89 d1                	mov    %edx,%ecx
  105786:	29 c1                	sub    %eax,%ecx
  105788:	89 c8                	mov    %ecx,%eax
  10578a:	48 98                	cltq   
  10578c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  105790:	eb 16                	jmp    1057a8 <_D6system6memcmpFPvPvmZl+0x8a>

		str_a++;
  105792:	48 ff 45 f0          	incq   -0x10(%rbp)
		str_b++;
  105796:	48 ff 45 e8          	incq   -0x18(%rbp)
  10579a:	48 ff 45 f8          	incq   -0x8(%rbp)
  10579e:	eb a6                	jmp    105746 <_D6system6memcmpFPvPvmZl+0x28>
	}
	
	return 0;
  1057a0:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  1057a7:	00 
  1057a8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
}
  1057ac:	c9                   	leaveq 
  1057ad:	c3                   	retq   

00000000001057ae <_D6system6memsetFPvhkZv>:
	Params:
		addr = The address of the piece of memory you wish to write.
		val = The value you wish to write to memory.
		numBytes = The number of bytes you would like to write to memory.
*/
void memset(void *addr, ubyte val, uint numBytes){
  1057ae:	55                   	push   %rbp
  1057af:	48 89 e5             	mov    %rsp,%rbp
  1057b2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1057b6:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  1057ba:	89 55 e0             	mov    %edx,-0x20(%rbp)
     ubyte *data = cast(ubyte*) addr;
  1057bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1057c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

     for(int i = 0; i < numBytes; i++){
  1057c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  1057cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1057cf:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  1057d2:	0f 92 c0             	setb   %al
  1057d5:	83 f0 01             	xor    $0x1,%eax
  1057d8:	84 c0                	test   %al,%al
  1057da:	75 17                	jne    1057f3 <_D6system6memsetFPvhkZv+0x45>
          data[i] = val;
  1057dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1057df:	48 98                	cltq   
  1057e1:	48 89 c2             	mov    %rax,%rdx
  1057e4:	48 03 55 f0          	add    -0x10(%rbp),%rdx
  1057e8:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  1057ec:	88 02                	mov    %al,(%rdx)
  1057ee:	ff 45 fc             	incl   -0x4(%rbp)
  1057f1:	eb d9                	jmp    1057cc <_D6system6memsetFPvhkZv+0x1e>
     }
}
  1057f3:	c9                   	leaveq 
  1057f4:	c3                   	retq   

00000000001057f5 <_D6system6strlenFPaZm>:
This function determines the size of a passed-in string.
	Params: 
		s = A pointer to the beginning of a character array, declaring a string.
	Returns: The size of the string in size_t format.
*/
size_t strlen(char* s)
  1057f5:	55                   	push   %rbp
  1057f6:	48 89 e5             	mov    %rsp,%rbp
  1057f9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
{
	size_t i = 0;
  1057fd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  105804:	00 
	for( ; *s != 0; i++, s++){}
  105805:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  105809:	0f b6 00             	movzbl (%rax),%eax
  10580c:	0f b6 c0             	movzbl %al,%eax
  10580f:	85 c0                	test   %eax,%eax
  105811:	0f 95 c0             	setne  %al
  105814:	83 f0 01             	xor    $0x1,%eax
  105817:	84 c0                	test   %al,%al
  105819:	75 0f                	jne    10582a <_D6system6strlenFPaZm+0x35>
  10581b:	48 ff 45 f8          	incq   -0x8(%rbp)
  10581f:	b8 01 00 00 00       	mov    $0x1,%eax
  105824:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  105828:	eb db                	jmp    105805 <_D6system6strlenFPaZm+0x10>
	return i;
  10582a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  10582e:	c9                   	leaveq 
  10582f:	c3                   	retq   

0000000000105830 <_D6system8toStringFPaZAa>:
This function takes in a character pointer and returns a character array, or a string.
	Params:
		s = A pointer to the character(s) you wish to translate to a string.
	Returns: A character array (string) containing the information.
*/
char[] toString(char* s)
  105830:	55                   	push   %rbp
  105831:	48 89 e5             	mov    %rsp,%rbp
  105834:	53                   	push   %rbx
  105835:	48 83 ec 08          	sub    $0x8,%rsp
  105839:	48 89 fb             	mov    %rdi,%rbx
  10583c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
	return s[0 .. strlen(s)];
  105840:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  105844:	e8 ac ff ff ff       	callq  1057f5 <_D6system6strlenFPaZm>
  105849:	48 89 03             	mov    %rax,(%rbx)
  10584c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  105850:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  105854:	48 89 d8             	mov    %rbx,%rax
  105857:	48 83 c4 08          	add    $0x8,%rsp
  10585b:	5b                   	pop    %rbx
  10585c:	c9                   	leaveq 
  10585d:	c3                   	retq   

000000000010585e <_D6system5isnanFeZi>:
	Params:
		e = The value / piece of information you would like to check for number status.
	Returns: 
		0 if it isn't a NaN, non-zero if it is.
*/
int isnan(real e)
  10585e:	55                   	push   %rbp
  10585f:	48 89 e5             	mov    %rsp,%rbp
{
    ushort* pe = cast(ushort *)&e;
  105862:	48 8d 45 10          	lea    0x10(%rbp),%rax
  105866:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ulong*  ps = cast(ulong *)&e;
  10586a:	48 8d 45 10          	lea    0x10(%rbp),%rax
  10586e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    return (pe[4] & 0x7FFF) == 0x7FFF &&
  105872:	b8 08 00 00 00       	mov    $0x8,%eax
  105877:	48 03 45 f8          	add    -0x8(%rbp),%rax
  10587b:	0f b7 00             	movzwl (%rax),%eax
  10587e:	0f b7 c0             	movzwl %ax,%eax
  105881:	25 ff 7f 00 00       	and    $0x7fff,%eax
  105886:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  10588b:	75 1f                	jne    1058ac <_D6system5isnanFeZi+0x4e>
  10588d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  105891:	48 8b 10             	mov    (%rax),%rdx
  105894:	48 b8 ff ff ff ff ff 	mov    $0x7fffffffffffffff,%rax
  10589b:	ff ff 7f 
  10589e:	48 21 d0             	and    %rdx,%rax
  1058a1:	48 85 c0             	test   %rax,%rax
  1058a4:	74 06                	je     1058ac <_D6system5isnanFeZi+0x4e>
  1058a6:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  1058aa:	eb 04                	jmp    1058b0 <_D6system5isnanFeZi+0x52>
  1058ac:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  1058b0:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
	    *ps & 0x7FFFFFFFFFFFFFFF;
}
  1058b4:	c9                   	leaveq 
  1058b5:	c3                   	retq   
  1058b6:	90                   	nop    
  1058b7:	90                   	nop    

00000000001058b8 <_D3idt7setGateFkE3gdt3GDT12SysSegType64mkkZv>:
*  will cause an "Unhandled Interrupt" exception. Any descriptor
*  for which the 'presence' bit is cleared (0) will generate an
*  "Unhandled Interrupt" exception */
IDTEntry[256] Entries;

public void setGate(uint num, GDT.SysSegType64 gateType, ulong funcPtr, uint dplFlags, uint istFlags)
  1058b8:	55                   	push   %rbp
  1058b9:	48 89 e5             	mov    %rsp,%rbp
  1058bc:	48 83 ec 40          	sub    $0x40,%rsp
  1058c0:	89 7d dc             	mov    %edi,-0x24(%rbp)
  1058c3:	89 75 d8             	mov    %esi,-0x28(%rbp)
  1058c6:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  1058ca:	89 4d cc             	mov    %ecx,-0x34(%rbp)
  1058cd:	44 89 45 c8          	mov    %r8d,-0x38(%rbp)
  1058d1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  1058d4:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  1058da:	73 09                	jae    1058e5 <_D3idt7setGateFkE3gdt3GDT12SysSegType64mkkZv+0x2d>
  1058dc:	8b 45 dc             	mov    -0x24(%rbp),%eax
  1058df:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1058e3:	eb 22                	jmp    105907 <_D3idt7setGateFkE3gdt3GDT12SysSegType64mkkZv+0x4f>
  1058e5:	48 c7 45 e0 05 00 00 	movq   $0x5,-0x20(%rbp)
  1058ec:	00 
  1058ed:	48 c7 45 e8 18 74 11 	movq   $0x117418,-0x18(%rbp)
  1058f4:	00 
  1058f5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1058f9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1058fd:	ba 25 00 00 00       	mov    $0x25,%edx
  105902:	e8 2e f4 00 00       	callq  114d35 <_d_array_bounds>
  105907:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  10590b:	48 c1 e0 04          	shl    $0x4,%rax
  10590f:	48 05 c0 3e 12 00    	add    $0x123ec0,%rax
  105915:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
{
	with(Entries[num])
	{
		target_lo = funcPtr & 0xFFFF;
  105919:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10591d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  105921:	66 89 02             	mov    %ax,(%rdx)
		segment = 0x10;
  105924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  105928:	48 83 c0 02          	add    $0x2,%rax
  10592c:	66 c7 00 10 00       	movw   $0x10,(%rax)
		ist = istFlags;
  105931:	8b 45 c8             	mov    -0x38(%rbp),%eax
  105934:	0f b7 f0             	movzwl %ax,%esi
  105937:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10593b:	e8 b1 1c 00 00       	callq  1075f1 <_D3gdt3GDT13IntGateDesc643istMFtZv>
		p = 1;
  105940:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  105944:	be 01 00 00 00       	mov    $0x1,%esi
  105949:	e8 ce 20 00 00       	callq  107a1c <_D3gdt3GDT13IntGateDesc641pMFtZv>
		dpl = dplFlags;
  10594e:	8b 45 cc             	mov    -0x34(%rbp),%eax
  105951:	0f b7 f0             	movzwl %ax,%esi
  105954:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  105958:	e8 e9 1f 00 00       	callq  107946 <_D3gdt3GDT13IntGateDesc643dplMFtZv>
		type = cast(uint)gateType;
  10595d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  105960:	0f b7 f0             	movzwl %ax,%esi
  105963:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  105967:	e8 2e 1e 00 00       	callq  10779a <_D3gdt3GDT13IntGateDesc644typeMFtZv>
		target_mid = (funcPtr >> 16) & 0xFFFF;
  10596c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  105970:	48 83 c2 06          	add    $0x6,%rdx
  105974:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  105978:	48 c1 e8 10          	shr    $0x10,%rax
  10597c:	66 89 02             	mov    %ax,(%rdx)
		target_hi = funcPtr >> 32;
  10597f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  105983:	48 83 c2 08          	add    $0x8,%rdx
  105987:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10598b:	48 c1 e8 20          	shr    $0x20,%rax
  10598f:	89 02                	mov    %eax,(%rdx)
	}
}
  105991:	c9                   	leaveq 
  105992:	c3                   	retq   

0000000000105993 <_D3idt10setIntGateFkPvkZv>:

void setIntGate(uint num, void* funcPtr, uint ist = 0)
  105993:	55                   	push   %rbp
  105994:	48 89 e5             	mov    %rsp,%rbp
  105997:	48 83 ec 20          	sub    $0x20,%rsp
  10599b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  10599e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1059a2:	89 55 ec             	mov    %edx,-0x14(%rbp)
{
	setGate(num, GDT.SysSegType64.IntGate, cast(ulong)funcPtr, 0, ist);
  1059a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1059a9:	48 89 c2             	mov    %rax,%rdx
  1059ac:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1059af:	8b 7d fc             	mov    -0x4(%rbp),%edi
  1059b2:	41 89 c0             	mov    %eax,%r8d
  1059b5:	b9 00 00 00 00       	mov    $0x0,%ecx
  1059ba:	be 0e 00 00 00       	mov    $0xe,%esi
  1059bf:	e8 f4 fe ff ff       	callq  1058b8 <_D3idt7setGateFkE3gdt3GDT12SysSegType64mkkZv>
}
  1059c4:	c9                   	leaveq 
  1059c5:	c3                   	retq   

00000000001059c6 <_D3idt10setSysGateFkPvkZv>:

void setSysGate(uint num, void* funcPtr, uint ist = 0)
  1059c6:	55                   	push   %rbp
  1059c7:	48 89 e5             	mov    %rsp,%rbp
  1059ca:	48 83 ec 20          	sub    $0x20,%rsp
  1059ce:	89 7d fc             	mov    %edi,-0x4(%rbp)
  1059d1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1059d5:	89 55 ec             	mov    %edx,-0x14(%rbp)
{
	setGate(num, GDT.SysSegType64.IntGate, cast(ulong)funcPtr, 3, ist);
  1059d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1059dc:	48 89 c2             	mov    %rax,%rdx
  1059df:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1059e2:	8b 7d fc             	mov    -0x4(%rbp),%edi
  1059e5:	41 89 c0             	mov    %eax,%r8d
  1059e8:	b9 03 00 00 00       	mov    $0x3,%ecx
  1059ed:	be 0e 00 00 00       	mov    $0xe,%esi
  1059f2:	e8 c1 fe ff ff       	callq  1058b8 <_D3idt7setGateFkE3gdt3GDT12SysSegType64mkkZv>
}
  1059f7:	c9                   	leaveq 
  1059f8:	c3                   	retq   

00000000001059f9 <_D3idt7installFZv>:

void install()
  1059f9:	55                   	push   %rbp
  1059fa:	48 89 e5             	mov    %rsp,%rbp
{
	idtp.limit = (IDTEntry.sizeof * Entries.length) - 1;
  1059fd:	66 c7 05 9a e4 01 00 	movw   $0xfff,0x1e49a(%rip)        # 123ea0 <idtp>
  105a04:	ff 0f 
	idtp.base = cast(ulong)Entries.ptr;
  105a06:	b8 c0 3e 12 00       	mov    $0x123ec0,%eax
  105a0b:	48 89 05 90 e4 01 00 	mov    %rax,0x1e490(%rip)        # 123ea2 <idtp+0x2>

	setIntGate(0, &isr0);
  105a12:	ba 00 00 00 00       	mov    $0x0,%edx
  105a17:	be b0 5c 10 00       	mov    $0x105cb0,%esi
  105a1c:	bf 00 00 00 00       	mov    $0x0,%edi
  105a21:	e8 6d ff ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(1, &isr1, StackType.Debug);
  105a26:	ba 04 00 00 00       	mov    $0x4,%edx
  105a2b:	be b9 5c 10 00       	mov    $0x105cb9,%esi
  105a30:	bf 01 00 00 00       	mov    $0x1,%edi
  105a35:	e8 59 ff ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(2, &isr2, StackType.NMI);
  105a3a:	ba 03 00 00 00       	mov    $0x3,%edx
  105a3f:	be c2 5c 10 00       	mov    $0x105cc2,%esi
  105a44:	bf 02 00 00 00       	mov    $0x2,%edi
  105a49:	e8 45 ff ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setSysGate(3, &isr3, StackType.Debug);
  105a4e:	ba 04 00 00 00       	mov    $0x4,%edx
  105a53:	be cb 5c 10 00       	mov    $0x105ccb,%esi
  105a58:	bf 03 00 00 00       	mov    $0x3,%edi
  105a5d:	e8 64 ff ff ff       	callq  1059c6 <_D3idt10setSysGateFkPvkZv>
	setSysGate(4, &isr4);
  105a62:	ba 00 00 00 00       	mov    $0x0,%edx
  105a67:	be d4 5c 10 00       	mov    $0x105cd4,%esi
  105a6c:	bf 04 00 00 00       	mov    $0x4,%edi
  105a71:	e8 50 ff ff ff       	callq  1059c6 <_D3idt10setSysGateFkPvkZv>
	setIntGate(5, &isr5);
  105a76:	ba 00 00 00 00       	mov    $0x0,%edx
  105a7b:	be dd 5c 10 00       	mov    $0x105cdd,%esi
  105a80:	bf 05 00 00 00       	mov    $0x5,%edi
  105a85:	e8 09 ff ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(6, &isr6);
  105a8a:	ba 00 00 00 00       	mov    $0x0,%edx
  105a8f:	be e6 5c 10 00       	mov    $0x105ce6,%esi
  105a94:	bf 06 00 00 00       	mov    $0x6,%edi
  105a99:	e8 f5 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(7, &isr7);
  105a9e:	ba 00 00 00 00       	mov    $0x0,%edx
  105aa3:	be ef 5c 10 00       	mov    $0x105cef,%esi
  105aa8:	bf 07 00 00 00       	mov    $0x7,%edi
  105aad:	e8 e1 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(8, &isr8, StackType.DoubleFault);
  105ab2:	ba 02 00 00 00       	mov    $0x2,%edx
  105ab7:	be f8 5c 10 00       	mov    $0x105cf8,%esi
  105abc:	bf 08 00 00 00       	mov    $0x8,%edi
  105ac1:	e8 cd fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(9, &isr9);
  105ac6:	ba 00 00 00 00       	mov    $0x0,%edx
  105acb:	be ff 5c 10 00       	mov    $0x105cff,%esi
  105ad0:	bf 09 00 00 00       	mov    $0x9,%edi
  105ad5:	e8 b9 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(10, &isr10);
  105ada:	ba 00 00 00 00       	mov    $0x0,%edx
  105adf:	be 08 5d 10 00       	mov    $0x105d08,%esi
  105ae4:	bf 0a 00 00 00       	mov    $0xa,%edi
  105ae9:	e8 a5 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(11, &isr11);
  105aee:	ba 00 00 00 00       	mov    $0x0,%edx
  105af3:	be 0f 5d 10 00       	mov    $0x105d0f,%esi
  105af8:	bf 0b 00 00 00       	mov    $0xb,%edi
  105afd:	e8 91 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(12, &isr12, StackType.StackFault);
  105b02:	ba 01 00 00 00       	mov    $0x1,%edx
  105b07:	be 16 5d 10 00       	mov    $0x105d16,%esi
  105b0c:	bf 0c 00 00 00       	mov    $0xc,%edi
  105b11:	e8 7d fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(13, &isr13);
  105b16:	ba 00 00 00 00       	mov    $0x0,%edx
  105b1b:	be 1d 5d 10 00       	mov    $0x105d1d,%esi
  105b20:	bf 0d 00 00 00       	mov    $0xd,%edi
  105b25:	e8 69 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(14, &isr14);
  105b2a:	ba 00 00 00 00       	mov    $0x0,%edx
  105b2f:	be 24 5d 10 00       	mov    $0x105d24,%esi
  105b34:	bf 0e 00 00 00       	mov    $0xe,%edi
  105b39:	e8 55 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(15, &isr15);
  105b3e:	ba 00 00 00 00       	mov    $0x0,%edx
  105b43:	be 2b 5d 10 00       	mov    $0x105d2b,%esi
  105b48:	bf 0f 00 00 00       	mov    $0xf,%edi
  105b4d:	e8 41 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(16, &isr16);
  105b52:	ba 00 00 00 00       	mov    $0x0,%edx
  105b57:	be 34 5d 10 00       	mov    $0x105d34,%esi
  105b5c:	bf 10 00 00 00       	mov    $0x10,%edi
  105b61:	e8 2d fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(17, &isr17);
  105b66:	ba 00 00 00 00       	mov    $0x0,%edx
  105b6b:	be 3d 5d 10 00       	mov    $0x105d3d,%esi
  105b70:	bf 11 00 00 00       	mov    $0x11,%edi
  105b75:	e8 19 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(18, &isr18, StackType.MCE);
  105b7a:	ba 05 00 00 00       	mov    $0x5,%edx
  105b7f:	be 46 5d 10 00       	mov    $0x105d46,%esi
  105b84:	bf 12 00 00 00       	mov    $0x12,%edi
  105b89:	e8 05 fe ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(19, &isr19);
  105b8e:	ba 00 00 00 00       	mov    $0x0,%edx
  105b93:	be 4f 5d 10 00       	mov    $0x105d4f,%esi
  105b98:	bf 13 00 00 00       	mov    $0x13,%edi
  105b9d:	e8 f1 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(20, &isr20);
  105ba2:	ba 00 00 00 00       	mov    $0x0,%edx
  105ba7:	be 58 5d 10 00       	mov    $0x105d58,%esi
  105bac:	bf 14 00 00 00       	mov    $0x14,%edi
  105bb1:	e8 dd fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(21, &isr21);
  105bb6:	ba 00 00 00 00       	mov    $0x0,%edx
  105bbb:	be 61 5d 10 00       	mov    $0x105d61,%esi
  105bc0:	bf 15 00 00 00       	mov    $0x15,%edi
  105bc5:	e8 c9 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(22, &isr22);
  105bca:	ba 00 00 00 00       	mov    $0x0,%edx
  105bcf:	be 6a 5d 10 00       	mov    $0x105d6a,%esi
  105bd4:	bf 16 00 00 00       	mov    $0x16,%edi
  105bd9:	e8 b5 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(23, &isr23);
  105bde:	ba 00 00 00 00       	mov    $0x0,%edx
  105be3:	be 73 5d 10 00       	mov    $0x105d73,%esi
  105be8:	bf 17 00 00 00       	mov    $0x17,%edi
  105bed:	e8 a1 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(24, &isr24);
  105bf2:	ba 00 00 00 00       	mov    $0x0,%edx
  105bf7:	be 7c 5d 10 00       	mov    $0x105d7c,%esi
  105bfc:	bf 18 00 00 00       	mov    $0x18,%edi
  105c01:	e8 8d fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(25, &isr25);
  105c06:	ba 00 00 00 00       	mov    $0x0,%edx
  105c0b:	be 85 5d 10 00       	mov    $0x105d85,%esi
  105c10:	bf 19 00 00 00       	mov    $0x19,%edi
  105c15:	e8 79 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(26, &isr26);
  105c1a:	ba 00 00 00 00       	mov    $0x0,%edx
  105c1f:	be 8e 5d 10 00       	mov    $0x105d8e,%esi
  105c24:	bf 1a 00 00 00       	mov    $0x1a,%edi
  105c29:	e8 65 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(27, &isr27);
  105c2e:	ba 00 00 00 00       	mov    $0x0,%edx
  105c33:	be 97 5d 10 00       	mov    $0x105d97,%esi
  105c38:	bf 1b 00 00 00       	mov    $0x1b,%edi
  105c3d:	e8 51 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(28, &isr28);
  105c42:	ba 00 00 00 00       	mov    $0x0,%edx
  105c47:	be a0 5d 10 00       	mov    $0x105da0,%esi
  105c4c:	bf 1c 00 00 00       	mov    $0x1c,%edi
  105c51:	e8 3d fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(29, &isr29);
  105c56:	ba 00 00 00 00       	mov    $0x0,%edx
  105c5b:	be a9 5d 10 00       	mov    $0x105da9,%esi
  105c60:	bf 1d 00 00 00       	mov    $0x1d,%edi
  105c65:	e8 29 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(30, &isr30);
  105c6a:	ba 00 00 00 00       	mov    $0x0,%edx
  105c6f:	be b2 5d 10 00       	mov    $0x105db2,%esi
  105c74:	bf 1e 00 00 00       	mov    $0x1e,%edi
  105c79:	e8 15 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setIntGate(31, &isr31);
  105c7e:	ba 00 00 00 00       	mov    $0x0,%edx
  105c83:	be bb 5d 10 00       	mov    $0x105dbb,%esi
  105c88:	bf 1f 00 00 00       	mov    $0x1f,%edi
  105c8d:	e8 01 fd ff ff       	callq  105993 <_D3idt10setIntGateFkPvkZv>
	setSysGate(0x80, &isr128);
  105c92:	ba 00 00 00 00       	mov    $0x0,%edx
  105c97:	be c4 5d 10 00       	mov    $0x105dc4,%esi
  105c9c:	bf 80 00 00 00       	mov    $0x80,%edi
  105ca1:	e8 20 fd ff ff       	callq  1059c6 <_D3idt10setSysGateFkPvkZv>

	asm { "lidt (idtp)"; }
  105ca6:	0f 01 1c 25 a0 3e 12 	lidt   0x123ea0
  105cad:	00 
}
  105cae:	c9                   	leaveq 
  105caf:	c3                   	retq   

0000000000105cb0 <isr0>:
	setIntGate(29, &isr29);
	setIntGate(30, &isr30);
	setIntGate(31, &isr31);
	setSysGate(0x80, &isr128);

	asm { "lidt (idtp)"; }
  105cb0:	6a 00                	pushq  $0x0
  105cb2:	6a 00                	pushq  $0x0
  105cb4:	e9 17 01 00 00       	jmpq   105dd0 <isr_common>

0000000000105cb9 <isr1>:
  105cb9:	6a 00                	pushq  $0x0
  105cbb:	6a 01                	pushq  $0x1
  105cbd:	e9 0e 01 00 00       	jmpq   105dd0 <isr_common>

0000000000105cc2 <isr2>:
  105cc2:	6a 00                	pushq  $0x0
  105cc4:	6a 02                	pushq  $0x2
  105cc6:	e9 05 01 00 00       	jmpq   105dd0 <isr_common>

0000000000105ccb <isr3>:
  105ccb:	6a 00                	pushq  $0x0
  105ccd:	6a 03                	pushq  $0x3
  105ccf:	e9 fc 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105cd4 <isr4>:
  105cd4:	6a 00                	pushq  $0x0
  105cd6:	6a 04                	pushq  $0x4
  105cd8:	e9 f3 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105cdd <isr5>:
  105cdd:	6a 00                	pushq  $0x0
  105cdf:	6a 05                	pushq  $0x5
  105ce1:	e9 ea 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105ce6 <isr6>:
  105ce6:	6a 00                	pushq  $0x0
  105ce8:	6a 06                	pushq  $0x6
  105cea:	e9 e1 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105cef <isr7>:
  105cef:	6a 00                	pushq  $0x0
  105cf1:	6a 07                	pushq  $0x7
  105cf3:	e9 d8 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105cf8 <isr8>:
  105cf8:	6a 08                	pushq  $0x8
  105cfa:	e9 d1 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105cff <isr9>:
  105cff:	6a 00                	pushq  $0x0
  105d01:	6a 09                	pushq  $0x9
  105d03:	e9 c8 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d08 <isr10>:
  105d08:	6a 0a                	pushq  $0xa
  105d0a:	e9 c1 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d0f <isr11>:
  105d0f:	6a 0b                	pushq  $0xb
  105d11:	e9 ba 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d16 <isr12>:
  105d16:	6a 0c                	pushq  $0xc
  105d18:	e9 b3 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d1d <isr13>:
  105d1d:	6a 0d                	pushq  $0xd
  105d1f:	e9 ac 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d24 <isr14>:
  105d24:	6a 0e                	pushq  $0xe
  105d26:	e9 a5 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d2b <isr15>:
  105d2b:	6a 00                	pushq  $0x0
  105d2d:	6a 0f                	pushq  $0xf
  105d2f:	e9 9c 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d34 <isr16>:
  105d34:	6a 00                	pushq  $0x0
  105d36:	6a 10                	pushq  $0x10
  105d38:	e9 93 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d3d <isr17>:
  105d3d:	6a 00                	pushq  $0x0
  105d3f:	6a 11                	pushq  $0x11
  105d41:	e9 8a 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d46 <isr18>:
  105d46:	6a 00                	pushq  $0x0
  105d48:	6a 12                	pushq  $0x12
  105d4a:	e9 81 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d4f <isr19>:
  105d4f:	6a 00                	pushq  $0x0
  105d51:	6a 13                	pushq  $0x13
  105d53:	e9 78 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d58 <isr20>:
  105d58:	6a 00                	pushq  $0x0
  105d5a:	6a 14                	pushq  $0x14
  105d5c:	e9 6f 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d61 <isr21>:
  105d61:	6a 00                	pushq  $0x0
  105d63:	6a 15                	pushq  $0x15
  105d65:	e9 66 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d6a <isr22>:
  105d6a:	6a 00                	pushq  $0x0
  105d6c:	6a 16                	pushq  $0x16
  105d6e:	e9 5d 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d73 <isr23>:
  105d73:	6a 00                	pushq  $0x0
  105d75:	6a 17                	pushq  $0x17
  105d77:	e9 54 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d7c <isr24>:
  105d7c:	6a 00                	pushq  $0x0
  105d7e:	6a 18                	pushq  $0x18
  105d80:	e9 4b 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d85 <isr25>:
  105d85:	6a 00                	pushq  $0x0
  105d87:	6a 19                	pushq  $0x19
  105d89:	e9 42 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d8e <isr26>:
  105d8e:	6a 00                	pushq  $0x0
  105d90:	6a 1a                	pushq  $0x1a
  105d92:	e9 39 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105d97 <isr27>:
  105d97:	6a 00                	pushq  $0x0
  105d99:	6a 1b                	pushq  $0x1b
  105d9b:	e9 30 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105da0 <isr28>:
  105da0:	6a 00                	pushq  $0x0
  105da2:	6a 1c                	pushq  $0x1c
  105da4:	e9 27 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105da9 <isr29>:
  105da9:	6a 00                	pushq  $0x0
  105dab:	6a 1d                	pushq  $0x1d
  105dad:	e9 1e 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105db2 <isr30>:
  105db2:	6a 00                	pushq  $0x0
  105db4:	6a 1e                	pushq  $0x1e
  105db6:	e9 15 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105dbb <isr31>:
  105dbb:	6a 00                	pushq  $0x0
  105dbd:	6a 1f                	pushq  $0x1f
  105dbf:	e9 0c 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105dc4 <isr128>:
  105dc4:	6a 00                	pushq  $0x0
  105dc6:	68 80 00 00 00       	pushq  $0x80
  105dcb:	e9 00 00 00 00       	jmpq   105dd0 <isr_common>

0000000000105dd0 <isr_common>:
{
	asm
	{
		naked;
		"pushq %%rax";
		"pushq %%rbx";
  105dd0:	50                   	push   %rax
		"pushq %%rcx";
  105dd1:	53                   	push   %rbx
		"pushq %%rdx";
  105dd2:	51                   	push   %rcx
		"pushq %%rsi";
  105dd3:	52                   	push   %rdx
		"pushq %%rdi";
  105dd4:	56                   	push   %rsi
		"pushq %%rbp";
  105dd5:	57                   	push   %rdi
		"pushq %%r8";
  105dd6:	55                   	push   %rbp
		"pushq %%r9";
  105dd7:	41 50                	push   %r8
		"pushq %%r10";
  105dd9:	41 51                	push   %r9
		"pushq %%r11";
  105ddb:	41 52                	push   %r10
		"pushq %%r12";
  105ddd:	41 53                	push   %r11
		"pushq %%r13";
  105ddf:	41 54                	push   %r12
		"pushq %%r14";
  105de1:	41 55                	push   %r13
		"pushq %%r15";
  105de3:	41 56                	push   %r14

		// we don't have to push %rsp, %rip and flags; they are pushed
		// automatically on an interrupt

		"mov %%rsp, %%rdi";
  105de5:	41 57                	push   %r15
		"call fault_handler";
  105de7:	48 89 e7             	mov    %rsp,%rdi

		"popq %%r15";
  105dea:	e8 1f 01 00 00       	callq  105f0e <fault_handler>
		"popq %%r14";
  105def:	41 5f                	pop    %r15
		"popq %%r13";
  105df1:	41 5e                	pop    %r14
		"popq %%r12";
  105df3:	41 5d                	pop    %r13
		"popq %%r11";
  105df5:	41 5c                	pop    %r12
		"popq %%r10";
  105df7:	41 5b                	pop    %r11
		"popq %%r9";
  105df9:	41 5a                	pop    %r10
		"popq %%r8";
  105dfb:	41 59                	pop    %r9
		"popq %%rbp";
  105dfd:	41 58                	pop    %r8
		"popq %%rdi";
  105dff:	5d                   	pop    %rbp
		"popq %%rsi";
  105e00:	5f                   	pop    %rdi
		"popq %%rdx";
  105e01:	5e                   	pop    %rsi
		"popq %%rcx";
  105e02:	5a                   	pop    %rdx
		"popq %%rbx";
  105e03:	59                   	pop    %rcx
		"popq %%rax";
  105e04:	5b                   	pop    %rbx

		// Cleans up the pushed error code and pushed ISR num
		"add $16, %%rsp";
  105e05:	58                   	pop    %rax

		"iretq";         /* pops 5 things in order: rIP, CS, rFLAGS, rSP, and SS */
  105e06:	48 83 c4 10          	add    $0x10,%rsp
	}
  105e0a:	48 cf                	iretq  

0000000000105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>:

alias void function(interrupt_stack*) InterruptHandler;

private InterruptHandler[256] InterruptHandlers;

void setCustomHandler(size_t i, InterruptHandler h, int ist = -1)
  105e0c:	55                   	push   %rbp
  105e0d:	48 89 e5             	mov    %rsp,%rbp
  105e10:	48 83 ec 70          	sub    $0x70,%rsp
  105e14:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  105e18:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  105e1c:	89 55 ac             	mov    %edx,-0x54(%rbp)
{
	assert(i < InterruptHandlers.length, "Invalid handler index");
  105e1f:	48 81 7d b8 00 01 00 	cmpq   $0x100,-0x48(%rbp)
  105e26:	00 
  105e27:	72 3b                	jb     105e64 <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0x58>
  105e29:	48 c7 45 c0 05 00 00 	movq   $0x5,-0x40(%rbp)
  105e30:	00 
  105e31:	48 c7 45 c8 18 74 11 	movq   $0x117418,-0x38(%rbp)
  105e38:	00 
  105e39:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  105e40:	00 
  105e41:	48 c7 45 d8 f0 76 11 	movq   $0x1176f0,-0x28(%rbp)
  105e48:	00 
  105e49:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  105e4d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  105e51:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  105e55:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  105e59:	41 b8 31 01 00 00    	mov    $0x131,%r8d
  105e5f:	e8 89 ee 00 00       	callq  114ced <_d_assert_msg>

	InterruptHandlers[i] = h;
  105e64:	48 81 7d b8 00 01 00 	cmpq   $0x100,-0x48(%rbp)
  105e6b:	00 
  105e6c:	73 0a                	jae    105e78 <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0x6c>
  105e6e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  105e72:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  105e76:	eb 22                	jmp    105e9a <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0x8e>
  105e78:	48 c7 45 e0 05 00 00 	movq   $0x5,-0x20(%rbp)
  105e7f:	00 
  105e80:	48 c7 45 e8 18 74 11 	movq   $0x117418,-0x18(%rbp)
  105e87:	00 
  105e88:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  105e8c:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  105e90:	ba 33 01 00 00       	mov    $0x133,%edx
  105e95:	e8 9b ee 00 00       	callq  114d35 <_d_array_bounds>
  105e9a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  105e9e:	48 c1 e0 03          	shl    $0x3,%rax
  105ea2:	48 8d 90 c0 4e 12 00 	lea    0x124ec0(%rax),%rdx
  105ea9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  105ead:	48 89 02             	mov    %rax,(%rdx)
	
	if(ist >= 0)
  105eb0:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  105eb4:	78 56                	js     105f0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0x100>
		Entries[i].ist = ist;
  105eb6:	8b 45 ac             	mov    -0x54(%rbp),%eax
  105eb9:	0f b7 c0             	movzwl %ax,%eax
  105ebc:	89 45 9c             	mov    %eax,-0x64(%rbp)
  105ebf:	48 81 7d b8 00 01 00 	cmpq   $0x100,-0x48(%rbp)
  105ec6:	00 
  105ec7:	73 0a                	jae    105ed3 <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0xc7>
  105ec9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  105ecd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  105ed1:	eb 22                	jmp    105ef5 <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv+0xe9>
  105ed3:	48 c7 45 f0 05 00 00 	movq   $0x5,-0x10(%rbp)
  105eda:	00 
  105edb:	48 c7 45 f8 18 74 11 	movq   $0x117418,-0x8(%rbp)
  105ee2:	00 
  105ee3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  105ee7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  105eeb:	ba 36 01 00 00       	mov    $0x136,%edx
  105ef0:	e8 40 ee 00 00       	callq  114d35 <_d_array_bounds>
  105ef5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  105ef9:	48 c1 e0 04          	shl    $0x4,%rax
  105efd:	48 8d b8 c0 3e 12 00 	lea    0x123ec0(%rax),%rdi
  105f04:	8b 75 9c             	mov    -0x64(%rbp),%esi
  105f07:	e8 e5 16 00 00       	callq  1075f1 <_D3gdt3GDT13IntGateDesc643istMFtZv>
}
  105f0c:	c9                   	leaveq 
  105f0d:	c3                   	retq   

0000000000105f0e <fault_handler>:
*  happened! Right now, we simply halt the system by hitting an
*  endless loop. All ISRs disable interrupts while they are being
*  serviced as a 'locking' mechanism to prevent an IRQ from
*  happening and messing up kernel data structures */

extern(C) void fault_handler(interrupt_stack* r)
  105f0e:	55                   	push   %rbp
  105f0f:	48 89 e5             	mov    %rsp,%rbp
  105f12:	53                   	push   %rbx
  105f13:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
  105f1a:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
			else
				kprintfln("Unknown exception %d.", r.int_no);


			asm{cli; hlt;}
			break;
  105f21:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  105f28:	48 8b 40 78          	mov    0x78(%rax),%rax
  105f2c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  105f33:	48 83 bd 28 ff ff ff 	cmpq   $0xe,-0xd8(%rbp)
  105f3a:	0e 
  105f3b:	74 49                	je     105f86 <fault_handler+0x78>
  105f3d:	48 81 bd 28 ff ff ff 	cmpq   $0x80,-0xd8(%rbp)
  105f44:	80 00 00 00 
  105f48:	74 02                	je     105f4c <fault_handler+0x3e>
  105f4a:	eb 4b                	jmp    105f97 <fault_handler+0x89>
extern(C) void fault_handler(interrupt_stack* r)
{
	switch(r.int_no)
	{
		case 128:
			kprintfln("Interrupt-based Syscall, RAX = %d.", r.rax);
  105f4c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  105f53:	48 83 c0 70          	add    $0x70,%rax
  105f57:	48 8b 08             	mov    (%rax),%rcx
  105f5a:	48 c7 45 80 22 00 00 	movq   $0x22,-0x80(%rbp)
  105f61:	00 
  105f62:	48 c7 45 88 08 77 11 	movq   $0x117708,-0x78(%rbp)
  105f69:	00 
  105f6a:	48 8b 75 80          	mov    -0x80(%rbp),%rsi
  105f6e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  105f72:	bf 00 09 12 00       	mov    $0x120900,%edi
  105f77:	b8 00 00 00 00       	mov    $0x0,%eax
  105f7c:	e8 7d f2 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			break;
  105f81:	e9 3e 02 00 00       	jmpq   1061c4 <fault_handler+0x2b6>

		case 14:
			handle_faults(r);	// Call our fault handler in vmem
  105f86:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  105f8d:	e8 4a 20 00 00       	callq  107fdc <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv>
			break;
  105f92:	e9 2d 02 00 00       	jmpq   1061c4 <fault_handler+0x2b6>

		default:
			if(InterruptHandlers[r.int_no])
  105f97:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  105f9e:	48 83 c0 78          	add    $0x78,%rax
  105fa2:	48 8b 00             	mov    (%rax),%rax
  105fa5:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  105fac:	48 81 bd 38 ff ff ff 	cmpq   $0x100,-0xc8(%rbp)
  105fb3:	00 01 00 00 
  105fb7:	73 10                	jae    105fc9 <fault_handler+0xbb>
  105fb9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  105fc0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  105fc7:	eb 22                	jmp    105feb <fault_handler+0xdd>
  105fc9:	48 c7 45 90 05 00 00 	movq   $0x5,-0x70(%rbp)
  105fd0:	00 
  105fd1:	48 c7 45 98 18 74 11 	movq   $0x117418,-0x68(%rbp)
  105fd8:	00 
  105fd9:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  105fdd:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  105fe1:	ba 4d 01 00 00       	mov    $0x14d,%edx
  105fe6:	e8 4a ed 00 00       	callq  114d35 <_d_array_bounds>
  105feb:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  105ff2:	48 c1 e0 03          	shl    $0x3,%rax
  105ff6:	48 05 c0 4e 12 00    	add    $0x124ec0,%rax
  105ffc:	48 8b 00             	mov    (%rax),%rax
  105fff:	48 85 c0             	test   %rax,%rax
  106002:	74 76                	je     10607a <fault_handler+0x16c>
			{
				InterruptHandlers[r.int_no](r);
  106004:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10600b:	48 83 c0 78          	add    $0x78,%rax
  10600f:	48 8b 00             	mov    (%rax),%rax
  106012:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  106019:	48 81 bd 48 ff ff ff 	cmpq   $0x100,-0xb8(%rbp)
  106020:	00 01 00 00 
  106024:	73 10                	jae    106036 <fault_handler+0x128>
  106026:	48 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%rbx
  10602d:	48 89 9d 40 ff ff ff 	mov    %rbx,-0xc0(%rbp)
  106034:	eb 22                	jmp    106058 <fault_handler+0x14a>
  106036:	48 c7 45 a0 05 00 00 	movq   $0x5,-0x60(%rbp)
  10603d:	00 
  10603e:	48 c7 45 a8 18 74 11 	movq   $0x117418,-0x58(%rbp)
  106045:	00 
  106046:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  10604a:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10604e:	ba 4f 01 00 00       	mov    $0x14f,%edx
  106053:	e8 dd ec 00 00       	callq  114d35 <_d_array_bounds>
  106058:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  10605f:	48 c1 e0 03          	shl    $0x3,%rax
  106063:	48 05 c0 4e 12 00    	add    $0x124ec0,%rax
  106069:	48 8b 00             	mov    (%rax),%rax
  10606c:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  106073:	ff d0                	callq  *%rax
				break;
  106075:	e9 4a 01 00 00       	jmpq   1061c4 <fault_handler+0x2b6>
			}

			if(r.int_no < 32)
  10607a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  106081:	48 83 c0 78          	add    $0x78,%rax
  106085:	48 8b 00             	mov    (%rax),%rax
  106088:	48 83 f8 20          	cmp    $0x20,%rax
  10608c:	0f 8d fb 00 00 00    	jge    10618d <fault_handler+0x27f>
				kprintfln("%s Exception. Code = %d, IP = %x", exceptionMessages[r.int_no], r.err_code, r.rip);
  106092:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  106099:	48 05 88 00 00 00    	add    $0x88,%rax
  10609f:	48 8b 00             	mov    (%rax),%rax
  1060a2:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  1060a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1060b0:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  1060b4:	48 8b 00             	mov    (%rax),%rax
  1060b7:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  1060be:	48 8b 05 b3 a6 01 00 	mov    0x1a6b3(%rip),%rax        # 120778 <_D3idt17exceptionMessagesAAa+0x8>
  1060c5:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  1060cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1060d3:	48 83 c0 78          	add    $0x78,%rax
  1060d7:	48 8b 00             	mov    (%rax),%rax
  1060da:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  1060e1:	48 8b 05 88 a6 01 00 	mov    0x1a688(%rip),%rax        # 120770 <_D3idt17exceptionMessagesAAa>
  1060e8:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
  1060ef:	73 10                	jae    106101 <fault_handler+0x1f3>
  1060f1:	48 8b 9d 70 ff ff ff 	mov    -0x90(%rbp),%rbx
  1060f8:	48 89 9d 68 ff ff ff 	mov    %rbx,-0x98(%rbp)
  1060ff:	eb 22                	jmp    106123 <fault_handler+0x215>
  106101:	48 c7 45 b0 05 00 00 	movq   $0x5,-0x50(%rbp)
  106108:	00 
  106109:	48 c7 45 b8 18 74 11 	movq   $0x117418,-0x48(%rbp)
  106110:	00 
  106111:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  106115:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  106119:	ba 54 01 00 00       	mov    $0x154,%edx
  10611e:	e8 12 ec 00 00       	callq  114d35 <_d_array_bounds>
  106123:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10612a:	48 c1 e0 04          	shl    $0x4,%rax
  10612e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  106135:	48 01 c2             	add    %rax,%rdx
  106138:	48 8b 02             	mov    (%rdx),%rax
  10613b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  10613f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  106143:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  106147:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10614b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  10614f:	48 c7 45 d0 20 00 00 	movq   $0x20,-0x30(%rbp)
  106156:	00 
  106157:	48 c7 45 d8 30 77 11 	movq   $0x117730,-0x28(%rbp)
  10615e:	00 
  10615f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  106163:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  106167:	48 8b 9d 50 ff ff ff 	mov    -0xb0(%rbp),%rbx
  10616e:	48 89 1c 24          	mov    %rbx,(%rsp)
  106172:	4c 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%r9
  106179:	49 89 c0             	mov    %rax,%r8
  10617c:	bf 20 09 12 00       	mov    $0x120920,%edi
  106181:	b8 00 00 00 00       	mov    $0x0,%eax
  106186:	e8 73 f0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  10618b:	eb 35                	jmp    1061c2 <fault_handler+0x2b4>
			else
				kprintfln("Unknown exception %d.", r.int_no);
  10618d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  106194:	48 83 c0 78          	add    $0x78,%rax
  106198:	48 8b 08             	mov    (%rax),%rcx
  10619b:	48 c7 45 e0 15 00 00 	movq   $0x15,-0x20(%rbp)
  1061a2:	00 
  1061a3:	48 c7 45 e8 51 77 11 	movq   $0x117751,-0x18(%rbp)
  1061aa:	00 
  1061ab:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  1061af:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1061b3:	bf 00 09 12 00       	mov    $0x120900,%edi
  1061b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1061bd:	e8 3c f0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>


			asm{cli; hlt;}
  1061c2:	fa                   	cli    
  1061c3:	f4                   	hlt    
			break;
	}
  1061c4:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
  1061cb:	5b                   	pop    %rbx
  1061cc:	c9                   	leaveq 
  1061cd:	c3                   	retq   
  1061ce:	90                   	nop    
  1061cf:	90                   	nop    

00000000001061d0 <_D3gdt3GDT13CodeSegDesc645zero3MFZh>:
		IntGate = 0b1110,
		TrapGate = 0b1111
	}

	align(1) struct CodeSegDesc64
	{
  1061d0:	55                   	push   %rbp
  1061d1:	48 89 e5             	mov    %rsp,%rbp
  1061d4:	48 83 ec 30          	sub    $0x30,%rsp
  1061d8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1061dc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1061e1:	75 3b                	jne    10621e <_D3gdt3GDT13CodeSegDesc645zero3MFZh+0x4e>
  1061e3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1061ea:	00 
  1061eb:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1061f2:	00 
  1061f3:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1061fa:	00 
  1061fb:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106202:	00 
  106203:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106207:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10620b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10620f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106213:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106219:	e8 cf ea 00 00       	callq  114ced <_d_assert_msg>
  10621e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106222:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106226:	83 e0 03             	and    $0x3,%eax
  106229:	c9                   	leaveq 
  10622a:	c3                   	retq   

000000000010622b <_D3gdt3GDT13CodeSegDesc645zero3MFhZv>:
  10622b:	55                   	push   %rbp
  10622c:	48 89 e5             	mov    %rsp,%rbp
  10622f:	48 83 ec 30          	sub    $0x30,%rsp
  106233:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106237:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10623b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106240:	75 3b                	jne    10627d <_D3gdt3GDT13CodeSegDesc645zero3MFhZv+0x52>
  106242:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106249:	00 
  10624a:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106251:	00 
  106252:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106259:	00 
  10625a:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106261:	00 
  106262:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106266:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10626a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10626e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106272:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106278:	e8 70 ea 00 00       	callq  114ced <_d_assert_msg>
  10627d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106281:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106285:	89 c2                	mov    %eax,%edx
  106287:	83 e2 fc             	and    $0xfffffffffffffffc,%edx
  10628a:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  10628e:	83 e0 03             	and    $0x3,%eax
  106291:	09 c2                	or     %eax,%edx
  106293:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106297:	88 50 05             	mov    %dl,0x5(%rax)
  10629a:	c9                   	leaveq 
  10629b:	c3                   	retq   

000000000010629c <_D3gdt3GDT13CodeSegDesc641cMFZh>:
  10629c:	55                   	push   %rbp
  10629d:	48 89 e5             	mov    %rsp,%rbp
  1062a0:	48 83 ec 30          	sub    $0x30,%rsp
  1062a4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1062a8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1062ad:	75 3b                	jne    1062ea <_D3gdt3GDT13CodeSegDesc641cMFZh+0x4e>
  1062af:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1062b6:	00 
  1062b7:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1062be:	00 
  1062bf:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1062c6:	00 
  1062c7:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1062ce:	00 
  1062cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1062d3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1062d7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1062db:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1062df:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1062e5:	e8 03 ea 00 00       	callq  114ced <_d_assert_msg>
  1062ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1062ee:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  1062f2:	0f b6 c0             	movzbl %al,%eax
  1062f5:	c1 f8 02             	sar    $0x2,%eax
  1062f8:	83 e0 01             	and    $0x1,%eax
  1062fb:	c9                   	leaveq 
  1062fc:	c3                   	retq   

00000000001062fd <_D3gdt3GDT13CodeSegDesc641cMFhZv>:
  1062fd:	55                   	push   %rbp
  1062fe:	48 89 e5             	mov    %rsp,%rbp
  106301:	48 83 ec 30          	sub    $0x30,%rsp
  106305:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106309:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10630d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106312:	75 3b                	jne    10634f <_D3gdt3GDT13CodeSegDesc641cMFhZv+0x52>
  106314:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10631b:	00 
  10631c:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106323:	00 
  106324:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10632b:	00 
  10632c:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106333:	00 
  106334:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106338:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10633c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106340:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106344:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10634a:	e8 9e e9 00 00       	callq  114ced <_d_assert_msg>
  10634f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106353:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106357:	89 c2                	mov    %eax,%edx
  106359:	83 e2 fb             	and    $0xfffffffffffffffb,%edx
  10635c:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106360:	83 e0 01             	and    $0x1,%eax
  106363:	c1 e0 02             	shl    $0x2,%eax
  106366:	09 c2                	or     %eax,%edx
  106368:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10636c:	88 50 05             	mov    %dl,0x5(%rax)
  10636f:	c9                   	leaveq 
  106370:	c3                   	retq   

0000000000106371 <_D3gdt3GDT13CodeSegDesc645ones0MFZh>:
  106371:	55                   	push   %rbp
  106372:	48 89 e5             	mov    %rsp,%rbp
  106375:	48 83 ec 30          	sub    $0x30,%rsp
  106379:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10637d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106382:	75 3b                	jne    1063bf <_D3gdt3GDT13CodeSegDesc645ones0MFZh+0x4e>
  106384:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10638b:	00 
  10638c:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106393:	00 
  106394:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10639b:	00 
  10639c:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1063a3:	00 
  1063a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1063a8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1063ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1063b0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1063b4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1063ba:	e8 2e e9 00 00       	callq  114ced <_d_assert_msg>
  1063bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1063c3:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  1063c7:	0f b6 c0             	movzbl %al,%eax
  1063ca:	c1 f8 03             	sar    $0x3,%eax
  1063cd:	83 e0 03             	and    $0x3,%eax
  1063d0:	c9                   	leaveq 
  1063d1:	c3                   	retq   

00000000001063d2 <_D3gdt3GDT13CodeSegDesc645ones0MFhZv>:
  1063d2:	55                   	push   %rbp
  1063d3:	48 89 e5             	mov    %rsp,%rbp
  1063d6:	48 83 ec 30          	sub    $0x30,%rsp
  1063da:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1063de:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  1063e2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1063e7:	75 3b                	jne    106424 <_D3gdt3GDT13CodeSegDesc645ones0MFhZv+0x52>
  1063e9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1063f0:	00 
  1063f1:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1063f8:	00 
  1063f9:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106400:	00 
  106401:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106408:	00 
  106409:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10640d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106411:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106415:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106419:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10641f:	e8 c9 e8 00 00       	callq  114ced <_d_assert_msg>
  106424:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106428:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  10642c:	89 c2                	mov    %eax,%edx
  10642e:	83 e2 e7             	and    $0xffffffffffffffe7,%edx
  106431:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106435:	83 e0 03             	and    $0x3,%eax
  106438:	c1 e0 03             	shl    $0x3,%eax
  10643b:	09 c2                	or     %eax,%edx
  10643d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106441:	88 50 05             	mov    %dl,0x5(%rax)
  106444:	c9                   	leaveq 
  106445:	c3                   	retq   

0000000000106446 <_D3gdt3GDT13CodeSegDesc643dplMFZh>:
  106446:	55                   	push   %rbp
  106447:	48 89 e5             	mov    %rsp,%rbp
  10644a:	48 83 ec 30          	sub    $0x30,%rsp
  10644e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106452:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106457:	75 3b                	jne    106494 <_D3gdt3GDT13CodeSegDesc643dplMFZh+0x4e>
  106459:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106460:	00 
  106461:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106468:	00 
  106469:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106470:	00 
  106471:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106478:	00 
  106479:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10647d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106481:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106485:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106489:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10648f:	e8 59 e8 00 00       	callq  114ced <_d_assert_msg>
  106494:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106498:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  10649c:	0f b6 c0             	movzbl %al,%eax
  10649f:	c1 f8 05             	sar    $0x5,%eax
  1064a2:	83 e0 03             	and    $0x3,%eax
  1064a5:	c9                   	leaveq 
  1064a6:	c3                   	retq   

00000000001064a7 <_D3gdt3GDT13CodeSegDesc643dplMFhZv>:
  1064a7:	55                   	push   %rbp
  1064a8:	48 89 e5             	mov    %rsp,%rbp
  1064ab:	48 83 ec 30          	sub    $0x30,%rsp
  1064af:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1064b3:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  1064b7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1064bc:	75 3b                	jne    1064f9 <_D3gdt3GDT13CodeSegDesc643dplMFhZv+0x52>
  1064be:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1064c5:	00 
  1064c6:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1064cd:	00 
  1064ce:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1064d5:	00 
  1064d6:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1064dd:	00 
  1064de:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1064e2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1064e6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1064ea:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1064ee:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1064f4:	e8 f4 e7 00 00       	callq  114ced <_d_assert_msg>
  1064f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1064fd:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106501:	89 c2                	mov    %eax,%edx
  106503:	83 e2 9f             	and    $0xffffffffffffff9f,%edx
  106506:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  10650a:	83 e0 03             	and    $0x3,%eax
  10650d:	c1 e0 05             	shl    $0x5,%eax
  106510:	09 c2                	or     %eax,%edx
  106512:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106516:	88 50 05             	mov    %dl,0x5(%rax)
  106519:	c9                   	leaveq 
  10651a:	c3                   	retq   

000000000010651b <_D3gdt3GDT13CodeSegDesc641pMFZh>:
  10651b:	55                   	push   %rbp
  10651c:	48 89 e5             	mov    %rsp,%rbp
  10651f:	48 83 ec 30          	sub    $0x30,%rsp
  106523:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106527:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10652c:	75 3b                	jne    106569 <_D3gdt3GDT13CodeSegDesc641pMFZh+0x4e>
  10652e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106535:	00 
  106536:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10653d:	00 
  10653e:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106545:	00 
  106546:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10654d:	00 
  10654e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106552:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106556:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10655a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10655e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106564:	e8 84 e7 00 00       	callq  114ced <_d_assert_msg>
  106569:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10656d:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106571:	0f b6 c0             	movzbl %al,%eax
  106574:	c1 f8 07             	sar    $0x7,%eax
  106577:	83 e0 01             	and    $0x1,%eax
  10657a:	c9                   	leaveq 
  10657b:	c3                   	retq   

000000000010657c <_D3gdt3GDT13CodeSegDesc641pMFhZv>:
  10657c:	55                   	push   %rbp
  10657d:	48 89 e5             	mov    %rsp,%rbp
  106580:	48 83 ec 30          	sub    $0x30,%rsp
  106584:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106588:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10658c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106591:	75 3b                	jne    1065ce <_D3gdt3GDT13CodeSegDesc641pMFhZv+0x52>
  106593:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10659a:	00 
  10659b:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1065a2:	00 
  1065a3:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1065aa:	00 
  1065ab:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1065b2:	00 
  1065b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1065b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1065bb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1065bf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1065c3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1065c9:	e8 1f e7 00 00       	callq  114ced <_d_assert_msg>
  1065ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1065d2:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  1065d6:	89 c2                	mov    %eax,%edx
  1065d8:	83 e2 7f             	and    $0x7f,%edx
  1065db:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  1065df:	83 e0 01             	and    $0x1,%eax
  1065e2:	c1 e0 07             	shl    $0x7,%eax
  1065e5:	09 c2                	or     %eax,%edx
  1065e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1065eb:	88 50 05             	mov    %dl,0x5(%rax)
  1065ee:	c9                   	leaveq 
  1065ef:	c3                   	retq   

00000000001065f0 <_D3gdt3GDT13CodeSegDesc645zero4MFZh>:
  1065f0:	55                   	push   %rbp
  1065f1:	48 89 e5             	mov    %rsp,%rbp
  1065f4:	48 83 ec 30          	sub    $0x30,%rsp
  1065f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1065fc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106601:	75 3b                	jne    10663e <_D3gdt3GDT13CodeSegDesc645zero4MFZh+0x4e>
  106603:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10660a:	00 
  10660b:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106612:	00 
  106613:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10661a:	00 
  10661b:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106622:	00 
  106623:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106627:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10662b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10662f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106633:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106639:	e8 af e6 00 00       	callq  114ced <_d_assert_msg>
  10663e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106642:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106646:	83 e0 1f             	and    $0x1f,%eax
  106649:	c9                   	leaveq 
  10664a:	c3                   	retq   

000000000010664b <_D3gdt3GDT13CodeSegDesc645zero4MFhZv>:
  10664b:	55                   	push   %rbp
  10664c:	48 89 e5             	mov    %rsp,%rbp
  10664f:	48 83 ec 30          	sub    $0x30,%rsp
  106653:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106657:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10665b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106660:	75 3b                	jne    10669d <_D3gdt3GDT13CodeSegDesc645zero4MFhZv+0x52>
  106662:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106669:	00 
  10666a:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106671:	00 
  106672:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106679:	00 
  10667a:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106681:	00 
  106682:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106686:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10668a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10668e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106692:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106698:	e8 50 e6 00 00       	callq  114ced <_d_assert_msg>
  10669d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1066a1:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  1066a5:	89 c2                	mov    %eax,%edx
  1066a7:	83 e2 e0             	and    $0xffffffffffffffe0,%edx
  1066aa:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  1066ae:	83 e0 1f             	and    $0x1f,%eax
  1066b1:	09 c2                	or     %eax,%edx
  1066b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1066b7:	88 50 06             	mov    %dl,0x6(%rax)
  1066ba:	c9                   	leaveq 
  1066bb:	c3                   	retq   

00000000001066bc <_D3gdt3GDT13CodeSegDesc641lMFZh>:
  1066bc:	55                   	push   %rbp
  1066bd:	48 89 e5             	mov    %rsp,%rbp
  1066c0:	48 83 ec 30          	sub    $0x30,%rsp
  1066c4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1066c8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1066cd:	75 3b                	jne    10670a <_D3gdt3GDT13CodeSegDesc641lMFZh+0x4e>
  1066cf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1066d6:	00 
  1066d7:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1066de:	00 
  1066df:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1066e6:	00 
  1066e7:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1066ee:	00 
  1066ef:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1066f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1066f7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1066fb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1066ff:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106705:	e8 e3 e5 00 00       	callq  114ced <_d_assert_msg>
  10670a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10670e:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106712:	0f b6 c0             	movzbl %al,%eax
  106715:	c1 f8 05             	sar    $0x5,%eax
  106718:	83 e0 01             	and    $0x1,%eax
  10671b:	c9                   	leaveq 
  10671c:	c3                   	retq   

000000000010671d <_D3gdt3GDT13CodeSegDesc641lMFhZv>:
  10671d:	55                   	push   %rbp
  10671e:	48 89 e5             	mov    %rsp,%rbp
  106721:	48 83 ec 30          	sub    $0x30,%rsp
  106725:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106729:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10672d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106732:	75 3b                	jne    10676f <_D3gdt3GDT13CodeSegDesc641lMFhZv+0x52>
  106734:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10673b:	00 
  10673c:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106743:	00 
  106744:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10674b:	00 
  10674c:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106753:	00 
  106754:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106758:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10675c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106760:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106764:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10676a:	e8 7e e5 00 00       	callq  114ced <_d_assert_msg>
  10676f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106773:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106777:	89 c2                	mov    %eax,%edx
  106779:	83 e2 df             	and    $0xffffffffffffffdf,%edx
  10677c:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106780:	83 e0 01             	and    $0x1,%eax
  106783:	c1 e0 05             	shl    $0x5,%eax
  106786:	09 c2                	or     %eax,%edx
  106788:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10678c:	88 50 06             	mov    %dl,0x6(%rax)
  10678f:	c9                   	leaveq 
  106790:	c3                   	retq   

0000000000106791 <_D3gdt3GDT13CodeSegDesc641dMFZh>:
  106791:	55                   	push   %rbp
  106792:	48 89 e5             	mov    %rsp,%rbp
  106795:	48 83 ec 30          	sub    $0x30,%rsp
  106799:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10679d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1067a2:	75 3b                	jne    1067df <_D3gdt3GDT13CodeSegDesc641dMFZh+0x4e>
  1067a4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1067ab:	00 
  1067ac:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1067b3:	00 
  1067b4:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1067bb:	00 
  1067bc:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1067c3:	00 
  1067c4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1067c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1067cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1067d0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1067d4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1067da:	e8 0e e5 00 00       	callq  114ced <_d_assert_msg>
  1067df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1067e3:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  1067e7:	0f b6 c0             	movzbl %al,%eax
  1067ea:	c1 f8 06             	sar    $0x6,%eax
  1067ed:	83 e0 01             	and    $0x1,%eax
  1067f0:	c9                   	leaveq 
  1067f1:	c3                   	retq   

00000000001067f2 <_D3gdt3GDT13CodeSegDesc641dMFhZv>:
  1067f2:	55                   	push   %rbp
  1067f3:	48 89 e5             	mov    %rsp,%rbp
  1067f6:	48 83 ec 30          	sub    $0x30,%rsp
  1067fa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1067fe:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106802:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106807:	75 3b                	jne    106844 <_D3gdt3GDT13CodeSegDesc641dMFhZv+0x52>
  106809:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106810:	00 
  106811:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106818:	00 
  106819:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106820:	00 
  106821:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106828:	00 
  106829:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10682d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106831:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106835:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106839:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10683f:	e8 a9 e4 00 00       	callq  114ced <_d_assert_msg>
  106844:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106848:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  10684c:	89 c2                	mov    %eax,%edx
  10684e:	83 e2 bf             	and    $0xffffffffffffffbf,%edx
  106851:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106855:	83 e0 01             	and    $0x1,%eax
  106858:	c1 e0 06             	shl    $0x6,%eax
  10685b:	09 c2                	or     %eax,%edx
  10685d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106861:	88 50 06             	mov    %dl,0x6(%rax)
  106864:	c9                   	leaveq 
  106865:	c3                   	retq   

0000000000106866 <_D3gdt3GDT13CodeSegDesc645zero5MFZh>:
  106866:	55                   	push   %rbp
  106867:	48 89 e5             	mov    %rsp,%rbp
  10686a:	48 83 ec 30          	sub    $0x30,%rsp
  10686e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106872:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106877:	75 3b                	jne    1068b4 <_D3gdt3GDT13CodeSegDesc645zero5MFZh+0x4e>
  106879:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106880:	00 
  106881:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106888:	00 
  106889:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106890:	00 
  106891:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106898:	00 
  106899:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10689d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1068a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1068a5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1068a9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1068af:	e8 39 e4 00 00       	callq  114ced <_d_assert_msg>
  1068b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1068b8:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  1068bc:	0f b6 c0             	movzbl %al,%eax
  1068bf:	c1 f8 07             	sar    $0x7,%eax
  1068c2:	83 e0 01             	and    $0x1,%eax
  1068c5:	c9                   	leaveq 
  1068c6:	c3                   	retq   

00000000001068c7 <_D3gdt3GDT13CodeSegDesc645zero5MFhZv>:
  1068c7:	55                   	push   %rbp
  1068c8:	48 89 e5             	mov    %rsp,%rbp
  1068cb:	48 83 ec 30          	sub    $0x30,%rsp
  1068cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1068d3:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  1068d7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1068dc:	75 3b                	jne    106919 <_D3gdt3GDT13CodeSegDesc645zero5MFhZv+0x52>
  1068de:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1068e5:	00 
  1068e6:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1068ed:	00 
  1068ee:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1068f5:	00 
  1068f6:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1068fd:	00 
  1068fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106902:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106906:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10690a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10690e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106914:	e8 d4 e3 00 00       	callq  114ced <_d_assert_msg>
  106919:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10691d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106921:	89 c2                	mov    %eax,%edx
  106923:	83 e2 7f             	and    $0x7f,%edx
  106926:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  10692a:	83 e0 01             	and    $0x1,%eax
  10692d:	c1 e0 07             	shl    $0x7,%eax
  106930:	09 c2                	or     %eax,%edx
  106932:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106936:	88 50 06             	mov    %dl,0x6(%rax)
  106939:	c9                   	leaveq 
  10693a:	c3                   	retq   

000000000010693b <_D3gdt3GDT13DataSegDesc645zero3MFZh>:
	}

	static assert(CodeSegDesc64.sizeof == 8);

	align(1) struct DataSegDesc64
	{
  10693b:	55                   	push   %rbp
  10693c:	48 89 e5             	mov    %rsp,%rbp
  10693f:	48 83 ec 30          	sub    $0x30,%rsp
  106943:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106947:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10694c:	75 3b                	jne    106989 <_D3gdt3GDT13DataSegDesc645zero3MFZh+0x4e>
  10694e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106955:	00 
  106956:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10695d:	00 
  10695e:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106965:	00 
  106966:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10696d:	00 
  10696e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106972:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106976:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10697a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10697e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106984:	e8 64 e3 00 00       	callq  114ced <_d_assert_msg>
  106989:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10698d:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106991:	83 e0 7f             	and    $0x7f,%eax
  106994:	c9                   	leaveq 
  106995:	c3                   	retq   

0000000000106996 <_D3gdt3GDT13DataSegDesc645zero3MFhZv>:
  106996:	55                   	push   %rbp
  106997:	48 89 e5             	mov    %rsp,%rbp
  10699a:	48 83 ec 30          	sub    $0x30,%rsp
  10699e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1069a2:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  1069a6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1069ab:	75 3b                	jne    1069e8 <_D3gdt3GDT13DataSegDesc645zero3MFhZv+0x52>
  1069ad:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1069b4:	00 
  1069b5:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1069bc:	00 
  1069bd:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1069c4:	00 
  1069c5:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1069cc:	00 
  1069cd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1069d1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1069d5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1069d9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1069dd:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1069e3:	e8 05 e3 00 00       	callq  114ced <_d_assert_msg>
  1069e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1069ec:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  1069f0:	89 c2                	mov    %eax,%edx
  1069f2:	83 e2 80             	and    $0xffffffffffffff80,%edx
  1069f5:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  1069f9:	83 e0 7f             	and    $0x7f,%eax
  1069fc:	09 c2                	or     %eax,%edx
  1069fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106a02:	88 50 05             	mov    %dl,0x5(%rax)
  106a05:	c9                   	leaveq 
  106a06:	c3                   	retq   

0000000000106a07 <_D3gdt3GDT13DataSegDesc641pMFZh>:
  106a07:	55                   	push   %rbp
  106a08:	48 89 e5             	mov    %rsp,%rbp
  106a0b:	48 83 ec 30          	sub    $0x30,%rsp
  106a0f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106a13:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106a18:	75 3b                	jne    106a55 <_D3gdt3GDT13DataSegDesc641pMFZh+0x4e>
  106a1a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106a21:	00 
  106a22:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106a29:	00 
  106a2a:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106a31:	00 
  106a32:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106a39:	00 
  106a3a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106a3e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106a42:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106a46:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106a4a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106a50:	e8 98 e2 00 00       	callq  114ced <_d_assert_msg>
  106a55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106a59:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106a5d:	0f b6 c0             	movzbl %al,%eax
  106a60:	c1 f8 07             	sar    $0x7,%eax
  106a63:	83 e0 01             	and    $0x1,%eax
  106a66:	c9                   	leaveq 
  106a67:	c3                   	retq   

0000000000106a68 <_D3gdt3GDT13DataSegDesc641pMFhZv>:
  106a68:	55                   	push   %rbp
  106a69:	48 89 e5             	mov    %rsp,%rbp
  106a6c:	48 83 ec 30          	sub    $0x30,%rsp
  106a70:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106a74:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106a78:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106a7d:	75 3b                	jne    106aba <_D3gdt3GDT13DataSegDesc641pMFhZv+0x52>
  106a7f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106a86:	00 
  106a87:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106a8e:	00 
  106a8f:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106a96:	00 
  106a97:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106a9e:	00 
  106a9f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106aa3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106aa7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106aab:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106aaf:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106ab5:	e8 33 e2 00 00       	callq  114ced <_d_assert_msg>
  106aba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106abe:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106ac2:	89 c2                	mov    %eax,%edx
  106ac4:	83 e2 7f             	and    $0x7f,%edx
  106ac7:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106acb:	83 e0 01             	and    $0x1,%eax
  106ace:	c1 e0 07             	shl    $0x7,%eax
  106ad1:	09 c2                	or     %eax,%edx
  106ad3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106ad7:	88 50 05             	mov    %dl,0x5(%rax)
  106ada:	c9                   	leaveq 
  106adb:	c3                   	retq   

0000000000106adc <_D3gdt3GDT12SysSegDesc644typeMFZh>:
	}
	
	static assert(DataSegDesc64.sizeof == 8);

	align(1) struct SysSegDesc64
	{
  106adc:	55                   	push   %rbp
  106add:	48 89 e5             	mov    %rsp,%rbp
  106ae0:	48 83 ec 30          	sub    $0x30,%rsp
  106ae4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106ae8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106aed:	75 3b                	jne    106b2a <_D3gdt3GDT12SysSegDesc644typeMFZh+0x4e>
  106aef:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106af6:	00 
  106af7:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106afe:	00 
  106aff:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106b06:	00 
  106b07:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106b0e:	00 
  106b0f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106b13:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106b17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106b1b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106b1f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106b25:	e8 c3 e1 00 00       	callq  114ced <_d_assert_msg>
  106b2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106b2e:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106b32:	83 e0 0f             	and    $0xf,%eax
  106b35:	c9                   	leaveq 
  106b36:	c3                   	retq   

0000000000106b37 <_D3gdt3GDT12SysSegDesc644typeMFhZv>:
  106b37:	55                   	push   %rbp
  106b38:	48 89 e5             	mov    %rsp,%rbp
  106b3b:	48 83 ec 30          	sub    $0x30,%rsp
  106b3f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106b43:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106b47:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106b4c:	75 3b                	jne    106b89 <_D3gdt3GDT12SysSegDesc644typeMFhZv+0x52>
  106b4e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106b55:	00 
  106b56:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106b5d:	00 
  106b5e:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106b65:	00 
  106b66:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106b6d:	00 
  106b6e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106b72:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106b76:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106b7a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106b7e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106b84:	e8 64 e1 00 00       	callq  114ced <_d_assert_msg>
  106b89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106b8d:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106b91:	89 c2                	mov    %eax,%edx
  106b93:	83 e2 f0             	and    $0xfffffffffffffff0,%edx
  106b96:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106b9a:	83 e0 0f             	and    $0xf,%eax
  106b9d:	09 c2                	or     %eax,%edx
  106b9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106ba3:	88 50 05             	mov    %dl,0x5(%rax)
  106ba6:	c9                   	leaveq 
  106ba7:	c3                   	retq   

0000000000106ba8 <_D3gdt3GDT12SysSegDesc645zero0MFZh>:
  106ba8:	55                   	push   %rbp
  106ba9:	48 89 e5             	mov    %rsp,%rbp
  106bac:	48 83 ec 30          	sub    $0x30,%rsp
  106bb0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106bb4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106bb9:	75 3b                	jne    106bf6 <_D3gdt3GDT12SysSegDesc645zero0MFZh+0x4e>
  106bbb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106bc2:	00 
  106bc3:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106bca:	00 
  106bcb:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106bd2:	00 
  106bd3:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106bda:	00 
  106bdb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106bdf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106be3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106be7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106beb:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106bf1:	e8 f7 e0 00 00       	callq  114ced <_d_assert_msg>
  106bf6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106bfa:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106bfe:	0f b6 c0             	movzbl %al,%eax
  106c01:	c1 f8 04             	sar    $0x4,%eax
  106c04:	83 e0 01             	and    $0x1,%eax
  106c07:	c9                   	leaveq 
  106c08:	c3                   	retq   

0000000000106c09 <_D3gdt3GDT12SysSegDesc645zero0MFhZv>:
  106c09:	55                   	push   %rbp
  106c0a:	48 89 e5             	mov    %rsp,%rbp
  106c0d:	48 83 ec 30          	sub    $0x30,%rsp
  106c11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106c15:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106c19:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106c1e:	75 3b                	jne    106c5b <_D3gdt3GDT12SysSegDesc645zero0MFhZv+0x52>
  106c20:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106c27:	00 
  106c28:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106c2f:	00 
  106c30:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106c37:	00 
  106c38:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106c3f:	00 
  106c40:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106c44:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106c48:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106c4c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106c50:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106c56:	e8 92 e0 00 00       	callq  114ced <_d_assert_msg>
  106c5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106c5f:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106c63:	89 c2                	mov    %eax,%edx
  106c65:	83 e2 ef             	and    $0xffffffffffffffef,%edx
  106c68:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106c6c:	83 e0 01             	and    $0x1,%eax
  106c6f:	c1 e0 04             	shl    $0x4,%eax
  106c72:	09 c2                	or     %eax,%edx
  106c74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106c78:	88 50 05             	mov    %dl,0x5(%rax)
  106c7b:	c9                   	leaveq 
  106c7c:	c3                   	retq   

0000000000106c7d <_D3gdt3GDT12SysSegDesc643dplMFZh>:
  106c7d:	55                   	push   %rbp
  106c7e:	48 89 e5             	mov    %rsp,%rbp
  106c81:	48 83 ec 30          	sub    $0x30,%rsp
  106c85:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106c89:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106c8e:	75 3b                	jne    106ccb <_D3gdt3GDT12SysSegDesc643dplMFZh+0x4e>
  106c90:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106c97:	00 
  106c98:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106c9f:	00 
  106ca0:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106ca7:	00 
  106ca8:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106caf:	00 
  106cb0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106cb4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106cb8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106cbc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106cc0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106cc6:	e8 22 e0 00 00       	callq  114ced <_d_assert_msg>
  106ccb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106ccf:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106cd3:	0f b6 c0             	movzbl %al,%eax
  106cd6:	c1 f8 05             	sar    $0x5,%eax
  106cd9:	83 e0 03             	and    $0x3,%eax
  106cdc:	c9                   	leaveq 
  106cdd:	c3                   	retq   

0000000000106cde <_D3gdt3GDT12SysSegDesc643dplMFhZv>:
  106cde:	55                   	push   %rbp
  106cdf:	48 89 e5             	mov    %rsp,%rbp
  106ce2:	48 83 ec 30          	sub    $0x30,%rsp
  106ce6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106cea:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106cee:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106cf3:	75 3b                	jne    106d30 <_D3gdt3GDT12SysSegDesc643dplMFhZv+0x52>
  106cf5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106cfc:	00 
  106cfd:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106d04:	00 
  106d05:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106d0c:	00 
  106d0d:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106d14:	00 
  106d15:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106d19:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106d1d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106d21:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106d25:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106d2b:	e8 bd df 00 00       	callq  114ced <_d_assert_msg>
  106d30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106d34:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106d38:	89 c2                	mov    %eax,%edx
  106d3a:	83 e2 9f             	and    $0xffffffffffffff9f,%edx
  106d3d:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106d41:	83 e0 03             	and    $0x3,%eax
  106d44:	c1 e0 05             	shl    $0x5,%eax
  106d47:	09 c2                	or     %eax,%edx
  106d49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106d4d:	88 50 05             	mov    %dl,0x5(%rax)
  106d50:	c9                   	leaveq 
  106d51:	c3                   	retq   

0000000000106d52 <_D3gdt3GDT12SysSegDesc641pMFZh>:
  106d52:	55                   	push   %rbp
  106d53:	48 89 e5             	mov    %rsp,%rbp
  106d56:	48 83 ec 30          	sub    $0x30,%rsp
  106d5a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106d5e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106d63:	75 3b                	jne    106da0 <_D3gdt3GDT12SysSegDesc641pMFZh+0x4e>
  106d65:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106d6c:	00 
  106d6d:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106d74:	00 
  106d75:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106d7c:	00 
  106d7d:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106d84:	00 
  106d85:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106d89:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106d8d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106d91:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106d95:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106d9b:	e8 4d df 00 00       	callq  114ced <_d_assert_msg>
  106da0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106da4:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106da8:	0f b6 c0             	movzbl %al,%eax
  106dab:	c1 f8 07             	sar    $0x7,%eax
  106dae:	83 e0 01             	and    $0x1,%eax
  106db1:	c9                   	leaveq 
  106db2:	c3                   	retq   

0000000000106db3 <_D3gdt3GDT12SysSegDesc641pMFhZv>:
  106db3:	55                   	push   %rbp
  106db4:	48 89 e5             	mov    %rsp,%rbp
  106db7:	48 83 ec 30          	sub    $0x30,%rsp
  106dbb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106dbf:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106dc3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106dc8:	75 3b                	jne    106e05 <_D3gdt3GDT12SysSegDesc641pMFhZv+0x52>
  106dca:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106dd1:	00 
  106dd2:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106dd9:	00 
  106dda:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106de1:	00 
  106de2:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106de9:	00 
  106dea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106dee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106df2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106df6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106dfa:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106e00:	e8 e8 de 00 00       	callq  114ced <_d_assert_msg>
  106e05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106e09:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  106e0d:	89 c2                	mov    %eax,%edx
  106e0f:	83 e2 7f             	and    $0x7f,%edx
  106e12:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106e16:	83 e0 01             	and    $0x1,%eax
  106e19:	c1 e0 07             	shl    $0x7,%eax
  106e1c:	09 c2                	or     %eax,%edx
  106e1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106e22:	88 50 05             	mov    %dl,0x5(%rax)
  106e25:	c9                   	leaveq 
  106e26:	c3                   	retq   

0000000000106e27 <_D3gdt3GDT12SysSegDesc648limit_hiMFZh>:
  106e27:	55                   	push   %rbp
  106e28:	48 89 e5             	mov    %rsp,%rbp
  106e2b:	48 83 ec 30          	sub    $0x30,%rsp
  106e2f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106e33:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106e38:	75 3b                	jne    106e75 <_D3gdt3GDT12SysSegDesc648limit_hiMFZh+0x4e>
  106e3a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106e41:	00 
  106e42:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106e49:	00 
  106e4a:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106e51:	00 
  106e52:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106e59:	00 
  106e5a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106e5e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106e62:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106e66:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106e6a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106e70:	e8 78 de 00 00       	callq  114ced <_d_assert_msg>
  106e75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106e79:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106e7d:	83 e0 0f             	and    $0xf,%eax
  106e80:	c9                   	leaveq 
  106e81:	c3                   	retq   

0000000000106e82 <_D3gdt3GDT12SysSegDesc648limit_hiMFhZv>:
  106e82:	55                   	push   %rbp
  106e83:	48 89 e5             	mov    %rsp,%rbp
  106e86:	48 83 ec 30          	sub    $0x30,%rsp
  106e8a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106e8e:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106e92:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106e97:	75 3b                	jne    106ed4 <_D3gdt3GDT12SysSegDesc648limit_hiMFhZv+0x52>
  106e99:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106ea0:	00 
  106ea1:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106ea8:	00 
  106ea9:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106eb0:	00 
  106eb1:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106eb8:	00 
  106eb9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106ebd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106ec1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106ec5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106ec9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106ecf:	e8 19 de 00 00       	callq  114ced <_d_assert_msg>
  106ed4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106ed8:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106edc:	89 c2                	mov    %eax,%edx
  106ede:	83 e2 f0             	and    $0xfffffffffffffff0,%edx
  106ee1:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106ee5:	83 e0 0f             	and    $0xf,%eax
  106ee8:	09 c2                	or     %eax,%edx
  106eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106eee:	88 50 06             	mov    %dl,0x6(%rax)
  106ef1:	c9                   	leaveq 
  106ef2:	c3                   	retq   

0000000000106ef3 <_D3gdt3GDT12SysSegDesc643avlMFZh>:
  106ef3:	55                   	push   %rbp
  106ef4:	48 89 e5             	mov    %rsp,%rbp
  106ef7:	48 83 ec 30          	sub    $0x30,%rsp
  106efb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106eff:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106f04:	75 3b                	jne    106f41 <_D3gdt3GDT12SysSegDesc643avlMFZh+0x4e>
  106f06:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106f0d:	00 
  106f0e:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106f15:	00 
  106f16:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106f1d:	00 
  106f1e:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106f25:	00 
  106f26:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106f2a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106f2e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106f32:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106f36:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106f3c:	e8 ac dd 00 00       	callq  114ced <_d_assert_msg>
  106f41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106f45:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106f49:	0f b6 c0             	movzbl %al,%eax
  106f4c:	c1 f8 04             	sar    $0x4,%eax
  106f4f:	83 e0 01             	and    $0x1,%eax
  106f52:	c9                   	leaveq 
  106f53:	c3                   	retq   

0000000000106f54 <_D3gdt3GDT12SysSegDesc643avlMFhZv>:
  106f54:	55                   	push   %rbp
  106f55:	48 89 e5             	mov    %rsp,%rbp
  106f58:	48 83 ec 30          	sub    $0x30,%rsp
  106f5c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106f60:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  106f64:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106f69:	75 3b                	jne    106fa6 <_D3gdt3GDT12SysSegDesc643avlMFhZv+0x52>
  106f6b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106f72:	00 
  106f73:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106f7a:	00 
  106f7b:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106f82:	00 
  106f83:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106f8a:	00 
  106f8b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106f8f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  106f93:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  106f97:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  106f9b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  106fa1:	e8 47 dd 00 00       	callq  114ced <_d_assert_msg>
  106fa6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106faa:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  106fae:	89 c2                	mov    %eax,%edx
  106fb0:	83 e2 ef             	and    $0xffffffffffffffef,%edx
  106fb3:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  106fb7:	83 e0 01             	and    $0x1,%eax
  106fba:	c1 e0 04             	shl    $0x4,%eax
  106fbd:	09 c2                	or     %eax,%edx
  106fbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  106fc3:	88 50 06             	mov    %dl,0x6(%rax)
  106fc6:	c9                   	leaveq 
  106fc7:	c3                   	retq   

0000000000106fc8 <_D3gdt3GDT12SysSegDesc645zero1MFZh>:
  106fc8:	55                   	push   %rbp
  106fc9:	48 89 e5             	mov    %rsp,%rbp
  106fcc:	48 83 ec 30          	sub    $0x30,%rsp
  106fd0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  106fd4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  106fd9:	75 3b                	jne    107016 <_D3gdt3GDT12SysSegDesc645zero1MFZh+0x4e>
  106fdb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  106fe2:	00 
  106fe3:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  106fea:	00 
  106feb:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  106ff2:	00 
  106ff3:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  106ffa:	00 
  106ffb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  106fff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107003:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107007:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10700b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107011:	e8 d7 dc 00 00       	callq  114ced <_d_assert_msg>
  107016:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10701a:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  10701e:	0f b6 c0             	movzbl %al,%eax
  107021:	c1 f8 05             	sar    $0x5,%eax
  107024:	83 e0 03             	and    $0x3,%eax
  107027:	c9                   	leaveq 
  107028:	c3                   	retq   

0000000000107029 <_D3gdt3GDT12SysSegDesc645zero1MFhZv>:
  107029:	55                   	push   %rbp
  10702a:	48 89 e5             	mov    %rsp,%rbp
  10702d:	48 83 ec 30          	sub    $0x30,%rsp
  107031:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107035:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  107039:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10703e:	75 3b                	jne    10707b <_D3gdt3GDT12SysSegDesc645zero1MFhZv+0x52>
  107040:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107047:	00 
  107048:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10704f:	00 
  107050:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107057:	00 
  107058:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10705f:	00 
  107060:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107064:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107068:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10706c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107070:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107076:	e8 72 dc 00 00       	callq  114ced <_d_assert_msg>
  10707b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10707f:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  107083:	89 c2                	mov    %eax,%edx
  107085:	83 e2 9f             	and    $0xffffffffffffff9f,%edx
  107088:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  10708c:	83 e0 03             	and    $0x3,%eax
  10708f:	c1 e0 05             	shl    $0x5,%eax
  107092:	09 c2                	or     %eax,%edx
  107094:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107098:	88 50 06             	mov    %dl,0x6(%rax)
  10709b:	c9                   	leaveq 
  10709c:	c3                   	retq   

000000000010709d <_D3gdt3GDT12SysSegDesc641gMFZh>:
  10709d:	55                   	push   %rbp
  10709e:	48 89 e5             	mov    %rsp,%rbp
  1070a1:	48 83 ec 30          	sub    $0x30,%rsp
  1070a5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1070a9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1070ae:	75 3b                	jne    1070eb <_D3gdt3GDT12SysSegDesc641gMFZh+0x4e>
  1070b0:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1070b7:	00 
  1070b8:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1070bf:	00 
  1070c0:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1070c7:	00 
  1070c8:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1070cf:	00 
  1070d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1070d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1070d8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1070dc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1070e0:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1070e6:	e8 02 dc 00 00       	callq  114ced <_d_assert_msg>
  1070eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1070ef:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  1070f3:	0f b6 c0             	movzbl %al,%eax
  1070f6:	c1 f8 07             	sar    $0x7,%eax
  1070f9:	83 e0 01             	and    $0x1,%eax
  1070fc:	c9                   	leaveq 
  1070fd:	c3                   	retq   

00000000001070fe <_D3gdt3GDT12SysSegDesc641gMFhZv>:
  1070fe:	55                   	push   %rbp
  1070ff:	48 89 e5             	mov    %rsp,%rbp
  107102:	48 83 ec 30          	sub    $0x30,%rsp
  107106:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10710a:	40 88 75 d7          	mov    %sil,-0x29(%rbp)
  10710e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107113:	75 3b                	jne    107150 <_D3gdt3GDT12SysSegDesc641gMFhZv+0x52>
  107115:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10711c:	00 
  10711d:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107124:	00 
  107125:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10712c:	00 
  10712d:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107134:	00 
  107135:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107139:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10713d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107141:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107145:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10714b:	e8 9d db 00 00       	callq  114ced <_d_assert_msg>
  107150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107154:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  107158:	89 c2                	mov    %eax,%edx
  10715a:	83 e2 7f             	and    $0x7f,%edx
  10715d:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
  107161:	83 e0 01             	and    $0x1,%eax
  107164:	c1 e0 07             	shl    $0x7,%eax
  107167:	09 c2                	or     %eax,%edx
  107169:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10716d:	88 50 06             	mov    %dl,0x6(%rax)
  107170:	c9                   	leaveq 
  107171:	c3                   	retq   

0000000000107172 <_D3gdt3GDT14CallGateDesc645zero0MFZt>:
	}

	static assert(SysSegDesc64.sizeof == 16);
	
	align(1) struct CallGateDesc64
	{
  107172:	55                   	push   %rbp
  107173:	48 89 e5             	mov    %rsp,%rbp
  107176:	48 83 ec 30          	sub    $0x30,%rsp
  10717a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10717e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107183:	75 3b                	jne    1071c0 <_D3gdt3GDT14CallGateDesc645zero0MFZt+0x4e>
  107185:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10718c:	00 
  10718d:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107194:	00 
  107195:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10719c:	00 
  10719d:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1071a4:	00 
  1071a5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1071a9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1071ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1071b1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1071b5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1071bb:	e8 2d db 00 00       	callq  114ced <_d_assert_msg>
  1071c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1071c4:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1071c8:	66 25 ff 00          	and    $0xff,%ax
  1071cc:	c9                   	leaveq 
  1071cd:	c3                   	retq   

00000000001071ce <_D3gdt3GDT14CallGateDesc645zero0MFtZv>:
  1071ce:	55                   	push   %rbp
  1071cf:	48 89 e5             	mov    %rsp,%rbp
  1071d2:	48 83 ec 30          	sub    $0x30,%rsp
  1071d6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1071da:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  1071de:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1071e3:	75 3b                	jne    107220 <_D3gdt3GDT14CallGateDesc645zero0MFtZv+0x52>
  1071e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1071ec:	00 
  1071ed:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1071f4:	00 
  1071f5:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1071fc:	00 
  1071fd:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107204:	00 
  107205:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107209:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10720d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107211:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107215:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10721b:	e8 cd da 00 00       	callq  114ced <_d_assert_msg>
  107220:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107224:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107228:	89 c2                	mov    %eax,%edx
  10722a:	b2 00                	mov    $0x0,%dl
  10722c:	0f b6 45 d6          	movzbl -0x2a(%rbp),%eax
  107230:	09 c2                	or     %eax,%edx
  107232:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107236:	66 89 50 04          	mov    %dx,0x4(%rax)
  10723a:	c9                   	leaveq 
  10723b:	c3                   	retq   

000000000010723c <_D3gdt3GDT14CallGateDesc644typeMFZt>:
  10723c:	55                   	push   %rbp
  10723d:	48 89 e5             	mov    %rsp,%rbp
  107240:	48 83 ec 30          	sub    $0x30,%rsp
  107244:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107248:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10724d:	75 3b                	jne    10728a <_D3gdt3GDT14CallGateDesc644typeMFZt+0x4e>
  10724f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107256:	00 
  107257:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10725e:	00 
  10725f:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107266:	00 
  107267:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10726e:	00 
  10726f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107273:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107277:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10727b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10727f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107285:	e8 63 da 00 00       	callq  114ced <_d_assert_msg>
  10728a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10728e:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107292:	0f b7 c0             	movzwl %ax,%eax
  107295:	c1 f8 08             	sar    $0x8,%eax
  107298:	83 e0 0f             	and    $0xf,%eax
  10729b:	c9                   	leaveq 
  10729c:	c3                   	retq   

000000000010729d <_D3gdt3GDT14CallGateDesc644typeMFtZv>:
  10729d:	55                   	push   %rbp
  10729e:	48 89 e5             	mov    %rsp,%rbp
  1072a1:	48 83 ec 30          	sub    $0x30,%rsp
  1072a5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1072a9:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  1072ad:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1072b2:	75 3b                	jne    1072ef <_D3gdt3GDT14CallGateDesc644typeMFtZv+0x52>
  1072b4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1072bb:	00 
  1072bc:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1072c3:	00 
  1072c4:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1072cb:	00 
  1072cc:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1072d3:	00 
  1072d4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1072d8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1072dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1072e0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1072e4:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1072ea:	e8 fe d9 00 00       	callq  114ced <_d_assert_msg>
  1072ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1072f3:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1072f7:	89 c2                	mov    %eax,%edx
  1072f9:	80 e6 f0             	and    $0xf0,%dh
  1072fc:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  107300:	83 e0 0f             	and    $0xf,%eax
  107303:	c1 e0 08             	shl    $0x8,%eax
  107306:	09 c2                	or     %eax,%edx
  107308:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10730c:	66 89 50 04          	mov    %dx,0x4(%rax)
  107310:	c9                   	leaveq 
  107311:	c3                   	retq   

0000000000107312 <_D3gdt3GDT14CallGateDesc645zero1MFZt>:
  107312:	55                   	push   %rbp
  107313:	48 89 e5             	mov    %rsp,%rbp
  107316:	48 83 ec 30          	sub    $0x30,%rsp
  10731a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10731e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107323:	75 3b                	jne    107360 <_D3gdt3GDT14CallGateDesc645zero1MFZt+0x4e>
  107325:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10732c:	00 
  10732d:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107334:	00 
  107335:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10733c:	00 
  10733d:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107344:	00 
  107345:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107349:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10734d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107351:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107355:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10735b:	e8 8d d9 00 00       	callq  114ced <_d_assert_msg>
  107360:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107364:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107368:	0f b7 c0             	movzwl %ax,%eax
  10736b:	c1 f8 0c             	sar    $0xc,%eax
  10736e:	83 e0 01             	and    $0x1,%eax
  107371:	c9                   	leaveq 
  107372:	c3                   	retq   

0000000000107373 <_D3gdt3GDT14CallGateDesc645zero1MFtZv>:
  107373:	55                   	push   %rbp
  107374:	48 89 e5             	mov    %rsp,%rbp
  107377:	48 83 ec 30          	sub    $0x30,%rsp
  10737b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10737f:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107383:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107388:	75 3b                	jne    1073c5 <_D3gdt3GDT14CallGateDesc645zero1MFtZv+0x52>
  10738a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107391:	00 
  107392:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107399:	00 
  10739a:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1073a1:	00 
  1073a2:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1073a9:	00 
  1073aa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1073ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1073b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1073b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1073ba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1073c0:	e8 28 d9 00 00       	callq  114ced <_d_assert_msg>
  1073c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1073c9:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1073cd:	89 c2                	mov    %eax,%edx
  1073cf:	80 e6 ef             	and    $0xef,%dh
  1073d2:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  1073d6:	83 e0 01             	and    $0x1,%eax
  1073d9:	c1 e0 0c             	shl    $0xc,%eax
  1073dc:	09 c2                	or     %eax,%edx
  1073de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1073e2:	66 89 50 04          	mov    %dx,0x4(%rax)
  1073e6:	c9                   	leaveq 
  1073e7:	c3                   	retq   

00000000001073e8 <_D3gdt3GDT14CallGateDesc643dplMFZt>:
  1073e8:	55                   	push   %rbp
  1073e9:	48 89 e5             	mov    %rsp,%rbp
  1073ec:	48 83 ec 30          	sub    $0x30,%rsp
  1073f0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1073f4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1073f9:	75 3b                	jne    107436 <_D3gdt3GDT14CallGateDesc643dplMFZt+0x4e>
  1073fb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107402:	00 
  107403:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10740a:	00 
  10740b:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107412:	00 
  107413:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10741a:	00 
  10741b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10741f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107423:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107427:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10742b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107431:	e8 b7 d8 00 00       	callq  114ced <_d_assert_msg>
  107436:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10743a:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  10743e:	0f b7 c0             	movzwl %ax,%eax
  107441:	c1 f8 0d             	sar    $0xd,%eax
  107444:	83 e0 03             	and    $0x3,%eax
  107447:	c9                   	leaveq 
  107448:	c3                   	retq   

0000000000107449 <_D3gdt3GDT14CallGateDesc643dplMFtZv>:
  107449:	55                   	push   %rbp
  10744a:	48 89 e5             	mov    %rsp,%rbp
  10744d:	48 83 ec 30          	sub    $0x30,%rsp
  107451:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107455:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107459:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10745e:	75 3b                	jne    10749b <_D3gdt3GDT14CallGateDesc643dplMFtZv+0x52>
  107460:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107467:	00 
  107468:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10746f:	00 
  107470:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107477:	00 
  107478:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10747f:	00 
  107480:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107484:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107488:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10748c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107490:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107496:	e8 52 d8 00 00       	callq  114ced <_d_assert_msg>
  10749b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10749f:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1074a3:	89 c2                	mov    %eax,%edx
  1074a5:	80 e6 9f             	and    $0x9f,%dh
  1074a8:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  1074ac:	83 e0 03             	and    $0x3,%eax
  1074af:	c1 e0 0d             	shl    $0xd,%eax
  1074b2:	09 c2                	or     %eax,%edx
  1074b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1074b8:	66 89 50 04          	mov    %dx,0x4(%rax)
  1074bc:	c9                   	leaveq 
  1074bd:	c3                   	retq   

00000000001074be <_D3gdt3GDT14CallGateDesc641pMFZt>:
  1074be:	55                   	push   %rbp
  1074bf:	48 89 e5             	mov    %rsp,%rbp
  1074c2:	48 83 ec 30          	sub    $0x30,%rsp
  1074c6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1074ca:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1074cf:	75 3b                	jne    10750c <_D3gdt3GDT14CallGateDesc641pMFZt+0x4e>
  1074d1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1074d8:	00 
  1074d9:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1074e0:	00 
  1074e1:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1074e8:	00 
  1074e9:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1074f0:	00 
  1074f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1074f5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1074f9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1074fd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107501:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107507:	e8 e1 d7 00 00       	callq  114ced <_d_assert_msg>
  10750c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107510:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107514:	0f b7 c0             	movzwl %ax,%eax
  107517:	c1 f8 0f             	sar    $0xf,%eax
  10751a:	83 e0 01             	and    $0x1,%eax
  10751d:	c9                   	leaveq 
  10751e:	c3                   	retq   

000000000010751f <_D3gdt3GDT14CallGateDesc641pMFtZv>:
  10751f:	55                   	push   %rbp
  107520:	48 89 e5             	mov    %rsp,%rbp
  107523:	48 83 ec 30          	sub    $0x30,%rsp
  107527:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10752b:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  10752f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107534:	75 3b                	jne    107571 <_D3gdt3GDT14CallGateDesc641pMFtZv+0x52>
  107536:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10753d:	00 
  10753e:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107545:	00 
  107546:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10754d:	00 
  10754e:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107555:	00 
  107556:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10755a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10755e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107562:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107566:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10756c:	e8 7c d7 00 00       	callq  114ced <_d_assert_msg>
  107571:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107575:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107579:	89 c2                	mov    %eax,%edx
  10757b:	66 81 e2 ff 7f       	and    $0x7fff,%dx
  107580:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  107584:	83 e0 01             	and    $0x1,%eax
  107587:	c1 e0 0f             	shl    $0xf,%eax
  10758a:	09 c2                	or     %eax,%edx
  10758c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107590:	66 89 50 04          	mov    %dx,0x4(%rax)
  107594:	c9                   	leaveq 
  107595:	c3                   	retq   

0000000000107596 <_D3gdt3GDT13IntGateDesc643istMFZt>:
	}
	
	static assert(CallGateDesc64.sizeof == 16);
	
	align(1) struct IntGateDesc64
	{
  107596:	55                   	push   %rbp
  107597:	48 89 e5             	mov    %rsp,%rbp
  10759a:	48 83 ec 30          	sub    $0x30,%rsp
  10759e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1075a2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1075a7:	75 3b                	jne    1075e4 <_D3gdt3GDT13IntGateDesc643istMFZt+0x4e>
  1075a9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1075b0:	00 
  1075b1:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1075b8:	00 
  1075b9:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1075c0:	00 
  1075c1:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1075c8:	00 
  1075c9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1075cd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1075d1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1075d5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1075d9:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1075df:	e8 09 d7 00 00       	callq  114ced <_d_assert_msg>
  1075e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1075e8:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1075ec:	83 e0 07             	and    $0x7,%eax
  1075ef:	c9                   	leaveq 
  1075f0:	c3                   	retq   

00000000001075f1 <_D3gdt3GDT13IntGateDesc643istMFtZv>:
  1075f1:	55                   	push   %rbp
  1075f2:	48 89 e5             	mov    %rsp,%rbp
  1075f5:	48 83 ec 30          	sub    $0x30,%rsp
  1075f9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1075fd:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107601:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107606:	75 3b                	jne    107643 <_D3gdt3GDT13IntGateDesc643istMFtZv+0x52>
  107608:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10760f:	00 
  107610:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107617:	00 
  107618:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10761f:	00 
  107620:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107627:	00 
  107628:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10762c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107630:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107634:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107638:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10763e:	e8 aa d6 00 00       	callq  114ced <_d_assert_msg>
  107643:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107647:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  10764b:	89 c2                	mov    %eax,%edx
  10764d:	83 e2 f8             	and    $0xfffffffffffffff8,%edx
  107650:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  107654:	83 e0 07             	and    $0x7,%eax
  107657:	09 c2                	or     %eax,%edx
  107659:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10765d:	66 89 50 04          	mov    %dx,0x4(%rax)
  107661:	c9                   	leaveq 
  107662:	c3                   	retq   

0000000000107663 <_D3gdt3GDT13IntGateDesc645zero0MFZt>:
  107663:	55                   	push   %rbp
  107664:	48 89 e5             	mov    %rsp,%rbp
  107667:	48 83 ec 30          	sub    $0x30,%rsp
  10766b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10766f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107674:	75 3b                	jne    1076b1 <_D3gdt3GDT13IntGateDesc645zero0MFZt+0x4e>
  107676:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10767d:	00 
  10767e:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107685:	00 
  107686:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10768d:	00 
  10768e:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107695:	00 
  107696:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10769a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10769e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1076a2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1076a6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1076ac:	e8 3c d6 00 00       	callq  114ced <_d_assert_msg>
  1076b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1076b5:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1076b9:	0f b7 c0             	movzwl %ax,%eax
  1076bc:	c1 f8 03             	sar    $0x3,%eax
  1076bf:	83 e0 1f             	and    $0x1f,%eax
  1076c2:	c9                   	leaveq 
  1076c3:	c3                   	retq   

00000000001076c4 <_D3gdt3GDT13IntGateDesc645zero0MFtZv>:
  1076c4:	55                   	push   %rbp
  1076c5:	48 89 e5             	mov    %rsp,%rbp
  1076c8:	48 83 ec 30          	sub    $0x30,%rsp
  1076cc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1076d0:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  1076d4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1076d9:	75 3b                	jne    107716 <_D3gdt3GDT13IntGateDesc645zero0MFtZv+0x52>
  1076db:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1076e2:	00 
  1076e3:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1076ea:	00 
  1076eb:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1076f2:	00 
  1076f3:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1076fa:	00 
  1076fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1076ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107703:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107707:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10770b:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107711:	e8 d7 d5 00 00       	callq  114ced <_d_assert_msg>
  107716:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10771a:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  10771e:	89 c2                	mov    %eax,%edx
  107720:	80 e2 07             	and    $0x7,%dl
  107723:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  107727:	83 e0 1f             	and    $0x1f,%eax
  10772a:	c1 e0 03             	shl    $0x3,%eax
  10772d:	09 c2                	or     %eax,%edx
  10772f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107733:	66 89 50 04          	mov    %dx,0x4(%rax)
  107737:	c9                   	leaveq 
  107738:	c3                   	retq   

0000000000107739 <_D3gdt3GDT13IntGateDesc644typeMFZt>:
  107739:	55                   	push   %rbp
  10773a:	48 89 e5             	mov    %rsp,%rbp
  10773d:	48 83 ec 30          	sub    $0x30,%rsp
  107741:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107745:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10774a:	75 3b                	jne    107787 <_D3gdt3GDT13IntGateDesc644typeMFZt+0x4e>
  10774c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107753:	00 
  107754:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10775b:	00 
  10775c:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107763:	00 
  107764:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10776b:	00 
  10776c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107770:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107774:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107778:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10777c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107782:	e8 66 d5 00 00       	callq  114ced <_d_assert_msg>
  107787:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10778b:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  10778f:	0f b7 c0             	movzwl %ax,%eax
  107792:	c1 f8 08             	sar    $0x8,%eax
  107795:	83 e0 0f             	and    $0xf,%eax
  107798:	c9                   	leaveq 
  107799:	c3                   	retq   

000000000010779a <_D3gdt3GDT13IntGateDesc644typeMFtZv>:
  10779a:	55                   	push   %rbp
  10779b:	48 89 e5             	mov    %rsp,%rbp
  10779e:	48 83 ec 30          	sub    $0x30,%rsp
  1077a2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1077a6:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  1077aa:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1077af:	75 3b                	jne    1077ec <_D3gdt3GDT13IntGateDesc644typeMFtZv+0x52>
  1077b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1077b8:	00 
  1077b9:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1077c0:	00 
  1077c1:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1077c8:	00 
  1077c9:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1077d0:	00 
  1077d1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1077d5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1077d9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1077dd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1077e1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1077e7:	e8 01 d5 00 00       	callq  114ced <_d_assert_msg>
  1077ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1077f0:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1077f4:	89 c2                	mov    %eax,%edx
  1077f6:	80 e6 f0             	and    $0xf0,%dh
  1077f9:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  1077fd:	83 e0 0f             	and    $0xf,%eax
  107800:	c1 e0 08             	shl    $0x8,%eax
  107803:	09 c2                	or     %eax,%edx
  107805:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107809:	66 89 50 04          	mov    %dx,0x4(%rax)
  10780d:	c9                   	leaveq 
  10780e:	c3                   	retq   

000000000010780f <_D3gdt3GDT13IntGateDesc645zero1MFZt>:
  10780f:	55                   	push   %rbp
  107810:	48 89 e5             	mov    %rsp,%rbp
  107813:	48 83 ec 30          	sub    $0x30,%rsp
  107817:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10781b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107820:	75 3b                	jne    10785d <_D3gdt3GDT13IntGateDesc645zero1MFZt+0x4e>
  107822:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107829:	00 
  10782a:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107831:	00 
  107832:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107839:	00 
  10783a:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107841:	00 
  107842:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107846:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10784a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10784e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107852:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107858:	e8 90 d4 00 00       	callq  114ced <_d_assert_msg>
  10785d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107861:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107865:	0f b7 c0             	movzwl %ax,%eax
  107868:	c1 f8 0c             	sar    $0xc,%eax
  10786b:	83 e0 01             	and    $0x1,%eax
  10786e:	c9                   	leaveq 
  10786f:	c3                   	retq   

0000000000107870 <_D3gdt3GDT13IntGateDesc645zero1MFtZv>:
  107870:	55                   	push   %rbp
  107871:	48 89 e5             	mov    %rsp,%rbp
  107874:	48 83 ec 30          	sub    $0x30,%rsp
  107878:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10787c:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107880:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107885:	75 3b                	jne    1078c2 <_D3gdt3GDT13IntGateDesc645zero1MFtZv+0x52>
  107887:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10788e:	00 
  10788f:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107896:	00 
  107897:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10789e:	00 
  10789f:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1078a6:	00 
  1078a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1078ab:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1078af:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1078b3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1078b7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  1078bd:	e8 2b d4 00 00       	callq  114ced <_d_assert_msg>
  1078c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1078c6:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1078ca:	89 c2                	mov    %eax,%edx
  1078cc:	80 e6 ef             	and    $0xef,%dh
  1078cf:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  1078d3:	83 e0 01             	and    $0x1,%eax
  1078d6:	c1 e0 0c             	shl    $0xc,%eax
  1078d9:	09 c2                	or     %eax,%edx
  1078db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1078df:	66 89 50 04          	mov    %dx,0x4(%rax)
  1078e3:	c9                   	leaveq 
  1078e4:	c3                   	retq   

00000000001078e5 <_D3gdt3GDT13IntGateDesc643dplMFZt>:
  1078e5:	55                   	push   %rbp
  1078e6:	48 89 e5             	mov    %rsp,%rbp
  1078e9:	48 83 ec 30          	sub    $0x30,%rsp
  1078ed:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1078f1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1078f6:	75 3b                	jne    107933 <_D3gdt3GDT13IntGateDesc643dplMFZt+0x4e>
  1078f8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1078ff:	00 
  107900:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107907:	00 
  107908:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  10790f:	00 
  107910:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107917:	00 
  107918:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10791c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107920:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107924:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107928:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  10792e:	e8 ba d3 00 00       	callq  114ced <_d_assert_msg>
  107933:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107937:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  10793b:	0f b7 c0             	movzwl %ax,%eax
  10793e:	c1 f8 0d             	sar    $0xd,%eax
  107941:	83 e0 03             	and    $0x3,%eax
  107944:	c9                   	leaveq 
  107945:	c3                   	retq   

0000000000107946 <_D3gdt3GDT13IntGateDesc643dplMFtZv>:
  107946:	55                   	push   %rbp
  107947:	48 89 e5             	mov    %rsp,%rbp
  10794a:	48 83 ec 30          	sub    $0x30,%rsp
  10794e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107952:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107956:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  10795b:	75 3b                	jne    107998 <_D3gdt3GDT13IntGateDesc643dplMFtZv+0x52>
  10795d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107964:	00 
  107965:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  10796c:	00 
  10796d:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107974:	00 
  107975:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  10797c:	00 
  10797d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107981:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107985:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107989:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10798d:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107993:	e8 55 d3 00 00       	callq  114ced <_d_assert_msg>
  107998:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10799c:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  1079a0:	89 c2                	mov    %eax,%edx
  1079a2:	80 e6 9f             	and    $0x9f,%dh
  1079a5:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  1079a9:	83 e0 03             	and    $0x3,%eax
  1079ac:	c1 e0 0d             	shl    $0xd,%eax
  1079af:	09 c2                	or     %eax,%edx
  1079b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1079b5:	66 89 50 04          	mov    %dx,0x4(%rax)
  1079b9:	c9                   	leaveq 
  1079ba:	c3                   	retq   

00000000001079bb <_D3gdt3GDT13IntGateDesc641pMFZt>:
  1079bb:	55                   	push   %rbp
  1079bc:	48 89 e5             	mov    %rsp,%rbp
  1079bf:	48 83 ec 30          	sub    $0x30,%rsp
  1079c3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  1079c7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  1079cc:	75 3b                	jne    107a09 <_D3gdt3GDT13IntGateDesc641pMFZt+0x4e>
  1079ce:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1079d5:	00 
  1079d6:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  1079dd:	00 
  1079de:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  1079e5:	00 
  1079e6:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  1079ed:	00 
  1079ee:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1079f2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  1079f6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1079fa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1079fe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107a04:	e8 e4 d2 00 00       	callq  114ced <_d_assert_msg>
  107a09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107a0d:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107a11:	0f b7 c0             	movzwl %ax,%eax
  107a14:	c1 f8 0f             	sar    $0xf,%eax
  107a17:	83 e0 01             	and    $0x1,%eax
  107a1a:	c9                   	leaveq 
  107a1b:	c3                   	retq   

0000000000107a1c <_D3gdt3GDT13IntGateDesc641pMFtZv>:
  107a1c:	55                   	push   %rbp
  107a1d:	48 89 e5             	mov    %rsp,%rbp
  107a20:	48 83 ec 30          	sub    $0x30,%rsp
  107a24:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  107a28:	66 89 75 d6          	mov    %si,-0x2a(%rbp)
  107a2c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  107a31:	75 3b                	jne    107a6e <_D3gdt3GDT13IntGateDesc641pMFtZv+0x52>
  107a33:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  107a3a:	00 
  107a3b:	48 c7 45 e8 9e 77 11 	movq   $0x11779e,-0x18(%rbp)
  107a42:	00 
  107a43:	48 c7 45 f0 09 00 00 	movq   $0x9,-0x10(%rbp)
  107a4a:	00 
  107a4b:	48 c7 45 f8 9f 77 11 	movq   $0x11779f,-0x8(%rbp)
  107a52:	00 
  107a53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  107a57:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  107a5b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107a5f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107a63:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107a69:	e8 7f d2 00 00       	callq  114ced <_d_assert_msg>
  107a6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107a72:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  107a76:	89 c2                	mov    %eax,%edx
  107a78:	66 81 e2 ff 7f       	and    $0x7fff,%dx
  107a7d:	0f b7 45 d6          	movzwl -0x2a(%rbp),%eax
  107a81:	83 e0 01             	and    $0x1,%eax
  107a84:	c1 e0 0f             	shl    $0xf,%eax
  107a87:	09 c2                	or     %eax,%edx
  107a89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107a8d:	66 89 50 04          	mov    %dx,0x4(%rax)
  107a91:	c9                   	leaveq 
  107a92:	c3                   	retq   

0000000000107a93 <_D3gdt3GDT16setCodeSegment64FibhbbbZv>:

	// Since an entry can be 8 or 16 bytes long, we have to do some scary shit to make this
	// work right.  Pointer hacking and such.
	public ulong[16] Entries;

	void setCodeSegment64(int num, bool conforming, ubyte DPL, bool present, bool longMode, bool opSize)
  107a93:	55                   	push   %rbp
  107a94:	48 89 e5             	mov    %rsp,%rbp
  107a97:	48 83 ec 70          	sub    $0x70,%rsp
  107a9b:	89 7d ac             	mov    %edi,-0x54(%rbp)
  107a9e:	40 88 75 ab          	mov    %sil,-0x55(%rbp)
  107aa2:	88 55 aa             	mov    %dl,-0x56(%rbp)
  107aa5:	88 4d a9             	mov    %cl,-0x57(%rbp)
  107aa8:	44 88 45 a8          	mov    %r8b,-0x58(%rbp)
  107aac:	44 88 4d a7          	mov    %r9b,-0x59(%rbp)
	{
		if(longMode)
  107ab0:	80 7d a8 00          	cmpb   $0x0,-0x58(%rbp)
  107ab4:	74 43                	je     107af9 <_D3gdt3GDT16setCodeSegment64FibhbbbZv+0x66>
			assert(opSize is false, "GDT.setCodeSegment -- If long mode, opSize must be false!");
  107ab6:	0f b6 45 a7          	movzbl -0x59(%rbp),%eax
  107aba:	85 c0                	test   %eax,%eax
  107abc:	74 3b                	je     107af9 <_D3gdt3GDT16setCodeSegment64FibhbbbZv+0x66>
  107abe:	48 c7 45 c0 05 00 00 	movq   $0x5,-0x40(%rbp)
  107ac5:	00 
  107ac6:	48 c7 45 c8 72 78 11 	movq   $0x117872,-0x38(%rbp)
  107acd:	00 
  107ace:	48 c7 45 d0 39 00 00 	movq   $0x39,-0x30(%rbp)
  107ad5:	00 
  107ad6:	48 c7 45 d8 78 78 11 	movq   $0x117878,-0x28(%rbp)
  107add:	00 
  107ade:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  107ae2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  107ae6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  107aea:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  107aee:	41 b8 86 00 00 00    	mov    $0x86,%r8d
  107af4:	e8 f4 d1 00 00       	callq  114ced <_d_assert_msg>

		CodeSegDesc64 cs;
  107af9:	48 8b 05 96 fc 00 00 	mov    0xfc96(%rip),%rax        # 117796 <_D3gdt3GDT13CodeSegDesc646__initZ>
  107b00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  107b04:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  107b08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		
		with(cs)
		{
			c = conforming;
  107b0c:	0f b6 75 ab          	movzbl -0x55(%rbp),%esi
  107b10:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107b14:	e8 e4 e7 ff ff       	callq  1062fd <_D3gdt3GDT13CodeSegDesc641cMFhZv>
			dpl = DPL;
  107b19:	0f b6 75 aa          	movzbl -0x56(%rbp),%esi
  107b1d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107b21:	e8 81 e9 ff ff       	callq  1064a7 <_D3gdt3GDT13CodeSegDesc643dplMFhZv>
			p = present;
  107b26:	0f b6 75 a9          	movzbl -0x57(%rbp),%esi
  107b2a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107b2e:	e8 49 ea ff ff       	callq  10657c <_D3gdt3GDT13CodeSegDesc641pMFhZv>
			l = longMode;
  107b33:	0f b6 75 a8          	movzbl -0x58(%rbp),%esi
  107b37:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107b3b:	e8 dd eb ff ff       	callq  10671d <_D3gdt3GDT13CodeSegDesc641lMFhZv>
			d = opSize;
  107b40:	0f b6 75 a7          	movzbl -0x59(%rbp),%esi
  107b44:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107b48:	e8 a5 ec ff ff       	callq  1067f2 <_D3gdt3GDT13CodeSegDesc641dMFhZv>
		}
		
		*cast(CodeSegDesc64*)&Entries[num] = cs;
  107b4d:	8b 45 ac             	mov    -0x54(%rbp),%eax
  107b50:	48 98                	cltq   
  107b52:	48 83 f8 10          	cmp    $0x10,%rax
  107b56:	73 0b                	jae    107b63 <_D3gdt3GDT16setCodeSegment64FibhbbbZv+0xd0>
  107b58:	8b 45 ac             	mov    -0x54(%rbp),%eax
  107b5b:	48 98                	cltq   
  107b5d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  107b61:	eb 22                	jmp    107b85 <_D3gdt3GDT16setCodeSegment64FibhbbbZv+0xf2>
  107b63:	48 c7 45 e0 05 00 00 	movq   $0x5,-0x20(%rbp)
  107b6a:	00 
  107b6b:	48 c7 45 e8 72 78 11 	movq   $0x117872,-0x18(%rbp)
  107b72:	00 
  107b73:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  107b77:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  107b7b:	ba 93 00 00 00       	mov    $0x93,%edx
  107b80:	e8 b0 d1 00 00       	callq  114d35 <_d_array_bounds>
  107b85:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  107b89:	48 c1 e0 03          	shl    $0x3,%rax
  107b8d:	48 05 40 57 12 00    	add    $0x125740,%rax
  107b93:	48 89 c2             	mov    %rax,%rdx
  107b96:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  107b9a:	48 89 02             	mov    %rax,(%rdx)
	}
  107b9d:	c9                   	leaveq 
  107b9e:	c3                   	retq   

0000000000107b9f <_D3gdt3GDT16setDataSegment64FibZv>:
	
	void setDataSegment64(int num, bool present)
  107b9f:	55                   	push   %rbp
  107ba0:	48 89 e5             	mov    %rsp,%rbp
  107ba3:	48 83 ec 40          	sub    $0x40,%rsp
  107ba7:	89 7d cc             	mov    %edi,-0x34(%rbp)
  107baa:	40 88 75 cb          	mov    %sil,-0x35(%rbp)
	{
		DataSegDesc64 ds;
  107bae:	48 8b 05 f4 fb 00 00 	mov    0xfbf4(%rip),%rax        # 1177a9 <_D3gdt3GDT13DataSegDesc646__initZ>
  107bb5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  107bb9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  107bbd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		with(ds)
		{
			p = present;
  107bc1:	0f b6 75 cb          	movzbl -0x35(%rbp),%esi
  107bc5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107bc9:	e8 9a ee ff ff       	callq  106a68 <_D3gdt3GDT13DataSegDesc641pMFhZv>
		}
		
		*cast(DataSegDesc64*)&Entries[num] = ds;
  107bce:	8b 45 cc             	mov    -0x34(%rbp),%eax
  107bd1:	48 98                	cltq   
  107bd3:	48 83 f8 10          	cmp    $0x10,%rax
  107bd7:	73 0b                	jae    107be4 <_D3gdt3GDT16setDataSegment64FibZv+0x45>
  107bd9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  107bdc:	48 98                	cltq   
  107bde:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  107be2:	eb 22                	jmp    107c06 <_D3gdt3GDT16setDataSegment64FibZv+0x67>
  107be4:	48 c7 45 e0 05 00 00 	movq   $0x5,-0x20(%rbp)
  107beb:	00 
  107bec:	48 c7 45 e8 72 78 11 	movq   $0x117872,-0x18(%rbp)
  107bf3:	00 
  107bf4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  107bf8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  107bfc:	ba 9f 00 00 00       	mov    $0x9f,%edx
  107c01:	e8 2f d1 00 00       	callq  114d35 <_d_array_bounds>
  107c06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  107c0a:	48 c1 e0 03          	shl    $0x3,%rax
  107c0e:	48 05 40 57 12 00    	add    $0x125740,%rax
  107c14:	48 89 c2             	mov    %rax,%rdx
  107c17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  107c1b:	48 89 02             	mov    %rax,(%rdx)
	}
  107c1e:	c9                   	leaveq 
  107c1f:	c3                   	retq   

0000000000107c20 <_D3gdt3GDT15setSysSegment64FikmE3gdt3GDT12SysSegType64hbbkZv>:
	
	void setSysSegment64(int num, uint limit, ulong base, SysSegType64 segType, ubyte DPL, bool present, bool avail, uint granularity)
  107c20:	55                   	push   %rbp
  107c21:	48 89 e5             	mov    %rsp,%rbp
  107c24:	48 83 ec 50          	sub    $0x50,%rsp
  107c28:	89 7d cc             	mov    %edi,-0x34(%rbp)
  107c2b:	89 75 c8             	mov    %esi,-0x38(%rbp)
  107c2e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  107c32:	89 4d bc             	mov    %ecx,-0x44(%rbp)
  107c35:	44 88 45 bb          	mov    %r8b,-0x45(%rbp)
  107c39:	44 88 4d ba          	mov    %r9b,-0x46(%rbp)
	{
		SysSegDesc64 ss;
  107c3d:	48 8b 05 7c fb 00 00 	mov    0xfb7c(%rip),%rax        # 1177c0 <_D3gdt3GDT12SysSegDesc646__initZ>
  107c44:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  107c48:	48 8b 05 79 fb 00 00 	mov    0xfb79(%rip),%rax        # 1177c8 <_D3gdt3GDT12SysSegDesc646__initZ+0x8>
  107c4f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  107c53:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  107c57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		with(ss)
		{
			base_lo = (base & 0xFFFF);
  107c5b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107c5f:	48 83 c2 02          	add    $0x2,%rdx
  107c63:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  107c67:	66 89 02             	mov    %ax,(%rdx)
			base_midlo = (base >> 16) & 0xFF;
  107c6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107c6e:	48 83 c2 04          	add    $0x4,%rdx
  107c72:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  107c76:	48 c1 e8 10          	shr    $0x10,%rax
  107c7a:	88 02                	mov    %al,(%rdx)
			base_midhi = (base >> 24) & 0xFF;
  107c7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107c80:	48 83 c2 07          	add    $0x7,%rdx
  107c84:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  107c88:	48 c1 e8 18          	shr    $0x18,%rax
  107c8c:	88 02                	mov    %al,(%rdx)
			base_hi = (base >> 32) & 0xFFFF;
  107c8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107c92:	48 83 c2 08          	add    $0x8,%rdx
  107c96:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  107c9a:	48 c1 e8 20          	shr    $0x20,%rax
  107c9e:	25 ff ff 00 00       	and    $0xffff,%eax
  107ca3:	89 02                	mov    %eax,(%rdx)

			limit_lo = limit & 0xFFFF;
  107ca5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107ca9:	8b 45 c8             	mov    -0x38(%rbp),%eax
  107cac:	66 89 02             	mov    %ax,(%rdx)
			limit_hi = (limit >> 16) & 0xF;
  107caf:	8b 45 c8             	mov    -0x38(%rbp),%eax
  107cb2:	c1 e8 10             	shr    $0x10,%eax
  107cb5:	0f b6 c0             	movzbl %al,%eax
  107cb8:	89 c6                	mov    %eax,%esi
  107cba:	83 e6 0f             	and    $0xf,%esi
  107cbd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107cc1:	e8 bc f1 ff ff       	callq  106e82 <_D3gdt3GDT12SysSegDesc648limit_hiMFhZv>

			type = segType;
  107cc6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  107cc9:	0f b6 f0             	movzbl %al,%esi
  107ccc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107cd0:	e8 62 ee ff ff       	callq  106b37 <_D3gdt3GDT12SysSegDesc644typeMFhZv>
			dpl = DPL;
  107cd5:	0f b6 75 bb          	movzbl -0x45(%rbp),%esi
  107cd9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107cdd:	e8 fc ef ff ff       	callq  106cde <_D3gdt3GDT12SysSegDesc643dplMFhZv>
			p = present;
  107ce2:	0f b6 75 ba          	movzbl -0x46(%rbp),%esi
  107ce6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107cea:	e8 c4 f0 ff ff       	callq  106db3 <_D3gdt3GDT12SysSegDesc641pMFhZv>
			avl = avail;
  107cef:	0f b6 75 10          	movzbl 0x10(%rbp),%esi
  107cf3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107cf7:	e8 58 f2 ff ff       	callq  106f54 <_D3gdt3GDT12SysSegDesc643avlMFhZv>
			g = granularity;
  107cfc:	8b 45 18             	mov    0x18(%rbp),%eax
  107cff:	0f b6 f0             	movzbl %al,%esi
  107d02:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  107d06:	e8 f3 f3 ff ff       	callq  1070fe <_D3gdt3GDT12SysSegDesc641gMFhZv>
		}
		
		*cast(SysSegDesc64*)&Entries[num] = ss;
  107d0b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  107d0e:	48 98                	cltq   
  107d10:	48 83 f8 10          	cmp    $0x10,%rax
  107d14:	73 0b                	jae    107d21 <_D3gdt3GDT15setSysSegment64FikmE3gdt3GDT12SysSegType64hbbkZv+0x101>
  107d16:	8b 45 cc             	mov    -0x34(%rbp),%eax
  107d19:	48 98                	cltq   
  107d1b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  107d1f:	eb 22                	jmp    107d43 <_D3gdt3GDT15setSysSegment64FikmE3gdt3GDT12SysSegType64hbbkZv+0x123>
  107d21:	48 c7 45 e0 05 00 00 	movq   $0x5,-0x20(%rbp)
  107d28:	00 
  107d29:	48 c7 45 e8 72 78 11 	movq   $0x117872,-0x18(%rbp)
  107d30:	00 
  107d31:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  107d35:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  107d39:	ba b7 00 00 00       	mov    $0xb7,%edx
  107d3e:	e8 f2 cf 00 00       	callq  114d35 <_d_array_bounds>
  107d43:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  107d47:	48 c1 e0 03          	shl    $0x3,%rax
  107d4b:	48 05 40 57 12 00    	add    $0x125740,%rax
  107d51:	48 89 c2             	mov    %rax,%rdx
  107d54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  107d58:	48 89 02             	mov    %rax,(%rdx)
  107d5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  107d5f:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  107d63:	c9                   	leaveq 
  107d64:	c3                   	retq   

0000000000107d65 <_D3gdt3GDT7setNullFiZv>:

	void setNull(int num)
  107d65:	55                   	push   %rbp
  107d66:	48 89 e5             	mov    %rsp,%rbp
  107d69:	48 83 ec 20          	sub    $0x20,%rsp
  107d6d:	89 7d ec             	mov    %edi,-0x14(%rbp)
	{
		Entries[num] = 0;
  107d70:	8b 45 ec             	mov    -0x14(%rbp),%eax
  107d73:	48 98                	cltq   
  107d75:	48 83 f8 10          	cmp    $0x10,%rax
  107d79:	73 0b                	jae    107d86 <_D3gdt3GDT7setNullFiZv+0x21>
  107d7b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  107d7e:	48 98                	cltq   
  107d80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  107d84:	eb 22                	jmp    107da8 <_D3gdt3GDT7setNullFiZv+0x43>
  107d86:	48 c7 45 f0 05 00 00 	movq   $0x5,-0x10(%rbp)
  107d8d:	00 
  107d8e:	48 c7 45 f8 72 78 11 	movq   $0x117872,-0x8(%rbp)
  107d95:	00 
  107d96:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  107d9a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  107d9e:	ba bc 00 00 00       	mov    $0xbc,%edx
  107da3:	e8 8d cf 00 00       	callq  114d35 <_d_array_bounds>
  107da8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  107dac:	48 c1 e0 03          	shl    $0x3,%rax
  107db0:	48 05 40 57 12 00    	add    $0x125740,%rax
  107db6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
  107dbd:	c9                   	leaveq 
  107dbe:	c3                   	retq   

0000000000107dbf <_D3gdt3GDT7installFZv>:

	void install()
  107dbf:	55                   	push   %rbp
  107dc0:	48 89 e5             	mov    %rsp,%rbp
  107dc3:	48 83 ec 10          	sub    $0x10,%rsp
	{
		gp.limit = (typeof(Entries[0]).sizeof * Entries.length) - 1;
  107dc7:	66 c7 05 f0 d9 01 00 	movw   $0x7f,0x1d9f0(%rip)        # 1257c0 <gp>
  107dce:	7f 00 
		gp.base = cast(ulong)Entries.ptr;
  107dd0:	b8 40 57 12 00       	mov    $0x125740,%eax
  107dd5:	48 89 05 e6 d9 01 00 	mov    %rax,0x1d9e6(%rip)        # 1257c2 <gp+0x2>

		setNull(0);
  107ddc:	bf 00 00 00 00       	mov    $0x0,%edi
  107de1:	e8 7f ff ff ff       	callq  107d65 <_D3gdt3GDT7setNullFiZv>
		setNull(1);
  107de6:	bf 01 00 00 00       	mov    $0x1,%edi
  107deb:	e8 75 ff ff ff       	callq  107d65 <_D3gdt3GDT7setNullFiZv>
		setCodeSegment64(2, true, 0, true, true, false);
  107df0:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  107df6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  107dfc:	b9 01 00 00 00       	mov    $0x1,%ecx
  107e01:	ba 00 00 00 00       	mov    $0x0,%edx
  107e06:	be 01 00 00 00       	mov    $0x1,%esi
  107e0b:	bf 02 00 00 00       	mov    $0x2,%edi
  107e10:	e8 7e fc ff ff       	callq  107a93 <_D3gdt3GDT16setCodeSegment64FibhbbbZv>
		setDataSegment64(4, true);
  107e15:	be 01 00 00 00       	mov    $0x1,%esi
  107e1a:	bf 04 00 00 00       	mov    $0x4,%edi
  107e1f:	e8 7b fd ff ff       	callq  107b9f <_D3gdt3GDT16setDataSegment64FibZv>
		setSysSegment64(6, 0x67, cast(ulong)&tss_struct, SysSegType64.AvailTSS, 0, true, false, 0);
  107e24:	b8 c0 56 12 00       	mov    $0x1256c0,%eax
  107e29:	48 89 c2             	mov    %rax,%rdx
  107e2c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  107e33:	00 
  107e34:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  107e3b:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  107e41:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  107e47:	b9 09 00 00 00       	mov    $0x9,%ecx
  107e4c:	be 67 00 00 00       	mov    $0x67,%esi
  107e51:	bf 06 00 00 00       	mov    $0x6,%edi
  107e56:	e8 c5 fd ff ff       	callq  107c20 <_D3gdt3GDT15setSysSegment64FikmE3gdt3GDT12SysSegType64hbbkZv>
		//tss_struct.rsp0 = tss_struct.rsp1 = tss_struct.rsp2 =

		asm
		{
			"lgdt (gp)";
			"movw $0x30, %%ax" ::: "ax";
  107e5b:	0f 01 14 25 c0 57 12 	lgdt   0x1257c0
  107e62:	00 
			"ltr %%ax";
  107e63:	66 b8 30 00          	mov    $0x30,%ax
		}
  107e67:	0f 00 d8             	ltr    %ax
	}
  107e6a:	c9                   	leaveq 
  107e6b:	c3                   	retq   

0000000000107e6c <_D5lstar14syscallHandlerFZv>:

/**
Very basic system call handler. Simply prints out a message to the screen
informing the user a system call has been thrown.
*/
void syscallHandler() {
  107e6c:	55                   	push   %rbp
  107e6d:	48 89 e5             	mov    %rsp,%rbp
  107e70:	48 83 ec 10          	sub    $0x10,%rsp
	kprintfln("A system call has been thrown.");
  107e74:	48 c7 45 f0 1e 00 00 	movq   $0x1e,-0x10(%rbp)
  107e7b:	00 
  107e7c:	48 c7 45 f8 b8 78 11 	movq   $0x1178b8,-0x8(%rbp)
  107e83:	00 
  107e84:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  107e88:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  107e8c:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  107e91:	b8 00 00 00 00       	mov    $0x0,%eax
  107e96:	e8 63 d3 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
} // set syscallHandler
  107e9b:	c9                   	leaveq 
  107e9c:	c3                   	retq   

0000000000107e9d <_D5lstar11set_handlerFPFZvZv>:
This function declares a handler for system calls. It accepts a pointer to a function (h).
h will be called to fully handle the system call, depending on the register values for the system call.
	Params:
		h = A function that will be tied to the system call to handle it.
*/
void set_handler(void function() h) {
  107e9d:	55                   	push   %rbp
  107e9e:	48 89 e5             	mov    %rsp,%rbp
  107ea1:	48 83 ec 40          	sub    $0x40,%rsp
  107ea5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	ulong addy = cast(ulong) h;
  107ea9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  107ead:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	uint hi = addy >> 32;
  107eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  107eb5:	48 c1 e8 20          	shr    $0x20,%rax
  107eb9:	89 45 f4             	mov    %eax,-0xc(%rbp)
	uint lo = addy;
  107ebc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  107ec0:	89 45 f0             	mov    %eax,-0x10(%rbp)
	uint code = 0xC0000082;
  107ec3:	c7 45 ec 82 00 00 c0 	movl   $0xc0000082,-0x14(%rbp)

	kprintfln("Setting the Handler.");
  107eca:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  107ed1:	00 
  107ed2:	48 c7 45 d8 d7 78 11 	movq   $0x1178d7,-0x28(%rbp)
  107ed9:	00 
  107eda:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  107ede:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  107ee2:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  107ee7:	b8 00 00 00 00       	mov    $0x0,%eax
  107eec:	e8 0d d3 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		"mov %2, %%ecx\n\t"
		"wrmsr"
		: /* no output */
		: "r" hi, "r" lo, "r" code
		: "edx", "eax", "ecx";
	}
  107ef1:	44 8b 45 f4          	mov    -0xc(%rbp),%r8d
  107ef5:	8b 7d f0             	mov    -0x10(%rbp),%edi
  107ef8:	8b 75 ec             	mov    -0x14(%rbp),%esi
  107efb:	44 89 c2             	mov    %r8d,%edx
  107efe:	89 f8                	mov    %edi,%eax
  107f00:	89 f1                	mov    %esi,%ecx
  107f02:	0f 30                	wrmsr  
}
  107f04:	c9                   	leaveq 
  107f05:	c3                   	retq   
  107f06:	90                   	nop    
  107f07:	90                   	nop    

0000000000107f08 <_D12kgdb_support11init_serialFZv>:
const byte *com1 = cast(byte*)0x3f8;
const byte *com2 = cast(byte*)0x2f8;

byte *combase = com1;

void init_serial()
  107f08:	55                   	push   %rbp
  107f09:	48 89 e5             	mov    %rsp,%rbp
{
	//	outb(inb(combase + 3) | 0x80, combase + 3);
	volatile *(combase +3) = *(combase + 3) | 0x80;
  107f0c:	48 8b 05 d5 8d 01 00 	mov    0x18dd5(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f13:	48 8d 48 03          	lea    0x3(%rax),%rcx
  107f17:	48 8b 05 ca 8d 01 00 	mov    0x18dca(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f1e:	48 83 c0 03          	add    $0x3,%rax
  107f22:	0f b6 10             	movzbl (%rax),%edx
  107f25:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
  107f2a:	09 d0                	or     %edx,%eax
  107f2c:	88 01                	mov    %al,(%rcx)

	//	outb(12, combase);		 /* 9600 bps, 8-N-1 */
	volatile *(combase) = 12;
  107f2e:	48 8b 05 b3 8d 01 00 	mov    0x18db3(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f35:	c6 00 0c             	movb   $0xc,(%rax)

	//	outb(0, combase+1);
	volatile *(combase+1) = 0;
  107f38:	48 8b 05 a9 8d 01 00 	mov    0x18da9(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f3f:	48 ff c0             	inc    %rax
  107f42:	c6 00 00             	movb   $0x0,(%rax)

	//	outb(inb(combase + 3) & 0x7f, combase + 3);
	volatile *(combase +3) = *(combase + 3) & 0x7f;
  107f45:	48 8b 05 9c 8d 01 00 	mov    0x18d9c(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f4c:	48 8d 50 03          	lea    0x3(%rax),%rdx
  107f50:	48 8b 05 91 8d 01 00 	mov    0x18d91(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f57:	48 83 c0 03          	add    $0x3,%rax
  107f5b:	0f b6 00             	movzbl (%rax),%eax
  107f5e:	83 e0 7f             	and    $0x7f,%eax
  107f61:	88 02                	mov    %al,(%rdx)
}
  107f63:	c9                   	leaveq 
  107f64:	c3                   	retq   

0000000000107f65 <_D12kgdb_support12getDebugCharFZh>:

ubyte getDebugChar()
  107f65:	55                   	push   %rbp
  107f66:	48 89 e5             	mov    %rsp,%rbp
{
	volatile while (!(*(combase + 5) & 0x01)){}
  107f69:	48 8b 05 78 8d 01 00 	mov    0x18d78(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f70:	48 83 c0 05          	add    $0x5,%rax
  107f74:	0f b6 00             	movzbl (%rax),%eax
  107f77:	0f be c0             	movsbl %al,%eax
  107f7a:	83 e0 01             	and    $0x1,%eax
  107f7d:	83 f0 01             	xor    $0x1,%eax
  107f80:	83 f0 01             	xor    $0x1,%eax
  107f83:	84 c0                	test   %al,%al
  107f85:	75 02                	jne    107f89 <_D12kgdb_support12getDebugCharFZh+0x24>
  107f87:	eb e0                	jmp    107f69 <_D12kgdb_support12getDebugCharFZh+0x4>
	return *combase;
  107f89:	48 8b 05 58 8d 01 00 	mov    0x18d58(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107f90:	0f b6 00             	movzbl (%rax),%eax
}
  107f93:	c9                   	leaveq 
  107f94:	c3                   	retq   

0000000000107f95 <_D12kgdb_support12putDebugCharFhZv>:

void putDebugChar(ubyte ch)
  107f95:	55                   	push   %rbp
  107f96:	48 89 e5             	mov    %rsp,%rbp
  107f99:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
{
	volatile while (!( *(combase + 5) & 0x20)){}
  107f9d:	48 8b 05 44 8d 01 00 	mov    0x18d44(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107fa4:	48 83 c0 05          	add    $0x5,%rax
  107fa8:	0f b6 00             	movzbl (%rax),%eax
  107fab:	0f be c0             	movsbl %al,%eax
  107fae:	83 e0 20             	and    $0x20,%eax
  107fb1:	85 c0                	test   %eax,%eax
  107fb3:	0f 95 c0             	setne  %al
  107fb6:	83 f0 01             	xor    $0x1,%eax
  107fb9:	83 f0 01             	xor    $0x1,%eax
  107fbc:	84 c0                	test   %al,%al
  107fbe:	75 02                	jne    107fc2 <_D12kgdb_support12putDebugCharFhZv+0x2d>
  107fc0:	eb db                	jmp    107f9d <_D12kgdb_support12putDebugCharFhZv+0x8>
	volatile *(combase) = cast (ubyte) ch;
  107fc2:	48 8b 05 1f 8d 01 00 	mov    0x18d1f(%rip),%rax        # 120ce8 <_D12kgdb_support7combasePg>
  107fc9:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  107fcd:	88 10                	mov    %dl,(%rax)
}
  107fcf:	c9                   	leaveq 
  107fd0:	c3                   	retq   

0000000000107fd1 <_D12kgdb_support13flush_i_cacheFZv>:
} */

// make this point at our exception handler, so gdb can call it on page faults
//void (*exceptionHook)() = 0;

void flush_i_cache()
  107fd1:	55                   	push   %rbp
  107fd2:	48 89 e5             	mov    %rsp,%rbp
{
	asm{"jmp 1f\n1:";}
  107fd5:	eb 00                	jmp    107fd7 <_D12kgdb_support13flush_i_cacheFZv+0x6>
}
  107fd7:	c9                   	leaveq 
  107fd8:	c3                   	retq   
  107fd9:	90                   	nop    
  107fda:	90                   	nop    
  107fdb:	90                   	nop    

0000000000107fdc <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv>:

import vga;
import util;
static import idt;

void handle_faults(idt.interrupt_stack* ir_stack) 
  107fdc:	55                   	push   %rbp
  107fdd:	48 89 e5             	mov    %rsp,%rbp
  107fe0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  107fe7:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
{
	// First we need to determine why the page fault happened
	// This ulong will contain the address of the section of memory being faulted on
	ulong addr;
  107fee:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
  107ff5:	00 00 00 00 
	// This is the dirty asm that gets the address for us...
	asm { "mov %%cr2, %%rax" ::: "rax"; "movq %%rax, %0" :: "m" addr; }
  107ff9:	0f 20 d0             	mov    %cr2,%rax
  107ffc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	// Bit 4 = I/D bit - 1 if instruction fetch, otherwise 0
	// The rest of the error code byte is considered reserved

	// The easiest way to find if a bit is set is by & it with a mask and check for ! 0

	kprintfln("\n Page fault. Code = %d, IP = 0x%x, VA = 0x%x, RBP = 0x%x\n", ir_stack.err_code, ir_stack.rip, addr, ir_stack.rbp);
  108003:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10800a:	48 83 c0 40          	add    $0x40,%rax
  10800e:	48 8b 10             	mov    (%rax),%rdx
  108011:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  108018:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10801f:	48 05 88 00 00 00    	add    $0x88,%rax
  108025:	48 8b 30             	mov    (%rax),%rsi
  108028:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10802f:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  108033:	48 8b 00             	mov    (%rax),%rax
  108036:	48 c7 45 80 3a 00 00 	movq   $0x3a,-0x80(%rbp)
  10803d:	00 
  10803e:	48 c7 45 88 f0 78 11 	movq   $0x1178f0,-0x78(%rbp)
  108045:	00 
  108046:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  10804a:	4c 8b 55 88          	mov    -0x78(%rbp),%r10
  10804e:	48 89 14 24          	mov    %rdx,(%rsp)
  108052:	49 89 c9             	mov    %rcx,%r9
  108055:	49 89 f0             	mov    %rsi,%r8
  108058:	48 89 c1             	mov    %rax,%rcx
  10805b:	48 89 fe             	mov    %rdi,%rsi
  10805e:	4c 89 d2             	mov    %r10,%rdx
  108061:	bf 20 0d 12 00       	mov    $0x120d20,%edi
  108066:	b8 00 00 00 00       	mov    $0x0,%eax
  10806b:	e8 8e d1 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

	if((ir_stack.err_code & 1) == 0) 
  108070:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  108077:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  10807b:	48 8b 00             	mov    (%rax),%rax
  10807e:	83 e0 01             	and    $0x1,%eax
  108081:	48 85 c0             	test   %rax,%rax
  108084:	0f 85 6d 01 00 00    	jne    1081f7 <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x21b>
	{
		kprintfln("Error due to page not present!");
  10808a:	48 c7 45 90 1e 00 00 	movq   $0x1e,-0x70(%rbp)
  108091:	00 
  108092:	48 c7 45 98 30 79 11 	movq   $0x117930,-0x68(%rbp)
  108099:	00 
  10809a:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  10809e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  1080a2:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1080a7:	b8 00 00 00 00       	mov    $0x0,%eax
  1080ac:	e8 4d d1 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>

		if((ir_stack.err_code & 2) != 0)
  1080b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1080b8:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  1080bc:	48 8b 00             	mov    (%rax),%rax
  1080bf:	83 e0 02             	and    $0x2,%eax
  1080c2:	48 85 c0             	test   %rax,%rax
  1080c5:	74 29                	je     1080f0 <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x114>
		{
			kprintfln("Error due to write fault.");
  1080c7:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  1080ce:	00 
  1080cf:	48 c7 45 a8 4f 79 11 	movq   $0x11794f,-0x58(%rbp)
  1080d6:	00 
  1080d7:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  1080db:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  1080df:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1080e4:	b8 00 00 00 00       	mov    $0x0,%eax
  1080e9:	e8 10 d1 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  1080ee:	eb 27                	jmp    108117 <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x13b>
		}
		else
		{
			kprintfln("Error due to read fault.");
  1080f0:	48 c7 45 b0 18 00 00 	movq   $0x18,-0x50(%rbp)
  1080f7:	00 
  1080f8:	48 c7 45 b8 69 79 11 	movq   $0x117969,-0x48(%rbp)
  1080ff:	00 
  108100:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  108104:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  108108:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  10810d:	b8 00 00 00 00       	mov    $0x0,%eax
  108112:	e8 e7 d0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		}

		if((ir_stack.err_code & 4) != 0)
  108117:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10811e:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  108122:	48 8b 00             	mov    (%rax),%rax
  108125:	83 e0 04             	and    $0x4,%eax
  108128:	48 85 c0             	test   %rax,%rax
  10812b:	74 29                	je     108156 <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x17a>
		{
			kprintfln("Error occurred in usermode.");
  10812d:	48 c7 45 c0 1b 00 00 	movq   $0x1b,-0x40(%rbp)
  108134:	00 
  108135:	48 c7 45 c8 82 79 11 	movq   $0x117982,-0x38(%rbp)
  10813c:	00 
  10813d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  108141:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  108145:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  10814a:	b8 00 00 00 00       	mov    $0x0,%eax
  10814f:	e8 aa d0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  108154:	eb 27                	jmp    10817d <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x1a1>
			// In this case we need to send a signal to the libOS handler
		}
		else
		{
			kprintfln("Error occurred in supervised mode.");
  108156:	48 c7 45 d0 22 00 00 	movq   $0x22,-0x30(%rbp)
  10815d:	00 
  10815e:	48 c7 45 d8 a0 79 11 	movq   $0x1179a0,-0x28(%rbp)
  108165:	00 
  108166:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  10816a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10816e:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  108173:	b8 00 00 00 00       	mov    $0x0,%eax
  108178:	e8 81 d0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			// In this case we're super concerned and need to handle the fault
		}

		if((ir_stack.err_code & 8) != 0)
  10817d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  108184:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  108188:	48 8b 00             	mov    (%rax),%rax
  10818b:	83 e0 08             	and    $0x8,%eax
  10818e:	48 85 c0             	test   %rax,%rax
  108191:	74 27                	je     1081ba <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x1de>
		{
			kprintfln("Tried to read from a reserved field in PTE!");
  108193:	48 c7 45 e0 2b 00 00 	movq   $0x2b,-0x20(%rbp)
  10819a:	00 
  10819b:	48 c7 45 e8 c8 79 11 	movq   $0x1179c8,-0x18(%rbp)
  1081a2:	00 
  1081a3:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  1081a7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1081ab:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1081b0:	b8 00 00 00 00       	mov    $0x0,%eax
  1081b5:	e8 44 d0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		}

		if((ir_stack.err_code & 16) != 0)
  1081ba:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1081c1:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  1081c5:	48 8b 00             	mov    (%rax),%rax
  1081c8:	83 e0 10             	and    $0x10,%eax
  1081cb:	48 85 c0             	test   %rax,%rax
  1081ce:	74 27                	je     1081f7 <_D4vmem13handle_faultsFPS3idt15interrupt_stackZv+0x21b>
		{
			kprintfln("Instruction fetch error!");
  1081d0:	48 c7 45 f0 18 00 00 	movq   $0x18,-0x10(%rbp)
  1081d7:	00 
  1081d8:	48 c7 45 f8 f4 79 11 	movq   $0x1179f4,-0x8(%rbp)
  1081df:	00 
  1081e0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  1081e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1081e8:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  1081ed:	b8 00 00 00 00       	mov    $0x0,%eax
  1081f2:	e8 07 d0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
		}
	}
} 
  1081f7:	c9                   	leaveq 
  1081f8:	c3                   	retq   
  1081f9:	90                   	nop    
  1081fa:	90                   	nop    
  1081fb:	90                   	nop    

00000000001081fc <_D9kgdb_stub10setMessageFAaXv>:
static const public auto BUFMAX = 400;

ubyte[BUFMAX] inMessage;
ubyte[BUFMAX] outMessage;

void setMessage(char[] msg...)
  1081fc:	55                   	push   %rbp
  1081fd:	48 89 e5             	mov    %rsp,%rbp
  108200:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  108207:	48 89 f8             	mov    %rdi,%rax
  10820a:	48 89 f2             	mov    %rsi,%rdx
  10820d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  108214:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
{
	assert(msg.length <= outMessage.length, "setMessage message too long");
  10821b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  108222:	48 3d 90 01 00 00    	cmp    $0x190,%rax
  108228:	76 3b                	jbe    108265 <_D9kgdb_stub10setMessageFAaXv+0x69>
  10822a:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  108231:	00 
  108232:	48 c7 45 88 b0 7a 11 	movq   $0x117ab0,-0x78(%rbp)
  108239:	00 
  10823a:	48 c7 45 90 1b 00 00 	movq   $0x1b,-0x70(%rbp)
  108241:	00 
  108242:	48 c7 45 98 bc 7a 11 	movq   $0x117abc,-0x68(%rbp)
  108249:	00 
  10824a:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  10824e:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  108252:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  108256:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  10825a:	41 b8 4e 00 00 00    	mov    $0x4e,%r8d
  108260:	e8 88 ca 00 00       	callq  114ced <_d_assert_msg>

	outMessage[0 .. msg.length] = cast(ubyte[])msg[];
  108265:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10826c:	48 3d 90 01 00 00    	cmp    $0x190,%rax
  108272:	77 10                	ja     108284 <_D9kgdb_stub10setMessageFAaXv+0x88>
  108274:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10827b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  108282:	eb 22                	jmp    1082a6 <_D9kgdb_stub10setMessageFAaXv+0xaa>
  108284:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  10828b:	00 
  10828c:	48 c7 45 b8 b0 7a 11 	movq   $0x117ab0,-0x48(%rbp)
  108293:	00 
  108294:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  108298:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10829c:	ba 50 00 00 00       	mov    $0x50,%edx
  1082a1:	e8 8f ca 00 00       	callq  114d35 <_d_array_bounds>
  1082a6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  1082ad:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  1082b1:	48 c7 45 a8 20 5a 12 	movq   $0x125a20,-0x58(%rbp)
  1082b8:	00 
  1082b9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1082bd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1082c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1082c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1082c9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  1082d0:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  1082d7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1082db:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1082df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1082e3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1082e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1082eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1082ef:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  1082f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1082fa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  1082fe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  108302:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  108306:	49 89 c0             	mov    %rax,%r8
  108309:	49 89 d1             	mov    %rdx,%r9
  10830c:	48 89 ca             	mov    %rcx,%rdx
  10830f:	48 89 f1             	mov    %rsi,%rcx
  108312:	be 01 00 00 00       	mov    $0x1,%esi
  108317:	e8 8b ec 00 00       	callq  116fa7 <_d_arraycopy>
	outMessage[msg.length] = 0;
  10831c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  108323:	48 3d 90 01 00 00    	cmp    $0x190,%rax
  108329:	73 10                	jae    10833b <_D9kgdb_stub10setMessageFAaXv+0x13f>
  10832b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  108332:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  108339:	eb 22                	jmp    10835d <_D9kgdb_stub10setMessageFAaXv+0x161>
  10833b:	48 c7 45 f0 0b 00 00 	movq   $0xb,-0x10(%rbp)
  108342:	00 
  108343:	48 c7 45 f8 b0 7a 11 	movq   $0x117ab0,-0x8(%rbp)
  10834a:	00 
  10834b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10834f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  108353:	ba 51 00 00 00       	mov    $0x51,%edx
  108358:	e8 d8 c9 00 00       	callq  114d35 <_d_array_bounds>
  10835d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  108364:	48 05 20 5a 12 00    	add    $0x125a20,%rax
  10836a:	c6 00 00             	movb   $0x0,(%rax)
}
  10836d:	c9                   	leaveq 
  10836e:	c3                   	retq   

000000000010836f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv>:

void handle_exception(idt.interrupt_stack* ir_stack){
  10836f:	55                   	push   %rbp
  108370:	48 89 e5             	mov    %rsp,%rbp
  108373:	48 81 ec d0 05 00 00 	sub    $0x5d0,%rsp
  10837a:	48 89 bd a8 fb ff ff 	mov    %rdi,-0x458(%rbp)

	// If kgdb remote (target) debugging is on
	if (remote_debug)
  108381:	0f b6 05 b8 8a 01 00 	movzbl 0x18ab8(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  108388:	84 c0                	test   %al,%al
  10838a:	74 6a                	je     1083f6 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x87>
		kprintfln("vector=%d, sr=0x%x, pc=0x%x\n", ir_stack.int_no,
  10838c:	48 8b 85 a8 fb ff ff 	mov    -0x458(%rbp),%rax
  108393:	48 05 88 00 00 00    	add    $0x88,%rax
  108399:	48 8b 08             	mov    (%rax),%rcx
  10839c:	48 8b 85 a8 fb ff ff 	mov    -0x458(%rbp),%rax
  1083a3:	48 05 a0 00 00 00    	add    $0xa0,%rax
  1083a9:	48 8b 38             	mov    (%rax),%rdi
  1083ac:	48 8b 85 a8 fb ff ff 	mov    -0x458(%rbp),%rax
  1083b3:	48 83 c0 78          	add    $0x78,%rax
  1083b7:	48 8b 00             	mov    (%rax),%rax
  1083ba:	48 c7 85 30 fc ff ff 	movq   $0x1c,-0x3d0(%rbp)
  1083c1:	1c 00 00 00 
  1083c5:	48 c7 85 38 fc ff ff 	movq   $0x117ad8,-0x3c8(%rbp)
  1083cc:	d8 7a 11 00 
  1083d0:	48 8b b5 30 fc ff ff 	mov    -0x3d0(%rbp),%rsi
  1083d7:	48 8b 95 38 fc ff ff 	mov    -0x3c8(%rbp),%rdx
  1083de:	49 89 c9             	mov    %rcx,%r9
  1083e1:	49 89 f8             	mov    %rdi,%r8
  1083e4:	48 89 c1             	mov    %rax,%rcx
  1083e7:	bf 00 0e 12 00       	mov    $0x120e00,%edi
  1083ec:	b8 00 00 00 00       	mov    $0x0,%eax
  1083f1:	e8 08 ce ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
							ir_stack.rsp, ir_stack.rip);

	// Signal value (interrupt in terms of a unix signal value)
	int sigval = computeSignal(ir_stack.int_no);
  1083f6:	48 8b 85 a8 fb ff ff 	mov    -0x458(%rbp),%rax
  1083fd:	48 83 c0 78          	add    $0x78,%rax
  108401:	48 8b 00             	mov    (%rax),%rax
  108404:	89 c7                	mov    %eax,%edi
  108406:	e8 d1 20 00 00       	callq  10a4dc <_D9kgdb_stub13computeSignalFiZi>
  10840b:	89 45 bc             	mov    %eax,-0x44(%rbp)
	setMessage('S', hexchars[sigval >> 4], hexchars[sigval % 16]);
  10840e:	b8 00 00 00 00       	mov    $0x0,%eax
  108413:	48 89 c2             	mov    %rax,%rdx
  108416:	48 8d 85 20 fc ff ff 	lea    -0x3e0(%rbp),%rax
  10841d:	48 01 d0             	add    %rdx,%rax
  108420:	c6 00 53             	movb   $0x53,(%rax)
  108423:	b8 01 00 00 00       	mov    $0x1,%eax
  108428:	48 8d 95 20 fc ff ff 	lea    -0x3e0(%rbp),%rdx
  10842f:	48 89 95 38 fa ff ff 	mov    %rdx,-0x5c8(%rbp)
  108436:	48 01 85 38 fa ff ff 	add    %rax,-0x5c8(%rbp)
  10843d:	48 c7 85 50 fc ff ff 	movq   $0x10,-0x3b0(%rbp)
  108444:	10 00 00 00 
  108448:	48 c7 85 58 fc ff ff 	movq   $0x117af5,-0x3a8(%rbp)
  10844f:	f5 7a 11 00 
  108453:	48 8b 85 58 fc ff ff 	mov    -0x3a8(%rbp),%rax
  10845a:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  108461:	8b 45 bc             	mov    -0x44(%rbp),%eax
  108464:	c1 f8 04             	sar    $0x4,%eax
  108467:	48 98                	cltq   
  108469:	48 89 85 50 fa ff ff 	mov    %rax,-0x5b0(%rbp)
  108470:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
  108477:	48 39 85 50 fa ff ff 	cmp    %rax,-0x5b0(%rbp)
  10847e:	73 10                	jae    108490 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x121>
  108480:	48 8b 95 50 fa ff ff 	mov    -0x5b0(%rbp),%rdx
  108487:	48 89 95 48 fa ff ff 	mov    %rdx,-0x5b8(%rbp)
  10848e:	eb 2e                	jmp    1084be <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x14f>
  108490:	48 c7 85 60 fc ff ff 	movq   $0xb,-0x3a0(%rbp)
  108497:	0b 00 00 00 
  10849b:	48 c7 85 68 fc ff ff 	movq   $0x117ab0,-0x398(%rbp)
  1084a2:	b0 7a 11 00 
  1084a6:	48 8b bd 60 fc ff ff 	mov    -0x3a0(%rbp),%rdi
  1084ad:	48 8b b5 68 fc ff ff 	mov    -0x398(%rbp),%rsi
  1084b4:	ba 5d 00 00 00       	mov    $0x5d,%edx
  1084b9:	e8 77 c8 00 00       	callq  114d35 <_d_array_bounds>
  1084be:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  1084c5:	48 03 85 40 fa ff ff 	add    -0x5c0(%rbp),%rax
  1084cc:	0f b6 00             	movzbl (%rax),%eax
  1084cf:	48 8b 95 38 fa ff ff 	mov    -0x5c8(%rbp),%rdx
  1084d6:	88 02                	mov    %al,(%rdx)
  1084d8:	b8 02 00 00 00       	mov    $0x2,%eax
  1084dd:	48 8d 95 20 fc ff ff 	lea    -0x3e0(%rbp),%rdx
  1084e4:	48 89 95 58 fa ff ff 	mov    %rdx,-0x5a8(%rbp)
  1084eb:	48 01 85 58 fa ff ff 	add    %rax,-0x5a8(%rbp)
  1084f2:	48 c7 85 70 fc ff ff 	movq   $0x10,-0x390(%rbp)
  1084f9:	10 00 00 00 
  1084fd:	48 c7 85 78 fc ff ff 	movq   $0x117af5,-0x388(%rbp)
  108504:	f5 7a 11 00 
  108508:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  10850f:	48 89 85 60 fa ff ff 	mov    %rax,-0x5a0(%rbp)
  108516:	8b 55 bc             	mov    -0x44(%rbp),%edx
  108519:	89 d0                	mov    %edx,%eax
  10851b:	c1 f8 1f             	sar    $0x1f,%eax
  10851e:	89 c1                	mov    %eax,%ecx
  108520:	c1 e9 1c             	shr    $0x1c,%ecx
  108523:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  108526:	83 e0 0f             	and    $0xf,%eax
  108529:	29 c8                	sub    %ecx,%eax
  10852b:	48 98                	cltq   
  10852d:	48 89 85 70 fa ff ff 	mov    %rax,-0x590(%rbp)
  108534:	48 8b 85 70 fc ff ff 	mov    -0x390(%rbp),%rax
  10853b:	48 39 85 70 fa ff ff 	cmp    %rax,-0x590(%rbp)
  108542:	73 10                	jae    108554 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x1e5>
  108544:	48 8b 95 70 fa ff ff 	mov    -0x590(%rbp),%rdx
  10854b:	48 89 95 68 fa ff ff 	mov    %rdx,-0x598(%rbp)
  108552:	eb 2e                	jmp    108582 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x213>
  108554:	48 c7 85 80 fc ff ff 	movq   $0xb,-0x380(%rbp)
  10855b:	0b 00 00 00 
  10855f:	48 c7 85 88 fc ff ff 	movq   $0x117ab0,-0x378(%rbp)
  108566:	b0 7a 11 00 
  10856a:	48 8b bd 80 fc ff ff 	mov    -0x380(%rbp),%rdi
  108571:	48 8b b5 88 fc ff ff 	mov    -0x378(%rbp),%rsi
  108578:	ba 5d 00 00 00       	mov    $0x5d,%edx
  10857d:	e8 b3 c7 00 00       	callq  114d35 <_d_array_bounds>
  108582:	48 8b 85 68 fa ff ff 	mov    -0x598(%rbp),%rax
  108589:	48 03 85 60 fa ff ff 	add    -0x5a0(%rbp),%rax
  108590:	0f b6 00             	movzbl (%rax),%eax
  108593:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  10859a:	88 02                	mov    %al,(%rdx)
  10859c:	48 c7 85 40 fc ff ff 	movq   $0x3,-0x3c0(%rbp)
  1085a3:	03 00 00 00 
  1085a7:	48 8d 85 20 fc ff ff 	lea    -0x3e0(%rbp),%rax
  1085ae:	48 89 85 48 fc ff ff 	mov    %rax,-0x3b8(%rbp)
  1085b5:	48 8b bd 40 fc ff ff 	mov    -0x3c0(%rbp),%rdi
  1085bc:	48 8b b5 48 fc ff ff 	mov    -0x3b8(%rbp),%rsi
  1085c3:	e8 34 fc ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>
	putpacket(outMessage);
  1085c8:	48 c7 85 90 fc ff ff 	movq   $0x190,-0x370(%rbp)
  1085cf:	90 01 00 00 
  1085d3:	48 c7 85 98 fc ff ff 	movq   $0x125a20,-0x368(%rbp)
  1085da:	20 5a 12 00 
  1085de:	48 8b bd 90 fc ff ff 	mov    -0x370(%rbp),%rdi
  1085e5:	48 8b b5 98 fc ff ff 	mov    -0x368(%rbp),%rsi
  1085ec:	e8 43 13 00 00       	callq  109934 <_D9kgdb_stub9putpacketFAhZv>

	while(true){
  1085f1:	b8 00 00 00 00       	mov    $0x0,%eax
  1085f6:	84 c0                	test   %al,%al
  1085f8:	0f 85 63 0d 00 00    	jne    109361 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xff2>
		int error = 0;
  1085fe:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%rbp)
		outMessage[0] = 0;
  108605:	b8 00 00 00 00       	mov    $0x0,%eax
  10860a:	48 05 20 5a 12 00    	add    $0x125a20,%rax
  108610:	c6 00 00             	movb   $0x0,(%rax)
		getpacket(inMessage);
  108613:	48 c7 85 a0 fc ff ff 	movq   $0x190,-0x360(%rbp)
  10861a:	90 01 00 00 
  10861e:	48 c7 85 a8 fc ff ff 	movq   $0x125880,-0x358(%rbp)
  108625:	80 58 12 00 
  108629:	48 8b bd a0 fc ff ff 	mov    -0x360(%rbp),%rdi
  108630:	48 8b b5 a8 fc ff ff 	mov    -0x358(%rbp),%rsi
  108637:	e8 77 0e 00 00       	callq  1094b3 <_D9kgdb_stub9getpacketFAhZv>

		switch(inMessage[0]){
  10863c:	b8 00 00 00 00       	mov    $0x0,%eax
  108641:	48 05 80 58 12 00    	add    $0x125880,%rax
  108647:	0f b6 00             	movzbl (%rax),%eax
  10864a:	0f b6 c0             	movzbl %al,%eax
  10864d:	83 e8 3f             	sub    $0x3f,%eax
  108650:	89 85 34 fa ff ff    	mov    %eax,-0x5cc(%rbp)
  108656:	83 bd 34 fa ff ff 34 	cmpl   $0x34,-0x5cc(%rbp)
  10865d:	0f 87 ba 0c 00 00    	ja     10931d <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfae>
  108663:	8b 85 34 fa ff ff    	mov    -0x5cc(%rbp),%eax
  108669:	48 8b 04 c5 50 7b 11 	mov    0x117b50(,%rax,8),%rax
  108670:	00 
  108671:	ff e0                	jmpq   *%rax
		case '?' : 
			setMessage('S', hexchars[sigval >> 4], hexchars[sigval % 16]);
  108673:	b8 00 00 00 00       	mov    $0x0,%eax
  108678:	48 89 c2             	mov    %rax,%rdx
  10867b:	48 8d 85 10 fc ff ff 	lea    -0x3f0(%rbp),%rax
  108682:	48 01 d0             	add    %rdx,%rax
  108685:	c6 00 53             	movb   $0x53,(%rax)
  108688:	b8 01 00 00 00       	mov    $0x1,%eax
  10868d:	48 8d 95 10 fc ff ff 	lea    -0x3f0(%rbp),%rdx
  108694:	48 89 95 78 fa ff ff 	mov    %rdx,-0x588(%rbp)
  10869b:	48 01 85 78 fa ff ff 	add    %rax,-0x588(%rbp)
  1086a2:	48 c7 85 d0 fc ff ff 	movq   $0x10,-0x330(%rbp)
  1086a9:	10 00 00 00 
  1086ad:	48 c7 85 d8 fc ff ff 	movq   $0x117af5,-0x328(%rbp)
  1086b4:	f5 7a 11 00 
  1086b8:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  1086bf:	48 89 85 80 fa ff ff 	mov    %rax,-0x580(%rbp)
  1086c6:	8b 45 bc             	mov    -0x44(%rbp),%eax
  1086c9:	c1 f8 04             	sar    $0x4,%eax
  1086cc:	48 98                	cltq   
  1086ce:	48 89 85 90 fa ff ff 	mov    %rax,-0x570(%rbp)
  1086d5:	48 8b 85 d0 fc ff ff 	mov    -0x330(%rbp),%rax
  1086dc:	48 39 85 90 fa ff ff 	cmp    %rax,-0x570(%rbp)
  1086e3:	73 10                	jae    1086f5 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x386>
  1086e5:	48 8b 95 90 fa ff ff 	mov    -0x570(%rbp),%rdx
  1086ec:	48 89 95 88 fa ff ff 	mov    %rdx,-0x578(%rbp)
  1086f3:	eb 2e                	jmp    108723 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x3b4>
  1086f5:	48 c7 85 e0 fc ff ff 	movq   $0xb,-0x320(%rbp)
  1086fc:	0b 00 00 00 
  108700:	48 c7 85 e8 fc ff ff 	movq   $0x117ab0,-0x318(%rbp)
  108707:	b0 7a 11 00 
  10870b:	48 8b bd e0 fc ff ff 	mov    -0x320(%rbp),%rdi
  108712:	48 8b b5 e8 fc ff ff 	mov    -0x318(%rbp),%rsi
  108719:	ba 67 00 00 00       	mov    $0x67,%edx
  10871e:	e8 12 c6 00 00       	callq  114d35 <_d_array_bounds>
  108723:	48 8b 85 88 fa ff ff 	mov    -0x578(%rbp),%rax
  10872a:	48 03 85 80 fa ff ff 	add    -0x580(%rbp),%rax
  108731:	0f b6 00             	movzbl (%rax),%eax
  108734:	48 8b 95 78 fa ff ff 	mov    -0x588(%rbp),%rdx
  10873b:	88 02                	mov    %al,(%rdx)
  10873d:	b8 02 00 00 00       	mov    $0x2,%eax
  108742:	48 8d 95 10 fc ff ff 	lea    -0x3f0(%rbp),%rdx
  108749:	48 89 95 98 fa ff ff 	mov    %rdx,-0x568(%rbp)
  108750:	48 01 85 98 fa ff ff 	add    %rax,-0x568(%rbp)
  108757:	48 c7 85 f0 fc ff ff 	movq   $0x10,-0x310(%rbp)
  10875e:	10 00 00 00 
  108762:	48 c7 85 f8 fc ff ff 	movq   $0x117af5,-0x308(%rbp)
  108769:	f5 7a 11 00 
  10876d:	48 8b 85 f8 fc ff ff 	mov    -0x308(%rbp),%rax
  108774:	48 89 85 a0 fa ff ff 	mov    %rax,-0x560(%rbp)
  10877b:	8b 55 bc             	mov    -0x44(%rbp),%edx
  10877e:	89 d0                	mov    %edx,%eax
  108780:	c1 f8 1f             	sar    $0x1f,%eax
  108783:	89 c1                	mov    %eax,%ecx
  108785:	c1 e9 1c             	shr    $0x1c,%ecx
  108788:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  10878b:	83 e0 0f             	and    $0xf,%eax
  10878e:	29 c8                	sub    %ecx,%eax
  108790:	48 98                	cltq   
  108792:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
  108799:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
  1087a0:	48 39 85 b0 fa ff ff 	cmp    %rax,-0x550(%rbp)
  1087a7:	73 10                	jae    1087b9 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x44a>
  1087a9:	48 8b 95 b0 fa ff ff 	mov    -0x550(%rbp),%rdx
  1087b0:	48 89 95 a8 fa ff ff 	mov    %rdx,-0x558(%rbp)
  1087b7:	eb 2e                	jmp    1087e7 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x478>
  1087b9:	48 c7 85 00 fd ff ff 	movq   $0xb,-0x300(%rbp)
  1087c0:	0b 00 00 00 
  1087c4:	48 c7 85 08 fd ff ff 	movq   $0x117ab0,-0x2f8(%rbp)
  1087cb:	b0 7a 11 00 
  1087cf:	48 8b bd 00 fd ff ff 	mov    -0x300(%rbp),%rdi
  1087d6:	48 8b b5 08 fd ff ff 	mov    -0x2f8(%rbp),%rsi
  1087dd:	ba 67 00 00 00       	mov    $0x67,%edx
  1087e2:	e8 4e c5 00 00       	callq  114d35 <_d_array_bounds>
  1087e7:	48 8b 85 a8 fa ff ff 	mov    -0x558(%rbp),%rax
  1087ee:	48 03 85 a0 fa ff ff 	add    -0x560(%rbp),%rax
  1087f5:	0f b6 00             	movzbl (%rax),%eax
  1087f8:	48 8b 95 98 fa ff ff 	mov    -0x568(%rbp),%rdx
  1087ff:	88 02                	mov    %al,(%rdx)
  108801:	48 c7 85 c0 fc ff ff 	movq   $0x3,-0x340(%rbp)
  108808:	03 00 00 00 
  10880c:	48 8d 85 10 fc ff ff 	lea    -0x3f0(%rbp),%rax
  108813:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
  10881a:	48 8b bd c0 fc ff ff 	mov    -0x340(%rbp),%rdi
  108821:	48 8b b5 c8 fc ff ff 	mov    -0x338(%rbp),%rsi
  108828:	e8 cf f9 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>
			break;
  10882d:	e9 0d 0b 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
			
		case 'd' : // toggle remote debugging messages
			remote_debug = !remote_debug; // Toggle debug flag
  108832:	0f b6 05 07 86 01 00 	movzbl 0x18607(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  108839:	83 f0 01             	xor    $0x1,%eax
  10883c:	88 05 fe 85 01 00    	mov    %al,0x185fe(%rip)        # 120e40 <_D6config12remote_debugb>
			break;
  108842:	e9 f8 0a 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
			
		case 'g':  // return the value of the CPU regs
			regs2gdb(ir_stack);
  108847:	48 8b bd a8 fb ff ff 	mov    -0x458(%rbp),%rdi
  10884e:	e8 3d 1d 00 00       	callq  10a590 <_D9kgdb_stub8regs2gdbFPS3idt15interrupt_stackZv>
			mem2hex(outMessage, toByteArray(&tempStack));
  108853:	48 8d bd 10 fd ff ff 	lea    -0x2f0(%rbp),%rdi
  10885a:	ba 00 00 00 00       	mov    $0x0,%edx
  10885f:	be e0 57 12 00       	mov    $0x1257e0,%esi
  108864:	e8 ca 1f 00 00       	callq  10a833 <_D9kgdb_stub45__T11toByteArrayTPS9kgdb_stub13int_stack_gdbZ11toByteArrayFPS9kgdb_stub13int_stack_gdbmZAh>
  108869:	48 c7 85 20 fd ff ff 	movq   $0x190,-0x2e0(%rbp)
  108870:	90 01 00 00 
  108874:	48 c7 85 28 fd ff ff 	movq   $0x125a20,-0x2d8(%rbp)
  10887b:	20 5a 12 00 
  10887f:	48 8d bd 90 fb ff ff 	lea    -0x470(%rbp),%rdi
  108886:	48 8b 8d 10 fd ff ff 	mov    -0x2f0(%rbp),%rcx
  10888d:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  108894:	48 8b b5 20 fd ff ff 	mov    -0x2e0(%rbp),%rsi
  10889b:	48 8b 95 28 fd ff ff 	mov    -0x2d8(%rbp),%rdx
  1088a2:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  1088a8:	49 89 c0             	mov    %rax,%r8
  1088ab:	e8 a6 12 00 00       	callq  109b56 <_D9kgdb_stub7mem2hexFAhAhbZAh>
			break;
  1088b0:	e9 8a 0a 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
			
		case 'G':  // set CPU regs
			regs2gdb(ir_stack); // populate in case gdb doesn't send all the regs
  1088b5:	48 8b bd a8 fb ff ff 	mov    -0x458(%rbp),%rdi
  1088bc:	e8 cf 1c 00 00       	callq  10a590 <_D9kgdb_stub8regs2gdbFPS3idt15interrupt_stackZv>
			hex2mem(toByteArray(&tempStack), inMessage);
  1088c1:	48 c7 85 30 fd ff ff 	movq   $0x190,-0x2d0(%rbp)
  1088c8:	90 01 00 00 
  1088cc:	48 c7 85 38 fd ff ff 	movq   $0x125880,-0x2c8(%rbp)
  1088d3:	80 58 12 00 
  1088d7:	48 8d bd 40 fd ff ff 	lea    -0x2c0(%rbp),%rdi
  1088de:	ba 00 00 00 00       	mov    $0x0,%edx
  1088e3:	be e0 57 12 00       	mov    $0x1257e0,%esi
  1088e8:	e8 46 1f 00 00       	callq  10a833 <_D9kgdb_stub45__T11toByteArrayTPS9kgdb_stub13int_stack_gdbZ11toByteArrayFPS9kgdb_stub13int_stack_gdbmZAh>
  1088ed:	48 8d bd 80 fb ff ff 	lea    -0x480(%rbp),%rdi
  1088f4:	48 8b 8d 30 fd ff ff 	mov    -0x2d0(%rbp),%rcx
  1088fb:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  108902:	48 8b b5 40 fd ff ff 	mov    -0x2c0(%rbp),%rsi
  108909:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
  108910:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  108916:	49 89 c0             	mov    %rax,%r8
  108919:	e8 80 16 00 00       	callq  109f9e <_D9kgdb_stub7hex2memFAhAhbZAh>
			gdb2regs(ir_stack);
  10891e:	48 8b bd a8 fb ff ff 	mov    -0x458(%rbp),%rdi
  108925:	e8 b6 1d 00 00       	callq  10a6e0 <_D9kgdb_stub8gdb2regsFPS3idt15interrupt_stackZv>
			break;
  10892a:	e9 10 0a 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>

			/* mAA..AA,LLLL  Read LLLL bytes at address AA..AA */
		case 'm' :
			bool sucess = false;
  10892f:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
			auto tempArray = inMessage[1 .. $];
  108933:	48 c7 45 c8 90 01 00 	movq   $0x190,-0x38(%rbp)
  10893a:	00 
  10893b:	48 81 7d c8 90 01 00 	cmpq   $0x190,-0x38(%rbp)
  108942:	00 
  108943:	77 0d                	ja     108952 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x5e3>
  108945:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  108949:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
  108950:	eb 2e                	jmp    108980 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x611>
  108952:	48 c7 85 60 fd ff ff 	movq   $0xb,-0x2a0(%rbp)
  108959:	0b 00 00 00 
  10895d:	48 c7 85 68 fd ff ff 	movq   $0x117ab0,-0x298(%rbp)
  108964:	b0 7a 11 00 
  108968:	48 8b bd 60 fd ff ff 	mov    -0x2a0(%rbp),%rdi
  10896f:	48 8b b5 68 fd ff ff 	mov    -0x298(%rbp),%rsi
  108976:	ba 7c 00 00 00       	mov    $0x7c,%edx
  10897b:	e8 b5 c3 00 00       	callq  114d35 <_d_array_bounds>
  108980:	48 8b 95 b8 fa ff ff 	mov    -0x548(%rbp),%rdx
  108987:	48 ff ca             	dec    %rdx
  10898a:	b8 01 00 00 00       	mov    $0x1,%eax
  10898f:	48 05 80 58 12 00    	add    $0x125880,%rax
  108995:	48 89 95 50 fd ff ff 	mov    %rdx,-0x2b0(%rbp)
  10899c:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
  1089a3:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  1089aa:	48 89 85 f0 fb ff ff 	mov    %rax,-0x410(%rbp)
  1089b1:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
  1089b8:	48 89 85 f8 fb ff ff 	mov    %rax,-0x408(%rbp)
			ulong addr, numBytes;
  1089bf:	48 c7 85 00 fc ff ff 	movq   $0x0,-0x400(%rbp)
  1089c6:	00 00 00 00 
  1089ca:	48 c7 85 08 fc ff ff 	movq   $0x0,-0x3f8(%rbp)
  1089d1:	00 00 00 00 
			if(hex2long(tempArray, addr) != 0){
  1089d5:	48 8d b5 00 fc ff ff 	lea    -0x400(%rbp),%rsi
  1089dc:	48 8d bd f0 fb ff ff 	lea    -0x410(%rbp),%rdi
  1089e3:	e8 79 18 00 00       	callq  10a261 <_D9kgdb_stub8hex2longFKAhKmZi>
  1089e8:	85 c0                	test   %eax,%eax
  1089ea:	0f 84 65 02 00 00    	je     108c55 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x8e6>
				if(tempArray[0] == ','){
  1089f0:	48 8b 95 f8 fb ff ff 	mov    -0x408(%rbp),%rdx
  1089f7:	48 89 95 c0 fa ff ff 	mov    %rdx,-0x540(%rbp)
  1089fe:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
  108a05:	48 83 f8 00          	cmp    $0x0,%rax
  108a09:	76 0d                	jbe    108a18 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x6a9>
  108a0b:	48 c7 85 c8 fa ff ff 	movq   $0x0,-0x538(%rbp)
  108a12:	00 00 00 00 
  108a16:	eb 2e                	jmp    108a46 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x6d7>
  108a18:	48 c7 85 80 fd ff ff 	movq   $0xb,-0x280(%rbp)
  108a1f:	0b 00 00 00 
  108a23:	48 c7 85 88 fd ff ff 	movq   $0x117ab0,-0x278(%rbp)
  108a2a:	b0 7a 11 00 
  108a2e:	48 8b bd 80 fd ff ff 	mov    -0x280(%rbp),%rdi
  108a35:	48 8b b5 88 fd ff ff 	mov    -0x278(%rbp),%rsi
  108a3c:	ba 7f 00 00 00       	mov    $0x7f,%edx
  108a41:	e8 ef c2 00 00       	callq  114d35 <_d_array_bounds>
  108a46:	48 8b 85 c8 fa ff ff 	mov    -0x538(%rbp),%rax
  108a4d:	48 03 85 c0 fa ff ff 	add    -0x540(%rbp),%rax
  108a54:	0f b6 00             	movzbl (%rax),%eax
  108a57:	0f b6 c0             	movzbl %al,%eax
  108a5a:	83 f8 2c             	cmp    $0x2c,%eax
  108a5d:	0f 85 f2 01 00 00    	jne    108c55 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x8e6>
					tempArray = tempArray[1 .. $];
  108a63:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
  108a6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  108a6e:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
  108a75:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  108a79:	77 0d                	ja     108a88 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x719>
  108a7b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  108a7f:	48 89 85 d0 fa ff ff 	mov    %rax,-0x530(%rbp)
  108a86:	eb 2e                	jmp    108ab6 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x747>
  108a88:	48 c7 85 a0 fd ff ff 	movq   $0xb,-0x260(%rbp)
  108a8f:	0b 00 00 00 
  108a93:	48 c7 85 a8 fd ff ff 	movq   $0x117ab0,-0x258(%rbp)
  108a9a:	b0 7a 11 00 
  108a9e:	48 8b bd a0 fd ff ff 	mov    -0x260(%rbp),%rdi
  108aa5:	48 8b b5 a8 fd ff ff 	mov    -0x258(%rbp),%rsi
  108aac:	ba 80 00 00 00       	mov    $0x80,%edx
  108ab1:	e8 7f c2 00 00       	callq  114d35 <_d_array_bounds>
  108ab6:	48 8b 95 d0 fa ff ff 	mov    -0x530(%rbp),%rdx
  108abd:	48 ff ca             	dec    %rdx
  108ac0:	48 89 95 d8 fa ff ff 	mov    %rdx,-0x528(%rbp)
  108ac7:	48 8b 85 f8 fb ff ff 	mov    -0x408(%rbp),%rax
  108ace:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
  108ad5:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
  108adc:	48 83 f8 01          	cmp    $0x1,%rax
  108ae0:	72 0d                	jb     108aef <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x780>
  108ae2:	48 c7 85 e8 fa ff ff 	movq   $0x1,-0x518(%rbp)
  108ae9:	01 00 00 00 
  108aed:	eb 2e                	jmp    108b1d <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x7ae>
  108aef:	48 c7 85 b0 fd ff ff 	movq   $0xb,-0x250(%rbp)
  108af6:	0b 00 00 00 
  108afa:	48 c7 85 b8 fd ff ff 	movq   $0x117ab0,-0x248(%rbp)
  108b01:	b0 7a 11 00 
  108b05:	48 8b bd b0 fd ff ff 	mov    -0x250(%rbp),%rdi
  108b0c:	48 8b b5 b8 fd ff ff 	mov    -0x248(%rbp),%rsi
  108b13:	ba 80 00 00 00       	mov    $0x80,%edx
  108b18:	e8 18 c2 00 00       	callq  114d35 <_d_array_bounds>
  108b1d:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  108b24:	48 03 85 e0 fa ff ff 	add    -0x520(%rbp),%rax
  108b2b:	48 8b 95 d8 fa ff ff 	mov    -0x528(%rbp),%rdx
  108b32:	48 89 95 90 fd ff ff 	mov    %rdx,-0x270(%rbp)
  108b39:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
  108b40:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  108b47:	48 89 85 f0 fb ff ff 	mov    %rax,-0x410(%rbp)
  108b4e:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  108b55:	48 89 85 f8 fb ff ff 	mov    %rax,-0x408(%rbp)
					if(hex2long(tempArray, numBytes) != 0){
  108b5c:	48 8d b5 08 fc ff ff 	lea    -0x3f8(%rbp),%rsi
  108b63:	48 8d bd f0 fb ff ff 	lea    -0x410(%rbp),%rdi
  108b6a:	e8 f2 16 00 00       	callq  10a261 <_D9kgdb_stub8hex2longFKAhKmZi>
  108b6f:	85 c0                	test   %eax,%eax
  108b71:	0f 84 de 00 00 00    	je     108c55 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x8e6>
						sucess = true;
  108b77:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
						mem_err = false;
  108b7b:	c6 05 ef cc 01 00 00 	movb   $0x0,0x1ccef(%rip)        # 125871 <_D9kgdb_stub7mem_errb>
						mem2hex(toByteArray(&addr, numBytes), outMessage, true);
  108b82:	48 c7 85 c0 fd ff ff 	movq   $0x190,-0x240(%rbp)
  108b89:	90 01 00 00 
  108b8d:	48 c7 85 c8 fd ff ff 	movq   $0x125a20,-0x238(%rbp)
  108b94:	20 5a 12 00 
  108b98:	48 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%rdx
  108b9f:	48 8d bd d0 fd ff ff 	lea    -0x230(%rbp),%rdi
  108ba6:	48 8d b5 00 fc ff ff 	lea    -0x400(%rbp),%rsi
  108bad:	e8 a1 1c 00 00       	callq  10a853 <_D9kgdb_stub20__T11toByteArrayTPmZ11toByteArrayFPmmZAh>
  108bb2:	48 8d bd 70 fb ff ff 	lea    -0x490(%rbp),%rdi
  108bb9:	48 8b 8d c0 fd ff ff 	mov    -0x240(%rbp),%rcx
  108bc0:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  108bc7:	48 8b b5 d0 fd ff ff 	mov    -0x230(%rbp),%rsi
  108bce:	48 8b 95 d8 fd ff ff 	mov    -0x228(%rbp),%rdx
  108bd5:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  108bdb:	49 89 c0             	mov    %rax,%r8
  108bde:	e8 73 0f 00 00       	callq  109b56 <_D9kgdb_stub7mem2hexFAhAhbZAh>
						
						if(mem_err){
  108be3:	0f b6 05 87 cc 01 00 	movzbl 0x1cc87(%rip),%eax        # 125871 <_D9kgdb_stub7mem_errb>
  108bea:	84 c0                	test   %al,%al
  108bec:	74 67                	je     108c55 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x8e6>
							setMessage("E03");
  108bee:	48 c7 85 e0 fd ff ff 	movq   $0x3,-0x220(%rbp)
  108bf5:	03 00 00 00 
  108bf9:	48 c7 85 e8 fd ff ff 	movq   $0x117b06,-0x218(%rbp)
  108c00:	06 7b 11 00 
  108c04:	48 8b bd e0 fd ff ff 	mov    -0x220(%rbp),%rdi
  108c0b:	48 8b b5 e8 fd ff ff 	mov    -0x218(%rbp),%rsi
  108c12:	e8 e5 f5 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>
							if (remote_debug) kprintfln("Memory Fault.");
  108c17:	0f b6 05 22 82 01 00 	movzbl 0x18222(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  108c1e:	84 c0                	test   %al,%al
  108c20:	74 33                	je     108c55 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x8e6>
  108c22:	48 c7 85 f0 fd ff ff 	movq   $0xd,-0x210(%rbp)
  108c29:	0d 00 00 00 
  108c2d:	48 c7 85 f8 fd ff ff 	movq   $0x117b0a,-0x208(%rbp)
  108c34:	0a 7b 11 00 
  108c38:	48 8b b5 f0 fd ff ff 	mov    -0x210(%rbp),%rsi
  108c3f:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  108c46:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  108c4b:	b8 00 00 00 00       	mov    $0x0,%eax
  108c50:	e8 a9 c5 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
						}
					}
				}
			}

			if(sucess){
  108c55:	80 7d c7 00          	cmpb   $0x0,-0x39(%rbp)
  108c59:	0f 84 e0 06 00 00    	je     10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
				setMessage("E01");
  108c5f:	48 c7 85 00 fe ff ff 	movq   $0x3,-0x200(%rbp)
  108c66:	03 00 00 00 
  108c6a:	48 c7 85 08 fe ff ff 	movq   $0x117b18,-0x1f8(%rbp)
  108c71:	18 7b 11 00 
  108c75:	48 8b bd 00 fe ff ff 	mov    -0x200(%rbp),%rdi
  108c7c:	48 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%rsi
  108c83:	e8 74 f5 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>

				if (remote_debug)
  108c88:	0f b6 05 b1 81 01 00 	movzbl 0x181b1(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  108c8f:	84 c0                	test   %al,%al
  108c91:	0f 84 a8 06 00 00    	je     10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
					kprintfln("Malformed read memory command: %s", toString(cast(char*)inMessage.ptr));
  108c97:	48 8d bd 10 fe ff ff 	lea    -0x1f0(%rbp),%rdi
  108c9e:	be 80 58 12 00       	mov    $0x125880,%esi
  108ca3:	e8 88 cb ff ff       	callq  105830 <_D6system8toStringFPaZAa>
  108ca8:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  108caf:	48 8b 8d 10 fe ff ff 	mov    -0x1f0(%rbp),%rcx
  108cb6:	48 c7 85 20 fe ff ff 	movq   $0x21,-0x1e0(%rbp)
  108cbd:	21 00 00 00 
  108cc1:	48 c7 85 28 fe ff ff 	movq   $0x117b20,-0x1d8(%rbp)
  108cc8:	20 7b 11 00 
  108ccc:	48 8b b5 20 fe ff ff 	mov    -0x1e0(%rbp),%rsi
  108cd3:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  108cda:	49 89 c0             	mov    %rax,%r8
  108cdd:	bf 00 01 12 00       	mov    $0x120100,%edi
  108ce2:	b8 00 00 00 00       	mov    $0x0,%eax
  108ce7:	e8 12 c5 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			}
			break;
  108cec:	e9 4e 06 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
			
			/* MAA..AA,LLLL: Write LLLL bytes at address AA.AA return OK */
		case 'M':
			bool sucess = false;
  108cf1:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
			auto tempArray = inMessage[1 .. $];
  108cf5:	48 c7 45 e0 90 01 00 	movq   $0x190,-0x20(%rbp)
  108cfc:	00 
  108cfd:	48 81 7d e0 90 01 00 	cmpq   $0x190,-0x20(%rbp)
  108d04:	00 
  108d05:	77 0d                	ja     108d14 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x9a5>
  108d07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  108d0b:	48 89 85 f0 fa ff ff 	mov    %rax,-0x510(%rbp)
  108d12:	eb 2e                	jmp    108d42 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x9d3>
  108d14:	48 c7 85 40 fe ff ff 	movq   $0xb,-0x1c0(%rbp)
  108d1b:	0b 00 00 00 
  108d1f:	48 c7 85 48 fe ff ff 	movq   $0x117ab0,-0x1b8(%rbp)
  108d26:	b0 7a 11 00 
  108d2a:	48 8b bd 40 fe ff ff 	mov    -0x1c0(%rbp),%rdi
  108d31:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
  108d38:	ba 99 00 00 00       	mov    $0x99,%edx
  108d3d:	e8 f3 bf 00 00       	callq  114d35 <_d_array_bounds>
  108d42:	48 8b 95 f0 fa ff ff 	mov    -0x510(%rbp),%rdx
  108d49:	48 ff ca             	dec    %rdx
  108d4c:	b8 01 00 00 00       	mov    $0x1,%eax
  108d51:	48 05 80 58 12 00    	add    $0x125880,%rax
  108d57:	48 89 95 30 fe ff ff 	mov    %rdx,-0x1d0(%rbp)
  108d5e:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  108d65:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  108d6c:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
  108d73:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  108d7a:	48 89 85 d8 fb ff ff 	mov    %rax,-0x428(%rbp)
			ulong addr;
  108d81:	48 c7 85 e0 fb ff ff 	movq   $0x0,-0x420(%rbp)
  108d88:	00 00 00 00 
			size_t numBytes;
  108d8c:	48 c7 85 e8 fb ff ff 	movq   $0x0,-0x418(%rbp)
  108d93:	00 00 00 00 
			
			if(hex2long(tempArray, addr) != 0){
  108d97:	48 8d b5 e0 fb ff ff 	lea    -0x420(%rbp),%rsi
  108d9e:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
  108da5:	e8 b7 14 00 00       	callq  10a261 <_D9kgdb_stub8hex2longFKAhKmZi>
  108daa:	85 c0                	test   %eax,%eax
  108dac:	0f 84 08 04 00 00    	je     1091ba <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe4b>
				if(tempArray[0] == ','){
  108db2:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  108db9:	48 89 95 f8 fa ff ff 	mov    %rdx,-0x508(%rbp)
  108dc0:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108dc7:	48 83 f8 00          	cmp    $0x0,%rax
  108dcb:	76 0d                	jbe    108dda <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xa6b>
  108dcd:	48 c7 85 00 fb ff ff 	movq   $0x0,-0x500(%rbp)
  108dd4:	00 00 00 00 
  108dd8:	eb 2e                	jmp    108e08 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xa99>
  108dda:	48 c7 85 60 fe ff ff 	movq   $0xb,-0x1a0(%rbp)
  108de1:	0b 00 00 00 
  108de5:	48 c7 85 68 fe ff ff 	movq   $0x117ab0,-0x198(%rbp)
  108dec:	b0 7a 11 00 
  108df0:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  108df7:	48 8b b5 68 fe ff ff 	mov    -0x198(%rbp),%rsi
  108dfe:	ba 9e 00 00 00       	mov    $0x9e,%edx
  108e03:	e8 2d bf 00 00       	callq  114d35 <_d_array_bounds>
  108e08:	48 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%rax
  108e0f:	48 03 85 f8 fa ff ff 	add    -0x508(%rbp),%rax
  108e16:	0f b6 00             	movzbl (%rax),%eax
  108e19:	0f b6 c0             	movzbl %al,%eax
  108e1c:	83 f8 2c             	cmp    $0x2c,%eax
  108e1f:	0f 85 95 03 00 00    	jne    1091ba <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe4b>
					tempArray = tempArray[1 .. $];
  108e25:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108e2c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  108e30:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108e37:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  108e3b:	77 0d                	ja     108e4a <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xadb>
  108e3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  108e41:	48 89 85 08 fb ff ff 	mov    %rax,-0x4f8(%rbp)
  108e48:	eb 2e                	jmp    108e78 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xb09>
  108e4a:	48 c7 85 80 fe ff ff 	movq   $0xb,-0x180(%rbp)
  108e51:	0b 00 00 00 
  108e55:	48 c7 85 88 fe ff ff 	movq   $0x117ab0,-0x178(%rbp)
  108e5c:	b0 7a 11 00 
  108e60:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108e67:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  108e6e:	ba 9f 00 00 00       	mov    $0x9f,%edx
  108e73:	e8 bd be 00 00       	callq  114d35 <_d_array_bounds>
  108e78:	48 8b 95 08 fb ff ff 	mov    -0x4f8(%rbp),%rdx
  108e7f:	48 ff ca             	dec    %rdx
  108e82:	48 89 95 10 fb ff ff 	mov    %rdx,-0x4f0(%rbp)
  108e89:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
  108e90:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
  108e97:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108e9e:	48 83 f8 01          	cmp    $0x1,%rax
  108ea2:	72 0d                	jb     108eb1 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xb42>
  108ea4:	48 c7 85 20 fb ff ff 	movq   $0x1,-0x4e0(%rbp)
  108eab:	01 00 00 00 
  108eaf:	eb 2e                	jmp    108edf <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xb70>
  108eb1:	48 c7 85 90 fe ff ff 	movq   $0xb,-0x170(%rbp)
  108eb8:	0b 00 00 00 
  108ebc:	48 c7 85 98 fe ff ff 	movq   $0x117ab0,-0x168(%rbp)
  108ec3:	b0 7a 11 00 
  108ec7:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  108ece:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  108ed5:	ba 9f 00 00 00       	mov    $0x9f,%edx
  108eda:	e8 56 be 00 00       	callq  114d35 <_d_array_bounds>
  108edf:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
  108ee6:	48 03 85 18 fb ff ff 	add    -0x4e8(%rbp),%rax
  108eed:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  108ef4:	48 89 95 70 fe ff ff 	mov    %rdx,-0x190(%rbp)
  108efb:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  108f02:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  108f09:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
  108f10:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  108f17:	48 89 85 d8 fb ff ff 	mov    %rax,-0x428(%rbp)
					if(hex2long(tempArray, numBytes) != 0){
  108f1e:	48 8d b5 e8 fb ff ff 	lea    -0x418(%rbp),%rsi
  108f25:	48 8d bd d0 fb ff ff 	lea    -0x430(%rbp),%rdi
  108f2c:	e8 30 13 00 00       	callq  10a261 <_D9kgdb_stub8hex2longFKAhKmZi>
  108f31:	85 c0                	test   %eax,%eax
  108f33:	0f 84 81 02 00 00    	je     1091ba <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe4b>
						if(tempArray[0] == ':'){
  108f39:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
  108f40:	48 89 85 28 fb ff ff 	mov    %rax,-0x4d8(%rbp)
  108f47:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108f4e:	48 83 f8 00          	cmp    $0x0,%rax
  108f52:	76 0d                	jbe    108f61 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xbf2>
  108f54:	48 c7 85 30 fb ff ff 	movq   $0x0,-0x4d0(%rbp)
  108f5b:	00 00 00 00 
  108f5f:	eb 2e                	jmp    108f8f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xc20>
  108f61:	48 c7 85 a0 fe ff ff 	movq   $0xb,-0x160(%rbp)
  108f68:	0b 00 00 00 
  108f6c:	48 c7 85 a8 fe ff ff 	movq   $0x117ab0,-0x158(%rbp)
  108f73:	b0 7a 11 00 
  108f77:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  108f7e:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  108f85:	ba a1 00 00 00       	mov    $0xa1,%edx
  108f8a:	e8 a6 bd 00 00       	callq  114d35 <_d_array_bounds>
  108f8f:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  108f96:	48 03 85 28 fb ff ff 	add    -0x4d8(%rbp),%rax
  108f9d:	0f b6 00             	movzbl (%rax),%eax
  108fa0:	0f b6 c0             	movzbl %al,%eax
  108fa3:	83 f8 3a             	cmp    $0x3a,%eax
  108fa6:	0f 85 0e 02 00 00    	jne    1091ba <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe4b>
							tempArray = tempArray[1 .. $];
  108fac:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108fb3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  108fb7:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  108fbe:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  108fc2:	77 0d                	ja     108fd1 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xc62>
  108fc4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  108fc8:	48 89 95 38 fb ff ff 	mov    %rdx,-0x4c8(%rbp)
  108fcf:	eb 2e                	jmp    108fff <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xc90>
  108fd1:	48 c7 85 c0 fe ff ff 	movq   $0xb,-0x140(%rbp)
  108fd8:	0b 00 00 00 
  108fdc:	48 c7 85 c8 fe ff ff 	movq   $0x117ab0,-0x138(%rbp)
  108fe3:	b0 7a 11 00 
  108fe7:	48 8b bd c0 fe ff ff 	mov    -0x140(%rbp),%rdi
  108fee:	48 8b b5 c8 fe ff ff 	mov    -0x138(%rbp),%rsi
  108ff5:	ba a2 00 00 00       	mov    $0xa2,%edx
  108ffa:	e8 36 bd 00 00       	callq  114d35 <_d_array_bounds>
  108fff:	48 8b 85 38 fb ff ff 	mov    -0x4c8(%rbp),%rax
  109006:	48 ff c8             	dec    %rax
  109009:	48 89 85 40 fb ff ff 	mov    %rax,-0x4c0(%rbp)
  109010:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  109017:	48 89 95 48 fb ff ff 	mov    %rdx,-0x4b8(%rbp)
  10901e:	48 8b 85 d0 fb ff ff 	mov    -0x430(%rbp),%rax
  109025:	48 83 f8 01          	cmp    $0x1,%rax
  109029:	72 0d                	jb     109038 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xcc9>
  10902b:	48 c7 85 50 fb ff ff 	movq   $0x1,-0x4b0(%rbp)
  109032:	01 00 00 00 
  109036:	eb 2e                	jmp    109066 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xcf7>
  109038:	48 c7 85 d0 fe ff ff 	movq   $0xb,-0x130(%rbp)
  10903f:	0b 00 00 00 
  109043:	48 c7 85 d8 fe ff ff 	movq   $0x117ab0,-0x128(%rbp)
  10904a:	b0 7a 11 00 
  10904e:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  109055:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  10905c:	ba a2 00 00 00       	mov    $0xa2,%edx
  109061:	e8 cf bc 00 00       	callq  114d35 <_d_array_bounds>
  109066:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  10906d:	48 03 85 48 fb ff ff 	add    -0x4b8(%rbp),%rax
  109074:	48 8b 95 40 fb ff ff 	mov    -0x4c0(%rbp),%rdx
  10907b:	48 89 95 b0 fe ff ff 	mov    %rdx,-0x150(%rbp)
  109082:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
  109089:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  109090:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
  109097:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  10909e:	48 89 85 d8 fb ff ff 	mov    %rax,-0x428(%rbp)
							tempArray.length = numBytes;
  1090a5:	48 8b 95 e8 fb ff ff 	mov    -0x418(%rbp),%rdx
  1090ac:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  1090b3:	48 8d 8d d0 fb ff ff 	lea    -0x430(%rbp),%rcx
  1090ba:	be e0 84 11 00       	mov    $0x1184e0,%esi
  1090bf:	e8 34 b6 00 00       	callq  1146f8 <_d_arraysetlengthT>

							mem_err = false;
  1090c4:	c6 05 a6 c7 01 00 00 	movb   $0x0,0x1c7a6(%rip)        # 125871 <_D9kgdb_stub7mem_errb>
							hex2mem(tempArray, toByteArray(cast(void*)addr, numBytes), true);
  1090cb:	48 8b 95 e8 fb ff ff 	mov    -0x418(%rbp),%rdx
  1090d2:	48 8b 85 e0 fb ff ff 	mov    -0x420(%rbp),%rax
  1090d9:	48 89 c6             	mov    %rax,%rsi
  1090dc:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  1090e3:	e8 8b 17 00 00       	callq  10a873 <_D9kgdb_stub20__T11toByteArrayTPvZ11toByteArrayFPvmZAh>
  1090e8:	48 8d bd 60 fb ff ff 	lea    -0x4a0(%rbp),%rdi
  1090ef:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  1090f6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  1090fd:	48 8b b5 d0 fb ff ff 	mov    -0x430(%rbp),%rsi
  109104:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  10910b:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  109111:	49 89 c0             	mov    %rax,%r8
  109114:	e8 85 0e 00 00       	callq  109f9e <_D9kgdb_stub7hex2memFAhAhbZAh>

							if(mem_err){
  109119:	0f b6 05 51 c7 01 00 	movzbl 0x1c751(%rip),%eax        # 125871 <_D9kgdb_stub7mem_errb>
  109120:	84 c0                	test   %al,%al
  109122:	74 69                	je     10918d <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe1e>
								setMessage("E03");
  109124:	48 c7 85 00 ff ff ff 	movq   $0x3,-0x100(%rbp)
  10912b:	03 00 00 00 
  10912f:	48 c7 85 08 ff ff ff 	movq   $0x117b06,-0xf8(%rbp)
  109136:	06 7b 11 00 
  10913a:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  109141:	48 8b b5 08 ff ff ff 	mov    -0xf8(%rbp),%rsi
  109148:	e8 af f0 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>
								if (remote_debug) kprintfln("Memory Fault.");
  10914d:	0f b6 05 ec 7c 01 00 	movzbl 0x17cec(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  109154:	84 c0                	test   %al,%al
  109156:	74 5e                	je     1091b6 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe47>
  109158:	48 c7 85 10 ff ff ff 	movq   $0xd,-0xf0(%rbp)
  10915f:	0d 00 00 00 
  109163:	48 c7 85 18 ff ff ff 	movq   $0x117b0a,-0xe8(%rbp)
  10916a:	0a 7b 11 00 
  10916e:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  109175:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  10917c:	bf a0 00 12 00       	mov    $0x1200a0,%edi
  109181:	b8 00 00 00 00       	mov    $0x0,%eax
  109186:	e8 73 c0 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
  10918b:	eb 29                	jmp    1091b6 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xe47>
							}else{
								setMessage("OK");
  10918d:	48 c7 85 20 ff ff ff 	movq   $0x2,-0xe0(%rbp)
  109194:	02 00 00 00 
  109198:	48 c7 85 28 ff ff ff 	movq   $0x117b42,-0xd8(%rbp)
  10919f:	42 7b 11 00 
  1091a3:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
  1091aa:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
  1091b1:	e8 46 f0 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>
							}
							sucess = true;
  1091b6:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
						}
					}
				}
			}

			if(sucess){
  1091ba:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  1091be:	0f 84 7b 01 00 00    	je     10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
				setMessage("E02");
  1091c4:	48 c7 85 30 ff ff ff 	movq   $0x3,-0xd0(%rbp)
  1091cb:	03 00 00 00 
  1091cf:	48 c7 85 38 ff ff ff 	movq   $0x117b45,-0xc8(%rbp)
  1091d6:	45 7b 11 00 
  1091da:	48 8b bd 30 ff ff ff 	mov    -0xd0(%rbp),%rdi
  1091e1:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
  1091e8:	e8 0f f0 ff ff       	callq  1081fc <_D9kgdb_stub10setMessageFAaXv>

				if (remote_debug)
  1091ed:	0f b6 05 4c 7c 01 00 	movzbl 0x17c4c(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  1091f4:	84 c0                	test   %al,%al
  1091f6:	0f 84 43 01 00 00    	je     10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>
					kprintfln("Malformed read memory command: %s", toString(cast(char*)inMessage.ptr));
  1091fc:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  109203:	be 80 58 12 00       	mov    $0x125880,%esi
  109208:	e8 23 c6 ff ff       	callq  105830 <_D6system8toStringFPaZAa>
  10920d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  109214:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  10921b:	48 c7 85 50 ff ff ff 	movq   $0x21,-0xb0(%rbp)
  109222:	21 00 00 00 
  109226:	48 c7 85 58 ff ff ff 	movq   $0x117b20,-0xa8(%rbp)
  10922d:	20 7b 11 00 
  109231:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  109238:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  10923f:	49 89 c0             	mov    %rax,%r8
  109242:	bf 00 01 12 00       	mov    $0x120100,%edi
  109247:	b8 00 00 00 00       	mov    $0x0,%eax
  10924c:	e8 ad bf ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
			}

			break;
  109251:	e9 e9 00 00 00       	jmpq   10933f <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xfd0>

			/* cAA..AA		Continue at address AA..AA(optional) */
			/* sAA..AA	 Step one instruction from AA..AA(optional) */
		case 'c' :
		case 's' :
			auto tempArray = inMessage[1 .. $];
  109256:	48 c7 45 f8 90 01 00 	movq   $0x190,-0x8(%rbp)
  10925d:	00 
  10925e:	48 81 7d f8 90 01 00 	cmpq   $0x190,-0x8(%rbp)
  109265:	00 
  109266:	77 0d                	ja     109275 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xf06>
  109268:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10926c:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)
  109273:	eb 2e                	jmp    1092a3 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xf34>
  109275:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  10927c:	0b 00 00 00 
  109280:	48 c7 85 78 ff ff ff 	movq   $0x117ab0,-0x88(%rbp)
  109287:	b0 7a 11 00 
  10928b:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  109292:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  109299:	ba c1 00 00 00       	mov    $0xc1,%edx
  10929e:	e8 92 ba 00 00       	callq  114d35 <_d_array_bounds>
  1092a3:	48 8b 95 58 fb ff ff 	mov    -0x4a8(%rbp),%rdx
  1092aa:	48 ff ca             	dec    %rdx
  1092ad:	b8 01 00 00 00       	mov    $0x1,%eax
  1092b2:	48 05 80 58 12 00    	add    $0x125880,%rax
  1092b8:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  1092bf:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  1092c6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1092cd:	48 89 85 b0 fb ff ff 	mov    %rax,-0x450(%rbp)
  1092d4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1092db:	48 89 85 b8 fb ff ff 	mov    %rax,-0x448(%rbp)
			ulong addr;
  1092e2:	48 c7 85 c8 fb ff ff 	movq   $0x0,-0x438(%rbp)
  1092e9:	00 00 00 00 
			if(hex2long(tempArray, addr) != 0){
  1092ed:	48 8d b5 c8 fb ff ff 	lea    -0x438(%rbp),%rsi
  1092f4:	48 8d bd b0 fb ff ff 	lea    -0x450(%rbp),%rdi
  1092fb:	e8 61 0f 00 00       	callq  10a261 <_D9kgdb_stub8hex2longFKAhKmZi>
  109300:	85 c0                	test   %eax,%eax
  109302:	74 5d                	je     109361 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xff2>
				ir_stack.rip = addr; // set the
  109304:	48 8b 85 a8 fb ff ff 	mov    -0x458(%rbp),%rax
  10930b:	48 05 88 00 00 00    	add    $0x88,%rax
  109311:	48 8b 95 c8 fb ff ff 	mov    -0x438(%rbp),%rdx
  109318:	48 89 10             	mov    %rdx,(%rax)
			}
			
			// Call original handler?

			/// return from exception
			return;
  10931b:	eb 44                	jmp    109361 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0xff2>
	while(true){
		int error = 0;
		outMessage[0] = 0;
		getpacket(inMessage);

		switch(inMessage[0]){
  10931d:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  109324:	00 
  109325:	48 c7 45 98 b0 7a 11 	movq   $0x117ab0,-0x68(%rbp)
  10932c:	00 
  10932d:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  109331:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  109335:	ba 65 00 00 00       	mov    $0x65,%edx
  10933a:	e8 21 ba 00 00       	callq  114d60 <_d_switch_error>
		case 'k':
			break;
		}

		/* reply */
		putpacket(outMessage);
  10933f:	48 c7 45 a0 90 01 00 	movq   $0x190,-0x60(%rbp)
  109346:	00 
  109347:	48 c7 45 a8 20 5a 12 	movq   $0x125a20,-0x58(%rbp)
  10934e:	00 
  10934f:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  109353:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  109357:	e8 d8 05 00 00       	callq  109934 <_D9kgdb_stub9putpacketFAhZv>
  10935c:	e9 90 f2 ff ff       	jmpq   1085f1 <_D9kgdb_stub16handle_exceptionFPS3idt15interrupt_stackZv+0x282>
	}
}
  109361:	c9                   	leaveq 
  109362:	c3                   	retq   

0000000000109363 <_D9kgdb_stub10breakpointFZv>:

// --- For Kernel ---

void breakpoint(){
  109363:	55                   	push   %rbp
  109364:	48 89 e5             	mov    %rsp,%rbp
	if (initialized)
  109367:	0f b6 05 02 c5 01 00 	movzbl 0x1c502(%rip),%eax        # 125870 <_D9kgdb_stub11initializedb>
  10936e:	84 c0                	test   %al,%al
  109370:	74 01                	je     109373 <_D9kgdb_stub10breakpointFZv+0x10>
		asm{int 3;}
  109372:	cc                   	int3   

	waitabit();
  109373:	e8 ae 07 00 00       	callq  109b26 <_D9kgdb_stub8waitabitFZv>
}
  109378:	c9                   	leaveq 
  109379:	c3                   	retq   

000000000010937a <_D9kgdb_stub15set_debug_trapsFZv>:

void set_debug_traps(){
  10937a:	55                   	push   %rbp
  10937b:	48 89 e5             	mov    %rsp,%rbp

	// set up exception handler for 0,1,3-14,16, using an IST stack
	// also remember the old handler?

	idt.setCustomHandler(idt.Type.DivByZero,		&handle_exception);
  10937e:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109383:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109388:	bf 00 00 00 00       	mov    $0x0,%edi
  10938d:	e8 7a ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.Debug,			&handle_exception);
  109392:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109397:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  10939c:	bf 01 00 00 00       	mov    $0x1,%edi
  1093a1:	e8 66 ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.Breakpoint,		&handle_exception);
  1093a6:	be 6f 83 10 00       	mov    $0x10836f,%esi
  1093ab:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1093b0:	bf 03 00 00 00       	mov    $0x3,%edi
  1093b5:	e8 52 ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.INTO,				&handle_exception);
  1093ba:	be 6f 83 10 00       	mov    $0x10836f,%esi
  1093bf:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1093c4:	bf 04 00 00 00       	mov    $0x4,%edi
  1093c9:	e8 3e ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.OutOfBounds,		&handle_exception);
  1093ce:	be 6f 83 10 00       	mov    $0x10836f,%esi
  1093d3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1093d8:	bf 05 00 00 00       	mov    $0x5,%edi
  1093dd:	e8 2a ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.InvalidOpcode,	&handle_exception);
  1093e2:	be 6f 83 10 00       	mov    $0x10836f,%esi
  1093e7:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1093ec:	bf 06 00 00 00       	mov    $0x6,%edi
  1093f1:	e8 16 ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.NoCoproc,			&handle_exception);
  1093f6:	be 6f 83 10 00       	mov    $0x10836f,%esi
  1093fb:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109400:	bf 07 00 00 00       	mov    $0x7,%edi
  109405:	e8 02 ca ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.DoubleFault,		&handle_exception);
  10940a:	be 6f 83 10 00       	mov    $0x10836f,%esi
  10940f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109414:	bf 08 00 00 00       	mov    $0x8,%edi
  109419:	e8 ee c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.CoprocSegOver,	&handle_exception);
  10941e:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109423:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109428:	bf 09 00 00 00       	mov    $0x9,%edi
  10942d:	e8 da c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.BadTSS,			&handle_exception);
  109432:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109437:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  10943c:	bf 0a 00 00 00       	mov    $0xa,%edi
  109441:	e8 c6 c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.SegNotPresent,	&handle_exception);
  109446:	be 6f 83 10 00       	mov    $0x10836f,%esi
  10944b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109450:	bf 0b 00 00 00       	mov    $0xb,%edi
  109455:	e8 b2 c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.StackFault,		&handle_exception);
  10945a:	be 6f 83 10 00       	mov    $0x10836f,%esi
  10945f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109464:	bf 0c 00 00 00       	mov    $0xc,%edi
  109469:	e8 9e c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.GPF,				&handle_exception);
  10946e:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109473:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  109478:	bf 0d 00 00 00       	mov    $0xd,%edi
  10947d:	e8 8a c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.PageFault,		&handle_exception);
  109482:	be 6f 83 10 00       	mov    $0x10836f,%esi
  109487:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  10948c:	bf 0e 00 00 00       	mov    $0xe,%edi
  109491:	e8 76 c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>
	idt.setCustomHandler(idt.Type.CoprocFault,		&handle_exception);
  109496:	be 6f 83 10 00       	mov    $0x10836f,%esi
  10949b:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  1094a0:	bf 10 00 00 00       	mov    $0x10,%edi
  1094a5:	e8 62 c9 ff ff       	callq  105e0c <_D3idt16setCustomHandlerFmPFPS3idt15interrupt_stackZviZv>

	initialized = true;
  1094aa:	c6 05 bf c3 01 00 01 	movb   $0x1,0x1c3bf(%rip)        # 125870 <_D9kgdb_stub11initializedb>
}
  1094b1:	c9                   	leaveq 
  1094b2:	c3                   	retq   

00000000001094b3 <_D9kgdb_stub9getpacketFAhZv>:

// --- Debug Serial I/O ---

void getpacket(ubyte[] packet){
  1094b3:	55                   	push   %rbp
  1094b4:	48 89 e5             	mov    %rsp,%rbp
  1094b7:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
  1094be:	48 89 f8             	mov    %rdi,%rax
  1094c1:	48 89 f2             	mov    %rsi,%rdx
  1094c4:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  1094cb:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
	ubyte checksum, xmitcsum, ch;
  1094d2:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  1094d6:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
  1094da:	c6 45 fd 00          	movb   $0x0,-0x3(%rbp)
	int i, count;
  1094de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  1094e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1094ec:	eb 00                	jmp    1094ee <_D9kgdb_stub9getpacketFAhZv+0x3b>

	do {
		/* wait around for the start character, ignore all other characters */
		while ((ch = (getDebugChar() & 0x7f)) != '$'){}
  1094ee:	e8 72 ea ff ff       	callq  107f65 <_D12kgdb_support12getDebugCharFZh>
  1094f3:	83 e0 7f             	and    $0x7f,%eax
  1094f6:	88 45 fd             	mov    %al,-0x3(%rbp)
  1094f9:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  1094fd:	83 f8 24             	cmp    $0x24,%eax
  109500:	0f 95 c0             	setne  %al
  109503:	83 f0 01             	xor    $0x1,%eax
  109506:	84 c0                	test   %al,%al
  109508:	75 02                	jne    10950c <_D9kgdb_stub9getpacketFAhZv+0x59>
  10950a:	eb e2                	jmp    1094ee <_D9kgdb_stub9getpacketFAhZv+0x3b>
		checksum = 0;
  10950c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		xmitcsum = 0xFF;
  109510:	c6 45 fe ff          	movb   $0xff,-0x2(%rbp)

		count = 0;
  109514:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

		/* now, read until a # or end of buffer is found */
		while (count < BUFMAX) {
  10951b:	81 7d f4 8f 01 00 00 	cmpl   $0x18f,-0xc(%rbp)
  109522:	0f 9e c0             	setle  %al
  109525:	83 f0 01             	xor    $0x1,%eax
  109528:	84 c0                	test   %al,%al
  10952a:	0f 85 9a 00 00 00    	jne    1095ca <_D9kgdb_stub9getpacketFAhZv+0x117>
			ch = getDebugChar() & 0x7f;
  109530:	e8 30 ea ff ff       	callq  107f65 <_D12kgdb_support12getDebugCharFZh>
  109535:	83 e0 7f             	and    $0x7f,%eax
  109538:	88 45 fd             	mov    %al,-0x3(%rbp)
			if (ch == '#') break;
  10953b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  10953f:	83 f8 23             	cmp    $0x23,%eax
  109542:	0f 84 82 00 00 00    	je     1095ca <_D9kgdb_stub9getpacketFAhZv+0x117>
			checksum += ch;
  109548:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  10954c:	00 45 ff             	add    %al,-0x1(%rbp)
			packet[count] = ch;
  10954f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  109556:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  10955d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  109560:	48 63 d0             	movslq %eax,%rdx
  109563:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10956a:	48 39 c2             	cmp    %rax,%rdx
  10956d:	73 0e                	jae    10957d <_D9kgdb_stub9getpacketFAhZv+0xca>
  10956f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  109572:	48 98                	cltq   
  109574:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  10957b:	eb 2e                	jmp    1095ab <_D9kgdb_stub9getpacketFAhZv+0xf8>
  10957d:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  109584:	0b 00 00 00 
  109588:	48 c7 85 78 ff ff ff 	movq   $0x117ab0,-0x88(%rbp)
  10958f:	b0 7a 11 00 
  109593:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  10959a:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  1095a1:	ba 09 01 00 00       	mov    $0x109,%edx
  1095a6:	e8 8a b7 00 00       	callq  114d35 <_d_array_bounds>
  1095ab:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  1095b2:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  1095b9:	48 01 c2             	add    %rax,%rdx
  1095bc:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  1095c0:	88 02                	mov    %al,(%rdx)
			count = count + 1;
  1095c2:	ff 45 f4             	incl   -0xc(%rbp)
  1095c5:	e9 51 ff ff ff       	jmpq   10951b <_D9kgdb_stub9getpacketFAhZv+0x68>
		}

		packet[count] = 0;
  1095ca:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  1095d1:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  1095d8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1095db:	48 63 d0             	movslq %eax,%rdx
  1095de:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1095e5:	48 39 c2             	cmp    %rax,%rdx
  1095e8:	73 0e                	jae    1095f8 <_D9kgdb_stub9getpacketFAhZv+0x145>
  1095ea:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1095ed:	48 98                	cltq   
  1095ef:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  1095f6:	eb 22                	jmp    10961a <_D9kgdb_stub9getpacketFAhZv+0x167>
  1095f8:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  1095ff:	00 
  109600:	48 c7 45 88 b0 7a 11 	movq   $0x117ab0,-0x78(%rbp)
  109607:	00 
  109608:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  10960c:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  109610:	ba 0d 01 00 00       	mov    $0x10d,%edx
  109615:	e8 1b b7 00 00       	callq  114d35 <_d_array_bounds>
  10961a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  109621:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  109628:	c6 00 00             	movb   $0x0,(%rax)

		if (ch == '#') {
  10962b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
  10962f:	83 f8 23             	cmp    $0x23,%eax
  109632:	0f 85 e1 02 00 00    	jne    109919 <_D9kgdb_stub9getpacketFAhZv+0x466>
			xmitcsum = hexchar2byte(getDebugChar() & 0x7f) << 4;
  109638:	e8 28 e9 ff ff       	callq  107f65 <_D12kgdb_support12getDebugCharFZh>
  10963d:	0f b6 c0             	movzbl %al,%eax
  109640:	89 c7                	mov    %eax,%edi
  109642:	83 e7 7f             	and    $0x7f,%edi
  109645:	e8 26 0e 00 00       	callq  10a470 <_D9kgdb_stub12hexchar2byteFhZg>
  10964a:	c1 e0 04             	shl    $0x4,%eax
  10964d:	88 45 fe             	mov    %al,-0x2(%rbp)
			xmitcsum += hexchar2byte(getDebugChar() & 0x7f);
  109650:	e8 10 e9 ff ff       	callq  107f65 <_D12kgdb_support12getDebugCharFZh>
  109655:	0f b6 c0             	movzbl %al,%eax
  109658:	89 c7                	mov    %eax,%edi
  10965a:	83 e7 7f             	and    $0x7f,%edi
  10965d:	e8 0e 0e 00 00       	callq  10a470 <_D9kgdb_stub12hexchar2byteFhZg>
  109662:	00 45 fe             	add    %al,-0x2(%rbp)

			if(checksum != xmitcsum){
  109665:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  109669:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  10966d:	39 c2                	cmp    %eax,%edx
  10966f:	74 6d                	je     1096de <_D9kgdb_stub9getpacketFAhZv+0x22b>
				putDebugChar('-');	/* failed checksum */
  109671:	bf 2d 00 00 00       	mov    $0x2d,%edi
  109676:	e8 1a e9 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>

				if(remote_debug){
  10967b:	0f b6 05 be 77 01 00 	movzbl 0x177be(%rip),%eax        # 120e40 <_D6config12remote_debugb>
  109682:	84 c0                	test   %al,%al
  109684:	0f 84 8f 02 00 00    	je     109919 <_D9kgdb_stub9getpacketFAhZv+0x466>
					kprintf ("bad checksum.  My count = 0x%x, sent=0x%x. buf=%s\n",
  10968a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  109691:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  109698:	0f b6 4d fe          	movzbl -0x2(%rbp),%ecx
  10969c:	0f b6 75 ff          	movzbl -0x1(%rbp),%esi
  1096a0:	48 c7 45 90 32 00 00 	movq   $0x32,-0x70(%rbp)
  1096a7:	00 
  1096a8:	48 c7 45 98 f8 7c 11 	movq   $0x117cf8,-0x68(%rbp)
  1096af:	00 
  1096b0:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  1096b4:	4c 8b 55 98          	mov    -0x68(%rbp),%r10
  1096b8:	48 89 04 24          	mov    %rax,(%rsp)
  1096bc:	49 89 d1             	mov    %rdx,%r9
  1096bf:	41 89 c8             	mov    %ecx,%r8d
  1096c2:	89 f1                	mov    %esi,%ecx
  1096c4:	48 89 fe             	mov    %rdi,%rsi
  1096c7:	4c 89 d2             	mov    %r10,%rdx
  1096ca:	bf 20 0e 12 00       	mov    $0x120e20,%edi
  1096cf:	b8 00 00 00 00       	mov    $0x0,%eax
  1096d4:	e8 b0 b9 ff ff       	callq  105089 <_D3vga7Console7kprintfFAaYv>
  1096d9:	e9 3b 02 00 00       	jmpq   109919 <_D9kgdb_stub9getpacketFAhZv+0x466>
									 checksum, xmitcsum, packet);
				}
			}else{
				putDebugChar('+');	/* successful transfer */
  1096de:	bf 2b 00 00 00       	mov    $0x2b,%edi
  1096e3:	e8 ad e8 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>

				// XXX: wtf is this?
				/* if a sequence char is present, reply the sequence ID */
				if (packet[2] == ':') {
  1096e8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1096ef:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  1096f6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1096fd:	48 83 f8 02          	cmp    $0x2,%rax
  109701:	76 0d                	jbe    109710 <_D9kgdb_stub9getpacketFAhZv+0x25d>
  109703:	48 c7 85 08 ff ff ff 	movq   $0x2,-0xf8(%rbp)
  10970a:	02 00 00 00 
  10970e:	eb 22                	jmp    109732 <_D9kgdb_stub9getpacketFAhZv+0x27f>
  109710:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  109717:	00 
  109718:	48 c7 45 a8 b0 7a 11 	movq   $0x117ab0,-0x58(%rbp)
  10971f:	00 
  109720:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  109724:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  109728:	ba 1f 01 00 00       	mov    $0x11f,%edx
  10972d:	e8 03 b6 00 00       	callq  114d35 <_d_array_bounds>
  109732:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  109739:	48 03 85 00 ff ff ff 	add    -0x100(%rbp),%rax
  109740:	0f b6 00             	movzbl (%rax),%eax
  109743:	0f b6 c0             	movzbl %al,%eax
  109746:	83 f8 3a             	cmp    $0x3a,%eax
  109749:	0f 85 ca 01 00 00    	jne    109919 <_D9kgdb_stub9getpacketFAhZv+0x466>
					putDebugChar( packet[0] );
  10974f:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  109756:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  10975d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  109764:	48 83 f8 00          	cmp    $0x0,%rax
  109768:	76 0d                	jbe    109777 <_D9kgdb_stub9getpacketFAhZv+0x2c4>
  10976a:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
  109771:	00 00 00 00 
  109775:	eb 22                	jmp    109799 <_D9kgdb_stub9getpacketFAhZv+0x2e6>
  109777:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  10977e:	00 
  10977f:	48 c7 45 b8 b0 7a 11 	movq   $0x117ab0,-0x48(%rbp)
  109786:	00 
  109787:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10978b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10978f:	ba 20 01 00 00       	mov    $0x120,%edx
  109794:	e8 9c b5 00 00       	callq  114d35 <_d_array_bounds>
  109799:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  1097a0:	48 03 85 10 ff ff ff 	add    -0xf0(%rbp),%rax
  1097a7:	0f b6 00             	movzbl (%rax),%eax
  1097aa:	0f b6 f8             	movzbl %al,%edi
  1097ad:	e8 e3 e7 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
					putDebugChar( packet[1] );
  1097b2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1097b9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  1097c0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1097c7:	48 83 f8 01          	cmp    $0x1,%rax
  1097cb:	76 0d                	jbe    1097da <_D9kgdb_stub9getpacketFAhZv+0x327>
  1097cd:	48 c7 85 28 ff ff ff 	movq   $0x1,-0xd8(%rbp)
  1097d4:	01 00 00 00 
  1097d8:	eb 22                	jmp    1097fc <_D9kgdb_stub9getpacketFAhZv+0x349>
  1097da:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  1097e1:	00 
  1097e2:	48 c7 45 c8 b0 7a 11 	movq   $0x117ab0,-0x38(%rbp)
  1097e9:	00 
  1097ea:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  1097ee:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  1097f2:	ba 21 01 00 00       	mov    $0x121,%edx
  1097f7:	e8 39 b5 00 00       	callq  114d35 <_d_array_bounds>
  1097fc:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  109803:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  10980a:	0f b6 00             	movzbl (%rax),%eax
  10980d:	0f b6 f8             	movzbl %al,%edi
  109810:	e8 80 e7 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>

					/* remove sequence chars from buffer */;
					for (i=3; i <= count; i++){
  109815:	c7 45 f8 03 00 00 00 	movl   $0x3,-0x8(%rbp)
  10981c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10981f:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  109822:	0f 9e c0             	setle  %al
  109825:	83 f0 01             	xor    $0x1,%eax
  109828:	84 c0                	test   %al,%al
  10982a:	0f 85 e9 00 00 00    	jne    109919 <_D9kgdb_stub9getpacketFAhZv+0x466>
						packet[i-3] = packet[i];
  109830:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  109837:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  10983e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  109841:	83 e8 03             	sub    $0x3,%eax
  109844:	48 98                	cltq   
  109846:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10984d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  109854:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
  10985b:	73 10                	jae    10986d <_D9kgdb_stub9getpacketFAhZv+0x3ba>
  10985d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  109864:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  10986b:	eb 22                	jmp    10988f <_D9kgdb_stub9getpacketFAhZv+0x3dc>
  10986d:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  109874:	00 
  109875:	48 c7 45 d8 b0 7a 11 	movq   $0x117ab0,-0x28(%rbp)
  10987c:	00 
  10987d:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  109881:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  109885:	ba 25 01 00 00       	mov    $0x125,%edx
  10988a:	e8 a6 b4 00 00       	callq  114d35 <_d_array_bounds>
  10988f:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  109896:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  10989d:	48 01 c2             	add    %rax,%rdx
  1098a0:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  1098a7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1098ae:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  1098b5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1098b8:	48 63 d0             	movslq %eax,%rdx
  1098bb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1098c2:	48 39 c2             	cmp    %rax,%rdx
  1098c5:	73 0e                	jae    1098d5 <_D9kgdb_stub9getpacketFAhZv+0x422>
  1098c7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1098ca:	48 98                	cltq   
  1098cc:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  1098d3:	eb 22                	jmp    1098f7 <_D9kgdb_stub9getpacketFAhZv+0x444>
  1098d5:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  1098dc:	00 
  1098dd:	48 c7 45 e8 b0 7a 11 	movq   $0x117ab0,-0x18(%rbp)
  1098e4:	00 
  1098e5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1098e9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1098ed:	ba 25 01 00 00       	mov    $0x125,%edx
  1098f2:	e8 3e b4 00 00       	callq  114d35 <_d_array_bounds>
  1098f7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  1098fe:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  109905:	0f b6 00             	movzbl (%rax),%eax
  109908:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  10990f:	88 02                	mov    %al,(%rdx)
  109911:	ff 45 f8             	incl   -0x8(%rbp)
  109914:	e9 03 ff ff ff       	jmpq   10981c <_D9kgdb_stub9getpacketFAhZv+0x369>
			count = count + 1;
		}

		packet[count] = 0;

		if (ch == '#') {
  109919:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  10991d:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  109921:	39 c2                	cmp    %eax,%edx
  109923:	0f 95 c0             	setne  %al
  109926:	83 f0 01             	xor    $0x1,%eax
  109929:	84 c0                	test   %al,%al
  10992b:	75 05                	jne    109932 <_D9kgdb_stub9getpacketFAhZv+0x47f>
  10992d:	e9 bc fb ff ff       	jmpq   1094ee <_D9kgdb_stub9getpacketFAhZv+0x3b>
					}
				}
			}
		}
	} while (checksum != xmitcsum);
}
  109932:	c9                   	leaveq 
  109933:	c3                   	retq   

0000000000109934 <_D9kgdb_stub9putpacketFAhZv>:

void putpacket(ubyte[] packet){
  109934:	55                   	push   %rbp
  109935:	48 89 e5             	mov    %rsp,%rbp
  109938:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10993f:	48 89 f8             	mov    %rdi,%rax
  109942:	48 89 f2             	mov    %rsi,%rdx
  109945:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  109949:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	ubyte checksum, ch;
  10994d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  109951:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
	int count;
  109955:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

	/*	$<packet info>#<checksum>. */
	do {
		putDebugChar('$');
  10995c:	bf 24 00 00 00       	mov    $0x24,%edi
  109961:	e8 2f e6 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
		checksum = 0;
  109966:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
		count 	 = 0;
  10996a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		while ((ch = packet[count]) != 0) {
  109971:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  109975:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10997c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10997f:	48 63 d0             	movslq %eax,%rdx
  109982:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  109986:	48 39 c2             	cmp    %rax,%rdx
  109989:	73 0e                	jae    109999 <_D9kgdb_stub9putpacketFAhZv+0x65>
  10998b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10998e:	48 98                	cltq   
  109990:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  109997:	eb 22                	jmp    1099bb <_D9kgdb_stub9putpacketFAhZv+0x87>
  109999:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  1099a0:	00 
  1099a1:	48 c7 45 a8 b0 7a 11 	movq   $0x117ab0,-0x58(%rbp)
  1099a8:	00 
  1099a9:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  1099ad:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  1099b1:	ba 37 01 00 00       	mov    $0x137,%edx
  1099b6:	e8 7a b3 00 00       	callq  114d35 <_d_array_bounds>
  1099bb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  1099c2:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  1099c9:	0f b6 00             	movzbl (%rax),%eax
  1099cc:	88 45 fe             	mov    %al,-0x2(%rbp)
  1099cf:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  1099d3:	85 c0                	test   %eax,%eax
  1099d5:	0f 95 c0             	setne  %al
  1099d8:	83 f0 01             	xor    $0x1,%eax
  1099db:	84 c0                	test   %al,%al
  1099dd:	75 18                	jne    1099f7 <_D9kgdb_stub9putpacketFAhZv+0xc3>
			putDebugChar(ch);
  1099df:	0f b6 7d fe          	movzbl -0x2(%rbp),%edi
  1099e3:	e8 ad e5 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
			checksum += ch;
  1099e8:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  1099ec:	00 45 ff             	add    %al,-0x1(%rbp)
			count++;
  1099ef:	ff 45 f8             	incl   -0x8(%rbp)
  1099f2:	e9 7a ff ff ff       	jmpq   109971 <_D9kgdb_stub9putpacketFAhZv+0x3d>
		}

		putDebugChar('#');
  1099f7:	bf 23 00 00 00       	mov    $0x23,%edi
  1099fc:	e8 94 e5 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
		putDebugChar(hexchars[checksum >> 4]);
  109a01:	48 c7 45 b0 10 00 00 	movq   $0x10,-0x50(%rbp)
  109a08:	00 
  109a09:	48 c7 45 b8 f5 7a 11 	movq   $0x117af5,-0x48(%rbp)
  109a10:	00 
  109a11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  109a15:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  109a1c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  109a20:	c1 f8 04             	sar    $0x4,%eax
  109a23:	48 98                	cltq   
  109a25:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  109a2c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  109a30:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
  109a37:	73 10                	jae    109a49 <_D9kgdb_stub9putpacketFAhZv+0x115>
  109a39:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  109a40:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  109a47:	eb 22                	jmp    109a6b <_D9kgdb_stub9putpacketFAhZv+0x137>
  109a49:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  109a50:	00 
  109a51:	48 c7 45 c8 b0 7a 11 	movq   $0x117ab0,-0x38(%rbp)
  109a58:	00 
  109a59:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  109a5d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  109a61:	ba 3e 01 00 00       	mov    $0x13e,%edx
  109a66:	e8 ca b2 00 00       	callq  114d35 <_d_array_bounds>
  109a6b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  109a72:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  109a79:	0f b6 00             	movzbl (%rax),%eax
  109a7c:	0f b6 f8             	movzbl %al,%edi
  109a7f:	e8 11 e5 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
		putDebugChar(hexchars[checksum % 16]);
  109a84:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  109a8b:	00 
  109a8c:	48 c7 45 d8 f5 7a 11 	movq   $0x117af5,-0x28(%rbp)
  109a93:	00 
  109a94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  109a98:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  109a9f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  109aa3:	89 d0                	mov    %edx,%eax
  109aa5:	c1 f8 1f             	sar    $0x1f,%eax
  109aa8:	89 c1                	mov    %eax,%ecx
  109aaa:	c1 e9 1c             	shr    $0x1c,%ecx
  109aad:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  109ab0:	83 e0 0f             	and    $0xf,%eax
  109ab3:	29 c8                	sub    %ecx,%eax
  109ab5:	48 98                	cltq   
  109ab7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  109abb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  109abf:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
  109ac3:	73 0a                	jae    109acf <_D9kgdb_stub9putpacketFAhZv+0x19b>
  109ac5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  109ac9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  109acd:	eb 22                	jmp    109af1 <_D9kgdb_stub9putpacketFAhZv+0x1bd>
  109acf:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  109ad6:	00 
  109ad7:	48 c7 45 e8 b0 7a 11 	movq   $0x117ab0,-0x18(%rbp)
  109ade:	00 
  109adf:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  109ae3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  109ae7:	ba 3f 01 00 00       	mov    $0x13f,%edx
  109aec:	e8 44 b2 00 00       	callq  114d35 <_d_array_bounds>
  109af1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  109af5:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  109afc:	0f b6 00             	movzbl (%rax),%eax
  109aff:	0f b6 f8             	movzbl %al,%edi
  109b02:	e8 8e e4 ff ff       	callq  107f95 <_D12kgdb_support12putDebugCharFhZv>
  109b07:	e8 59 e4 ff ff       	callq  107f65 <_D12kgdb_support12getDebugCharFZh>
  109b0c:	0f b6 c0             	movzbl %al,%eax
  109b0f:	83 e0 7f             	and    $0x7f,%eax
  109b12:	83 f8 2b             	cmp    $0x2b,%eax
  109b15:	0f 95 c0             	setne  %al
  109b18:	83 f0 01             	xor    $0x1,%eax
  109b1b:	84 c0                	test   %al,%al
  109b1d:	75 05                	jne    109b24 <_D9kgdb_stub9putpacketFAhZv+0x1f0>
  109b1f:	e9 38 fe ff ff       	jmpq   10995c <_D9kgdb_stub9putpacketFAhZv+0x28>

	} while ((getDebugChar() & 0x7f) != '+');
}
  109b24:	c9                   	leaveq 
  109b25:	c3                   	retq   

0000000000109b26 <_D9kgdb_stub8waitabitFZv>:
		return (cast(ubyte*)t)[0 .. len];
	else
		static assert(false, "YOU CANT DO THAT: type = " ~ T.stringof);
}

void waitabit(){
  109b26:	55                   	push   %rbp
  109b27:	48 89 e5             	mov    %rsp,%rbp
	int i;
  109b2a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int waitlimit = 1000000;
  109b31:	c7 45 f8 40 42 0f 00 	movl   $0xf4240,-0x8(%rbp)

	for (i = 0; i < waitlimit; i++) {}
  109b38:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  109b3f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109b42:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  109b45:	0f 9c c0             	setl   %al
  109b48:	83 f0 01             	xor    $0x1,%eax
  109b4b:	84 c0                	test   %al,%al
  109b4d:	75 05                	jne    109b54 <_D9kgdb_stub8waitabitFZv+0x2e>
  109b4f:	ff 45 fc             	incl   -0x4(%rbp)
  109b52:	eb eb                	jmp    109b3f <_D9kgdb_stub8waitabitFZv+0x19>
}
  109b54:	c9                   	leaveq 
  109b55:	c3                   	retq   

0000000000109b56 <_D9kgdb_stub7mem2hexFAhAhbZAh>:

ubyte[] mem2hex(ubyte[] dest, ubyte[] src, bool may_fault = false){
  109b56:	55                   	push   %rbp
  109b57:	48 89 e5             	mov    %rsp,%rbp
  109b5a:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
  109b61:	48 89 bd 70 fe ff ff 	mov    %rdi,-0x190(%rbp)
  109b68:	4c 89 c7             	mov    %r8,%rdi
  109b6b:	44 88 8d 2f ff ff ff 	mov    %r9b,-0xd1(%rbp)
  109b72:	48 89 f0             	mov    %rsi,%rax
  109b75:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  109b7c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  109b83:	48 89 c8             	mov    %rcx,%rax
  109b86:	48 89 fa             	mov    %rdi,%rdx
  109b89:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  109b90:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
	int j = 0;
  109b97:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	for(int i = 0; i < src.length; i++){
  109b9e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  109ba5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109ba8:	48 63 d0             	movslq %eax,%rdx
  109bab:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  109bb2:	48 39 c2             	cmp    %rax,%rdx
  109bb5:	0f 92 c0             	setb   %al
  109bb8:	83 f0 01             	xor    $0x1,%eax
  109bbb:	84 c0                	test   %al,%al
  109bbd:	0f 85 fb 02 00 00    	jne    109ebe <_D9kgdb_stub7mem2hexFAhAhbZAh+0x368>
		dest[j++] = hexchars[src[i] >> 4];
  109bc3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  109bca:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  109bd1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  109bd4:	48 98                	cltq   
  109bd6:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  109bdd:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  109be4:	48 39 85 88 fe ff ff 	cmp    %rax,-0x178(%rbp)
  109beb:	0f 92 c0             	setb   %al
  109bee:	ff 45 f8             	incl   -0x8(%rbp)
  109bf1:	84 c0                	test   %al,%al
  109bf3:	74 10                	je     109c05 <_D9kgdb_stub7mem2hexFAhAhbZAh+0xaf>
  109bf5:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  109bfc:	48 89 95 80 fe ff ff 	mov    %rdx,-0x180(%rbp)
  109c03:	eb 2e                	jmp    109c33 <_D9kgdb_stub7mem2hexFAhAhbZAh+0xdd>
  109c05:	48 c7 85 50 ff ff ff 	movq   $0xb,-0xb0(%rbp)
  109c0c:	0b 00 00 00 
  109c10:	48 c7 85 58 ff ff ff 	movq   $0x117ab0,-0xa8(%rbp)
  109c17:	b0 7a 11 00 
  109c1b:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  109c22:	48 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%rsi
  109c29:	ba 5b 01 00 00       	mov    $0x15b,%edx
  109c2e:	e8 02 b1 00 00       	callq  114d35 <_d_array_bounds>
  109c33:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  109c3a:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  109c41:	48 01 c1             	add    %rax,%rcx
  109c44:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  109c4b:	48 c7 85 60 ff ff ff 	movq   $0x10,-0xa0(%rbp)
  109c52:	10 00 00 00 
  109c56:	48 c7 85 68 ff ff ff 	movq   $0x117af5,-0x98(%rbp)
  109c5d:	f5 7a 11 00 
  109c61:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  109c68:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  109c6f:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  109c76:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
  109c7d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109c80:	48 63 d0             	movslq %eax,%rdx
  109c83:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  109c8a:	48 39 c2             	cmp    %rax,%rdx
  109c8d:	73 0e                	jae    109c9d <_D9kgdb_stub7mem2hexFAhAhbZAh+0x147>
  109c8f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109c92:	48 98                	cltq   
  109c94:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  109c9b:	eb 2e                	jmp    109ccb <_D9kgdb_stub7mem2hexFAhAhbZAh+0x175>
  109c9d:	48 c7 85 70 ff ff ff 	movq   $0xb,-0x90(%rbp)
  109ca4:	0b 00 00 00 
  109ca8:	48 c7 85 78 ff ff ff 	movq   $0x117ab0,-0x88(%rbp)
  109caf:	b0 7a 11 00 
  109cb3:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  109cba:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  109cc1:	ba 5b 01 00 00       	mov    $0x15b,%edx
  109cc6:	e8 6a b0 00 00       	callq  114d35 <_d_array_bounds>
  109ccb:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  109cd2:	48 03 85 a8 fe ff ff 	add    -0x158(%rbp),%rax
  109cd9:	0f b6 00             	movzbl (%rax),%eax
  109cdc:	0f b6 c0             	movzbl %al,%eax
  109cdf:	c1 f8 04             	sar    $0x4,%eax
  109ce2:	48 98                	cltq   
  109ce4:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
  109ceb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  109cf2:	48 39 85 b8 fe ff ff 	cmp    %rax,-0x148(%rbp)
  109cf9:	73 10                	jae    109d0b <_D9kgdb_stub7mem2hexFAhAhbZAh+0x1b5>
  109cfb:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  109d02:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
  109d09:	eb 22                	jmp    109d2d <_D9kgdb_stub7mem2hexFAhAhbZAh+0x1d7>
  109d0b:	48 c7 45 80 0b 00 00 	movq   $0xb,-0x80(%rbp)
  109d12:	00 
  109d13:	48 c7 45 88 b0 7a 11 	movq   $0x117ab0,-0x78(%rbp)
  109d1a:	00 
  109d1b:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  109d1f:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  109d23:	ba 5b 01 00 00       	mov    $0x15b,%edx
  109d28:	e8 08 b0 00 00       	callq  114d35 <_d_array_bounds>
  109d2d:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  109d34:	48 03 85 98 fe ff ff 	add    -0x168(%rbp),%rax
  109d3b:	0f b6 00             	movzbl (%rax),%eax
  109d3e:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  109d45:	88 02                	mov    %al,(%rdx)
		dest[j++] = hexchars[src[i] % 16];
  109d47:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
  109d4e:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
  109d55:	8b 45 f8             	mov    -0x8(%rbp),%eax
  109d58:	48 98                	cltq   
  109d5a:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  109d61:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  109d68:	48 39 85 d0 fe ff ff 	cmp    %rax,-0x130(%rbp)
  109d6f:	0f 92 c0             	setb   %al
  109d72:	ff 45 f8             	incl   -0x8(%rbp)
  109d75:	84 c0                	test   %al,%al
  109d77:	74 10                	je     109d89 <_D9kgdb_stub7mem2hexFAhAhbZAh+0x233>
  109d79:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  109d80:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  109d87:	eb 22                	jmp    109dab <_D9kgdb_stub7mem2hexFAhAhbZAh+0x255>
  109d89:	48 c7 45 90 0b 00 00 	movq   $0xb,-0x70(%rbp)
  109d90:	00 
  109d91:	48 c7 45 98 b0 7a 11 	movq   $0x117ab0,-0x68(%rbp)
  109d98:	00 
  109d99:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  109d9d:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  109da1:	ba 5c 01 00 00       	mov    $0x15c,%edx
  109da6:	e8 8a af 00 00       	callq  114d35 <_d_array_bounds>
  109dab:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  109db2:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  109db9:	48 01 c2             	add    %rax,%rdx
  109dbc:	48 89 95 d8 fe ff ff 	mov    %rdx,-0x128(%rbp)
  109dc3:	48 c7 45 a0 10 00 00 	movq   $0x10,-0x60(%rbp)
  109dca:	00 
  109dcb:	48 c7 45 a8 f5 7a 11 	movq   $0x117af5,-0x58(%rbp)
  109dd2:	00 
  109dd3:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  109dd7:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
  109dde:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  109de5:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  109dec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109def:	48 63 d0             	movslq %eax,%rdx
  109df2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  109df9:	48 39 c2             	cmp    %rax,%rdx
  109dfc:	73 0e                	jae    109e0c <_D9kgdb_stub7mem2hexFAhAhbZAh+0x2b6>
  109dfe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109e01:	48 98                	cltq   
  109e03:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  109e0a:	eb 22                	jmp    109e2e <_D9kgdb_stub7mem2hexFAhAhbZAh+0x2d8>
  109e0c:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  109e13:	00 
  109e14:	48 c7 45 b8 b0 7a 11 	movq   $0x117ab0,-0x48(%rbp)
  109e1b:	00 
  109e1c:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  109e20:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  109e24:	ba 5c 01 00 00       	mov    $0x15c,%edx
  109e29:	e8 07 af 00 00       	callq  114d35 <_d_array_bounds>
  109e2e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  109e35:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  109e3c:	0f b6 00             	movzbl (%rax),%eax
  109e3f:	0f b6 d0             	movzbl %al,%edx
  109e42:	89 d0                	mov    %edx,%eax
  109e44:	c1 f8 1f             	sar    $0x1f,%eax
  109e47:	89 c1                	mov    %eax,%ecx
  109e49:	c1 e9 1c             	shr    $0x1c,%ecx
  109e4c:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
  109e4f:	83 e0 0f             	and    $0xf,%eax
  109e52:	29 c8                	sub    %ecx,%eax
  109e54:	48 98                	cltq   
  109e56:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  109e5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  109e61:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  109e68:	73 10                	jae    109e7a <_D9kgdb_stub7mem2hexFAhAhbZAh+0x324>
  109e6a:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  109e71:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
  109e78:	eb 22                	jmp    109e9c <_D9kgdb_stub7mem2hexFAhAhbZAh+0x346>
  109e7a:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  109e81:	00 
  109e82:	48 c7 45 c8 b0 7a 11 	movq   $0x117ab0,-0x38(%rbp)
  109e89:	00 
  109e8a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  109e8e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  109e92:	ba 5c 01 00 00       	mov    $0x15c,%edx
  109e97:	e8 99 ae 00 00       	callq  114d35 <_d_array_bounds>
  109e9c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  109ea3:	48 03 85 e0 fe ff ff 	add    -0x120(%rbp),%rax
  109eaa:	0f b6 00             	movzbl (%rax),%eax
  109ead:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
  109eb4:	88 01                	mov    %al,(%rcx)
  109eb6:	ff 45 fc             	incl   -0x4(%rbp)
  109eb9:	e9 e7 fc ff ff       	jmpq   109ba5 <_D9kgdb_stub7mem2hexFAhAhbZAh+0x4f>
	}

	dest[j] = 0;
  109ebe:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  109ec5:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  109ecc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  109ecf:	48 63 d0             	movslq %eax,%rdx
  109ed2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  109ed9:	48 39 c2             	cmp    %rax,%rdx
  109edc:	73 0e                	jae    109eec <_D9kgdb_stub7mem2hexFAhAhbZAh+0x396>
  109ede:	8b 45 f8             	mov    -0x8(%rbp),%eax
  109ee1:	48 98                	cltq   
  109ee3:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  109eea:	eb 22                	jmp    109f0e <_D9kgdb_stub7mem2hexFAhAhbZAh+0x3b8>
  109eec:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  109ef3:	00 
  109ef4:	48 c7 45 d8 b0 7a 11 	movq   $0x117ab0,-0x28(%rbp)
  109efb:	00 
  109efc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  109f00:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  109f04:	ba 5f 01 00 00       	mov    $0x15f,%edx
  109f09:	e8 27 ae 00 00       	callq  114d35 <_d_array_bounds>
  109f0e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  109f15:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  109f1c:	c6 00 00             	movb   $0x0,(%rax)

	return dest[0 .. src.length * 2];
  109f1f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  109f26:	48 01 c0             	add    %rax,%rax
  109f29:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  109f30:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  109f37:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
  109f3e:	77 10                	ja     109f50 <_D9kgdb_stub7mem2hexFAhAhbZAh+0x3fa>
  109f40:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  109f47:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  109f4e:	eb 22                	jmp    109f72 <_D9kgdb_stub7mem2hexFAhAhbZAh+0x41c>
  109f50:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  109f57:	00 
  109f58:	48 c7 45 e8 b0 7a 11 	movq   $0x117ab0,-0x18(%rbp)
  109f5f:	00 
  109f60:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  109f64:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  109f68:	ba 61 01 00 00       	mov    $0x161,%edx
  109f6d:	e8 c3 ad 00 00       	callq  114d35 <_d_array_bounds>
  109f72:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  109f79:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  109f80:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  109f87:	48 89 11             	mov    %rdx,(%rcx)
  109f8a:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  109f91:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  109f95:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  109f9c:	c9                   	leaveq 
  109f9d:	c3                   	retq   

0000000000109f9e <_D9kgdb_stub7hex2memFAhAhbZAh>:

ubyte[] hex2mem(ubyte[] dest, ubyte[] src, bool may_fault = false){
  109f9e:	55                   	push   %rbp
  109f9f:	48 89 e5             	mov    %rsp,%rbp
  109fa2:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  109fa9:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  109fb0:	4c 89 c7             	mov    %r8,%rdi
  109fb3:	44 88 8d 7f ff ff ff 	mov    %r9b,-0x81(%rbp)
  109fba:	48 89 f0             	mov    %rsi,%rax
  109fbd:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  109fc1:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  109fc5:	48 89 c8             	mov    %rcx,%rax
  109fc8:	48 89 fa             	mov    %rdi,%rdx
  109fcb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  109fcf:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
	for(int i = 0, j = 0; i < src.length; j++){
  109fd3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  109fda:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  109fe1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  109fe4:	48 63 d0             	movslq %eax,%rdx
  109fe7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  109feb:	48 39 c2             	cmp    %rax,%rdx
  109fee:	0f 92 c0             	setb   %al
  109ff1:	83 f0 01             	xor    $0x1,%eax
  109ff4:	84 c0                	test   %al,%al
  109ff6:	0f 85 ef 01 00 00    	jne    10a1eb <_D9kgdb_stub7hex2memFAhAhbZAh+0x24d>
		dest[j]  = hexchar2byte(src[i++]);
  109ffc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a000:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  10a007:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10a00a:	48 63 d0             	movslq %eax,%rdx
  10a00d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a011:	48 39 c2             	cmp    %rax,%rdx
  10a014:	73 0e                	jae    10a024 <_D9kgdb_stub7hex2memFAhAhbZAh+0x86>
  10a016:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10a019:	48 98                	cltq   
  10a01b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  10a022:	eb 22                	jmp    10a046 <_D9kgdb_stub7hex2memFAhAhbZAh+0xa8>
  10a024:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  10a02b:	00 
  10a02c:	48 c7 45 a8 b0 7a 11 	movq   $0x117ab0,-0x58(%rbp)
  10a033:	00 
  10a034:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  10a038:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10a03c:	ba 66 01 00 00       	mov    $0x166,%edx
  10a041:	e8 ef ac 00 00       	callq  114d35 <_d_array_bounds>
  10a046:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  10a04d:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  10a054:	48 01 c2             	add    %rax,%rdx
  10a057:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  10a05e:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  10a062:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
  10a069:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10a06c:	48 98                	cltq   
  10a06e:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  10a075:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10a079:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
  10a080:	0f 92 c0             	setb   %al
  10a083:	ff 45 fc             	incl   -0x4(%rbp)
  10a086:	84 c0                	test   %al,%al
  10a088:	74 10                	je     10a09a <_D9kgdb_stub7hex2memFAhAhbZAh+0xfc>
  10a08a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  10a091:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  10a098:	eb 22                	jmp    10a0bc <_D9kgdb_stub7hex2memFAhAhbZAh+0x11e>
  10a09a:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  10a0a1:	00 
  10a0a2:	48 c7 45 b8 b0 7a 11 	movq   $0x117ab0,-0x48(%rbp)
  10a0a9:	00 
  10a0aa:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10a0ae:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10a0b2:	ba 66 01 00 00       	mov    $0x166,%edx
  10a0b7:	e8 79 ac 00 00       	callq  114d35 <_d_array_bounds>
  10a0bc:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  10a0c3:	48 03 85 18 ff ff ff 	add    -0xe8(%rbp),%rax
  10a0ca:	0f b6 00             	movzbl (%rax),%eax
  10a0cd:	0f b6 f8             	movzbl %al,%edi
  10a0d0:	e8 9b 03 00 00       	callq  10a470 <_D9kgdb_stub12hexchar2byteFhZg>
  10a0d5:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  10a0dc:	88 02                	mov    %al,(%rdx)
		dest[j] |= hexchar2byte(src[i++]) << 4;
  10a0de:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  10a0e2:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
  10a0e9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10a0ec:	48 63 d0             	movslq %eax,%rdx
  10a0ef:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a0f3:	48 39 c2             	cmp    %rax,%rdx
  10a0f6:	73 0e                	jae    10a106 <_D9kgdb_stub7hex2memFAhAhbZAh+0x168>
  10a0f8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10a0fb:	48 98                	cltq   
  10a0fd:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  10a104:	eb 22                	jmp    10a128 <_D9kgdb_stub7hex2memFAhAhbZAh+0x18a>
  10a106:	48 c7 45 c0 0b 00 00 	movq   $0xb,-0x40(%rbp)
  10a10d:	00 
  10a10e:	48 c7 45 c8 b0 7a 11 	movq   $0x117ab0,-0x38(%rbp)
  10a115:	00 
  10a116:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10a11a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10a11e:	ba 67 01 00 00       	mov    $0x167,%edx
  10a123:	e8 0d ac 00 00       	callq  114d35 <_d_array_bounds>
  10a128:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  10a12f:	48 89 d0             	mov    %rdx,%rax
  10a132:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  10a139:	48 01 c1             	add    %rax,%rcx
  10a13c:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
  10a143:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  10a147:	48 89 d0             	mov    %rdx,%rax
  10a14a:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  10a14e:	0f b6 00             	movzbl (%rax),%eax
  10a151:	88 85 4f ff ff ff    	mov    %al,-0xb1(%rbp)
  10a157:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10a15b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10a162:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10a165:	48 98                	cltq   
  10a167:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10a16e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10a172:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  10a179:	0f 92 c0             	setb   %al
  10a17c:	ff 45 fc             	incl   -0x4(%rbp)
  10a17f:	84 c0                	test   %al,%al
  10a181:	74 10                	je     10a193 <_D9kgdb_stub7hex2memFAhAhbZAh+0x1f5>
  10a183:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  10a18a:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  10a191:	eb 22                	jmp    10a1b5 <_D9kgdb_stub7hex2memFAhAhbZAh+0x217>
  10a193:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  10a19a:	00 
  10a19b:	48 c7 45 d8 b0 7a 11 	movq   $0x117ab0,-0x28(%rbp)
  10a1a2:	00 
  10a1a3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10a1a7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10a1ab:	ba 67 01 00 00       	mov    $0x167,%edx
  10a1b0:	e8 80 ab 00 00       	callq  114d35 <_d_array_bounds>
  10a1b5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10a1bc:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10a1c3:	0f b6 00             	movzbl (%rax),%eax
  10a1c6:	0f b6 f8             	movzbl %al,%edi
  10a1c9:	e8 a2 02 00 00       	callq  10a470 <_D9kgdb_stub12hexchar2byteFhZg>
  10a1ce:	0f be c0             	movsbl %al,%eax
  10a1d1:	c1 e0 04             	shl    $0x4,%eax
  10a1d4:	0a 85 4f ff ff ff    	or     -0xb1(%rbp),%al
  10a1da:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  10a1e1:	88 01                	mov    %al,(%rcx)
  10a1e3:	ff 45 f8             	incl   -0x8(%rbp)
  10a1e6:	e9 f6 fd ff ff       	jmpq   109fe1 <_D9kgdb_stub7hex2memFAhAhbZAh+0x43>
	}
	
	return dest[0 .. src.length * 2];
  10a1eb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10a1ef:	48 01 c0             	add    %rax,%rax
  10a1f2:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10a1f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a1fd:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
  10a204:	77 10                	ja     10a216 <_D9kgdb_stub7hex2memFAhAhbZAh+0x278>
  10a206:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10a20d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10a214:	eb 22                	jmp    10a238 <_D9kgdb_stub7hex2memFAhAhbZAh+0x29a>
  10a216:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  10a21d:	00 
  10a21e:	48 c7 45 e8 b0 7a 11 	movq   $0x117ab0,-0x18(%rbp)
  10a225:	00 
  10a226:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10a22a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10a22e:	ba 6a 01 00 00       	mov    $0x16a,%edx
  10a233:	e8 fd aa 00 00       	callq  114d35 <_d_array_bounds>
  10a238:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a23c:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  10a243:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  10a24a:	48 89 0a             	mov    %rcx,(%rdx)
  10a24d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  10a254:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  10a258:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  10a25f:	c9                   	leaveq 
  10a260:	c3                   	retq   

000000000010a261 <_D9kgdb_stub8hex2longFKAhKmZi>:

/***********************************************/
/* WHILE WE FIND NICE HEX CHARS, BUILD A ULONG */
/* RETURN NUMBER OF CHARS PROCESSED 					 */
/***********************************************/
int hex2long(inout ubyte packet[], inout ulong val){
  10a261:	55                   	push   %rbp
  10a262:	48 89 e5             	mov    %rsp,%rbp
  10a265:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10a26c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10a270:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
	int numChars = 0;
  10a274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	byte hexValue; // signed, because -1 is an error code
  10a27b:	c6 45 f3 00          	movb   $0x0,-0xd(%rbp)

	val = 0;
  10a27f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a283:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

	while(packet[numChars] != 0){
  10a28a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a28e:	48 8b 40 08          	mov    0x8(%rax),%rax
  10a292:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10a299:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a29c:	48 63 d0             	movslq %eax,%rdx
  10a29f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a2a3:	48 8b 00             	mov    (%rax),%rax
  10a2a6:	48 39 c2             	cmp    %rax,%rdx
  10a2a9:	73 0e                	jae    10a2b9 <_D9kgdb_stub8hex2longFKAhKmZi+0x58>
  10a2ab:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a2ae:	48 98                	cltq   
  10a2b0:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10a2b7:	eb 22                	jmp    10a2db <_D9kgdb_stub8hex2longFKAhKmZi+0x7a>
  10a2b9:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  10a2c0:	00 
  10a2c1:	48 c7 45 a8 b0 7a 11 	movq   $0x117ab0,-0x58(%rbp)
  10a2c8:	00 
  10a2c9:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  10a2cd:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10a2d1:	ba 77 01 00 00       	mov    $0x177,%edx
  10a2d6:	e8 5a aa 00 00       	callq  114d35 <_d_array_bounds>
  10a2db:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10a2e2:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10a2e9:	0f b6 00             	movzbl (%rax),%eax
  10a2ec:	0f b6 c0             	movzbl %al,%eax
  10a2ef:	85 c0                	test   %eax,%eax
  10a2f1:	0f 95 c0             	setne  %al
  10a2f4:	83 f0 01             	xor    $0x1,%eax
  10a2f7:	84 c0                	test   %al,%al
  10a2f9:	0f 85 9a 00 00 00    	jne    10a399 <_D9kgdb_stub8hex2longFKAhKmZi+0x138>
		hexValue = hexchar2byte(packet[numChars]);
  10a2ff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a303:	48 8b 40 08          	mov    0x8(%rax),%rax
  10a307:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10a30e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a311:	48 63 d0             	movslq %eax,%rdx
  10a314:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a318:	48 8b 00             	mov    (%rax),%rax
  10a31b:	48 39 c2             	cmp    %rax,%rdx
  10a31e:	73 0e                	jae    10a32e <_D9kgdb_stub8hex2longFKAhKmZi+0xcd>
  10a320:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a323:	48 98                	cltq   
  10a325:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10a32c:	eb 22                	jmp    10a350 <_D9kgdb_stub8hex2longFKAhKmZi+0xef>
  10a32e:	48 c7 45 b0 0b 00 00 	movq   $0xb,-0x50(%rbp)
  10a335:	00 
  10a336:	48 c7 45 b8 b0 7a 11 	movq   $0x117ab0,-0x48(%rbp)
  10a33d:	00 
  10a33e:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10a342:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10a346:	ba 78 01 00 00       	mov    $0x178,%edx
  10a34b:	e8 e5 a9 00 00       	callq  114d35 <_d_array_bounds>
  10a350:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10a357:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  10a35e:	0f b6 00             	movzbl (%rax),%eax
  10a361:	0f b6 f8             	movzbl %al,%edi
  10a364:	e8 07 01 00 00       	callq  10a470 <_D9kgdb_stub12hexchar2byteFhZg>
  10a369:	88 45 f3             	mov    %al,-0xd(%rbp)

		if(hexValue >= 0){
  10a36c:	0f be 45 f3          	movsbl -0xd(%rbp),%eax
  10a370:	85 c0                	test   %eax,%eax
  10a372:	78 25                	js     10a399 <_D9kgdb_stub8hex2longFKAhKmZi+0x138>
			val = (val << 4) | hexValue;
  10a374:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a378:	48 8b 00             	mov    (%rax),%rax
  10a37b:	48 89 c2             	mov    %rax,%rdx
  10a37e:	48 c1 e2 04          	shl    $0x4,%rdx
  10a382:	48 0f be 45 f3       	movsbq -0xd(%rbp),%rax
  10a387:	48 09 c2             	or     %rax,%rdx
  10a38a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a38e:	48 89 10             	mov    %rdx,(%rax)
			numChars++;
  10a391:	ff 45 f4             	incl   -0xc(%rbp)
	val = 0;

	while(packet[numChars] != 0){
		hexValue = hexchar2byte(packet[numChars]);

		if(hexValue >= 0){
  10a394:	e9 f1 fe ff ff       	jmpq   10a28a <_D9kgdb_stub8hex2longFKAhKmZi+0x29>
		}else{
			 break;
		}
	}

	packet = packet[numChars .. $];
  10a399:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a39d:	48 8b 00             	mov    (%rax),%rax
  10a3a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10a3a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a3a8:	48 8b 00             	mov    (%rax),%rax
  10a3ab:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10a3af:	77 0d                	ja     10a3be <_D9kgdb_stub8hex2longFKAhKmZi+0x15d>
  10a3b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a3b5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10a3bc:	eb 22                	jmp    10a3e0 <_D9kgdb_stub8hex2longFKAhKmZi+0x17f>
  10a3be:	48 c7 45 d0 0b 00 00 	movq   $0xb,-0x30(%rbp)
  10a3c5:	00 
  10a3c6:	48 c7 45 d8 b0 7a 11 	movq   $0x117ab0,-0x28(%rbp)
  10a3cd:	00 
  10a3ce:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10a3d2:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10a3d6:	ba 82 01 00 00       	mov    $0x182,%edx
  10a3db:	e8 55 a9 00 00       	callq  114d35 <_d_array_bounds>
  10a3e0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a3e3:	48 98                	cltq   
  10a3e5:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  10a3ec:	48 29 c2             	sub    %rax,%rdx
  10a3ef:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10a3f6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a3fa:	48 8b 40 08          	mov    0x8(%rax),%rax
  10a3fe:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10a402:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a405:	48 63 d0             	movslq %eax,%rdx
  10a408:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a40c:	48 8b 00             	mov    (%rax),%rax
  10a40f:	48 39 c2             	cmp    %rax,%rdx
  10a412:	77 0b                	ja     10a41f <_D9kgdb_stub8hex2longFKAhKmZi+0x1be>
  10a414:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10a417:	48 98                	cltq   
  10a419:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10a41d:	eb 22                	jmp    10a441 <_D9kgdb_stub8hex2longFKAhKmZi+0x1e0>
  10a41f:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  10a426:	00 
  10a427:	48 c7 45 e8 b0 7a 11 	movq   $0x117ab0,-0x18(%rbp)
  10a42e:	00 
  10a42f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10a433:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10a437:	ba 82 01 00 00       	mov    $0x182,%edx
  10a43c:	e8 f4 a8 00 00       	callq  114d35 <_d_array_bounds>
  10a441:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10a445:	48 03 45 80          	add    -0x80(%rbp),%rax
  10a449:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  10a450:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  10a454:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  10a458:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  10a45c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  10a460:	48 89 02             	mov    %rax,(%rdx)
  10a463:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10a467:	48 89 42 08          	mov    %rax,0x8(%rdx)
	return numChars;
  10a46b:	8b 45 f4             	mov    -0xc(%rbp),%eax
}
  10a46e:	c9                   	leaveq 
  10a46f:	c3                   	retq   

000000000010a470 <_D9kgdb_stub12hexchar2byteFhZg>:

// used to go from a real nibble to its hex char
static const char[] hexchars = "1234567890abcdef";

// used to make a hex char into a nibble
byte hexchar2byte(ubyte ch){
  10a470:	55                   	push   %rbp
  10a471:	48 89 e5             	mov    %rsp,%rbp
  10a474:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
	if ((ch >= 'a') && (ch <= 'f')) return (ch-'a'+10);
  10a478:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a47c:	83 f8 61             	cmp    $0x61,%eax
  10a47f:	7c 15                	jl     10a496 <_D9kgdb_stub12hexchar2byteFhZg+0x26>
  10a481:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a485:	83 f8 66             	cmp    $0x66,%eax
  10a488:	7f 0c                	jg     10a496 <_D9kgdb_stub12hexchar2byteFhZg+0x26>
  10a48a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a48e:	83 e8 57             	sub    $0x57,%eax
  10a491:	88 45 fe             	mov    %al,-0x2(%rbp)
  10a494:	eb 40                	jmp    10a4d6 <_D9kgdb_stub12hexchar2byteFhZg+0x66>
	if ((ch >= '0') && (ch <= '9')) return (ch-'0');
  10a496:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a49a:	83 f8 30             	cmp    $0x30,%eax
  10a49d:	7c 15                	jl     10a4b4 <_D9kgdb_stub12hexchar2byteFhZg+0x44>
  10a49f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a4a3:	83 f8 39             	cmp    $0x39,%eax
  10a4a6:	7f 0c                	jg     10a4b4 <_D9kgdb_stub12hexchar2byteFhZg+0x44>
  10a4a8:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a4ac:	83 e8 30             	sub    $0x30,%eax
  10a4af:	88 45 fe             	mov    %al,-0x2(%rbp)
  10a4b2:	eb 22                	jmp    10a4d6 <_D9kgdb_stub12hexchar2byteFhZg+0x66>
	if ((ch >= 'A') && (ch <= 'F')) return (ch-'A'+10);
  10a4b4:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a4b8:	83 f8 41             	cmp    $0x41,%eax
  10a4bb:	7c 15                	jl     10a4d2 <_D9kgdb_stub12hexchar2byteFhZg+0x62>
  10a4bd:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a4c1:	83 f8 46             	cmp    $0x46,%eax
  10a4c4:	7f 0c                	jg     10a4d2 <_D9kgdb_stub12hexchar2byteFhZg+0x62>
  10a4c6:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10a4ca:	83 e8 37             	sub    $0x37,%eax
  10a4cd:	88 45 fe             	mov    %al,-0x2(%rbp)
  10a4d0:	eb 04                	jmp    10a4d6 <_D9kgdb_stub12hexchar2byteFhZg+0x66>
	return (-1);
  10a4d2:	c6 45 fe ff          	movb   $0xff,-0x2(%rbp)
  10a4d6:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
}
  10a4da:	c9                   	leaveq 
  10a4db:	c3                   	retq   

000000000010a4dc <_D9kgdb_stub13computeSignalFiZi>:

/* this function takes the interrupt id and attempts to
	 translate this number into a unix compatible signal value */
int computeSignal(int exceptionVector)
  10a4dc:	55                   	push   %rbp
  10a4dd:	48 89 e5             	mov    %rsp,%rbp
  10a4e0:	89 7d dc             	mov    %edi,-0x24(%rbp)
		case idt.Type.SegNotPresent:	return 11;
		case idt.Type.StackFault:		return 11;
		case idt.Type.GPF:				return 11;
		case idt.Type.PageFault:		return 11;
		case idt.Type.CoprocFault:		return 7;
		default:						return 7;
  10a4e3:	83 7d dc 10          	cmpl   $0x10,-0x24(%rbp)
  10a4e7:	0f 87 97 00 00 00    	ja     10a584 <_D9kgdb_stub13computeSignalFiZi+0xa8>
  10a4ed:	8b 45 dc             	mov    -0x24(%rbp),%eax
  10a4f0:	48 8b 04 c5 30 7d 11 	mov    0x117d30(,%rax,8),%rax
  10a4f7:	00 
  10a4f8:	ff e0                	jmpq   *%rax
	 translate this number into a unix compatible signal value */
int computeSignal(int exceptionVector)
{
	switch (exceptionVector)
	{
		case idt.Type.DivByZero:		return 8;
  10a4fa:	c7 45 d8 08 00 00 00 	movl   $0x8,-0x28(%rbp)
  10a501:	e9 85 00 00 00       	jmpq   10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.Debug:			return 5;
  10a506:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%rbp)
  10a50d:	eb 7c                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.Breakpoint:		return 5;
  10a50f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%rbp)
  10a516:	eb 73                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.INTO:				return 16;
  10a518:	c7 45 d8 10 00 00 00 	movl   $0x10,-0x28(%rbp)
  10a51f:	eb 6a                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.OutOfBounds:		return 16;
  10a521:	c7 45 d8 10 00 00 00 	movl   $0x10,-0x28(%rbp)
  10a528:	eb 61                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.InvalidOpcode:  	return 4;
  10a52a:	c7 45 d8 04 00 00 00 	movl   $0x4,-0x28(%rbp)
  10a531:	eb 58                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.NoCoproc:			return 8;
  10a533:	c7 45 d8 08 00 00 00 	movl   $0x8,-0x28(%rbp)
  10a53a:	eb 4f                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.DoubleFault:		return 7;
  10a53c:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%rbp)
  10a543:	eb 46                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.CoprocSegOver:	return 11;
  10a545:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a54c:	eb 3d                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.BadTSS:			return 11;
  10a54e:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a555:	eb 34                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.SegNotPresent:	return 11;
  10a557:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a55e:	eb 2b                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.StackFault:		return 11;
  10a560:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a567:	eb 22                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.GPF:				return 11;
  10a569:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a570:	eb 19                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.PageFault:		return 11;
  10a572:	c7 45 d8 0b 00 00 00 	movl   $0xb,-0x28(%rbp)
  10a579:	eb 10                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		case idt.Type.CoprocFault:		return 7;
  10a57b:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%rbp)
  10a582:	eb 07                	jmp    10a58b <_D9kgdb_stub13computeSignalFiZi+0xaf>
		default:						return 7;
  10a584:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%rbp)
  10a58b:	8b 45 d8             	mov    -0x28(%rbp),%eax
	}
}
  10a58e:	c9                   	leaveq 
  10a58f:	c3                   	retq   

000000000010a590 <_D9kgdb_stub8regs2gdbFPS3idt15interrupt_stackZv>:

// Converts the current interrupt stack to the format gdb expects
void regs2gdb(idt.interrupt_stack* ir_stack)
  10a590:	55                   	push   %rbp
  10a591:	48 89 e5             	mov    %rsp,%rbp
  10a594:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
{
	tempStack.rax = ir_stack.rax;
  10a598:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a59c:	48 83 c0 70          	add    $0x70,%rax
  10a5a0:	48 8b 00             	mov    (%rax),%rax
  10a5a3:	48 89 05 36 b2 01 00 	mov    %rax,0x1b236(%rip)        # 1257e0 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb>
	tempStack.rdx = ir_stack.rdx;
  10a5aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a5ae:	48 83 c0 58          	add    $0x58,%rax
  10a5b2:	48 8b 00             	mov    (%rax),%rax
  10a5b5:	48 89 05 2c b2 01 00 	mov    %rax,0x1b22c(%rip)        # 1257e8 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x8>
	tempStack.rcx = ir_stack.rcx;
  10a5bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a5c0:	48 83 c0 60          	add    $0x60,%rax
  10a5c4:	48 8b 00             	mov    (%rax),%rax
  10a5c7:	48 89 05 22 b2 01 00 	mov    %rax,0x1b222(%rip)        # 1257f0 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x10>
	tempStack.rbx = ir_stack.rbx;
  10a5ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a5d2:	48 83 c0 68          	add    $0x68,%rax
  10a5d6:	48 8b 00             	mov    (%rax),%rax
  10a5d9:	48 89 05 18 b2 01 00 	mov    %rax,0x1b218(%rip)        # 1257f8 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x18>
	tempStack.rsi = ir_stack.rsi;
  10a5e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a5e4:	48 83 c0 50          	add    $0x50,%rax
  10a5e8:	48 8b 00             	mov    (%rax),%rax
  10a5eb:	48 89 05 0e b2 01 00 	mov    %rax,0x1b20e(%rip)        # 125800 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x20>
	tempStack.rdi = ir_stack.rdi;
  10a5f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a5f6:	48 83 c0 48          	add    $0x48,%rax
  10a5fa:	48 8b 00             	mov    (%rax),%rax
  10a5fd:	48 89 05 04 b2 01 00 	mov    %rax,0x1b204(%rip)        # 125808 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x28>
	tempStack.rbp = ir_stack.rbp;
  10a604:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a608:	48 83 c0 40          	add    $0x40,%rax
  10a60c:	48 8b 00             	mov    (%rax),%rax
  10a60f:	48 89 05 fa b1 01 00 	mov    %rax,0x1b1fa(%rip)        # 125810 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x30>
	tempStack.rsp = ir_stack.rsp;
  10a616:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a61a:	48 05 a0 00 00 00    	add    $0xa0,%rax
  10a620:	48 8b 00             	mov    (%rax),%rax
  10a623:	48 89 05 ee b1 01 00 	mov    %rax,0x1b1ee(%rip)        # 125818 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x38>
	tempStack.r8 = ir_stack.r8;
  10a62a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a62e:	48 83 c0 38          	add    $0x38,%rax
  10a632:	48 8b 00             	mov    (%rax),%rax
  10a635:	48 89 05 e4 b1 01 00 	mov    %rax,0x1b1e4(%rip)        # 125820 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x40>
	tempStack.r9 = ir_stack.r9;
  10a63c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a640:	48 83 c0 30          	add    $0x30,%rax
  10a644:	48 8b 00             	mov    (%rax),%rax
  10a647:	48 89 05 da b1 01 00 	mov    %rax,0x1b1da(%rip)        # 125828 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x48>
	tempStack.r10 = ir_stack.r10;
  10a64e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a652:	48 83 c0 28          	add    $0x28,%rax
  10a656:	48 8b 00             	mov    (%rax),%rax
  10a659:	48 89 05 d0 b1 01 00 	mov    %rax,0x1b1d0(%rip)        # 125830 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x50>
	tempStack.r11 = ir_stack.r11;
  10a660:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a664:	48 83 c0 20          	add    $0x20,%rax
  10a668:	48 8b 00             	mov    (%rax),%rax
  10a66b:	48 89 05 c6 b1 01 00 	mov    %rax,0x1b1c6(%rip)        # 125838 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x58>
	tempStack.r12 = ir_stack.r12;
  10a672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a676:	48 83 c0 18          	add    $0x18,%rax
  10a67a:	48 8b 00             	mov    (%rax),%rax
  10a67d:	48 89 05 bc b1 01 00 	mov    %rax,0x1b1bc(%rip)        # 125840 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x60>
	tempStack.r13 = ir_stack.r13;
  10a684:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a688:	48 83 c0 10          	add    $0x10,%rax
  10a68c:	48 8b 00             	mov    (%rax),%rax
  10a68f:	48 89 05 b2 b1 01 00 	mov    %rax,0x1b1b2(%rip)        # 125848 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x68>
	tempStack.r14 = ir_stack.r14;
  10a696:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a69a:	48 83 c0 08          	add    $0x8,%rax
  10a69e:	48 8b 00             	mov    (%rax),%rax
  10a6a1:	48 89 05 a8 b1 01 00 	mov    %rax,0x1b1a8(%rip)        # 125850 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x70>
	tempStack.r15 = ir_stack.r15;
  10a6a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a6ac:	48 8b 00             	mov    (%rax),%rax
  10a6af:	48 89 05 a2 b1 01 00 	mov    %rax,0x1b1a2(%rip)        # 125858 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x78>
	tempStack.rip = ir_stack.rip;
  10a6b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a6ba:	48 05 88 00 00 00    	add    $0x88,%rax
  10a6c0:	48 8b 00             	mov    (%rax),%rax
  10a6c3:	48 89 05 96 b1 01 00 	mov    %rax,0x1b196(%rip)        # 125860 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x80>
	tempStack.rflags = ir_stack.rflags;
  10a6ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a6ce:	48 05 98 00 00 00    	add    $0x98,%rax
  10a6d4:	48 8b 00             	mov    (%rax),%rax
  10a6d7:	48 89 05 8a b1 01 00 	mov    %rax,0x1b18a(%rip)        # 125868 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x88>
}
  10a6de:	c9                   	leaveq 
  10a6df:	c3                   	retq   

000000000010a6e0 <_D9kgdb_stub8gdb2regsFPS3idt15interrupt_stackZv>:

void gdb2regs(idt.interrupt_stack* ir_stack)
  10a6e0:	55                   	push   %rbp
  10a6e1:	48 89 e5             	mov    %rsp,%rbp
  10a6e4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
{
	ir_stack.rax = tempStack.rax;
  10a6e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a6ec:	48 83 c2 70          	add    $0x70,%rdx
  10a6f0:	48 8b 05 e9 b0 01 00 	mov    0x1b0e9(%rip),%rax        # 1257e0 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb>
  10a6f7:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rdx = tempStack.rdx;
  10a6fa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a6fe:	48 83 c2 58          	add    $0x58,%rdx
  10a702:	48 8b 05 df b0 01 00 	mov    0x1b0df(%rip),%rax        # 1257e8 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x8>
  10a709:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rcx = tempStack.rcx;
  10a70c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a710:	48 83 c2 60          	add    $0x60,%rdx
  10a714:	48 8b 05 d5 b0 01 00 	mov    0x1b0d5(%rip),%rax        # 1257f0 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x10>
  10a71b:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rbx = tempStack.rbx;
  10a71e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a722:	48 83 c2 68          	add    $0x68,%rdx
  10a726:	48 8b 05 cb b0 01 00 	mov    0x1b0cb(%rip),%rax        # 1257f8 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x18>
  10a72d:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rsi = tempStack.rsi;
  10a730:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a734:	48 83 c2 50          	add    $0x50,%rdx
  10a738:	48 8b 05 c1 b0 01 00 	mov    0x1b0c1(%rip),%rax        # 125800 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x20>
  10a73f:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rdi = tempStack.rdi;
  10a742:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a746:	48 83 c2 48          	add    $0x48,%rdx
  10a74a:	48 8b 05 b7 b0 01 00 	mov    0x1b0b7(%rip),%rax        # 125808 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x28>
  10a751:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rbp = tempStack.rbp;
  10a754:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a758:	48 83 c2 40          	add    $0x40,%rdx
  10a75c:	48 8b 05 ad b0 01 00 	mov    0x1b0ad(%rip),%rax        # 125810 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x30>
  10a763:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rsp = tempStack.rsp;
  10a766:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a76a:	48 81 c2 a0 00 00 00 	add    $0xa0,%rdx
  10a771:	48 8b 05 a0 b0 01 00 	mov    0x1b0a0(%rip),%rax        # 125818 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x38>
  10a778:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r8 = tempStack.r8;
  10a77b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a77f:	48 83 c2 38          	add    $0x38,%rdx
  10a783:	48 8b 05 96 b0 01 00 	mov    0x1b096(%rip),%rax        # 125820 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x40>
  10a78a:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r9 = tempStack.r9;
  10a78d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a791:	48 83 c2 30          	add    $0x30,%rdx
  10a795:	48 8b 05 8c b0 01 00 	mov    0x1b08c(%rip),%rax        # 125828 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x48>
  10a79c:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r10 = tempStack.r10;
  10a79f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7a3:	48 83 c2 28          	add    $0x28,%rdx
  10a7a7:	48 8b 05 82 b0 01 00 	mov    0x1b082(%rip),%rax        # 125830 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x50>
  10a7ae:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r11 = tempStack.r11;
  10a7b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7b5:	48 83 c2 20          	add    $0x20,%rdx
  10a7b9:	48 8b 05 78 b0 01 00 	mov    0x1b078(%rip),%rax        # 125838 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x58>
  10a7c0:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r12 = tempStack.r12;
  10a7c3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7c7:	48 83 c2 18          	add    $0x18,%rdx
  10a7cb:	48 8b 05 6e b0 01 00 	mov    0x1b06e(%rip),%rax        # 125840 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x60>
  10a7d2:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r13 = tempStack.r13;
  10a7d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7d9:	48 83 c2 10          	add    $0x10,%rdx
  10a7dd:	48 8b 05 64 b0 01 00 	mov    0x1b064(%rip),%rax        # 125848 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x68>
  10a7e4:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r14 = tempStack.r14;
  10a7e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7eb:	48 83 c2 08          	add    $0x8,%rdx
  10a7ef:	48 8b 05 5a b0 01 00 	mov    0x1b05a(%rip),%rax        # 125850 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x70>
  10a7f6:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.r15 = tempStack.r15;
  10a7f9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a7fd:	48 8b 05 54 b0 01 00 	mov    0x1b054(%rip),%rax        # 125858 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x78>
  10a804:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rip = tempStack.rip;
  10a807:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a80b:	48 81 c2 88 00 00 00 	add    $0x88,%rdx
  10a812:	48 8b 05 47 b0 01 00 	mov    0x1b047(%rip),%rax        # 125860 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x80>
  10a819:	48 89 02             	mov    %rax,(%rdx)
	ir_stack.rflags = tempStack.rflags;
  10a81c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a820:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
  10a827:	48 8b 05 3a b0 01 00 	mov    0x1b03a(%rip),%rax        # 125868 <_D9kgdb_stub9tempStackS9kgdb_stub13int_stack_gdb+0x88>
  10a82e:	48 89 02             	mov    %rax,(%rdx)
}
  10a831:	c9                   	leaveq 
  10a832:	c3                   	retq   

000000000010a833 <_D9kgdb_stub45__T11toByteArrayTPS9kgdb_stub13int_stack_gdbZ11toByteArrayFPS9kgdb_stub13int_stack_gdbmZAh>:
}

// --- Helpers ---

//	Used to treat a memory region (or struct) as a byte array
ubyte[] toByteArray(T)(T t, size_t len = 0)
  10a833:	55                   	push   %rbp
  10a834:	48 89 e5             	mov    %rsp,%rbp
  10a837:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  10a83b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
{
	static if(is(typeof(t.ptr)))
		return (cast(ubyte*)t.ptr)[0 .. t.length];
	else static if(is(typeof(*t)) || is(T == void*))
		return (cast(ubyte*)t)[0 .. len];
  10a83f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a843:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10a847:	48 89 07             	mov    %rax,(%rdi)
  10a84a:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	else
		static assert(false, "YOU CANT DO THAT: type = " ~ T.stringof);
}
  10a84e:	48 89 f8             	mov    %rdi,%rax
  10a851:	c9                   	leaveq 
  10a852:	c3                   	retq   

000000000010a853 <_D9kgdb_stub20__T11toByteArrayTPmZ11toByteArrayFPmmZAh>:
}

// --- Helpers ---

//	Used to treat a memory region (or struct) as a byte array
ubyte[] toByteArray(T)(T t, size_t len = 0)
  10a853:	55                   	push   %rbp
  10a854:	48 89 e5             	mov    %rsp,%rbp
  10a857:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  10a85b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
{
	static if(is(typeof(t.ptr)))
		return (cast(ubyte*)t.ptr)[0 .. t.length];
	else static if(is(typeof(*t)) || is(T == void*))
		return (cast(ubyte*)t)[0 .. len];
  10a85f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a863:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10a867:	48 89 07             	mov    %rax,(%rdi)
  10a86a:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	else
		static assert(false, "YOU CANT DO THAT: type = " ~ T.stringof);
}
  10a86e:	48 89 f8             	mov    %rdi,%rax
  10a871:	c9                   	leaveq 
  10a872:	c3                   	retq   

000000000010a873 <_D9kgdb_stub20__T11toByteArrayTPvZ11toByteArrayFPvmZAh>:
}

// --- Helpers ---

//	Used to treat a memory region (or struct) as a byte array
ubyte[] toByteArray(T)(T t, size_t len = 0)
  10a873:	55                   	push   %rbp
  10a874:	48 89 e5             	mov    %rsp,%rbp
  10a877:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  10a87b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
{
	static if(is(typeof(t.ptr)))
		return (cast(ubyte*)t.ptr)[0 .. t.length];
	else static if(is(typeof(*t)) || is(T == void*))
		return (cast(ubyte*)t)[0 .. len];
  10a87f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10a883:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10a887:	48 89 07             	mov    %rax,(%rdi)
  10a88a:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	else
		static assert(false, "YOU CANT DO THAT: type = " ~ T.stringof);
}
  10a88e:	48 89 f8             	mov    %rdi,%rax
  10a891:	c9                   	leaveq 
  10a892:	c3                   	retq   
  10a893:	90                   	nop    

000000000010a894 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm>:

// Object[]

class TypeInfo_AC : TypeInfo
{
    hash_t getHash(void *p)
  10a894:	55                   	push   %rbp
  10a895:	48 89 e5             	mov    %rsp,%rbp
  10a898:	48 83 ec 50          	sub    $0x50,%rsp
  10a89c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10a8a0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10a8a4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10a8a8:	e8 97 8d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	Object[] s = *cast(Object[]*)p;
  10a8ad:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10a8b1:	48 8b 02             	mov    (%rdx),%rax
  10a8b4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10a8b8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10a8bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  10a8c0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10a8c7:	00 

	foreach (Object o; s)
  10a8c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10a8cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10a8d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10a8d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10a8d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10a8dc:	48 c1 e0 03          	shl    $0x3,%rax
  10a8e0:	48 03 45 b8          	add    -0x48(%rbp),%rax
  10a8e4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10a8e8:	0f 95 c0             	setne  %al
  10a8eb:	83 f0 01             	xor    $0x1,%eax
  10a8ee:	84 c0                	test   %al,%al
  10a8f0:	75 31                	jne    10a923 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x8f>
  10a8f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10a8f6:	48 8b 00             	mov    (%rax),%rax
  10a8f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
	    if (o)
  10a8fd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10a902:	74 18                	je     10a91c <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x88>
		hash += o.toHash();
  10a904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10a908:	48 8b 00             	mov    (%rax),%rax
  10a90b:	48 83 c0 10          	add    $0x10,%rax
  10a90f:	48 8b 00             	mov    (%rax),%rax
  10a912:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10a916:	ff d0                	callq  *%rax
  10a918:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    {	Object[] s = *cast(Object[]*)p;
	hash_t hash = 0;

	foreach (Object o; s)
	{
	    if (o)
  10a91c:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  10a921:	eb b5                	jmp    10a8d8 <_D3std8typeinfo5ti_AC11TypeInfo_AC7getHashMFPvZm+0x44>
		hash += o.toHash();
	}
	return hash;
  10a923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10a927:	c9                   	leaveq 
  10a928:	c3                   	retq   

000000000010a929 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10a929:	55                   	push   %rbp
  10a92a:	48 89 e5             	mov    %rsp,%rbp
  10a92d:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  10a934:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10a938:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10a93c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10a940:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10a944:	e8 fb 8c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  10a949:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10a94d:	48 8b 02             	mov    (%rdx),%rax
  10a950:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10a954:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10a958:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  10a95c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10a960:	48 8b 02             	mov    (%rdx),%rax
  10a963:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10a967:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10a96b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	if (s1.length == s2.length)
  10a96f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10a973:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10a977:	48 39 c2             	cmp    %rax,%rdx
  10a97a:	0f 85 3d 01 00 00    	jne    10aabd <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x194>
	{
	    for (size_t u = 0; u < s1.length; u++)
  10a980:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10a987:	00 
  10a988:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10a98c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10a990:	0f 92 c0             	setb   %al
  10a993:	83 f0 01             	xor    $0x1,%eax
  10a996:	84 c0                	test   %al,%al
  10a998:	0f 85 16 01 00 00    	jne    10aab4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x18b>
	    {	Object o1 = s1[u];
  10a99e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10a9a2:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10a9a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10a9ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10a9b1:	73 0d                	jae    10a9c0 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x97>
  10a9b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10a9b7:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10a9be:	eb 22                	jmp    10a9e2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xb9>
  10a9c0:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  10a9c7:	00 
  10a9c8:	48 c7 45 c8 c0 7d 11 	movq   $0x117dc0,-0x38(%rbp)
  10a9cf:	00 
  10a9d0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10a9d4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10a9d8:	ba 1b 00 00 00       	mov    $0x1b,%edx
  10a9dd:	e8 53 a3 00 00       	callq  114d35 <_d_array_bounds>
  10a9e2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10a9e9:	48 c1 e0 03          	shl    $0x3,%rax
  10a9ed:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  10a9f4:	48 8b 00             	mov    (%rax),%rax
  10a9f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  10a9fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10a9ff:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10aa06:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10aa0a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10aa0e:	73 0d                	jae    10aa1d <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0xf4>
  10aa10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10aa14:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10aa1b:	eb 22                	jmp    10aa3f <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x116>
  10aa1d:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  10aa24:	00 
  10aa25:	48 c7 45 d8 c0 7d 11 	movq   $0x117dc0,-0x28(%rbp)
  10aa2c:	00 
  10aa2d:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10aa31:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10aa35:	ba 1c 00 00 00       	mov    $0x1c,%edx
  10aa3a:	e8 f6 a2 00 00       	callq  114d35 <_d_array_bounds>
  10aa3f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10aa46:	48 c1 e0 03          	shl    $0x3,%rax
  10aa4a:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10aa51:	48 8b 00             	mov    (%rax),%rax
  10aa54:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		// Do not pass null's to Object.opEquals()
		if (o1 is o2 ||
  10aa58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10aa5c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10aa60:	74 49                	je     10aaab <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
  10aa62:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10aa67:	0f 94 c0             	sete   %al
  10aa6a:	83 f0 01             	xor    $0x1,%eax
  10aa6d:	83 f0 01             	xor    $0x1,%eax
  10aa70:	84 c0                	test   %al,%al
  10aa72:	75 2e                	jne    10aaa2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  10aa74:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  10aa79:	0f 94 c0             	sete   %al
  10aa7c:	83 f0 01             	xor    $0x1,%eax
  10aa7f:	83 f0 01             	xor    $0x1,%eax
  10aa82:	84 c0                	test   %al,%al
  10aa84:	75 1c                	jne    10aaa2 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x179>
  10aa86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10aa8a:	48 8b 00             	mov    (%rax),%rax
  10aa8d:	48 83 c0 20          	add    $0x20,%rax
  10aa91:	48 8b 00             	mov    (%rax),%rax
  10aa94:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  10aa98:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10aa9c:	ff d0                	callq  *%rax
  10aa9e:	85 c0                	test   %eax,%eax
  10aaa0:	75 09                	jne    10aaab <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x182>
		    (!(o1 is null) && !(o2 is null) && o1.opEquals(o2)))
		    continue;
		return 0;
  10aaa2:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10aaa9:	eb 19                	jmp    10aac4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
  10aaab:	48 ff 45 e8          	incq   -0x18(%rbp)
  10aaaf:	e9 d4 fe ff ff       	jmpq   10a988 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x5f>
	    }
	    return 1;
  10aab4:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10aabb:	eb 07                	jmp    10aac4 <_D3std8typeinfo5ti_AC11TypeInfo_AC6equalsMFPvPvZi+0x19b>
	}
	return 0;
  10aabd:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10aac4:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10aac7:	c9                   	leaveq 
  10aac8:	c3                   	retq   

000000000010aac9 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10aac9:	55                   	push   %rbp
  10aaca:	48 89 e5             	mov    %rsp,%rbp
  10aacd:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  10aad4:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10aad8:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10aadc:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10aae0:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10aae4:	e8 5b 8b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object[] s1 = *cast(Object[]*)p1;
  10aae9:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10aaed:	48 8b 02             	mov    (%rdx),%rax
  10aaf0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10aaf4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10aaf8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	Object[] s2 = *cast(Object[]*)p2;
  10aafc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10ab00:	48 8b 02             	mov    (%rdx),%rax
  10ab03:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10ab07:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ab0b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ptrdiff_t c;
  10ab0f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  10ab16:	00 

	c = cast(ptrdiff_t)s1.length - cast(ptrdiff_t)s2.length;
  10ab17:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ab1b:	48 89 c2             	mov    %rax,%rdx
  10ab1e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ab22:	48 89 d1             	mov    %rdx,%rcx
  10ab25:	48 29 c1             	sub    %rax,%rcx
  10ab28:	48 89 c8             	mov    %rcx,%rax
  10ab2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (c == 0)
  10ab2f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  10ab34:	0f 85 36 01 00 00    	jne    10ac70 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	{
	    for (size_t u = 0; u < s1.length; u++)
  10ab3a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10ab41:	00 
  10ab42:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ab46:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10ab4a:	0f 92 c0             	setb   %al
  10ab4d:	83 f0 01             	xor    $0x1,%eax
  10ab50:	84 c0                	test   %al,%al
  10ab52:	0f 85 18 01 00 00    	jne    10ac70 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
	    {	Object o1 = s1[u];
  10ab58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10ab5c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10ab63:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ab67:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10ab6b:	73 0d                	jae    10ab7a <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xb1>
  10ab6d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10ab71:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  10ab78:	eb 22                	jmp    10ab9c <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0xd3>
  10ab7a:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  10ab81:	00 
  10ab82:	48 c7 45 c8 c0 7d 11 	movq   $0x117dc0,-0x38(%rbp)
  10ab89:	00 
  10ab8a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10ab8e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10ab92:	ba 33 00 00 00       	mov    $0x33,%edx
  10ab97:	e8 99 a1 00 00       	callq  114d35 <_d_array_bounds>
  10ab9c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10aba3:	48 c1 e0 03          	shl    $0x3,%rax
  10aba7:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  10abae:	48 8b 00             	mov    (%rax),%rax
  10abb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = s2[u];
  10abb5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10abb9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10abc0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10abc4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10abc8:	73 0a                	jae    10abd4 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x10b>
  10abca:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10abce:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  10abd2:	eb 22                	jmp    10abf6 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x12d>
  10abd4:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  10abdb:	00 
  10abdc:	48 c7 45 d8 c0 7d 11 	movq   $0x117dc0,-0x28(%rbp)
  10abe3:	00 
  10abe4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10abe8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10abec:	ba 34 00 00 00       	mov    $0x34,%edx
  10abf1:	e8 3f a1 00 00       	callq  114d35 <_d_array_bounds>
  10abf6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10abfa:	48 c1 e0 03          	shl    $0x3,%rax
  10abfe:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10ac05:	48 8b 00             	mov    (%rax),%rax
  10ac08:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		if (o1 is o2)
  10ac0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10ac10:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10ac14:	74 51                	je     10ac67 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  10ac16:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10ac1b:	74 40                	je     10ac5d <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x194>
		{
		    if (!o2)
  10ac1d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  10ac22:	0f 95 c0             	setne  %al
  10ac25:	83 f0 01             	xor    $0x1,%eax
  10ac28:	84 c0                	test   %al,%al
  10ac2a:	74 0a                	je     10ac36 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x16d>
		    {	c = 1;
  10ac2c:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10ac33:	00 
			break;
  10ac34:	eb 3a                	jmp    10ac70 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
		    }
		    c = o1.opCmp(o2);
  10ac36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10ac3a:	48 8b 00             	mov    (%rax),%rax
  10ac3d:	48 83 c0 18          	add    $0x18,%rax
  10ac41:	48 8b 00             	mov    (%rax),%rax
  10ac44:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  10ac48:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ac4c:	ff d0                	callq  *%rax
  10ac4e:	48 98                	cltq   
  10ac50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		    if (c)
  10ac54:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  10ac59:	75 15                	jne    10ac70 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>
			break;
  10ac5b:	eb 0a                	jmp    10ac67 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x19e>
		}
		else
		{   c = -1;
  10ac5d:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  10ac64:	ff 
		    break;
  10ac65:	eb 09                	jmp    10ac70 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1a7>

		if (o1 is o2)
		    continue;

		// Regard null references as always being "less than"
		if (o1)
  10ac67:	48 ff 45 e8          	incq   -0x18(%rbp)
  10ac6b:	e9 d2 fe ff ff       	jmpq   10ab42 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x79>
		{   c = -1;
		    break;
		}
	    }
	}
	if (c < 0)
  10ac70:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  10ac75:	79 0a                	jns    10ac81 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1b8>
	    c = -1;
  10ac77:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
  10ac7e:	ff 
  10ac7f:	eb 0f                	jmp    10ac90 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	else if (c > 0)
  10ac81:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  10ac86:	7e 08                	jle    10ac90 <_D3std8typeinfo5ti_AC11TypeInfo_AC7compareMFPvPvZi+0x1c7>
	    c = 1;
  10ac88:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10ac8f:	00 
	return c;
  10ac90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    }
  10ac94:	c9                   	leaveq 
  10ac95:	c3                   	retq   

000000000010ac96 <_D3std8typeinfo5ti_AC11TypeInfo_AC5tsizeMFZm>:

    size_t tsize()
  10ac96:	55                   	push   %rbp
  10ac97:	48 89 e5             	mov    %rsp,%rbp
  10ac9a:	48 83 ec 10          	sub    $0x10,%rsp
  10ac9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10aca2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10aca6:	e8 99 89 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (Object[]).sizeof;
  10acab:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10acb0:	c9                   	leaveq 
  10acb1:	c3                   	retq   

000000000010acb2 <_D3std8typeinfo5ti_AC11TypeInfo_AC5flagsMFZk>:

    uint flags()
  10acb2:	55                   	push   %rbp
  10acb3:	48 89 e5             	mov    %rsp,%rbp
  10acb6:	48 83 ec 10          	sub    $0x10,%rsp
  10acba:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10acbe:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10acc2:	e8 7d 89 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10acc7:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10accc:	c9                   	leaveq 
  10accd:	c3                   	retq   

000000000010acce <_D3std8typeinfo5ti_AC11TypeInfo_AC4nextMFZC8TypeInfo>:

    TypeInfo next()
  10acce:	55                   	push   %rbp
  10accf:	48 89 e5             	mov    %rsp,%rbp
  10acd2:	48 83 ec 10          	sub    $0x10,%rsp
  10acd6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10acda:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10acde:	e8 61 89 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(Object);
  10ace3:	b8 f0 0e 12 00       	mov    $0x120ef0,%eax
    }
  10ace8:	c9                   	leaveq 
  10ace9:	c3                   	retq   
  10acea:	90                   	nop    
  10aceb:	90                   	nop    

000000000010acec <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar8toStringMFZAa>:

// cdouble[]

class TypeInfo_Ar : TypeInfo
{
    char[] toString() { return "cdouble[]"; }
  10acec:	55                   	push   %rbp
  10aced:	48 89 e5             	mov    %rsp,%rbp
  10acf0:	53                   	push   %rbx
  10acf1:	48 83 ec 08          	sub    $0x8,%rsp
  10acf5:	48 89 fb             	mov    %rdi,%rbx
  10acf8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10acfc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10ad00:	e8 3f 89 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10ad05:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  10ad0c:	48 c7 43 08 80 7e 11 	movq   $0x117e80,0x8(%rbx)
  10ad13:	00 
  10ad14:	48 89 d8             	mov    %rbx,%rax
  10ad17:	48 83 c4 08          	add    $0x8,%rsp
  10ad1b:	5b                   	pop    %rbx
  10ad1c:	c9                   	leaveq 
  10ad1d:	c3                   	retq   

000000000010ad1e <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm>:

    hash_t getHash(void *p)
  10ad1e:	55                   	push   %rbp
  10ad1f:	48 89 e5             	mov    %rsp,%rbp
  10ad22:	48 83 ec 40          	sub    $0x40,%rsp
  10ad26:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10ad2a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10ad2e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10ad32:	e8 0d 89 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	cdouble[] s = *cast(cdouble[]*)p;
  10ad37:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10ad3b:	48 8b 02             	mov    (%rdx),%rax
  10ad3e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10ad42:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ad46:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10ad4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10ad4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cdouble *str = s.ptr;
  10ad52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10ad56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10ad5a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10ad61:	00 

	while (len)
  10ad62:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10ad67:	0f 95 c0             	setne  %al
  10ad6a:	83 f0 01             	xor    $0x1,%eax
  10ad6d:	84 c0                	test   %al,%al
  10ad6f:	75 71                	jne    10ade2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0xc4>
	{
	    hash *= 9;
  10ad71:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10ad75:	48 89 d0             	mov    %rdx,%rax
  10ad78:	48 c1 e0 03          	shl    $0x3,%rax
  10ad7c:	48 01 d0             	add    %rdx,%rax
  10ad7f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  10ad83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10ad87:	b8 00 00 00 00       	mov    $0x0,%eax
  10ad8c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10ad90:	8b 00                	mov    (%rax),%eax
  10ad92:	89 c0                	mov    %eax,%eax
  10ad94:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  10ad98:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10ad9c:	b8 04 00 00 00       	mov    $0x4,%eax
  10ada1:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10ada5:	8b 00                	mov    (%rax),%eax
  10ada7:	89 c0                	mov    %eax,%eax
  10ada9:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  10adad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10adb1:	b8 08 00 00 00       	mov    $0x8,%eax
  10adb6:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10adba:	8b 00                	mov    (%rax),%eax
  10adbc:	89 c0                	mov    %eax,%eax
  10adbe:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  10adc2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10adc6:	b8 0c 00 00 00       	mov    $0xc,%eax
  10adcb:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10adcf:	8b 00                	mov    (%rax),%eax
  10add1:	89 c0                	mov    %eax,%eax
  10add3:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10add7:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  10addc:	48 ff 4d f8          	decq   -0x8(%rbp)
  10ade0:	eb 80                	jmp    10ad62 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7getHashMFPvZm+0x44>
	}

	return hash;
  10ade2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10ade6:	c9                   	leaveq 
  10ade7:	c3                   	retq   

000000000010ade8 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10ade8:	55                   	push   %rbp
  10ade9:	48 89 e5             	mov    %rsp,%rbp
  10adec:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10adf3:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10adf7:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10adfb:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10adff:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10ae03:	e8 3c 88 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  10ae08:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10ae0c:	48 8b 02             	mov    (%rdx),%rax
  10ae0f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10ae13:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ae17:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  10ae1b:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10ae1f:	48 8b 02             	mov    (%rdx),%rax
  10ae22:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10ae26:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ae2a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10ae2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ae32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10ae36:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ae3a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10ae3e:	74 0f                	je     10ae4f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x67>
	    return 0;
  10ae40:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  10ae47:	00 00 00 
  10ae4a:	e9 53 01 00 00       	jmpq   10afa2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	for (size_t u = 0; u < len; u++)
  10ae4f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10ae56:	00 
  10ae57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ae5b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10ae5f:	0f 92 c0             	setb   %al
  10ae62:	83 f0 01             	xor    $0x1,%eax
  10ae65:	84 c0                	test   %al,%al
  10ae67:	0f 85 2b 01 00 00    	jne    10af98 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1b0>
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
  10ae6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10ae71:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10ae78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ae7c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ae80:	73 0d                	jae    10ae8f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xa7>
  10ae82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ae86:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10ae8d:	eb 22                	jmp    10aeb1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0xc9>
  10ae8f:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  10ae96:	00 
  10ae97:	48 c7 45 c8 8a 7e 11 	movq   $0x117e8a,-0x38(%rbp)
  10ae9e:	00 
  10ae9f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10aea3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10aea7:	ba 40 00 00 00       	mov    $0x40,%edx
  10aeac:	e8 84 9e 00 00       	callq  114d35 <_d_array_bounds>
  10aeb1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10aeb8:	48 c1 e0 04          	shl    $0x4,%rax
  10aebc:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10aec3:	dd 00                	fldl   (%rax)
  10aec5:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  10aecb:	dd 40 08             	fldl   0x8(%rax)
  10aece:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  10aed4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10aed8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10aedf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10aee3:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10aee7:	73 0a                	jae    10aef3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x10b>
  10aee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10aeed:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10aef1:	eb 22                	jmp    10af15 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x12d>
  10aef3:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  10aefa:	00 
  10aefb:	48 c7 45 d8 8a 7e 11 	movq   $0x117e8a,-0x28(%rbp)
  10af02:	00 
  10af03:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10af07:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10af0b:	ba 40 00 00 00       	mov    $0x40,%edx
  10af10:	e8 20 9e 00 00       	callq  114d35 <_d_array_bounds>
  10af15:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10af19:	48 c1 e0 04          	shl    $0x4,%rax
  10af1d:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10af24:	48 8b 10             	mov    (%rax),%rdx
  10af27:	48 8b 40 08          	mov    0x8(%rax),%rax
  10af2b:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  10af32:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  10af39:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  10af40:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  10af47:	ff 
  10af48:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  10af4f:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  10af56:	ff 
  10af57:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  10af5e:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  10af65:	ff 
  10af66:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10af6d:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  10af74:	ff 
  10af75:	e8 90 34 00 00       	callq  10e40a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
  10af7a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10af7d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10af81:	75 0c                	jne    10af8f <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1a7>
		return 0;
  10af83:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  10af8a:	00 00 00 
  10af8d:	eb 13                	jmp    10afa2 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x1ba>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._equals(s1[u], s2[u]);
	    if (c == 0)
  10af8f:	48 ff 45 f0          	incq   -0x10(%rbp)
  10af93:	e9 bf fe ff ff       	jmpq   10ae57 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10af98:	c7 85 54 ff ff ff 01 	movl   $0x1,-0xac(%rbp)
  10af9f:	00 00 00 
  10afa2:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    }
  10afa8:	c9                   	leaveq 
  10afa9:	c3                   	retq   

000000000010afaa <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10afaa:	55                   	push   %rbp
  10afab:	48 89 e5             	mov    %rsp,%rbp
  10afae:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10afb5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10afb9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10afbd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10afc1:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10afc5:	e8 7a 86 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble[] s1 = *cast(cdouble[]*)p1;
  10afca:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10afce:	48 8b 02             	mov    (%rdx),%rax
  10afd1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10afd5:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10afd9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cdouble[] s2 = *cast(cdouble[]*)p2;
  10afdd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10afe1:	48 8b 02             	mov    (%rdx),%rax
  10afe4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10afe8:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10afec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10aff0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10aff4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10aff8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10affc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b000:	73 08                	jae    10b00a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x60>
	    len = s2.length;
  10b002:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b006:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10b00a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10b011:	00 
  10b012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b016:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b01a:	0f 92 c0             	setb   %al
  10b01d:	83 f0 01             	xor    $0x1,%eax
  10b020:	84 c0                	test   %al,%al
  10b022:	0f 85 2d 01 00 00    	jne    10b155 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1ab>
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
  10b028:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10b02c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10b033:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b037:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b03b:	73 0d                	jae    10b04a <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xa0>
  10b03d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b041:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10b048:	eb 22                	jmp    10b06c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0xc2>
  10b04a:	48 c7 45 c0 1a 00 00 	movq   $0x1a,-0x40(%rbp)
  10b051:	00 
  10b052:	48 c7 45 c8 8a 7e 11 	movq   $0x117e8a,-0x38(%rbp)
  10b059:	00 
  10b05a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10b05e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10b062:	ba 51 00 00 00       	mov    $0x51,%edx
  10b067:	e8 c9 9c 00 00       	callq  114d35 <_d_array_bounds>
  10b06c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10b073:	48 c1 e0 04          	shl    $0x4,%rax
  10b077:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10b07e:	dd 00                	fldl   (%rax)
  10b080:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  10b086:	dd 40 08             	fldl   0x8(%rax)
  10b089:	dd 9d 60 ff ff ff    	fstpl  -0xa0(%rbp)
  10b08f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10b093:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10b09a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b09e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b0a2:	73 0d                	jae    10b0b1 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x107>
  10b0a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b0a8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10b0af:	eb 22                	jmp    10b0d3 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x129>
  10b0b1:	48 c7 45 d0 1a 00 00 	movq   $0x1a,-0x30(%rbp)
  10b0b8:	00 
  10b0b9:	48 c7 45 d8 8a 7e 11 	movq   $0x117e8a,-0x28(%rbp)
  10b0c0:	00 
  10b0c1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10b0c5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10b0c9:	ba 51 00 00 00       	mov    $0x51,%edx
  10b0ce:	e8 62 9c 00 00       	callq  114d35 <_d_array_bounds>
  10b0d3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10b0da:	48 c1 e0 04          	shl    $0x4,%rax
  10b0de:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10b0e5:	48 8b 10             	mov    (%rax),%rdx
  10b0e8:	48 8b 40 08          	mov    0x8(%rax),%rax
  10b0ec:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  10b0f3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  10b0fa:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  10b101:	66 0f 12 95 48 ff ff 	movlpd -0xb8(%rbp),%xmm2
  10b108:	ff 
  10b109:	48 89 b5 48 ff ff ff 	mov    %rsi,-0xb8(%rbp)
  10b110:	66 0f 12 9d 48 ff ff 	movlpd -0xb8(%rbp),%xmm3
  10b117:	ff 
  10b118:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  10b11f:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  10b126:	ff 
  10b127:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10b12e:	66 0f 12 8d 48 ff ff 	movlpd -0xb8(%rbp),%xmm1
  10b135:	ff 
  10b136:	e8 40 33 00 00       	callq  10e47b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
  10b13b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10b13e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10b142:	74 08                	je     10b14c <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1a2>
		return c;
  10b144:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10b147:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10b14a:	eb 3c                	jmp    10b188 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_r._compare(s1[u], s2[u]);
	    if (c)
  10b14c:	48 ff 45 f0          	incq   -0x10(%rbp)
  10b150:	e9 bd fe ff ff       	jmpq   10b012 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10b155:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10b159:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b15d:	48 39 c2             	cmp    %rax,%rdx
  10b160:	73 09                	jae    10b16b <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1c1>
	    return -1;
  10b162:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10b169:	eb 1d                	jmp    10b188 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	else if (s1.length > s2.length)
  10b16b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10b16f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b173:	48 39 c2             	cmp    %rax,%rdx
  10b176:	76 09                	jbe    10b181 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1d7>
	    return 1;
  10b178:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10b17f:	eb 07                	jmp    10b188 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar7compareMFPvPvZi+0x1de>
	return 0;
  10b181:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10b188:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10b18b:	c9                   	leaveq 
  10b18c:	c3                   	retq   

000000000010b18d <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5tsizeMFZm>:

    size_t tsize()
  10b18d:	55                   	push   %rbp
  10b18e:	48 89 e5             	mov    %rsp,%rbp
  10b191:	48 83 ec 10          	sub    $0x10,%rsp
  10b195:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b199:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b19d:	e8 a2 84 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cdouble[]).sizeof;
  10b1a2:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10b1a7:	c9                   	leaveq 
  10b1a8:	c3                   	retq   

000000000010b1a9 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar5flagsMFZk>:

    uint flags()
  10b1a9:	55                   	push   %rbp
  10b1aa:	48 89 e5             	mov    %rsp,%rbp
  10b1ad:	48 83 ec 10          	sub    $0x10,%rsp
  10b1b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b1b5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b1b9:	e8 86 84 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10b1be:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10b1c3:	c9                   	leaveq 
  10b1c4:	c3                   	retq   

000000000010b1c5 <_D3std8typeinfo11ti_Acdouble11TypeInfo_Ar4nextMFZC8TypeInfo>:

    TypeInfo next()
  10b1c5:	55                   	push   %rbp
  10b1c6:	48 89 e5             	mov    %rsp,%rbp
  10b1c9:	48 83 ec 10          	sub    $0x10,%rsp
  10b1cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b1d1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b1d5:	e8 6a 84 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cdouble);
  10b1da:	b8 b0 8f 11 00       	mov    $0x118fb0,%eax
    }
  10b1df:	c9                   	leaveq 
  10b1e0:	c3                   	retq   
  10b1e1:	90                   	nop    
  10b1e2:	90                   	nop    
  10b1e3:	90                   	nop    

000000000010b1e4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq8toStringMFZAa>:

// cfloat[]

class TypeInfo_Aq : TypeInfo
{
    char[] toString() { return "cfloat[]"; }
  10b1e4:	55                   	push   %rbp
  10b1e5:	48 89 e5             	mov    %rsp,%rbp
  10b1e8:	53                   	push   %rbx
  10b1e9:	48 83 ec 08          	sub    $0x8,%rsp
  10b1ed:	48 89 fb             	mov    %rdi,%rbx
  10b1f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10b1f4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10b1f8:	e8 47 84 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10b1fd:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  10b204:	48 c7 43 08 60 7f 11 	movq   $0x117f60,0x8(%rbx)
  10b20b:	00 
  10b20c:	48 89 d8             	mov    %rbx,%rax
  10b20f:	48 83 c4 08          	add    $0x8,%rsp
  10b213:	5b                   	pop    %rbx
  10b214:	c9                   	leaveq 
  10b215:	c3                   	retq   

000000000010b216 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm>:

    hash_t getHash(void *p)
  10b216:	55                   	push   %rbp
  10b217:	48 89 e5             	mov    %rsp,%rbp
  10b21a:	48 83 ec 40          	sub    $0x40,%rsp
  10b21e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10b222:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10b226:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10b22a:	e8 15 84 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	cfloat[] s = *cast(cfloat[]*)p;
  10b22f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10b233:	48 8b 02             	mov    (%rdx),%rax
  10b236:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10b23a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b23e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10b242:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10b246:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	cfloat *str = s.ptr;
  10b24a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10b24e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10b252:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10b259:	00 

	while (len)
  10b25a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10b25f:	0f 95 c0             	setne  %al
  10b262:	83 f0 01             	xor    $0x1,%eax
  10b265:	84 c0                	test   %al,%al
  10b267:	75 47                	jne    10b2b0 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  10b269:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10b26d:	48 89 d0             	mov    %rdx,%rax
  10b270:	48 c1 e0 03          	shl    $0x3,%rax
  10b274:	48 01 d0             	add    %rdx,%rax
  10b277:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  10b27b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b27f:	b8 00 00 00 00       	mov    $0x0,%eax
  10b284:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b288:	8b 00                	mov    (%rax),%eax
  10b28a:	89 c0                	mov    %eax,%eax
  10b28c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  10b290:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b294:	b8 04 00 00 00       	mov    $0x4,%eax
  10b299:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b29d:	8b 00                	mov    (%rax),%eax
  10b29f:	89 c0                	mov    %eax,%eax
  10b2a1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10b2a5:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  10b2aa:	48 ff 4d f8          	decq   -0x8(%rbp)
  10b2ae:	eb aa                	jmp    10b25a <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7getHashMFPvZm+0x44>
	}

	return hash;
  10b2b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10b2b4:	c9                   	leaveq 
  10b2b5:	c3                   	retq   

000000000010b2b6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10b2b6:	55                   	push   %rbp
  10b2b7:	48 89 e5             	mov    %rsp,%rbp
  10b2ba:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10b2c1:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10b2c5:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10b2c9:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10b2cd:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10b2d1:	e8 6e 83 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  10b2d6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10b2da:	48 8b 02             	mov    (%rdx),%rax
  10b2dd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10b2e1:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b2e5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  10b2e9:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10b2ed:	48 8b 02             	mov    (%rdx),%rax
  10b2f0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b2f4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b2f8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10b2fc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b300:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10b304:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b308:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10b30c:	74 0f                	je     10b31d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x67>
	    return 0;
  10b30e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10b315:	00 00 00 
  10b318:	e9 44 01 00 00       	jmpq   10b461 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	for (size_t u = 0; u < len; u++)
  10b31d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10b324:	00 
  10b325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b329:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b32d:	0f 92 c0             	setb   %al
  10b330:	83 f0 01             	xor    $0x1,%eax
  10b333:	84 c0                	test   %al,%al
  10b335:	0f 85 1c 01 00 00    	jne    10b457 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1a1>
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
  10b33b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10b33f:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10b346:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b34a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b34e:	73 0d                	jae    10b35d <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xa7>
  10b350:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b354:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10b35b:	eb 22                	jmp    10b37f <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0xc9>
  10b35d:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  10b364:	00 
  10b365:	48 c7 45 c8 69 7f 11 	movq   $0x117f69,-0x38(%rbp)
  10b36c:	00 
  10b36d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10b371:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10b375:	ba 3e 00 00 00       	mov    $0x3e,%edx
  10b37a:	e8 b6 99 00 00       	callq  114d35 <_d_array_bounds>
  10b37f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10b386:	48 c1 e0 03          	shl    $0x3,%rax
  10b38a:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10b391:	d9 00                	flds   (%rax)
  10b393:	d9 9d 64 ff ff ff    	fstps  -0x9c(%rbp)
  10b399:	d9 40 04             	flds   0x4(%rax)
  10b39c:	d9 9d 60 ff ff ff    	fstps  -0xa0(%rbp)
  10b3a2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10b3a6:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10b3ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b3b1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b3b5:	73 0d                	jae    10b3c4 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x10e>
  10b3b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b3bb:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10b3c2:	eb 22                	jmp    10b3e6 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x130>
  10b3c4:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  10b3cb:	00 
  10b3cc:	48 c7 45 d8 69 7f 11 	movq   $0x117f69,-0x28(%rbp)
  10b3d3:	00 
  10b3d4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10b3d8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10b3dc:	ba 3e 00 00 00       	mov    $0x3e,%edx
  10b3e1:	e8 4f 99 00 00       	callq  114d35 <_d_array_bounds>
  10b3e6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10b3ed:	48 c1 e0 03          	shl    $0x3,%rax
  10b3f1:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  10b3f8:	8b 08                	mov    (%rax),%ecx
  10b3fa:	8b 70 04             	mov    0x4(%rax),%esi
  10b3fd:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  10b403:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  10b409:	89 45 80             	mov    %eax,-0x80(%rbp)
  10b40c:	89 55 84             	mov    %edx,-0x7c(%rbp)
  10b40f:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  10b413:	89 c8                	mov    %ecx,%eax
  10b415:	89 f2                	mov    %esi,%edx
  10b417:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10b41d:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  10b423:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10b42a:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  10b42f:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10b434:	e8 0f 33 00 00       	callq  10e748 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
  10b439:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10b43c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10b440:	75 0c                	jne    10b44e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x198>
		return 0;
  10b442:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10b449:	00 00 00 
  10b44c:	eb 13                	jmp    10b461 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x1ab>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._equals(s1[u], s2[u]);
	    if (c == 0)
  10b44e:	48 ff 45 f0          	incq   -0x10(%rbp)
  10b452:	e9 ce fe ff ff       	jmpq   10b325 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10b457:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10b45e:	00 00 00 
  10b461:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  10b467:	c9                   	leaveq 
  10b468:	c3                   	retq   

000000000010b469 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10b469:	55                   	push   %rbp
  10b46a:	48 89 e5             	mov    %rsp,%rbp
  10b46d:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10b474:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10b478:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10b47c:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10b480:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10b484:	e8 bb 81 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat[] s1 = *cast(cfloat[]*)p1;
  10b489:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10b48d:	48 8b 02             	mov    (%rdx),%rax
  10b490:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10b494:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b498:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	cfloat[] s2 = *cast(cfloat[]*)p2;
  10b49c:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10b4a0:	48 8b 02             	mov    (%rdx),%rax
  10b4a3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b4a7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b4ab:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10b4af:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b4b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10b4b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b4bb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b4bf:	73 08                	jae    10b4c9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x60>
	    len = s2.length;
  10b4c1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b4c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10b4c9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10b4d0:	00 
  10b4d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b4d5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b4d9:	0f 92 c0             	setb   %al
  10b4dc:	83 f0 01             	xor    $0x1,%eax
  10b4df:	84 c0                	test   %al,%al
  10b4e1:	0f 85 1b 01 00 00    	jne    10b602 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x199>
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
  10b4e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10b4eb:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10b4f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b4f6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b4fa:	73 0d                	jae    10b509 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xa0>
  10b4fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b500:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10b507:	eb 22                	jmp    10b52b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0xc2>
  10b509:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  10b510:	00 
  10b511:	48 c7 45 c8 69 7f 11 	movq   $0x117f69,-0x38(%rbp)
  10b518:	00 
  10b519:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10b51d:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10b521:	ba 4f 00 00 00       	mov    $0x4f,%edx
  10b526:	e8 0a 98 00 00       	callq  114d35 <_d_array_bounds>
  10b52b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  10b532:	48 c1 e0 03          	shl    $0x3,%rax
  10b536:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  10b53d:	d9 00                	flds   (%rax)
  10b53f:	d9 9d 5c ff ff ff    	fstps  -0xa4(%rbp)
  10b545:	d9 40 04             	flds   0x4(%rax)
  10b548:	d9 9d 58 ff ff ff    	fstps  -0xa8(%rbp)
  10b54e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10b552:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10b559:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b55d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b561:	73 0d                	jae    10b570 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x107>
  10b563:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b567:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10b56e:	eb 22                	jmp    10b592 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x129>
  10b570:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  10b577:	00 
  10b578:	48 c7 45 d8 69 7f 11 	movq   $0x117f69,-0x28(%rbp)
  10b57f:	00 
  10b580:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10b584:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10b588:	ba 4f 00 00 00       	mov    $0x4f,%edx
  10b58d:	e8 a3 97 00 00       	callq  114d35 <_d_array_bounds>
  10b592:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10b599:	48 c1 e0 03          	shl    $0x3,%rax
  10b59d:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  10b5a4:	8b 08                	mov    (%rax),%ecx
  10b5a6:	8b 70 04             	mov    0x4(%rax),%esi
  10b5a9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  10b5af:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  10b5b5:	89 45 80             	mov    %eax,-0x80(%rbp)
  10b5b8:	89 55 84             	mov    %edx,-0x7c(%rbp)
  10b5bb:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  10b5bf:	89 c8                	mov    %ecx,%eax
  10b5c1:	89 f2                	mov    %esi,%edx
  10b5c3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10b5c9:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
  10b5cf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10b5d6:	66 48 0f 6e cf       	movq   %rdi,%xmm1
  10b5db:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10b5e0:	e8 ad 31 00 00       	callq  10e792 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
  10b5e5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10b5e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10b5ec:	74 0b                	je     10b5f9 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x190>
		return c;
  10b5ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10b5f1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  10b5f7:	eb 45                	jmp    10b63e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_q._compare(s1[u], s2[u]);
	    if (c)
  10b5f9:	48 ff 45 f0          	incq   -0x10(%rbp)
  10b5fd:	e9 cf fe ff ff       	jmpq   10b4d1 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10b602:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10b606:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b60a:	48 39 c2             	cmp    %rax,%rdx
  10b60d:	73 0c                	jae    10b61b <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1b2>
	    return -1;
  10b60f:	c7 85 74 ff ff ff ff 	movl   $0xffffffff,-0x8c(%rbp)
  10b616:	ff ff ff 
  10b619:	eb 23                	jmp    10b63e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	else if (s1.length > s2.length)
  10b61b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10b61f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b623:	48 39 c2             	cmp    %rax,%rdx
  10b626:	76 0c                	jbe    10b634 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1cb>
	    return 1;
  10b628:	c7 85 74 ff ff ff 01 	movl   $0x1,-0x8c(%rbp)
  10b62f:	00 00 00 
  10b632:	eb 0a                	jmp    10b63e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq7compareMFPvPvZi+0x1d5>
	return 0;
  10b634:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  10b63b:	00 00 00 
  10b63e:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
    }
  10b644:	c9                   	leaveq 
  10b645:	c3                   	retq   

000000000010b646 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5tsizeMFZm>:

    size_t tsize()
  10b646:	55                   	push   %rbp
  10b647:	48 89 e5             	mov    %rsp,%rbp
  10b64a:	48 83 ec 10          	sub    $0x10,%rsp
  10b64e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b652:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b656:	e8 e9 7f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cfloat[]).sizeof;
  10b65b:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10b660:	c9                   	leaveq 
  10b661:	c3                   	retq   

000000000010b662 <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq5flagsMFZk>:

    uint flags()
  10b662:	55                   	push   %rbp
  10b663:	48 89 e5             	mov    %rsp,%rbp
  10b666:	48 83 ec 10          	sub    $0x10,%rsp
  10b66a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b66e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b672:	e8 cd 7f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10b677:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10b67c:	c9                   	leaveq 
  10b67d:	c3                   	retq   

000000000010b67e <_D3std8typeinfo10ti_Acfloat11TypeInfo_Aq4nextMFZC8TypeInfo>:

    TypeInfo next()
  10b67e:	55                   	push   %rbp
  10b67f:	48 89 e5             	mov    %rsp,%rbp
  10b682:	48 83 ec 10          	sub    $0x10,%rsp
  10b686:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10b68a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10b68e:	e8 b1 7f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(cfloat);
  10b693:	b8 70 90 11 00       	mov    $0x119070,%eax
    }
  10b698:	c9                   	leaveq 
  10b699:	c3                   	retq   
  10b69a:	90                   	nop    
  10b69b:	90                   	nop    

000000000010b69c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac8toStringMFZAa>:

// creal[]

class TypeInfo_Ac : TypeInfo
{
    char[] toString() { return "creal[]"; }
  10b69c:	55                   	push   %rbp
  10b69d:	48 89 e5             	mov    %rsp,%rbp
  10b6a0:	53                   	push   %rbx
  10b6a1:	48 83 ec 08          	sub    $0x8,%rsp
  10b6a5:	48 89 fb             	mov    %rdi,%rbx
  10b6a8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10b6ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10b6b0:	e8 8f 7f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10b6b5:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10b6bc:	48 c7 43 08 40 80 11 	movq   $0x118040,0x8(%rbx)
  10b6c3:	00 
  10b6c4:	48 89 d8             	mov    %rbx,%rax
  10b6c7:	48 83 c4 08          	add    $0x8,%rsp
  10b6cb:	5b                   	pop    %rbx
  10b6cc:	c9                   	leaveq 
  10b6cd:	c3                   	retq   

000000000010b6ce <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm>:

    hash_t getHash(void *p)
  10b6ce:	55                   	push   %rbp
  10b6cf:	48 89 e5             	mov    %rsp,%rbp
  10b6d2:	48 83 ec 40          	sub    $0x40,%rsp
  10b6d6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10b6da:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10b6de:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10b6e2:	e8 5d 7f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	creal[] s = *cast(creal[]*)p;
  10b6e7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10b6eb:	48 8b 02             	mov    (%rdx),%rax
  10b6ee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10b6f2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b6f6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10b6fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10b6fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	creal *str = s.ptr;
  10b702:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10b706:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10b70a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10b711:	00 

	while (len)
  10b712:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10b717:	0f 95 c0             	setne  %al
  10b71a:	83 f0 01             	xor    $0x1,%eax
  10b71d:	84 c0                	test   %al,%al
  10b71f:	0f 85 89 00 00 00    	jne    10b7ae <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0xe0>
	{
	    hash *= 9;
  10b725:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10b729:	48 89 d0             	mov    %rdx,%rax
  10b72c:	48 c1 e0 03          	shl    $0x3,%rax
  10b730:	48 01 d0             	add    %rdx,%rax
  10b733:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  10b737:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b73b:	b8 00 00 00 00       	mov    $0x0,%eax
  10b740:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b744:	8b 00                	mov    (%rax),%eax
  10b746:	89 c0                	mov    %eax,%eax
  10b748:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  10b74c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b750:	b8 04 00 00 00       	mov    $0x4,%eax
  10b755:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b759:	8b 00                	mov    (%rax),%eax
  10b75b:	89 c0                	mov    %eax,%eax
  10b75d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[2];
  10b761:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b765:	b8 08 00 00 00       	mov    $0x8,%eax
  10b76a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b76e:	8b 00                	mov    (%rax),%eax
  10b770:	89 c0                	mov    %eax,%eax
  10b772:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[3];
  10b776:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b77a:	b8 0c 00 00 00       	mov    $0xc,%eax
  10b77f:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b783:	8b 00                	mov    (%rax),%eax
  10b785:	89 c0                	mov    %eax,%eax
  10b787:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[4];
  10b78b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10b78f:	b8 10 00 00 00       	mov    $0x10,%eax
  10b794:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10b798:	8b 00                	mov    (%rax),%eax
  10b79a:	89 c0                	mov    %eax,%eax
  10b79c:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10b7a0:	48 83 45 f0 20       	addq   $0x20,-0x10(%rbp)
	    len--;
  10b7a5:	48 ff 4d f8          	decq   -0x8(%rbp)
  10b7a9:	e9 64 ff ff ff       	jmpq   10b712 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7getHashMFPvZm+0x44>
	}

	return hash;
  10b7ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10b7b2:	c9                   	leaveq 
  10b7b3:	c3                   	retq   

000000000010b7b4 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10b7b4:	55                   	push   %rbp
  10b7b5:	48 89 e5             	mov    %rsp,%rbp
  10b7b8:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  10b7bf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10b7c3:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10b7c7:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10b7cb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10b7cf:	e8 70 7e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  10b7d4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10b7d8:	48 8b 02             	mov    (%rdx),%rax
  10b7db:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10b7df:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b7e3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  10b7e7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10b7eb:	48 8b 02             	mov    (%rdx),%rax
  10b7ee:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b7f2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b7f6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10b7fa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b7fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10b802:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b806:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10b80a:	74 0f                	je     10b81b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x67>
	    return 0;
  10b80c:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  10b813:	00 00 00 
  10b816:	e9 34 01 00 00       	jmpq   10b94f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	for (size_t u = 0; u < len; u++)
  10b81b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10b822:	00 
  10b823:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b827:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b82b:	0f 92 c0             	setb   %al
  10b82e:	83 f0 01             	xor    $0x1,%eax
  10b831:	84 c0                	test   %al,%al
  10b833:	0f 85 0c 01 00 00    	jne    10b945 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x191>
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
  10b839:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10b83d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10b844:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b848:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b84c:	73 0d                	jae    10b85b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xa7>
  10b84e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b852:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10b859:	eb 22                	jmp    10b87d <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0xc9>
  10b85b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10b862:	00 
  10b863:	48 c7 45 c8 48 80 11 	movq   $0x118048,-0x38(%rbp)
  10b86a:	00 
  10b86b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10b86f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10b873:	ba 41 00 00 00       	mov    $0x41,%edx
  10b878:	e8 b8 94 00 00       	callq  114d35 <_d_array_bounds>
  10b87d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  10b884:	48 c1 e0 05          	shl    $0x5,%rax
  10b888:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  10b88f:	db 28                	fldt   (%rax)
  10b891:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  10b897:	db 68 10             	fldt   0x10(%rax)
  10b89a:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  10b8a0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10b8a4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10b8ab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b8af:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b8b3:	73 0a                	jae    10b8bf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x10b>
  10b8b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b8b9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10b8bd:	eb 22                	jmp    10b8e1 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x12d>
  10b8bf:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10b8c6:	00 
  10b8c7:	48 c7 45 d8 48 80 11 	movq   $0x118048,-0x28(%rbp)
  10b8ce:	00 
  10b8cf:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10b8d3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10b8d7:	ba 41 00 00 00       	mov    $0x41,%edx
  10b8dc:	e8 54 94 00 00       	callq  114d35 <_d_array_bounds>
  10b8e1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10b8e5:	48 c1 e0 05          	shl    $0x5,%rax
  10b8e9:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10b8f0:	48 8b 10             	mov    (%rax),%rdx
  10b8f3:	8b 48 08             	mov    0x8(%rax),%ecx
  10b8f6:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10b8fa:	8b 78 18             	mov    0x18(%rax),%edi
  10b8fd:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  10b903:	db 7c 24 20          	fstpt  0x20(%rsp)
  10b907:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  10b90d:	db 7c 24 30          	fstpt  0x30(%rsp)
  10b911:	48 89 14 24          	mov    %rdx,(%rsp)
  10b915:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  10b919:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  10b91e:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  10b922:	e8 90 32 00 00       	callq  10ebb7 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
  10b927:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10b92a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10b92e:	75 0c                	jne    10b93c <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x188>
		return 0;
  10b930:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
  10b937:	00 00 00 
  10b93a:	eb 13                	jmp    10b94f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x19b>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._equals(s1[u], s2[u]);
	    if (c == 0)
  10b93c:	48 ff 45 f0          	incq   -0x10(%rbp)
  10b940:	e9 de fe ff ff       	jmpq   10b823 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10b945:	c7 85 3c ff ff ff 01 	movl   $0x1,-0xc4(%rbp)
  10b94c:	00 00 00 
  10b94f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    }
  10b955:	c9                   	leaveq 
  10b956:	c3                   	retq   

000000000010b957 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10b957:	55                   	push   %rbp
  10b958:	48 89 e5             	mov    %rsp,%rbp
  10b95b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  10b962:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10b966:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10b96a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10b96e:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10b972:	e8 cd 7c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal[] s1 = *cast(creal[]*)p1;
  10b977:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10b97b:	48 8b 02             	mov    (%rdx),%rax
  10b97e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10b982:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b986:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	creal[] s2 = *cast(creal[]*)p2;
  10b98a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10b98e:	48 8b 02             	mov    (%rdx),%rax
  10b991:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b995:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10b999:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10b99d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b9a1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10b9a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b9a9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b9ad:	73 08                	jae    10b9b7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x60>
	    len = s2.length;
  10b9af:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b9b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10b9b7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10b9be:	00 
  10b9bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b9c3:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10b9c7:	0f 92 c0             	setb   %al
  10b9ca:	83 f0 01             	xor    $0x1,%eax
  10b9cd:	84 c0                	test   %al,%al
  10b9cf:	0f 85 0e 01 00 00    	jne    10bae3 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x18c>
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
  10b9d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10b9d9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10b9e0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10b9e4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10b9e8:	73 0d                	jae    10b9f7 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xa0>
  10b9ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10b9ee:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10b9f5:	eb 22                	jmp    10ba19 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0xc2>
  10b9f7:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10b9fe:	00 
  10b9ff:	48 c7 45 c8 48 80 11 	movq   $0x118048,-0x38(%rbp)
  10ba06:	00 
  10ba07:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10ba0b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10ba0f:	ba 52 00 00 00       	mov    $0x52,%edx
  10ba14:	e8 1c 93 00 00       	callq  114d35 <_d_array_bounds>
  10ba19:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  10ba20:	48 c1 e0 05          	shl    $0x5,%rax
  10ba24:	48 03 85 40 ff ff ff 	add    -0xc0(%rbp),%rax
  10ba2b:	db 28                	fldt   (%rax)
  10ba2d:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  10ba33:	db 68 10             	fldt   0x10(%rax)
  10ba36:	db bd 50 ff ff ff    	fstpt  -0xb0(%rbp)
  10ba3c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10ba40:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10ba47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ba4b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ba4f:	73 0d                	jae    10ba5e <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x107>
  10ba51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ba55:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10ba5c:	eb 22                	jmp    10ba80 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x129>
  10ba5e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10ba65:	00 
  10ba66:	48 c7 45 d8 48 80 11 	movq   $0x118048,-0x28(%rbp)
  10ba6d:	00 
  10ba6e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10ba72:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10ba76:	ba 52 00 00 00       	mov    $0x52,%edx
  10ba7b:	e8 b5 92 00 00       	callq  114d35 <_d_array_bounds>
  10ba80:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10ba87:	48 c1 e0 05          	shl    $0x5,%rax
  10ba8b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10ba92:	48 8b 10             	mov    (%rax),%rdx
  10ba95:	8b 48 08             	mov    0x8(%rax),%ecx
  10ba98:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10ba9c:	8b 78 18             	mov    0x18(%rax),%edi
  10ba9f:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  10baa5:	db 7c 24 20          	fstpt  0x20(%rsp)
  10baa9:	db ad 50 ff ff ff    	fldt   -0xb0(%rbp)
  10baaf:	db 7c 24 30          	fstpt  0x30(%rsp)
  10bab3:	48 89 14 24          	mov    %rdx,(%rsp)
  10bab7:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  10babb:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  10bac0:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  10bac4:	e8 1f 31 00 00       	callq  10ebe8 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
  10bac9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10bacc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10bad0:	74 08                	je     10bada <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x183>
		return c;
  10bad2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10bad5:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10bad8:	eb 3c                	jmp    10bb16 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_c._compare(s1[u], s2[u]);
	    if (c)
  10bada:	48 ff 45 f0          	incq   -0x10(%rbp)
  10bade:	e9 dc fe ff ff       	jmpq   10b9bf <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10bae3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10bae7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10baeb:	48 39 c2             	cmp    %rax,%rdx
  10baee:	73 09                	jae    10baf9 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1a2>
	    return -1;
  10baf0:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10baf7:	eb 1d                	jmp    10bb16 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	else if (s1.length > s2.length)
  10baf9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10bafd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10bb01:	48 39 c2             	cmp    %rax,%rdx
  10bb04:	76 09                	jbe    10bb0f <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1b8>
	    return 1;
  10bb06:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10bb0d:	eb 07                	jmp    10bb16 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac7compareMFPvPvZi+0x1bf>
	return 0;
  10bb0f:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10bb16:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10bb19:	c9                   	leaveq 
  10bb1a:	c3                   	retq   

000000000010bb1b <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5tsizeMFZm>:

    size_t tsize()
  10bb1b:	55                   	push   %rbp
  10bb1c:	48 89 e5             	mov    %rsp,%rbp
  10bb1f:	48 83 ec 10          	sub    $0x10,%rsp
  10bb23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bb27:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bb2b:	e8 14 7b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (creal[]).sizeof;
  10bb30:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10bb35:	c9                   	leaveq 
  10bb36:	c3                   	retq   

000000000010bb37 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac5flagsMFZk>:

    uint flags()
  10bb37:	55                   	push   %rbp
  10bb38:	48 89 e5             	mov    %rsp,%rbp
  10bb3b:	48 83 ec 10          	sub    $0x10,%rsp
  10bb3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bb43:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bb47:	e8 f8 7a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10bb4c:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10bb51:	c9                   	leaveq 
  10bb52:	c3                   	retq   

000000000010bb53 <_D3std8typeinfo9ti_Acreal11TypeInfo_Ac4nextMFZC8TypeInfo>:

    TypeInfo next()
  10bb53:	55                   	push   %rbp
  10bb54:	48 89 e5             	mov    %rsp,%rbp
  10bb57:	48 83 ec 10          	sub    $0x10,%rsp
  10bb5b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bb5f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bb63:	e8 dc 7a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(creal);
  10bb68:	b8 f0 91 11 00       	mov    $0x1191f0,%eax
    }
  10bb6d:	c9                   	leaveq 
  10bb6e:	c3                   	retq   
  10bb6f:	90                   	nop    

000000000010bb70 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad8toStringMFZAa>:

// double[]

class TypeInfo_Ad : TypeInfo
{
    char[] toString() { return "double[]"; }
  10bb70:	55                   	push   %rbp
  10bb71:	48 89 e5             	mov    %rsp,%rbp
  10bb74:	53                   	push   %rbx
  10bb75:	48 83 ec 08          	sub    $0x8,%rsp
  10bb79:	48 89 fb             	mov    %rdi,%rbx
  10bb7c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10bb80:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10bb84:	e8 bb 7a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10bb89:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  10bb90:	48 c7 43 08 20 81 11 	movq   $0x118120,0x8(%rbx)
  10bb97:	00 
  10bb98:	48 89 d8             	mov    %rbx,%rax
  10bb9b:	48 83 c4 08          	add    $0x8,%rsp
  10bb9f:	5b                   	pop    %rbx
  10bba0:	c9                   	leaveq 
  10bba1:	c3                   	retq   

000000000010bba2 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm>:

    hash_t getHash(void *p)
  10bba2:	55                   	push   %rbp
  10bba3:	48 89 e5             	mov    %rsp,%rbp
  10bba6:	48 83 ec 40          	sub    $0x40,%rsp
  10bbaa:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10bbae:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10bbb2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10bbb6:	e8 89 7a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	double[] s = *cast(double[]*)p;
  10bbbb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10bbbf:	48 8b 02             	mov    (%rdx),%rax
  10bbc2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10bbc6:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10bbca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10bbce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10bbd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  10bbd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10bbda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10bbde:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10bbe5:	00 

	while (len)
  10bbe6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10bbeb:	0f 95 c0             	setne  %al
  10bbee:	83 f0 01             	xor    $0x1,%eax
  10bbf1:	84 c0                	test   %al,%al
  10bbf3:	75 47                	jne    10bc3c <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x9a>
	{
	    hash *= 9;
  10bbf5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10bbf9:	48 89 d0             	mov    %rdx,%rax
  10bbfc:	48 c1 e0 03          	shl    $0x3,%rax
  10bc00:	48 01 d0             	add    %rdx,%rax
  10bc03:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  10bc07:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10bc0b:	b8 00 00 00 00       	mov    $0x0,%eax
  10bc10:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10bc14:	8b 00                	mov    (%rax),%eax
  10bc16:	89 c0                	mov    %eax,%eax
  10bc18:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  10bc1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10bc20:	b8 04 00 00 00       	mov    $0x4,%eax
  10bc25:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10bc29:	8b 00                	mov    (%rax),%eax
  10bc2b:	89 c0                	mov    %eax,%eax
  10bc2d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10bc31:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  10bc36:	48 ff 4d f8          	decq   -0x8(%rbp)
  10bc3a:	eb aa                	jmp    10bbe6 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7getHashMFPvZm+0x44>
	}

	return hash;
  10bc3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10bc40:	c9                   	leaveq 
  10bc41:	c3                   	retq   

000000000010bc42 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10bc42:	55                   	push   %rbp
  10bc43:	48 89 e5             	mov    %rsp,%rbp
  10bc46:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10bc4d:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10bc51:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10bc55:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10bc59:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10bc5d:	e8 e2 79 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  10bc62:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10bc66:	48 8b 02             	mov    (%rdx),%rax
  10bc69:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10bc6d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10bc71:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  10bc75:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10bc79:	48 8b 02             	mov    (%rdx),%rax
  10bc7c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10bc80:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10bc84:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10bc88:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10bc8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10bc90:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10bc94:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10bc98:	74 0f                	je     10bca9 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x67>
	    return 0;
  10bc9a:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  10bca1:	00 00 00 
  10bca4:	e9 13 01 00 00       	jmpq   10bdbc <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	for (size_t u = 0; u < len; u++)
  10bca9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10bcb0:	00 
  10bcb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10bcb5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10bcb9:	0f 92 c0             	setb   %al
  10bcbc:	83 f0 01             	xor    $0x1,%eax
  10bcbf:	84 c0                	test   %al,%al
  10bcc1:	0f 85 eb 00 00 00    	jne    10bdb2 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x170>
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
  10bcc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10bccb:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10bcd2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10bcd6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10bcda:	73 0d                	jae    10bce9 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xa7>
  10bcdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10bce0:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10bce7:	eb 22                	jmp    10bd0b <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0xc9>
  10bce9:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  10bcf0:	00 
  10bcf1:	48 c7 45 c8 29 81 11 	movq   $0x118129,-0x38(%rbp)
  10bcf8:	00 
  10bcf9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10bcfd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10bd01:	ba 3e 00 00 00       	mov    $0x3e,%edx
  10bd06:	e8 2a 90 00 00       	callq  114d35 <_d_array_bounds>
  10bd0b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10bd12:	48 c1 e0 03          	shl    $0x3,%rax
  10bd16:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  10bd1d:	dd 00                	fldl   (%rax)
  10bd1f:	dd 9d 70 ff ff ff    	fstpl  -0x90(%rbp)
  10bd25:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10bd29:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10bd30:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10bd34:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10bd38:	73 0a                	jae    10bd44 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x102>
  10bd3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10bd3e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10bd42:	eb 22                	jmp    10bd66 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x124>
  10bd44:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  10bd4b:	00 
  10bd4c:	48 c7 45 d8 29 81 11 	movq   $0x118129,-0x28(%rbp)
  10bd53:	00 
  10bd54:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10bd58:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10bd5c:	ba 3e 00 00 00       	mov    $0x3e,%edx
  10bd61:	e8 cf 8f 00 00       	callq  114d35 <_d_array_bounds>
  10bd66:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10bd6a:	48 c1 e0 03          	shl    $0x3,%rax
  10bd6e:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10bd75:	48 8b 00             	mov    (%rax),%rax
  10bd78:	66 0f 12 8d 70 ff ff 	movlpd -0x90(%rbp),%xmm1
  10bd7f:	ff 
  10bd80:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10bd87:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  10bd8e:	ff 
  10bd8f:	e8 dc 33 00 00       	callq  10f170 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
  10bd94:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10bd97:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10bd9b:	75 0c                	jne    10bda9 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x167>
		return 0;
  10bd9d:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  10bda4:	00 00 00 
  10bda7:	eb 13                	jmp    10bdbc <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x17a>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._equals(s1[u], s2[u]);
	    if (c == 0)
  10bda9:	48 ff 45 f0          	incq   -0x10(%rbp)
  10bdad:	e9 ff fe ff ff       	jmpq   10bcb1 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10bdb2:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  10bdb9:	00 00 00 
  10bdbc:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  10bdc2:	c9                   	leaveq 
  10bdc3:	c3                   	retq   

000000000010bdc4 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10bdc4:	55                   	push   %rbp
  10bdc5:	48 89 e5             	mov    %rsp,%rbp
  10bdc8:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10bdcf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10bdd3:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10bdd7:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10bddb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10bddf:	e8 60 78 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double[] s1 = *cast(double[]*)p1;
  10bde4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10bde8:	48 8b 02             	mov    (%rdx),%rax
  10bdeb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10bdef:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10bdf3:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	double[] s2 = *cast(double[]*)p2;
  10bdf7:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10bdfb:	48 8b 02             	mov    (%rdx),%rax
  10bdfe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10be02:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10be06:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10be0a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10be0e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10be12:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10be16:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10be1a:	73 08                	jae    10be24 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x60>
	    len = s2.length;
  10be1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10be20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10be24:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10be2b:	00 
  10be2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10be30:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10be34:	0f 92 c0             	setb   %al
  10be37:	83 f0 01             	xor    $0x1,%eax
  10be3a:	84 c0                	test   %al,%al
  10be3c:	0f 85 ed 00 00 00    	jne    10bf2f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x16b>
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
  10be42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10be46:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10be4d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10be51:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10be55:	73 0d                	jae    10be64 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xa0>
  10be57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10be5b:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10be62:	eb 22                	jmp    10be86 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xc2>
  10be64:	48 c7 45 c0 19 00 00 	movq   $0x19,-0x40(%rbp)
  10be6b:	00 
  10be6c:	48 c7 45 c8 29 81 11 	movq   $0x118129,-0x38(%rbp)
  10be73:	00 
  10be74:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10be78:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10be7c:	ba 4f 00 00 00       	mov    $0x4f,%edx
  10be81:	e8 af 8e 00 00       	callq  114d35 <_d_array_bounds>
  10be86:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10be8d:	48 c1 e0 03          	shl    $0x3,%rax
  10be91:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10be98:	dd 00                	fldl   (%rax)
  10be9a:	dd 9d 68 ff ff ff    	fstpl  -0x98(%rbp)
  10bea0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10bea4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10beab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10beaf:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10beb3:	73 0d                	jae    10bec2 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0xfe>
  10beb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10beb9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10bec0:	eb 22                	jmp    10bee4 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x120>
  10bec2:	48 c7 45 d0 19 00 00 	movq   $0x19,-0x30(%rbp)
  10bec9:	00 
  10beca:	48 c7 45 d8 29 81 11 	movq   $0x118129,-0x28(%rbp)
  10bed1:	00 
  10bed2:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10bed6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10beda:	ba 4f 00 00 00       	mov    $0x4f,%edx
  10bedf:	e8 51 8e 00 00       	callq  114d35 <_d_array_bounds>
  10bee4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10beeb:	48 c1 e0 03          	shl    $0x3,%rax
  10beef:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10bef6:	48 8b 00             	mov    (%rax),%rax
  10bef9:	66 0f 12 8d 68 ff ff 	movlpd -0x98(%rbp),%xmm1
  10bf00:	ff 
  10bf01:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  10bf08:	66 0f 12 85 48 ff ff 	movlpd -0xb8(%rbp),%xmm0
  10bf0f:	ff 
  10bf10:	e8 a9 32 00 00       	callq  10f1be <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
  10bf15:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10bf18:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10bf1c:	74 08                	je     10bf26 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x162>
		return c;
  10bf1e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10bf21:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10bf24:	eb 3c                	jmp    10bf62 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_d._compare(s1[u], s2[u]);
	    if (c)
  10bf26:	48 ff 45 f0          	incq   -0x10(%rbp)
  10bf2a:	e9 fd fe ff ff       	jmpq   10be2c <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10bf2f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10bf33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10bf37:	48 39 c2             	cmp    %rax,%rdx
  10bf3a:	73 09                	jae    10bf45 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x181>
	    return -1;
  10bf3c:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10bf43:	eb 1d                	jmp    10bf62 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	else if (s1.length > s2.length)
  10bf45:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10bf49:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10bf4d:	48 39 c2             	cmp    %rax,%rdx
  10bf50:	76 09                	jbe    10bf5b <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x197>
	    return 1;
  10bf52:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10bf59:	eb 07                	jmp    10bf62 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad7compareMFPvPvZi+0x19e>
	return 0;
  10bf5b:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10bf62:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10bf65:	c9                   	leaveq 
  10bf66:	c3                   	retq   

000000000010bf67 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5tsizeMFZm>:

    size_t tsize()
  10bf67:	55                   	push   %rbp
  10bf68:	48 89 e5             	mov    %rsp,%rbp
  10bf6b:	48 83 ec 10          	sub    $0x10,%rsp
  10bf6f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bf73:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bf77:	e8 c8 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (double[]).sizeof;
  10bf7c:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10bf81:	c9                   	leaveq 
  10bf82:	c3                   	retq   

000000000010bf83 <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad5flagsMFZk>:

    uint flags()
  10bf83:	55                   	push   %rbp
  10bf84:	48 89 e5             	mov    %rsp,%rbp
  10bf87:	48 83 ec 10          	sub    $0x10,%rsp
  10bf8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bf8f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bf93:	e8 ac 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10bf98:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10bf9d:	c9                   	leaveq 
  10bf9e:	c3                   	retq   

000000000010bf9f <_D3std8typeinfo10ti_Adouble11TypeInfo_Ad4nextMFZC8TypeInfo>:

    TypeInfo next()
  10bf9f:	55                   	push   %rbp
  10bfa0:	48 89 e5             	mov    %rsp,%rbp
  10bfa3:	48 83 ec 10          	sub    $0x10,%rsp
  10bfa7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bfab:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bfaf:	e8 90 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(double);
  10bfb4:	b8 10 94 11 00       	mov    $0x119410,%eax
    }
  10bfb9:	c9                   	leaveq 
  10bfba:	c3                   	retq   

000000000010bfbb <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap8toStringMFZAa>:

// idouble[]

class TypeInfo_Ap : TypeInfo_Ad
{
    char[] toString() { return "idouble[]"; }
  10bfbb:	55                   	push   %rbp
  10bfbc:	48 89 e5             	mov    %rsp,%rbp
  10bfbf:	53                   	push   %rbx
  10bfc0:	48 83 ec 08          	sub    $0x8,%rsp
  10bfc4:	48 89 fb             	mov    %rdi,%rbx
  10bfc7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10bfcb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10bfcf:	e8 70 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10bfd4:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
  10bfdb:	48 c7 43 08 f0 81 11 	movq   $0x1181f0,0x8(%rbx)
  10bfe2:	00 
  10bfe3:	48 89 d8             	mov    %rbx,%rax
  10bfe6:	48 83 c4 08          	add    $0x8,%rsp
  10bfea:	5b                   	pop    %rbx
  10bfeb:	c9                   	leaveq 
  10bfec:	c3                   	retq   

000000000010bfed <_D3std8typeinfo10ti_Adouble11TypeInfo_Ap4nextMFZC8TypeInfo>:

    TypeInfo next()
  10bfed:	55                   	push   %rbp
  10bfee:	48 89 e5             	mov    %rsp,%rbp
  10bff1:	48 83 ec 10          	sub    $0x10,%rsp
  10bff5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10bff9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10bffd:	e8 42 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(idouble);
  10c002:	b8 90 95 11 00       	mov    $0x119590,%eax
    }
  10c007:	c9                   	leaveq 
  10c008:	c3                   	retq   
  10c009:	90                   	nop    
  10c00a:	90                   	nop    
  10c00b:	90                   	nop    

000000000010c00c <_D3std8typeinfo9ti_Afloat11TypeInfo_Af8toStringMFZAa>:

// float[]

class TypeInfo_Af : TypeInfo
{
    char[] toString() { return "float[]"; }
  10c00c:	55                   	push   %rbp
  10c00d:	48 89 e5             	mov    %rsp,%rbp
  10c010:	53                   	push   %rbx
  10c011:	48 83 ec 08          	sub    $0x8,%rsp
  10c015:	48 89 fb             	mov    %rdi,%rbx
  10c018:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c01c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c020:	e8 1f 76 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c025:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10c02c:	48 c7 43 08 a0 82 11 	movq   $0x1182a0,0x8(%rbx)
  10c033:	00 
  10c034:	48 89 d8             	mov    %rbx,%rax
  10c037:	48 83 c4 08          	add    $0x8,%rsp
  10c03b:	5b                   	pop    %rbx
  10c03c:	c9                   	leaveq 
  10c03d:	c3                   	retq   

000000000010c03e <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm>:

    hash_t getHash(void *p)
  10c03e:	55                   	push   %rbp
  10c03f:	48 89 e5             	mov    %rsp,%rbp
  10c042:	48 83 ec 40          	sub    $0x40,%rsp
  10c046:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10c04a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10c04e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10c052:	e8 ed 75 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	float[] s = *cast(float[]*)p;
  10c057:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10c05b:	48 8b 02             	mov    (%rdx),%rax
  10c05e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10c062:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c066:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10c06a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10c06e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  10c072:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10c076:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10c07a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10c081:	00 

	while (len)
  10c082:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10c087:	0f 95 c0             	setne  %al
  10c08a:	83 f0 01             	xor    $0x1,%eax
  10c08d:	84 c0                	test   %al,%al
  10c08f:	75 29                	jne    10c0ba <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  10c091:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10c095:	48 89 d0             	mov    %rdx,%rax
  10c098:	48 c1 e0 03          	shl    $0x3,%rax
  10c09c:	48 01 d0             	add    %rdx,%rax
  10c09f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  10c0a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c0a7:	8b 00                	mov    (%rax),%eax
  10c0a9:	89 c0                	mov    %eax,%eax
  10c0ab:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10c0af:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  10c0b4:	48 ff 4d f8          	decq   -0x8(%rbp)
  10c0b8:	eb c8                	jmp    10c082 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7getHashMFPvZm+0x44>
	}

	return hash;
  10c0ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10c0be:	c9                   	leaveq 
  10c0bf:	c3                   	retq   

000000000010c0c0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10c0c0:	55                   	push   %rbp
  10c0c1:	48 89 e5             	mov    %rsp,%rbp
  10c0c4:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10c0cb:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10c0cf:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10c0d3:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10c0d7:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10c0db:	e8 64 75 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  10c0e0:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10c0e4:	48 8b 02             	mov    (%rdx),%rax
  10c0e7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10c0eb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c0ef:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  10c0f3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c0f7:	48 8b 02             	mov    (%rdx),%rax
  10c0fa:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10c0fe:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c102:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10c106:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c10a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10c10e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c112:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10c116:	74 0f                	je     10c127 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x67>
	    return 0;
  10c118:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  10c11f:	00 00 00 
  10c122:	e9 11 01 00 00       	jmpq   10c238 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  10c127:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10c12e:	00 
  10c12f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c133:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10c137:	0f 92 c0             	setb   %al
  10c13a:	83 f0 01             	xor    $0x1,%eax
  10c13d:	84 c0                	test   %al,%al
  10c13f:	0f 85 e9 00 00 00    	jne    10c22e <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
  10c145:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10c149:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10c150:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c154:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c158:	73 0d                	jae    10c167 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xa7>
  10c15a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c15e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10c165:	eb 22                	jmp    10c189 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0xc9>
  10c167:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10c16e:	00 
  10c16f:	48 c7 45 c8 a8 82 11 	movq   $0x1182a8,-0x38(%rbp)
  10c176:	00 
  10c177:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10c17b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10c17f:	ba 3d 00 00 00       	mov    $0x3d,%edx
  10c184:	e8 ac 8b 00 00       	callq  114d35 <_d_array_bounds>
  10c189:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10c190:	48 c1 e0 02          	shl    $0x2,%rax
  10c194:	48 03 85 60 ff ff ff 	add    -0xa0(%rbp),%rax
  10c19b:	d9 00                	flds   (%rax)
  10c19d:	d9 9d 74 ff ff ff    	fstps  -0x8c(%rbp)
  10c1a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10c1a7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10c1ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c1b2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c1b6:	73 0a                	jae    10c1c2 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x102>
  10c1b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c1bc:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10c1c0:	eb 22                	jmp    10c1e4 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x124>
  10c1c2:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10c1c9:	00 
  10c1ca:	48 c7 45 d8 a8 82 11 	movq   $0x1182a8,-0x28(%rbp)
  10c1d1:	00 
  10c1d2:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10c1d6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10c1da:	ba 3d 00 00 00       	mov    $0x3d,%edx
  10c1df:	e8 51 8b 00 00       	callq  114d35 <_d_array_bounds>
  10c1e4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10c1e8:	48 c1 e0 02          	shl    $0x2,%rax
  10c1ec:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10c1f3:	8b 00                	mov    (%rax),%eax
  10c1f5:	f3 0f 10 8d 74 ff ff 	movss  -0x8c(%rbp),%xmm1
  10c1fc:	ff 
  10c1fd:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  10c203:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  10c20a:	ff 
  10c20b:	e8 f1 31 00 00       	callq  10f401 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
  10c210:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10c213:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10c217:	75 0c                	jne    10c225 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x165>
		return 0;
  10c219:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  10c220:	00 00 00 
  10c223:	eb 13                	jmp    10c238 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._equals(s1[u], s2[u]);
	    if (c == 0)
  10c225:	48 ff 45 f0          	incq   -0x10(%rbp)
  10c229:	e9 01 ff ff ff       	jmpq   10c12f <_D3std8typeinfo9ti_Afloat11TypeInfo_Af6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10c22e:	c7 85 5c ff ff ff 01 	movl   $0x1,-0xa4(%rbp)
  10c235:	00 00 00 
  10c238:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    }
  10c23e:	c9                   	leaveq 
  10c23f:	c3                   	retq   

000000000010c240 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10c240:	55                   	push   %rbp
  10c241:	48 89 e5             	mov    %rsp,%rbp
  10c244:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  10c24b:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10c24f:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10c253:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10c257:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10c25b:	e8 e4 73 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float[] s1 = *cast(float[]*)p1;
  10c260:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10c264:	48 8b 02             	mov    (%rdx),%rax
  10c267:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10c26b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c26f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	float[] s2 = *cast(float[]*)p2;
  10c273:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c277:	48 8b 02             	mov    (%rdx),%rax
  10c27a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10c27e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c282:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10c286:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c28a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10c28e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c292:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10c296:	73 08                	jae    10c2a0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x60>
	    len = s2.length;
  10c298:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c29c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10c2a0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10c2a7:	00 
  10c2a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c2ac:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10c2b0:	0f 92 c0             	setb   %al
  10c2b3:	83 f0 01             	xor    $0x1,%eax
  10c2b6:	84 c0                	test   %al,%al
  10c2b8:	0f 85 eb 00 00 00    	jne    10c3a9 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
  10c2be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10c2c2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10c2c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c2cd:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c2d1:	73 0d                	jae    10c2e0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xa0>
  10c2d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c2d7:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10c2de:	eb 22                	jmp    10c302 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xc2>
  10c2e0:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10c2e7:	00 
  10c2e8:	48 c7 45 c8 a8 82 11 	movq   $0x1182a8,-0x38(%rbp)
  10c2ef:	00 
  10c2f0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10c2f4:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10c2f8:	ba 4e 00 00 00       	mov    $0x4e,%edx
  10c2fd:	e8 33 8a 00 00       	callq  114d35 <_d_array_bounds>
  10c302:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10c309:	48 c1 e0 02          	shl    $0x2,%rax
  10c30d:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10c314:	d9 00                	flds   (%rax)
  10c316:	d9 9d 6c ff ff ff    	fstps  -0x94(%rbp)
  10c31c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10c320:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10c327:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c32b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c32f:	73 0d                	jae    10c33e <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0xfe>
  10c331:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c335:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10c33c:	eb 22                	jmp    10c360 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x120>
  10c33e:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10c345:	00 
  10c346:	48 c7 45 d8 a8 82 11 	movq   $0x1182a8,-0x28(%rbp)
  10c34d:	00 
  10c34e:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10c352:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10c356:	ba 4e 00 00 00       	mov    $0x4e,%edx
  10c35b:	e8 d5 89 00 00       	callq  114d35 <_d_array_bounds>
  10c360:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10c367:	48 c1 e0 02          	shl    $0x2,%rax
  10c36b:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10c372:	8b 00                	mov    (%rax),%eax
  10c374:	f3 0f 10 8d 6c ff ff 	movss  -0x94(%rbp),%xmm1
  10c37b:	ff 
  10c37c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  10c382:	f3 0f 10 85 4c ff ff 	movss  -0xb4(%rbp),%xmm0
  10c389:	ff 
  10c38a:	e8 bf 30 00 00       	callq  10f44e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
  10c38f:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10c392:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10c396:	74 08                	je     10c3a0 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x160>
		return c;
  10c398:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10c39b:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10c39e:	eb 3c                	jmp    10c3dc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_f._compare(s1[u], s2[u]);
	    if (c)
  10c3a0:	48 ff 45 f0          	incq   -0x10(%rbp)
  10c3a4:	e9 ff fe ff ff       	jmpq   10c2a8 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10c3a9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10c3ad:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c3b1:	48 39 c2             	cmp    %rax,%rdx
  10c3b4:	73 09                	jae    10c3bf <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x17f>
	    return -1;
  10c3b6:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10c3bd:	eb 1d                	jmp    10c3dc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  10c3bf:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10c3c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c3c7:	48 39 c2             	cmp    %rax,%rdx
  10c3ca:	76 09                	jbe    10c3d5 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x195>
	    return 1;
  10c3cc:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10c3d3:	eb 07                	jmp    10c3dc <_D3std8typeinfo9ti_Afloat11TypeInfo_Af7compareMFPvPvZi+0x19c>
	return 0;
  10c3d5:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10c3dc:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10c3df:	c9                   	leaveq 
  10c3e0:	c3                   	retq   

000000000010c3e1 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5tsizeMFZm>:

    size_t tsize()
  10c3e1:	55                   	push   %rbp
  10c3e2:	48 89 e5             	mov    %rsp,%rbp
  10c3e5:	48 83 ec 10          	sub    $0x10,%rsp
  10c3e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c3ed:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c3f1:	e8 4e 72 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (float[]).sizeof;
  10c3f6:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10c3fb:	c9                   	leaveq 
  10c3fc:	c3                   	retq   

000000000010c3fd <_D3std8typeinfo9ti_Afloat11TypeInfo_Af5flagsMFZk>:

    uint flags()
  10c3fd:	55                   	push   %rbp
  10c3fe:	48 89 e5             	mov    %rsp,%rbp
  10c401:	48 83 ec 10          	sub    $0x10,%rsp
  10c405:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c409:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c40d:	e8 32 72 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10c412:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10c417:	c9                   	leaveq 
  10c418:	c3                   	retq   

000000000010c419 <_D3std8typeinfo9ti_Afloat11TypeInfo_Af4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c419:	55                   	push   %rbp
  10c41a:	48 89 e5             	mov    %rsp,%rbp
  10c41d:	48 83 ec 10          	sub    $0x10,%rsp
  10c421:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c425:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c429:	e8 16 72 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(float);
  10c42e:	b8 d0 94 11 00       	mov    $0x1194d0,%eax
    }
  10c433:	c9                   	leaveq 
  10c434:	c3                   	retq   

000000000010c435 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao8toStringMFZAa>:

// ifloat[]

class TypeInfo_Ao : TypeInfo_Af
{
    char[] toString() { return "ifloat[]"; }
  10c435:	55                   	push   %rbp
  10c436:	48 89 e5             	mov    %rsp,%rbp
  10c439:	53                   	push   %rbx
  10c43a:	48 83 ec 08          	sub    $0x8,%rsp
  10c43e:	48 89 fb             	mov    %rdi,%rbx
  10c441:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c445:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c449:	e8 f6 71 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c44e:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  10c455:	48 c7 43 08 70 83 11 	movq   $0x118370,0x8(%rbx)
  10c45c:	00 
  10c45d:	48 89 d8             	mov    %rbx,%rax
  10c460:	48 83 c4 08          	add    $0x8,%rsp
  10c464:	5b                   	pop    %rbx
  10c465:	c9                   	leaveq 
  10c466:	c3                   	retq   

000000000010c467 <_D3std8typeinfo9ti_Afloat11TypeInfo_Ao4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c467:	55                   	push   %rbp
  10c468:	48 89 e5             	mov    %rsp,%rbp
  10c46b:	48 83 ec 10          	sub    $0x10,%rsp
  10c46f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c473:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c477:	e8 c8 71 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ifloat);
  10c47c:	b8 50 96 11 00       	mov    $0x119650,%eax
    }
  10c481:	c9                   	leaveq 
  10c482:	c3                   	retq   
  10c483:	90                   	nop    

000000000010c484 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag8toStringMFZAa>:
import system;
// byte[]

class TypeInfo_Ag : TypeInfo
{
    char[] toString() { return "byte[]"; }
  10c484:	55                   	push   %rbp
  10c485:	48 89 e5             	mov    %rsp,%rbp
  10c488:	53                   	push   %rbx
  10c489:	48 83 ec 08          	sub    $0x8,%rsp
  10c48d:	48 89 fb             	mov    %rdi,%rbx
  10c490:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c494:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c498:	e8 a7 71 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c49d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10c4a4:	48 c7 43 08 20 84 11 	movq   $0x118420,0x8(%rbx)
  10c4ab:	00 
  10c4ac:	48 89 d8             	mov    %rbx,%rax
  10c4af:	48 83 c4 08          	add    $0x8,%rsp
  10c4b3:	5b                   	pop    %rbx
  10c4b4:	c9                   	leaveq 
  10c4b5:	c3                   	retq   

000000000010c4b6 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm>:

    hash_t getHash(void *p)
  10c4b6:	55                   	push   %rbp
  10c4b7:	48 89 e5             	mov    %rsp,%rbp
  10c4ba:	48 83 ec 50          	sub    $0x50,%rsp
  10c4be:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10c4c2:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10c4c6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10c4ca:	e8 75 71 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	byte[] s = *cast(byte[]*)p;
  10c4cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10c4d3:	48 8b 02             	mov    (%rdx),%rax
  10c4d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10c4da:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c4de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10c4e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10c4e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	byte *str = s.ptr;
  10c4ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10c4ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10c4f2:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10c4f9:	00 

	while (1)
  10c4fa:	b8 00 00 00 00       	mov    $0x0,%eax
  10c4ff:	84 c0                	test   %al,%al
  10c501:	0f 85 01 01 00 00    	jne    10c608 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x152>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 4;
		    len -= 4;
		    break;
  10c507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10c50b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10c50f:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  10c514:	74 27                	je     10c53d <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x87>
  10c516:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  10c51b:	72 13                	jb     10c530 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x7a>
  10c51d:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
  10c522:	74 46                	je     10c56a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xb4>
  10c524:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
  10c529:	74 69                	je     10c594 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0xde>
  10c52b:	e9 ab 00 00 00       	jmpq   10c5db <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x125>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  10c530:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10c534:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c538:	e9 d3 00 00 00       	jmpq   10c610 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 1:
		    hash *= 9;
  10c53d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10c541:	48 89 d0             	mov    %rdx,%rax
  10c544:	48 c1 e0 03          	shl    $0x3,%rax
  10c548:	48 01 d0             	add    %rdx,%rax
  10c54b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ubyte *)str;
  10c54f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c553:	0f b6 00             	movzbl (%rax),%eax
  10c556:	0f b6 c0             	movzbl %al,%eax
  10c559:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  10c55d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10c561:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c565:	e9 a6 00 00 00       	jmpq   10c610 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 2:
		    hash *= 9;
  10c56a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10c56e:	48 89 d0             	mov    %rdx,%rax
  10c571:	48 c1 e0 03          	shl    $0x3,%rax
  10c575:	48 01 d0             	add    %rdx,%rax
  10c578:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  10c57c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c580:	0f b7 00             	movzwl (%rax),%eax
  10c583:	0f b7 c0             	movzwl %ax,%eax
  10c586:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  10c58a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10c58e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c592:	eb 7c                	jmp    10c610 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		case 3:
		    hash *= 9;
  10c594:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10c598:	48 89 d0             	mov    %rdx,%rax
  10c59b:	48 c1 e0 03          	shl    $0x3,%rax
  10c59f:	48 01 d0             	add    %rdx,%rax
  10c5a2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += (*cast(ushort *)str << 8) +
  10c5a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c5aa:	0f b7 00             	movzwl (%rax),%eax
  10c5ad:	0f b7 c0             	movzwl %ax,%eax
  10c5b0:	89 c1                	mov    %eax,%ecx
  10c5b2:	c1 e1 08             	shl    $0x8,%ecx
  10c5b5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10c5b9:	b8 02 00 00 00       	mov    $0x2,%eax
  10c5be:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10c5c2:	0f b6 00             	movzbl (%rax),%eax
  10c5c5:	0f b6 c0             	movzbl %al,%eax
  10c5c8:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10c5cb:	48 98                	cltq   
  10c5cd:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			    (cast(ubyte *)str)[2];
		    return hash;
  10c5d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10c5d5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c5d9:	eb 35                	jmp    10c610 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x15a>

		default:
		    hash *= 9;
  10c5db:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10c5df:	48 89 d0             	mov    %rdx,%rax
  10c5e2:	48 c1 e0 03          	shl    $0x3,%rax
  10c5e6:	48 01 d0             	add    %rdx,%rax
  10c5e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  10c5ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c5f1:	8b 00                	mov    (%rax),%eax
  10c5f3:	89 c0                	mov    %eax,%eax
  10c5f5:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 4;
  10c5f9:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 4;
  10c5fe:	48 83 6d f8 04       	subq   $0x4,-0x8(%rbp)
		    break;
  10c603:	e9 f2 fe ff ff       	jmpq   10c4fa <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  10c608:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10c60c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c610:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  10c614:	c9                   	leaveq 
  10c615:	c3                   	retq   

000000000010c616 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10c616:	55                   	push   %rbp
  10c617:	48 89 e5             	mov    %rsp,%rbp
  10c61a:	48 83 ec 40          	sub    $0x40,%rsp
  10c61e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10c622:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10c626:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10c62a:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10c62e:	e8 11 70 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  10c633:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10c637:	48 8b 02             	mov    (%rdx),%rax
  10c63a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10c63e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c642:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  10c646:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10c64a:	48 8b 02             	mov    (%rdx),%rax
  10c64d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10c651:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c655:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  10c659:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10c65d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c661:	48 39 c2             	cmp    %rax,%rdx
  10c664:	75 1c                	jne    10c682 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  10c666:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10c66a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10c66e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10c672:	e8 a7 90 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  10c677:	48 85 c0             	test   %rax,%rax
  10c67a:	75 06                	jne    10c682 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x6c>
  10c67c:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  10c680:	eb 04                	jmp    10c686 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag6equalsMFPvPvZi+0x70>
  10c682:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  10c686:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(s1.ptr, s2.ptr, s1.length) == 0;
    }
  10c68a:	c9                   	leaveq 
  10c68b:	c3                   	retq   

000000000010c68c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10c68c:	55                   	push   %rbp
  10c68d:	48 89 e5             	mov    %rsp,%rbp
  10c690:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10c697:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10c69b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10c69f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10c6a3:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10c6a7:	e8 98 6f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte[] s1 = *cast(byte[]*)p1;
  10c6ac:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10c6b0:	48 8b 02             	mov    (%rdx),%rax
  10c6b3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10c6b7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c6bb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	byte[] s2 = *cast(byte[]*)p2;
  10c6bf:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10c6c3:	48 8b 02             	mov    (%rdx),%rax
  10c6c6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10c6ca:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c6ce:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10c6d2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c6d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10c6da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c6de:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10c6e2:	73 08                	jae    10c6ec <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x60>
	    len = s2.length;
  10c6e4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c6e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10c6ec:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10c6f3:	00 
  10c6f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10c6f8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10c6fc:	0f 92 c0             	setb   %al
  10c6ff:	83 f0 01             	xor    $0x1,%eax
  10c702:	84 c0                	test   %al,%al
  10c704:	0f 85 da 00 00 00    	jne    10c7e4 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  10c70a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10c70e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10c715:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10c719:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c71d:	73 0d                	jae    10c72c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xa0>
  10c71f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10c723:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10c72a:	eb 22                	jmp    10c74e <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xc2>
  10c72c:	48 c7 45 c0 14 00 00 	movq   $0x14,-0x40(%rbp)
  10c733:	00 
  10c734:	48 c7 45 c8 27 84 11 	movq   $0x118427,-0x38(%rbp)
  10c73b:	00 
  10c73c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10c740:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10c744:	ba 46 00 00 00       	mov    $0x46,%edx
  10c749:	e8 e7 85 00 00       	callq  114d35 <_d_array_bounds>
  10c74e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10c755:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10c75c:	0f b6 00             	movzbl (%rax),%eax
  10c75f:	0f be c0             	movsbl %al,%eax
  10c762:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  10c768:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10c76c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10c773:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c777:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10c77b:	73 0d                	jae    10c78a <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0xfe>
  10c77d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10c781:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10c788:	eb 22                	jmp    10c7ac <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x120>
  10c78a:	48 c7 45 d0 14 00 00 	movq   $0x14,-0x30(%rbp)
  10c791:	00 
  10c792:	48 c7 45 d8 27 84 11 	movq   $0x118427,-0x28(%rbp)
  10c799:	00 
  10c79a:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10c79e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10c7a2:	ba 46 00 00 00       	mov    $0x46,%edx
  10c7a7:	e8 89 85 00 00       	callq  114d35 <_d_array_bounds>
  10c7ac:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10c7b3:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10c7ba:	0f b6 00             	movzbl (%rax),%eax
  10c7bd:	0f be c0             	movsbl %al,%eax
  10c7c0:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  10c7c6:	29 c2                	sub    %eax,%edx
  10c7c8:	89 d0                	mov    %edx,%eax
  10c7ca:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  10c7cd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10c7d1:	74 08                	je     10c7db <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x14f>
		return result;
  10c7d3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10c7d6:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10c7d9:	eb 3c                	jmp    10c817 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  10c7db:	48 ff 45 f0          	incq   -0x10(%rbp)
  10c7df:	e9 10 ff ff ff       	jmpq   10c6f4 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  10c7e4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10c7e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c7ec:	48 39 c2             	cmp    %rax,%rdx
  10c7ef:	73 09                	jae    10c7fa <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x16e>
	    return -1;
  10c7f1:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10c7f8:	eb 1d                	jmp    10c817 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  10c7fa:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10c7fe:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10c802:	48 39 c2             	cmp    %rax,%rdx
  10c805:	76 09                	jbe    10c810 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x184>
	    return 1;
  10c807:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10c80e:	eb 07                	jmp    10c817 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag7compareMFPvPvZi+0x18b>
	return 0;
  10c810:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10c817:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10c81a:	c9                   	leaveq 
  10c81b:	c3                   	retq   

000000000010c81c <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5tsizeMFZm>:

    size_t tsize()
  10c81c:	55                   	push   %rbp
  10c81d:	48 89 e5             	mov    %rsp,%rbp
  10c820:	48 83 ec 10          	sub    $0x10,%rsp
  10c824:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c828:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c82c:	e8 13 6e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (byte[]).sizeof;
  10c831:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10c836:	c9                   	leaveq 
  10c837:	c3                   	retq   

000000000010c838 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag5flagsMFZk>:

    uint flags()
  10c838:	55                   	push   %rbp
  10c839:	48 89 e5             	mov    %rsp,%rbp
  10c83c:	48 83 ec 10          	sub    $0x10,%rsp
  10c840:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c844:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c848:	e8 f7 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10c84d:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10c852:	c9                   	leaveq 
  10c853:	c3                   	retq   

000000000010c854 <_D3std8typeinfo5ti_Ag11TypeInfo_Ag4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c854:	55                   	push   %rbp
  10c855:	48 89 e5             	mov    %rsp,%rbp
  10c858:	48 83 ec 10          	sub    $0x10,%rsp
  10c85c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c860:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c864:	e8 db 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(byte);
  10c869:	b8 f0 8e 11 00       	mov    $0x118ef0,%eax
    }
  10c86e:	c9                   	leaveq 
  10c86f:	c3                   	retq   

000000000010c870 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah8toStringMFZAa>:

// ubyte[]

class TypeInfo_Ah : TypeInfo_Ag
{
    char[] toString() { return "ubyte[]"; }
  10c870:	55                   	push   %rbp
  10c871:	48 89 e5             	mov    %rsp,%rbp
  10c874:	53                   	push   %rbx
  10c875:	48 83 ec 08          	sub    $0x8,%rsp
  10c879:	48 89 fb             	mov    %rdi,%rbx
  10c87c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c880:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c884:	e8 bb 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c889:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10c890:	48 c7 43 08 d0 84 11 	movq   $0x1184d0,0x8(%rbx)
  10c897:	00 
  10c898:	48 89 d8             	mov    %rbx,%rax
  10c89b:	48 83 c4 08          	add    $0x8,%rsp
  10c89f:	5b                   	pop    %rbx
  10c8a0:	c9                   	leaveq 
  10c8a1:	c3                   	retq   

000000000010c8a2 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10c8a2:	55                   	push   %rbp
  10c8a3:	48 89 e5             	mov    %rsp,%rbp
  10c8a6:	48 83 ec 40          	sub    $0x40,%rsp
  10c8aa:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10c8ae:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10c8b2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10c8b6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10c8ba:	e8 85 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte[] s1 = *cast(ubyte[]*)p1;
  10c8bf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10c8c3:	48 8b 02             	mov    (%rdx),%rax
  10c8c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10c8ca:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c8ce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	ubyte[] s2 = *cast(ubyte[]*)p2;
  10c8d2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10c8d6:	48 8b 02             	mov    (%rdx),%rax
  10c8d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10c8dd:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c8e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return memcmp(s1.ptr, s2.ptr, s1.length);
  10c8e5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10c8e9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  10c8ed:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10c8f1:	e8 28 8e ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
    }
  10c8f6:	c9                   	leaveq 
  10c8f7:	c3                   	retq   

000000000010c8f8 <_D3std8typeinfo5ti_Ag11TypeInfo_Ah4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c8f8:	55                   	push   %rbp
  10c8f9:	48 89 e5             	mov    %rsp,%rbp
  10c8fc:	48 83 ec 10          	sub    $0x10,%rsp
  10c900:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c904:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c908:	e8 37 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ubyte);
  10c90d:	b8 70 9b 11 00       	mov    $0x119b70,%eax
    }
  10c912:	c9                   	leaveq 
  10c913:	c3                   	retq   

000000000010c914 <_D3std8typeinfo5ti_Ag11TypeInfo_Av8toStringMFZAa>:

// void[]

class TypeInfo_Av : TypeInfo_Ah
{
    char[] toString() { return "void[]"; }
  10c914:	55                   	push   %rbp
  10c915:	48 89 e5             	mov    %rsp,%rbp
  10c918:	53                   	push   %rbx
  10c919:	48 83 ec 08          	sub    $0x8,%rsp
  10c91d:	48 89 fb             	mov    %rdi,%rbx
  10c920:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c924:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c928:	e8 17 6d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c92d:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10c934:	48 c7 43 08 70 85 11 	movq   $0x118570,0x8(%rbx)
  10c93b:	00 
  10c93c:	48 89 d8             	mov    %rbx,%rax
  10c93f:	48 83 c4 08          	add    $0x8,%rsp
  10c943:	5b                   	pop    %rbx
  10c944:	c9                   	leaveq 
  10c945:	c3                   	retq   

000000000010c946 <_D3std8typeinfo5ti_Ag11TypeInfo_Av4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c946:	55                   	push   %rbp
  10c947:	48 89 e5             	mov    %rsp,%rbp
  10c94a:	48 83 ec 10          	sub    $0x10,%rsp
  10c94e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c952:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c956:	e8 e9 6c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(void);
  10c95b:	b8 20 9f 11 00       	mov    $0x119f20,%eax
    }
  10c960:	c9                   	leaveq 
  10c961:	c3                   	retq   

000000000010c962 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab8toStringMFZAa>:

// bool[]

class TypeInfo_Ab : TypeInfo_Ah
{
    char[] toString() { return "bool[]"; }
  10c962:	55                   	push   %rbp
  10c963:	48 89 e5             	mov    %rsp,%rbp
  10c966:	53                   	push   %rbx
  10c967:	48 83 ec 08          	sub    $0x8,%rsp
  10c96b:	48 89 fb             	mov    %rdi,%rbx
  10c96e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c972:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c976:	e8 c9 6c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c97b:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10c982:	48 c7 43 08 10 86 11 	movq   $0x118610,0x8(%rbx)
  10c989:	00 
  10c98a:	48 89 d8             	mov    %rbx,%rax
  10c98d:	48 83 c4 08          	add    $0x8,%rsp
  10c991:	5b                   	pop    %rbx
  10c992:	c9                   	leaveq 
  10c993:	c3                   	retq   

000000000010c994 <_D3std8typeinfo5ti_Ag11TypeInfo_Ab4nextMFZC8TypeInfo>:

    TypeInfo next()
  10c994:	55                   	push   %rbp
  10c995:	48 89 e5             	mov    %rsp,%rbp
  10c998:	48 83 ec 10          	sub    $0x10,%rsp
  10c99c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10c9a0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10c9a4:	e8 9b 6c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(bool);
  10c9a9:	b8 20 9c 11 00       	mov    $0x119c20,%eax
    }
  10c9ae:	c9                   	leaveq 
  10c9af:	c3                   	retq   

000000000010c9b0 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa8toStringMFZAa>:

// char[]

class TypeInfo_Aa : TypeInfo_Ag
{
    char[] toString() { return "char[]"; }
  10c9b0:	55                   	push   %rbp
  10c9b1:	48 89 e5             	mov    %rsp,%rbp
  10c9b4:	53                   	push   %rbx
  10c9b5:	48 83 ec 08          	sub    $0x8,%rsp
  10c9b9:	48 89 fb             	mov    %rdi,%rbx
  10c9bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10c9c0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10c9c4:	e8 7b 6c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10c9c9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10c9d0:	48 c7 43 08 b0 86 11 	movq   $0x1186b0,0x8(%rbx)
  10c9d7:	00 
  10c9d8:	48 89 d8             	mov    %rbx,%rax
  10c9db:	48 83 c4 08          	add    $0x8,%rsp
  10c9df:	5b                   	pop    %rbx
  10c9e0:	c9                   	leaveq 
  10c9e1:	c3                   	retq   

000000000010c9e2 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm>:

    hash_t getHash(void *p)
  10c9e2:	55                   	push   %rbp
  10c9e3:	48 89 e5             	mov    %rsp,%rbp
  10c9e6:	48 83 ec 50          	sub    $0x50,%rsp
  10c9ea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10c9ee:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10c9f2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10c9f6:	e8 49 6c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	char[] s = *cast(char[]*)p;
  10c9fb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10c9ff:	48 8b 02             	mov    (%rdx),%rax
  10ca02:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10ca06:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ca0a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	hash_t hash = 0;
  10ca0e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10ca15:	00 

version (all)
{
	foreach (char c; s)
  10ca16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10ca1a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10ca1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10ca22:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10ca26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10ca2a:	48 03 45 b8          	add    -0x48(%rbp),%rax
  10ca2e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ca32:	0f 95 c0             	setne  %al
  10ca35:	83 f0 01             	xor    $0x1,%eax
  10ca38:	84 c0                	test   %al,%al
  10ca3a:	75 3c                	jne    10ca78 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x96>
  10ca3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ca40:	0f b6 00             	movzbl (%rax),%eax
  10ca43:	88 45 ff             	mov    %al,-0x1(%rbp)
	    hash = hash * 11 + c;
  10ca46:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10ca4a:	48 89 c8             	mov    %rcx,%rax
  10ca4d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10ca54:	00 
  10ca55:	48 8d 04 95 00 00 00 	lea    0x0(,%rdx,4),%rax
  10ca5c:	00 
  10ca5d:	48 29 d0             	sub    %rdx,%rax
  10ca60:	48 89 c2             	mov    %rax,%rdx
  10ca63:	48 29 ca             	sub    %rcx,%rdx
  10ca66:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10ca6a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10ca6e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  10ca72:	48 ff 45 f0          	incq   -0x10(%rbp)
  10ca76:	eb ae                	jmp    10ca26 <_D3std8typeinfo5ti_Ag11TypeInfo_Aa7getHashMFPvZm+0x44>
		    len -= 4;
		    break;
	    }
	}
}
	return hash;
  10ca78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10ca7c:	c9                   	leaveq 
  10ca7d:	c3                   	retq   

000000000010ca7e <_D3std8typeinfo5ti_Ag11TypeInfo_Aa4nextMFZC8TypeInfo>:

    TypeInfo next()
  10ca7e:	55                   	push   %rbp
  10ca7f:	48 89 e5             	mov    %rsp,%rbp
  10ca82:	48 83 ec 10          	sub    $0x10,%rsp
  10ca86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ca8a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ca8e:	e8 b1 6b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(char);
  10ca93:	b8 30 91 11 00       	mov    $0x119130,%eax
    }
  10ca98:	c9                   	leaveq 
  10ca99:	c3                   	retq   
  10ca9a:	90                   	nop    
  10ca9b:	90                   	nop    

000000000010ca9c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai8toStringMFZAa>:

// int[]

class TypeInfo_Ai : TypeInfo
{
    char[] toString() { return "int[]"; }
  10ca9c:	55                   	push   %rbp
  10ca9d:	48 89 e5             	mov    %rsp,%rbp
  10caa0:	53                   	push   %rbx
  10caa1:	48 83 ec 08          	sub    $0x8,%rsp
  10caa5:	48 89 fb             	mov    %rdi,%rbx
  10caa8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10caac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10cab0:	e8 8f 6b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10cab5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10cabc:	48 c7 43 08 60 87 11 	movq   $0x118760,0x8(%rbx)
  10cac3:	00 
  10cac4:	48 89 d8             	mov    %rbx,%rax
  10cac7:	48 83 c4 08          	add    $0x8,%rsp
  10cacb:	5b                   	pop    %rbx
  10cacc:	c9                   	leaveq 
  10cacd:	c3                   	retq   

000000000010cace <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm>:

    hash_t getHash(void *p)
  10cace:	55                   	push   %rbp
  10cacf:	48 89 e5             	mov    %rsp,%rbp
  10cad2:	48 83 ec 40          	sub    $0x40,%rsp
  10cad6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10cada:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10cade:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10cae2:	e8 5d 6b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	int[] s = *cast(int[]*)p;
  10cae7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10caeb:	48 8b 02             	mov    (%rdx),%rax
  10caee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10caf2:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10caf6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	auto len = s.length;
  10cafa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10cafe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  10cb02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10cb06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10cb0a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10cb11:	00 

	while (len)
  10cb12:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10cb17:	0f 95 c0             	setne  %al
  10cb1a:	83 f0 01             	xor    $0x1,%eax
  10cb1d:	84 c0                	test   %al,%al
  10cb1f:	75 29                	jne    10cb4a <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x7c>
	{
	    hash *= 9;
  10cb21:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10cb25:	48 89 d0             	mov    %rdx,%rax
  10cb28:	48 c1 e0 03          	shl    $0x3,%rax
  10cb2c:	48 01 d0             	add    %rdx,%rax
  10cb2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str;
  10cb33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10cb37:	8b 00                	mov    (%rax),%eax
  10cb39:	89 c0                	mov    %eax,%eax
  10cb3b:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10cb3f:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
	    len--;
  10cb44:	48 ff 4d f8          	decq   -0x8(%rbp)
  10cb48:	eb c8                	jmp    10cb12 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7getHashMFPvZm+0x44>
	}

	return hash;
  10cb4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10cb4e:	c9                   	leaveq 
  10cb4f:	c3                   	retq   

000000000010cb50 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10cb50:	55                   	push   %rbp
  10cb51:	48 89 e5             	mov    %rsp,%rbp
  10cb54:	48 83 ec 40          	sub    $0x40,%rsp
  10cb58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10cb5c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10cb60:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10cb64:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10cb68:	e8 d7 6a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  10cb6d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10cb71:	48 8b 02             	mov    (%rdx),%rax
  10cb74:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10cb78:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10cb7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int[] s2 = *cast(int[]*)p2;
  10cb80:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10cb84:	48 8b 02             	mov    (%rdx),%rax
  10cb87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10cb8b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10cb8f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  10cb93:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10cb97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10cb9b:	48 39 c2             	cmp    %rax,%rdx
  10cb9e:	75 2a                	jne    10cbca <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  10cba0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10cba4:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10cbab:	00 
  10cbac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10cbb0:	48 89 c6             	mov    %rax,%rsi
  10cbb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10cbb7:	48 89 c7             	mov    %rax,%rdi
  10cbba:	e8 5f 8b ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  10cbbf:	48 85 c0             	test   %rax,%rax
  10cbc2:	75 06                	jne    10cbca <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7a>
  10cbc4:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  10cbc8:	eb 04                	jmp    10cbce <_D3std8typeinfo7ti_Aint11TypeInfo_Ai6equalsMFPvPvZi+0x7e>
  10cbca:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  10cbce:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * int.sizeof) == 0;
    }
  10cbd2:	c9                   	leaveq 
  10cbd3:	c3                   	retq   

000000000010cbd4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10cbd4:	55                   	push   %rbp
  10cbd5:	48 89 e5             	mov    %rsp,%rbp
  10cbd8:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10cbdf:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10cbe3:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10cbe7:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10cbeb:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10cbef:	e8 50 6a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int[] s1 = *cast(int[]*)p1;
  10cbf4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10cbf8:	48 8b 02             	mov    (%rdx),%rax
  10cbfb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10cbff:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10cc03:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	int[] s2 = *cast(int[]*)p2;
  10cc07:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10cc0b:	48 8b 02             	mov    (%rdx),%rax
  10cc0e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10cc12:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10cc16:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10cc1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10cc1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10cc22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cc26:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10cc2a:	73 08                	jae    10cc34 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x60>
	    len = s2.length;
  10cc2c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cc30:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10cc34:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10cc3b:	00 
  10cc3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10cc40:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10cc44:	0f 92 c0             	setb   %al
  10cc47:	83 f0 01             	xor    $0x1,%eax
  10cc4a:	84 c0                	test   %al,%al
  10cc4c:	0f 85 da 00 00 00    	jne    10cd2c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  10cc52:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10cc56:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10cc5d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10cc61:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10cc65:	73 0d                	jae    10cc74 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xa0>
  10cc67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10cc6b:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10cc72:	eb 22                	jmp    10cc96 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xc2>
  10cc74:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  10cc7b:	00 
  10cc7c:	48 c7 45 c8 66 87 11 	movq   $0x118766,-0x38(%rbp)
  10cc83:	00 
  10cc84:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10cc88:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10cc8c:	ba 30 00 00 00       	mov    $0x30,%edx
  10cc91:	e8 9f 80 00 00       	callq  114d35 <_d_array_bounds>
  10cc96:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10cc9d:	48 c1 e0 02          	shl    $0x2,%rax
  10cca1:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10cca8:	8b 00                	mov    (%rax),%eax
  10ccaa:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  10ccb0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10ccb4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10ccbb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ccbf:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ccc3:	73 0d                	jae    10ccd2 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0xfe>
  10ccc5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10ccc9:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10ccd0:	eb 22                	jmp    10ccf4 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x120>
  10ccd2:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  10ccd9:	00 
  10ccda:	48 c7 45 d8 66 87 11 	movq   $0x118766,-0x28(%rbp)
  10cce1:	00 
  10cce2:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10cce6:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10ccea:	ba 30 00 00 00       	mov    $0x30,%edx
  10ccef:	e8 41 80 00 00       	callq  114d35 <_d_array_bounds>
  10ccf4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10ccfb:	48 c1 e0 02          	shl    $0x2,%rax
  10ccff:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10cd06:	8b 00                	mov    (%rax),%eax
  10cd08:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  10cd0e:	29 c2                	sub    %eax,%edx
  10cd10:	89 d0                	mov    %edx,%eax
  10cd12:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  10cd15:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10cd19:	74 08                	je     10cd23 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x14f>
		return result;
  10cd1b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10cd1e:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10cd21:	eb 3c                	jmp    10cd5f <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  10cd23:	48 ff 45 f0          	incq   -0x10(%rbp)
  10cd27:	e9 10 ff ff ff       	jmpq   10cc3c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  10cd2c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10cd30:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cd34:	48 39 c2             	cmp    %rax,%rdx
  10cd37:	73 09                	jae    10cd42 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x16e>
	    return -1;
  10cd39:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10cd40:	eb 1d                	jmp    10cd5f <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  10cd42:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10cd46:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cd4a:	48 39 c2             	cmp    %rax,%rdx
  10cd4d:	76 09                	jbe    10cd58 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x184>
	    return 1;
  10cd4f:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10cd56:	eb 07                	jmp    10cd5f <_D3std8typeinfo7ti_Aint11TypeInfo_Ai7compareMFPvPvZi+0x18b>
	return 0;
  10cd58:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10cd5f:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10cd62:	c9                   	leaveq 
  10cd63:	c3                   	retq   

000000000010cd64 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5tsizeMFZm>:

    size_t tsize()
  10cd64:	55                   	push   %rbp
  10cd65:	48 89 e5             	mov    %rsp,%rbp
  10cd68:	48 83 ec 10          	sub    $0x10,%rsp
  10cd6c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10cd70:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10cd74:	e8 cb 68 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (int[]).sizeof;
  10cd79:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10cd7e:	c9                   	leaveq 
  10cd7f:	c3                   	retq   

000000000010cd80 <_D3std8typeinfo7ti_Aint11TypeInfo_Ai5flagsMFZk>:

    uint flags()
  10cd80:	55                   	push   %rbp
  10cd81:	48 89 e5             	mov    %rsp,%rbp
  10cd84:	48 83 ec 10          	sub    $0x10,%rsp
  10cd88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10cd8c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10cd90:	e8 af 68 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10cd95:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10cd9a:	c9                   	leaveq 
  10cd9b:	c3                   	retq   

000000000010cd9c <_D3std8typeinfo7ti_Aint11TypeInfo_Ai4nextMFZC8TypeInfo>:

    TypeInfo next()
  10cd9c:	55                   	push   %rbp
  10cd9d:	48 89 e5             	mov    %rsp,%rbp
  10cda0:	48 83 ec 10          	sub    $0x10,%rsp
  10cda4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10cda8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10cdac:	e8 93 68 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(int);
  10cdb1:	b8 10 97 11 00       	mov    $0x119710,%eax
    }
  10cdb6:	c9                   	leaveq 
  10cdb7:	c3                   	retq   

000000000010cdb8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak8toStringMFZAa>:

// uint[]

class TypeInfo_Ak : TypeInfo_Ai
{
    char[] toString() { return "uint[]"; }
  10cdb8:	55                   	push   %rbp
  10cdb9:	48 89 e5             	mov    %rsp,%rbp
  10cdbc:	53                   	push   %rbx
  10cdbd:	48 83 ec 08          	sub    $0x8,%rsp
  10cdc1:	48 89 fb             	mov    %rdi,%rbx
  10cdc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10cdc8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10cdcc:	e8 73 68 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10cdd1:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10cdd8:	48 c7 43 08 10 88 11 	movq   $0x118810,0x8(%rbx)
  10cddf:	00 
  10cde0:	48 89 d8             	mov    %rbx,%rax
  10cde3:	48 83 c4 08          	add    $0x8,%rsp
  10cde7:	5b                   	pop    %rbx
  10cde8:	c9                   	leaveq 
  10cde9:	c3                   	retq   

000000000010cdea <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10cdea:	55                   	push   %rbp
  10cdeb:	48 89 e5             	mov    %rsp,%rbp
  10cdee:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10cdf5:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10cdf9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10cdfd:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10ce01:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10ce05:	e8 3a 68 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	uint[] s1 = *cast(uint[]*)p1;
  10ce0a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10ce0e:	48 8b 02             	mov    (%rdx),%rax
  10ce11:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10ce15:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ce19:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	uint[] s2 = *cast(uint[]*)p2;
  10ce1d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10ce21:	48 8b 02             	mov    (%rdx),%rax
  10ce24:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10ce28:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10ce2c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10ce30:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ce34:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10ce38:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ce3c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10ce40:	73 08                	jae    10ce4a <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x60>
	    len = s2.length;
  10ce42:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ce46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10ce4a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10ce51:	00 
  10ce52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ce56:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10ce5a:	0f 92 c0             	setb   %al
  10ce5d:	83 f0 01             	xor    $0x1,%eax
  10ce60:	84 c0                	test   %al,%al
  10ce62:	0f 85 da 00 00 00    	jne    10cf42 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x158>
	{
	    int result = s1[u] - s2[u];
  10ce68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10ce6c:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10ce73:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10ce77:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ce7b:	73 0d                	jae    10ce8a <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xa0>
  10ce7d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10ce81:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10ce88:	eb 22                	jmp    10ceac <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xc2>
  10ce8a:	48 c7 45 c0 16 00 00 	movq   $0x16,-0x40(%rbp)
  10ce91:	00 
  10ce92:	48 c7 45 c8 66 87 11 	movq   $0x118766,-0x38(%rbp)
  10ce99:	00 
  10ce9a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10ce9e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10cea2:	ba 5b 00 00 00       	mov    $0x5b,%edx
  10cea7:	e8 89 7e 00 00       	callq  114d35 <_d_array_bounds>
  10ceac:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10ceb3:	48 c1 e0 02          	shl    $0x2,%rax
  10ceb7:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10cebe:	8b 00                	mov    (%rax),%eax
  10cec0:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  10cec6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10ceca:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10ced1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ced5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ced9:	73 0d                	jae    10cee8 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0xfe>
  10cedb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10cedf:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10cee6:	eb 22                	jmp    10cf0a <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x120>
  10cee8:	48 c7 45 d0 16 00 00 	movq   $0x16,-0x30(%rbp)
  10ceef:	00 
  10cef0:	48 c7 45 d8 66 87 11 	movq   $0x118766,-0x28(%rbp)
  10cef7:	00 
  10cef8:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10cefc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10cf00:	ba 5b 00 00 00       	mov    $0x5b,%edx
  10cf05:	e8 2b 7e 00 00       	callq  114d35 <_d_array_bounds>
  10cf0a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10cf11:	48 c1 e0 02          	shl    $0x2,%rax
  10cf15:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10cf1c:	8b 00                	mov    (%rax),%eax
  10cf1e:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  10cf24:	29 c2                	sub    %eax,%edx
  10cf26:	89 d0                	mov    %edx,%eax
  10cf28:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  10cf2b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10cf2f:	74 08                	je     10cf39 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x14f>
		return result;
  10cf31:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10cf34:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10cf37:	eb 3c                	jmp    10cf75 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  10cf39:	48 ff 45 f0          	incq   -0x10(%rbp)
  10cf3d:	e9 10 ff ff ff       	jmpq   10ce52 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  10cf42:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10cf46:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cf4a:	48 39 c2             	cmp    %rax,%rdx
  10cf4d:	73 09                	jae    10cf58 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x16e>
	    return -1;
  10cf4f:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10cf56:	eb 1d                	jmp    10cf75 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	else if (s1.length > s2.length)
  10cf58:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10cf5c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10cf60:	48 39 c2             	cmp    %rax,%rdx
  10cf63:	76 09                	jbe    10cf6e <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x184>
	    return 1;
  10cf65:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10cf6c:	eb 07                	jmp    10cf75 <_D3std8typeinfo7ti_Aint11TypeInfo_Ak7compareMFPvPvZi+0x18b>
	return 0;
  10cf6e:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10cf75:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10cf78:	c9                   	leaveq 
  10cf79:	c3                   	retq   

000000000010cf7a <_D3std8typeinfo7ti_Aint11TypeInfo_Ak4nextMFZC8TypeInfo>:

    TypeInfo next()
  10cf7a:	55                   	push   %rbp
  10cf7b:	48 89 e5             	mov    %rsp,%rbp
  10cf7e:	48 83 ec 10          	sub    $0x10,%rsp
  10cf82:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10cf86:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10cf8a:	e8 b5 66 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(uint);
  10cf8f:	b8 d0 9c 11 00       	mov    $0x119cd0,%eax
    }
  10cf94:	c9                   	leaveq 
  10cf95:	c3                   	retq   

000000000010cf96 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw8toStringMFZAa>:

// dchar[]

class TypeInfo_Aw : TypeInfo_Ak
{
    char[] toString() { return "dchar[]"; }
  10cf96:	55                   	push   %rbp
  10cf97:	48 89 e5             	mov    %rsp,%rbp
  10cf9a:	53                   	push   %rbx
  10cf9b:	48 83 ec 08          	sub    $0x8,%rsp
  10cf9f:	48 89 fb             	mov    %rdi,%rbx
  10cfa2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10cfa6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10cfaa:	e8 95 66 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10cfaf:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10cfb6:	48 c7 43 08 b0 88 11 	movq   $0x1188b0,0x8(%rbx)
  10cfbd:	00 
  10cfbe:	48 89 d8             	mov    %rbx,%rax
  10cfc1:	48 83 c4 08          	add    $0x8,%rsp
  10cfc5:	5b                   	pop    %rbx
  10cfc6:	c9                   	leaveq 
  10cfc7:	c3                   	retq   

000000000010cfc8 <_D3std8typeinfo7ti_Aint11TypeInfo_Aw4nextMFZC8TypeInfo>:

    TypeInfo next()
  10cfc8:	55                   	push   %rbp
  10cfc9:	48 89 e5             	mov    %rsp,%rbp
  10cfcc:	48 83 ec 10          	sub    $0x10,%rsp
  10cfd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10cfd4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10cfd8:	e8 67 66 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(dchar);
  10cfdd:	b8 b0 92 11 00       	mov    $0x1192b0,%eax
    }
  10cfe2:	c9                   	leaveq 
  10cfe3:	c3                   	retq   

000000000010cfe4 <_D3std8typeinfo8ti_Along11TypeInfo_Al8toStringMFZAa>:

// long[]

class TypeInfo_Al : TypeInfo
{
    char[] toString() { return "long[]"; }
  10cfe4:	55                   	push   %rbp
  10cfe5:	48 89 e5             	mov    %rsp,%rbp
  10cfe8:	53                   	push   %rbx
  10cfe9:	48 83 ec 08          	sub    $0x8,%rsp
  10cfed:	48 89 fb             	mov    %rdi,%rbx
  10cff0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10cff4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10cff8:	e8 47 66 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10cffd:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10d004:	48 c7 43 08 60 89 11 	movq   $0x118960,0x8(%rbx)
  10d00b:	00 
  10d00c:	48 89 d8             	mov    %rbx,%rax
  10d00f:	48 83 c4 08          	add    $0x8,%rsp
  10d013:	5b                   	pop    %rbx
  10d014:	c9                   	leaveq 
  10d015:	c3                   	retq   

000000000010d016 <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm>:

    hash_t getHash(void *p)
  10d016:	55                   	push   %rbp
  10d017:	48 89 e5             	mov    %rsp,%rbp
  10d01a:	48 83 ec 40          	sub    $0x40,%rsp
  10d01e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10d022:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10d026:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10d02a:	e8 15 66 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	long[] s = *cast(long[]*)p;
  10d02f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10d033:	48 8b 02             	mov    (%rdx),%rax
  10d036:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10d03a:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d03e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10d042:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10d046:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  10d04a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10d04e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10d052:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10d059:	00 

	while (len)
  10d05a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10d05f:	0f 95 c0             	setne  %al
  10d062:	83 f0 01             	xor    $0x1,%eax
  10d065:	84 c0                	test   %al,%al
  10d067:	75 36                	jne    10d09f <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x89>
	{
	    hash *= 9;
  10d069:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10d06d:	48 89 d0             	mov    %rdx,%rax
  10d070:	48 c1 e0 03          	shl    $0x3,%rax
  10d074:	48 01 d0             	add    %rdx,%rax
  10d077:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += *cast(uint *)str + *(cast(uint *)str + 1);
  10d07b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d07f:	8b 10                	mov    (%rax),%edx
  10d081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d085:	48 83 c0 04          	add    $0x4,%rax
  10d089:	8b 00                	mov    (%rax),%eax
  10d08b:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  10d08e:	89 c0                	mov    %eax,%eax
  10d090:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10d094:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
	    len--;
  10d099:	48 ff 4d f8          	decq   -0x8(%rbp)
  10d09d:	eb bb                	jmp    10d05a <_D3std8typeinfo8ti_Along11TypeInfo_Al7getHashMFPvZm+0x44>
	}

	return hash;
  10d09f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10d0a3:	c9                   	leaveq 
  10d0a4:	c3                   	retq   

000000000010d0a5 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10d0a5:	55                   	push   %rbp
  10d0a6:	48 89 e5             	mov    %rsp,%rbp
  10d0a9:	48 83 ec 40          	sub    $0x40,%rsp
  10d0ad:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10d0b1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10d0b5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10d0b9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10d0bd:	e8 82 65 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  10d0c2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10d0c6:	48 8b 02             	mov    (%rdx),%rax
  10d0c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10d0cd:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d0d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	long[] s2 = *cast(long[]*)p2;
  10d0d5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10d0d9:	48 8b 02             	mov    (%rdx),%rax
  10d0dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10d0e0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d0e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  10d0e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10d0ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d0f0:	48 39 c2             	cmp    %rax,%rdx
  10d0f3:	75 2a                	jne    10d11f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  10d0f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10d0f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  10d100:	00 
  10d101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d105:	48 89 c6             	mov    %rax,%rsi
  10d108:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10d10c:	48 89 c7             	mov    %rax,%rdi
  10d10f:	e8 0a 86 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  10d114:	48 85 c0             	test   %rax,%rax
  10d117:	75 06                	jne    10d11f <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7a>
  10d119:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  10d11d:	eb 04                	jmp    10d123 <_D3std8typeinfo8ti_Along11TypeInfo_Al6equalsMFPvPvZi+0x7e>
  10d11f:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  10d123:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * long.sizeof) == 0;
    }
  10d127:	c9                   	leaveq 
  10d128:	c3                   	retq   

000000000010d129 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10d129:	55                   	push   %rbp
  10d12a:	48 89 e5             	mov    %rsp,%rbp
  10d12d:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  10d134:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  10d138:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  10d13c:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10d143:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  10d147:	e8 f8 64 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long[] s1 = *cast(long[]*)p1;
  10d14c:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  10d150:	48 8b 02             	mov    (%rdx),%rax
  10d153:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10d157:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d15b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	long[] s2 = *cast(long[]*)p2;
  10d15f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  10d166:	48 8b 02             	mov    (%rdx),%rax
  10d169:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10d16d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d171:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  10d175:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d179:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  10d17d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d181:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10d185:	73 08                	jae    10d18f <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x66>
	    len = s2.length;
  10d187:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d18b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  10d18f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  10d196:	00 
  10d197:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d19b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10d19f:	0f 92 c0             	setb   %al
  10d1a2:	83 f0 01             	xor    $0x1,%eax
  10d1a5:	84 c0                	test   %al,%al
  10d1a7:	0f 85 a8 01 00 00    	jne    10d355 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  10d1ad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10d1b1:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  10d1b8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d1bc:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d1c0:	73 0d                	jae    10d1cf <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xa6>
  10d1c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d1c6:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  10d1cd:	eb 22                	jmp    10d1f1 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0xc8>
  10d1cf:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  10d1d6:	00 
  10d1d7:	48 c7 45 b8 67 89 11 	movq   $0x118967,-0x48(%rbp)
  10d1de:	00 
  10d1df:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10d1e3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10d1e7:	ba 30 00 00 00       	mov    $0x30,%edx
  10d1ec:	e8 44 7b 00 00       	callq  114d35 <_d_array_bounds>
  10d1f1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  10d1f8:	48 c1 e0 03          	shl    $0x3,%rax
  10d1fc:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  10d203:	48 8b 00             	mov    (%rax),%rax
  10d206:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  10d20d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d211:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  10d218:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d21c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d220:	73 0d                	jae    10d22f <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x106>
  10d222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d226:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10d22d:	eb 22                	jmp    10d251 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x128>
  10d22f:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  10d236:	00 
  10d237:	48 c7 45 c8 67 89 11 	movq   $0x118967,-0x38(%rbp)
  10d23e:	00 
  10d23f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10d243:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10d247:	ba 30 00 00 00       	mov    $0x30,%edx
  10d24c:	e8 e4 7a 00 00       	callq  114d35 <_d_array_bounds>
  10d251:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  10d258:	48 c1 e0 03          	shl    $0x3,%rax
  10d25c:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  10d263:	48 8b 00             	mov    (%rax),%rax
  10d266:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  10d26d:	7d 0f                	jge    10d27e <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x155>
		return -1;
  10d26f:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  10d276:	ff ff ff 
  10d279:	e9 13 01 00 00       	jmpq   10d391 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  10d27e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10d282:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10d289:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d28d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d291:	73 0d                	jae    10d2a0 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x177>
  10d293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d297:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10d29e:	eb 22                	jmp    10d2c2 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x199>
  10d2a0:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  10d2a7:	00 
  10d2a8:	48 c7 45 d8 67 89 11 	movq   $0x118967,-0x28(%rbp)
  10d2af:	00 
  10d2b0:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10d2b4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10d2b8:	ba 32 00 00 00       	mov    $0x32,%edx
  10d2bd:	e8 73 7a 00 00       	callq  114d35 <_d_array_bounds>
  10d2c2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10d2c9:	48 c1 e0 03          	shl    $0x3,%rax
  10d2cd:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10d2d4:	48 8b 00             	mov    (%rax),%rax
  10d2d7:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10d2de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d2e2:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10d2e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d2ed:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d2f1:	73 0d                	jae    10d300 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1d7>
  10d2f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d2f7:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10d2fe:	eb 22                	jmp    10d322 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x1f9>
  10d300:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  10d307:	00 
  10d308:	48 c7 45 e8 67 89 11 	movq   $0x118967,-0x18(%rbp)
  10d30f:	00 
  10d310:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10d314:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10d318:	ba 32 00 00 00       	mov    $0x32,%edx
  10d31d:	e8 13 7a 00 00       	callq  114d35 <_d_array_bounds>
  10d322:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10d329:	48 c1 e0 03          	shl    $0x3,%rax
  10d32d:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  10d334:	48 8b 00             	mov    (%rax),%rax
  10d337:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  10d33e:	7e 0c                	jle    10d34c <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x223>
		return 1;
  10d340:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10d347:	00 00 00 
  10d34a:	eb 45                	jmp    10d391 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  10d34c:	48 ff 45 f8          	incq   -0x8(%rbp)
  10d350:	e9 42 fe ff ff       	jmpq   10d197 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  10d355:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d359:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d35d:	48 39 c2             	cmp    %rax,%rdx
  10d360:	73 0c                	jae    10d36e <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x245>
	    return -1;
  10d362:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  10d369:	ff ff ff 
  10d36c:	eb 23                	jmp    10d391 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  10d36e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d372:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d376:	48 39 c2             	cmp    %rax,%rdx
  10d379:	76 0c                	jbe    10d387 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x25e>
	    return 1;
  10d37b:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10d382:	00 00 00 
  10d385:	eb 0a                	jmp    10d391 <_D3std8typeinfo8ti_Along11TypeInfo_Al7compareMFPvPvZi+0x268>
	return 0;
  10d387:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10d38e:	00 00 00 
  10d391:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  10d397:	c9                   	leaveq 
  10d398:	c3                   	retq   

000000000010d399 <_D3std8typeinfo8ti_Along11TypeInfo_Al5tsizeMFZm>:

    size_t tsize()
  10d399:	55                   	push   %rbp
  10d39a:	48 89 e5             	mov    %rsp,%rbp
  10d39d:	48 83 ec 10          	sub    $0x10,%rsp
  10d3a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10d3a5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10d3a9:	e8 96 62 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (long[]).sizeof;
  10d3ae:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10d3b3:	c9                   	leaveq 
  10d3b4:	c3                   	retq   

000000000010d3b5 <_D3std8typeinfo8ti_Along11TypeInfo_Al5flagsMFZk>:

    uint flags()
  10d3b5:	55                   	push   %rbp
  10d3b6:	48 89 e5             	mov    %rsp,%rbp
  10d3b9:	48 83 ec 10          	sub    $0x10,%rsp
  10d3bd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10d3c1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10d3c5:	e8 7a 62 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10d3ca:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10d3cf:	c9                   	leaveq 
  10d3d0:	c3                   	retq   

000000000010d3d1 <_D3std8typeinfo8ti_Along11TypeInfo_Al4nextMFZC8TypeInfo>:

    TypeInfo next()
  10d3d1:	55                   	push   %rbp
  10d3d2:	48 89 e5             	mov    %rsp,%rbp
  10d3d5:	48 83 ec 10          	sub    $0x10,%rsp
  10d3d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10d3dd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10d3e1:	e8 5e 62 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(long);
  10d3e6:	b8 90 98 11 00       	mov    $0x119890,%eax
    }
  10d3eb:	c9                   	leaveq 
  10d3ec:	c3                   	retq   

000000000010d3ed <_D3std8typeinfo8ti_Along11TypeInfo_Am8toStringMFZAa>:

// ulong[]

class TypeInfo_Am : TypeInfo_Al
{
    char[] toString() { return "ulong[]"; }
  10d3ed:	55                   	push   %rbp
  10d3ee:	48 89 e5             	mov    %rsp,%rbp
  10d3f1:	53                   	push   %rbx
  10d3f2:	48 83 ec 08          	sub    $0x8,%rsp
  10d3f6:	48 89 fb             	mov    %rdi,%rbx
  10d3f9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10d3fd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10d401:	e8 3e 62 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10d406:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10d40d:	48 c7 43 08 10 8a 11 	movq   $0x118a10,0x8(%rbx)
  10d414:	00 
  10d415:	48 89 d8             	mov    %rbx,%rax
  10d418:	48 83 c4 08          	add    $0x8,%rsp
  10d41c:	5b                   	pop    %rbx
  10d41d:	c9                   	leaveq 
  10d41e:	c3                   	retq   

000000000010d41f <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10d41f:	55                   	push   %rbp
  10d420:	48 89 e5             	mov    %rsp,%rbp
  10d423:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  10d42a:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  10d42e:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  10d432:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10d439:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  10d43d:	e8 02 62 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong[] s1 = *cast(ulong[]*)p1;
  10d442:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  10d446:	48 8b 02             	mov    (%rdx),%rax
  10d449:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10d44d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d451:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ulong[] s2 = *cast(ulong[]*)p2;
  10d455:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  10d45c:	48 8b 02             	mov    (%rdx),%rax
  10d45f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10d463:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d467:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	size_t len = s1.length;
  10d46b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d46f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if (s2.length < len)
  10d473:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d477:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10d47b:	73 08                	jae    10d485 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x66>
	    len = s2.length;
  10d47d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d481:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	for (size_t u = 0; u < len; u++)
  10d485:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  10d48c:	00 
  10d48d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d491:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10d495:	0f 92 c0             	setb   %al
  10d498:	83 f0 01             	xor    $0x1,%eax
  10d49b:	84 c0                	test   %al,%al
  10d49d:	0f 85 a8 01 00 00    	jne    10d64b <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x22c>
	{
	    if (s1[u] < s2[u])
  10d4a3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10d4a7:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  10d4ae:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d4b2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d4b6:	73 0d                	jae    10d4c5 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xa6>
  10d4b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d4bc:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  10d4c3:	eb 22                	jmp    10d4e7 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0xc8>
  10d4c5:	48 c7 45 b0 17 00 00 	movq   $0x17,-0x50(%rbp)
  10d4cc:	00 
  10d4cd:	48 c7 45 b8 67 89 11 	movq   $0x118967,-0x48(%rbp)
  10d4d4:	00 
  10d4d5:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  10d4d9:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10d4dd:	ba 5d 00 00 00       	mov    $0x5d,%edx
  10d4e2:	e8 4e 78 00 00       	callq  114d35 <_d_array_bounds>
  10d4e7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  10d4ee:	48 c1 e0 03          	shl    $0x3,%rax
  10d4f2:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  10d4f9:	48 8b 00             	mov    (%rax),%rax
  10d4fc:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  10d503:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d507:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  10d50e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d512:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d516:	73 0d                	jae    10d525 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x106>
  10d518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d51c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10d523:	eb 22                	jmp    10d547 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x128>
  10d525:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  10d52c:	00 
  10d52d:	48 c7 45 c8 67 89 11 	movq   $0x118967,-0x38(%rbp)
  10d534:	00 
  10d535:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10d539:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10d53d:	ba 5d 00 00 00       	mov    $0x5d,%edx
  10d542:	e8 ee 77 00 00       	callq  114d35 <_d_array_bounds>
  10d547:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  10d54e:	48 c1 e0 03          	shl    $0x3,%rax
  10d552:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  10d559:	48 8b 00             	mov    (%rax),%rax
  10d55c:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  10d563:	73 0f                	jae    10d574 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x155>
		return -1;
  10d565:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  10d56c:	ff ff ff 
  10d56f:	e9 13 01 00 00       	jmpq   10d687 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	    else if (s1[u] > s2[u])
  10d574:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10d578:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10d57f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10d583:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d587:	73 0d                	jae    10d596 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x177>
  10d589:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d58d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10d594:	eb 22                	jmp    10d5b8 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x199>
  10d596:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  10d59d:	00 
  10d59e:	48 c7 45 d8 67 89 11 	movq   $0x118967,-0x28(%rbp)
  10d5a5:	00 
  10d5a6:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10d5aa:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10d5ae:	ba 5f 00 00 00       	mov    $0x5f,%edx
  10d5b3:	e8 7d 77 00 00       	callq  114d35 <_d_array_bounds>
  10d5b8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10d5bf:	48 c1 e0 03          	shl    $0x3,%rax
  10d5c3:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10d5ca:	48 8b 00             	mov    (%rax),%rax
  10d5cd:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10d5d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d5d8:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10d5df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d5e3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  10d5e7:	73 0d                	jae    10d5f6 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1d7>
  10d5e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10d5ed:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10d5f4:	eb 22                	jmp    10d618 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x1f9>
  10d5f6:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  10d5fd:	00 
  10d5fe:	48 c7 45 e8 67 89 11 	movq   $0x118967,-0x18(%rbp)
  10d605:	00 
  10d606:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  10d60a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10d60e:	ba 5f 00 00 00       	mov    $0x5f,%edx
  10d613:	e8 1d 77 00 00       	callq  114d35 <_d_array_bounds>
  10d618:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10d61f:	48 c1 e0 03          	shl    $0x3,%rax
  10d623:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  10d62a:	48 8b 00             	mov    (%rax),%rax
  10d62d:	48 39 85 60 ff ff ff 	cmp    %rax,-0xa0(%rbp)
  10d634:	76 0c                	jbe    10d642 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x223>
		return 1;
  10d636:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10d63d:	00 00 00 
  10d640:	eb 45                	jmp    10d687 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>

	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    if (s1[u] < s2[u])
  10d642:	48 ff 45 f8          	incq   -0x8(%rbp)
  10d646:	e9 42 fe ff ff       	jmpq   10d48d <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x6e>
		return -1;
	    else if (s1[u] > s2[u])
		return 1;
	}
	if (s1.length < s2.length)
  10d64b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d64f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d653:	48 39 c2             	cmp    %rax,%rdx
  10d656:	73 0c                	jae    10d664 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x245>
	    return -1;
  10d658:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%rbp)
  10d65f:	ff ff ff 
  10d662:	eb 23                	jmp    10d687 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	else if (s1.length > s2.length)
  10d664:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d668:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d66c:	48 39 c2             	cmp    %rax,%rdx
  10d66f:	76 0c                	jbe    10d67d <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x25e>
	    return 1;
  10d671:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10d678:	00 00 00 
  10d67b:	eb 0a                	jmp    10d687 <_D3std8typeinfo8ti_Along11TypeInfo_Am7compareMFPvPvZi+0x268>
	return 0;
  10d67d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10d684:	00 00 00 
  10d687:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  10d68d:	c9                   	leaveq 
  10d68e:	c3                   	retq   

000000000010d68f <_D3std8typeinfo8ti_Along11TypeInfo_Am4nextMFZC8TypeInfo>:

    TypeInfo next()
  10d68f:	55                   	push   %rbp
  10d690:	48 89 e5             	mov    %rsp,%rbp
  10d693:	48 83 ec 10          	sub    $0x10,%rsp
  10d697:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10d69b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10d69f:	e8 a0 5f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ulong);
  10d6a4:	b8 90 9d 11 00       	mov    $0x119d90,%eax
    }
  10d6a9:	c9                   	leaveq 
  10d6aa:	c3                   	retq   
  10d6ab:	90                   	nop    

000000000010d6ac <_D3std8typeinfo8ti_Areal11TypeInfo_Ae8toStringMFZAa>:

// real[]

class TypeInfo_Ae : TypeInfo
{
    char[] toString() { return "real[]"; }
  10d6ac:	55                   	push   %rbp
  10d6ad:	48 89 e5             	mov    %rsp,%rbp
  10d6b0:	53                   	push   %rbx
  10d6b1:	48 83 ec 08          	sub    $0x8,%rsp
  10d6b5:	48 89 fb             	mov    %rdi,%rbx
  10d6b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10d6bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10d6c0:	e8 7f 5f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10d6c5:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10d6cc:	48 c7 43 08 c0 8a 11 	movq   $0x118ac0,0x8(%rbx)
  10d6d3:	00 
  10d6d4:	48 89 d8             	mov    %rbx,%rax
  10d6d7:	48 83 c4 08          	add    $0x8,%rsp
  10d6db:	5b                   	pop    %rbx
  10d6dc:	c9                   	leaveq 
  10d6dd:	c3                   	retq   

000000000010d6de <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm>:

    hash_t getHash(void *p)
  10d6de:	55                   	push   %rbp
  10d6df:	48 89 e5             	mov    %rsp,%rbp
  10d6e2:	48 83 ec 40          	sub    $0x40,%rsp
  10d6e6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10d6ea:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10d6ee:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10d6f2:	e8 4d 5f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	real[] s = *cast(real[]*)p;
  10d6f7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10d6fb:	48 8b 02             	mov    (%rdx),%rax
  10d6fe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10d702:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d706:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10d70a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10d70e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto str = s.ptr;
  10d712:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10d716:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10d71a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10d721:	00 

	while (len)
  10d722:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10d727:	0f 95 c0             	setne  %al
  10d72a:	83 f0 01             	xor    $0x1,%eax
  10d72d:	84 c0                	test   %al,%al
  10d72f:	75 5e                	jne    10d78f <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0xb1>
	{
	    hash *= 9;
  10d731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10d735:	48 89 d0             	mov    %rdx,%rax
  10d738:	48 c1 e0 03          	shl    $0x3,%rax
  10d73c:	48 01 d0             	add    %rdx,%rax
  10d73f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[0];
  10d743:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10d747:	b8 00 00 00 00       	mov    $0x0,%eax
  10d74c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10d750:	8b 00                	mov    (%rax),%eax
  10d752:	89 c0                	mov    %eax,%eax
  10d754:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(uint *)str)[1];
  10d758:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10d75c:	b8 04 00 00 00       	mov    $0x4,%eax
  10d761:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10d765:	8b 00                	mov    (%rax),%eax
  10d767:	89 c0                	mov    %eax,%eax
  10d769:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    hash += (cast(ushort *)str)[4];
  10d76d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10d771:	b8 08 00 00 00       	mov    $0x8,%eax
  10d776:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10d77a:	0f b7 00             	movzwl (%rax),%eax
  10d77d:	0f b7 c0             	movzwl %ax,%eax
  10d780:	48 01 45 e8          	add    %rax,-0x18(%rbp)
	    str++;
  10d784:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
	    len--;
  10d789:	48 ff 4d f8          	decq   -0x8(%rbp)
  10d78d:	eb 93                	jmp    10d722 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7getHashMFPvZm+0x44>
	}

	return hash;
  10d78f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    }
  10d793:	c9                   	leaveq 
  10d794:	c3                   	retq   

000000000010d795 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10d795:	55                   	push   %rbp
  10d796:	48 89 e5             	mov    %rsp,%rbp
  10d799:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  10d7a0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10d7a4:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10d7a8:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10d7ac:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10d7b0:	e8 8f 5e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  10d7b5:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d7b9:	48 8b 02             	mov    (%rdx),%rax
  10d7bc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10d7c0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d7c4:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  10d7c8:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10d7cc:	48 8b 02             	mov    (%rdx),%rax
  10d7cf:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10d7d3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d7d7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10d7db:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d7df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (len != s2.length)
  10d7e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10d7e7:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  10d7eb:	74 0f                	je     10d7fc <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x67>
	    return 0;
  10d7ed:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10d7f4:	00 00 00 
  10d7f7:	e9 11 01 00 00       	jmpq   10d90d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	for (size_t u = 0; u < len; u++)
  10d7fc:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10d803:	00 
  10d804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d808:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10d80c:	0f 92 c0             	setb   %al
  10d80f:	83 f0 01             	xor    $0x1,%eax
  10d812:	84 c0                	test   %al,%al
  10d814:	0f 85 e9 00 00 00    	jne    10d903 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x16e>
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
  10d81a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10d81e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10d825:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10d829:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10d82d:	73 0d                	jae    10d83c <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xa7>
  10d82f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d833:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10d83a:	eb 22                	jmp    10d85e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0xc9>
  10d83c:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  10d843:	00 
  10d844:	48 c7 45 c8 c7 8a 11 	movq   $0x118ac7,-0x38(%rbp)
  10d84b:	00 
  10d84c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10d850:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10d854:	ba 3f 00 00 00       	mov    $0x3f,%edx
  10d859:	e8 d7 74 00 00       	callq  114d35 <_d_array_bounds>
  10d85e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10d865:	48 c1 e0 04          	shl    $0x4,%rax
  10d869:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10d870:	db 28                	fldt   (%rax)
  10d872:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  10d878:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d87c:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10d883:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d887:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10d88b:	73 0a                	jae    10d897 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x102>
  10d88d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d891:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  10d895:	eb 22                	jmp    10d8b9 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x124>
  10d897:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  10d89e:	00 
  10d89f:	48 c7 45 d8 c7 8a 11 	movq   $0x118ac7,-0x28(%rbp)
  10d8a6:	00 
  10d8a7:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10d8ab:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10d8af:	ba 3f 00 00 00       	mov    $0x3f,%edx
  10d8b4:	e8 7c 74 00 00       	callq  114d35 <_d_array_bounds>
  10d8b9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10d8bd:	48 c1 e0 04          	shl    $0x4,%rax
  10d8c1:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  10d8c8:	8b 50 08             	mov    0x8(%rax),%edx
  10d8cb:	48 8b 00             	mov    (%rax),%rax
  10d8ce:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  10d8d4:	db 7c 24 10          	fstpt  0x10(%rsp)
  10d8d8:	48 89 04 24          	mov    %rax,(%rsp)
  10d8dc:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10d8e0:	e8 50 22 00 00       	callq  10fb35 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
  10d8e5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c == 0)
  10d8e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10d8ec:	75 0c                	jne    10d8fa <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x165>
		return 0;
  10d8ee:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
  10d8f5:	00 00 00 
  10d8f8:	eb 13                	jmp    10d90d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x178>
	if (len != s2.length)
	    return 0;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._equals(s1[u], s2[u]);
	    if (c == 0)
  10d8fa:	48 ff 45 f0          	incq   -0x10(%rbp)
  10d8fe:	e9 01 ff ff ff       	jmpq   10d804 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae6equalsMFPvPvZi+0x6f>
		return 0;
	}
	return 1;
  10d903:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%rbp)
  10d90a:	00 00 00 
  10d90d:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    }
  10d913:	c9                   	leaveq 
  10d914:	c3                   	retq   

000000000010d915 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10d915:	55                   	push   %rbp
  10d916:	48 89 e5             	mov    %rsp,%rbp
  10d919:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10d920:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10d924:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10d928:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10d92c:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10d930:	e8 0f 5d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real[] s1 = *cast(real[]*)p1;
  10d935:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10d939:	48 8b 02             	mov    (%rdx),%rax
  10d93c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10d940:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d944:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	real[] s2 = *cast(real[]*)p2;
  10d948:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10d94c:	48 8b 02             	mov    (%rdx),%rax
  10d94f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10d953:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10d957:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10d95b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10d95f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10d963:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10d967:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10d96b:	73 08                	jae    10d975 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x60>
	    len = s2.length;
  10d96d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10d971:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10d975:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10d97c:	00 
  10d97d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d981:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10d985:	0f 92 c0             	setb   %al
  10d988:	83 f0 01             	xor    $0x1,%eax
  10d98b:	84 c0                	test   %al,%al
  10d98d:	0f 85 eb 00 00 00    	jne    10da7e <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x169>
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
  10d993:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10d997:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  10d99e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10d9a2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10d9a6:	73 0d                	jae    10d9b5 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xa0>
  10d9a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10d9ac:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10d9b3:	eb 22                	jmp    10d9d7 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xc2>
  10d9b5:	48 c7 45 c0 17 00 00 	movq   $0x17,-0x40(%rbp)
  10d9bc:	00 
  10d9bd:	48 c7 45 c8 c7 8a 11 	movq   $0x118ac7,-0x38(%rbp)
  10d9c4:	00 
  10d9c5:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10d9c9:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10d9cd:	ba 50 00 00 00       	mov    $0x50,%edx
  10d9d2:	e8 5e 73 00 00       	callq  114d35 <_d_array_bounds>
  10d9d7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10d9de:	48 c1 e0 04          	shl    $0x4,%rax
  10d9e2:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  10d9e9:	db 28                	fldt   (%rax)
  10d9eb:	db bd 60 ff ff ff    	fstpt  -0xa0(%rbp)
  10d9f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10d9f5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10d9fc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10da00:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10da04:	73 0d                	jae    10da13 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0xfe>
  10da06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10da0a:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  10da11:	eb 22                	jmp    10da35 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x120>
  10da13:	48 c7 45 d0 17 00 00 	movq   $0x17,-0x30(%rbp)
  10da1a:	00 
  10da1b:	48 c7 45 d8 c7 8a 11 	movq   $0x118ac7,-0x28(%rbp)
  10da22:	00 
  10da23:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10da27:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10da2b:	ba 50 00 00 00       	mov    $0x50,%edx
  10da30:	e8 00 73 00 00       	callq  114d35 <_d_array_bounds>
  10da35:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10da3c:	48 c1 e0 04          	shl    $0x4,%rax
  10da40:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10da47:	8b 50 08             	mov    0x8(%rax),%edx
  10da4a:	48 8b 00             	mov    (%rax),%rax
  10da4d:	db ad 60 ff ff ff    	fldt   -0xa0(%rbp)
  10da53:	db 7c 24 10          	fstpt  0x10(%rsp)
  10da57:	48 89 04 24          	mov    %rax,(%rsp)
  10da5b:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10da5f:	e8 29 21 00 00       	callq  10fb8d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
  10da64:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (c)
  10da67:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10da6b:	74 08                	je     10da75 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x160>
		return c;
  10da6d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10da70:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10da73:	eb 3c                	jmp    10dab1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int c = TypeInfo_e._compare(s1[u], s2[u]);
	    if (c)
  10da75:	48 ff 45 f0          	incq   -0x10(%rbp)
  10da79:	e9 ff fe ff ff       	jmpq   10d97d <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x68>
		return c;
	}
	if (s1.length < s2.length)
  10da7e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10da82:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10da86:	48 39 c2             	cmp    %rax,%rdx
  10da89:	73 09                	jae    10da94 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x17f>
	    return -1;
  10da8b:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10da92:	eb 1d                	jmp    10dab1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	else if (s1.length > s2.length)
  10da94:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10da98:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10da9c:	48 39 c2             	cmp    %rax,%rdx
  10da9f:	76 09                	jbe    10daaa <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x195>
	    return 1;
  10daa1:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10daa8:	eb 07                	jmp    10dab1 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae7compareMFPvPvZi+0x19c>
	return 0;
  10daaa:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10dab1:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10dab4:	c9                   	leaveq 
  10dab5:	c3                   	retq   

000000000010dab6 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5tsizeMFZm>:

    size_t tsize()
  10dab6:	55                   	push   %rbp
  10dab7:	48 89 e5             	mov    %rsp,%rbp
  10daba:	48 83 ec 10          	sub    $0x10,%rsp
  10dabe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10dac2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10dac6:	e8 79 5b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (real[]).sizeof;
  10dacb:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10dad0:	c9                   	leaveq 
  10dad1:	c3                   	retq   

000000000010dad2 <_D3std8typeinfo8ti_Areal11TypeInfo_Ae5flagsMFZk>:

    uint flags()
  10dad2:	55                   	push   %rbp
  10dad3:	48 89 e5             	mov    %rsp,%rbp
  10dad6:	48 83 ec 10          	sub    $0x10,%rsp
  10dada:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10dade:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10dae2:	e8 5d 5b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10dae7:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10daec:	c9                   	leaveq 
  10daed:	c3                   	retq   

000000000010daee <_D3std8typeinfo8ti_Areal11TypeInfo_Ae4nextMFZC8TypeInfo>:

    TypeInfo next()
  10daee:	55                   	push   %rbp
  10daef:	48 89 e5             	mov    %rsp,%rbp
  10daf2:	48 83 ec 10          	sub    $0x10,%rsp
  10daf6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10dafa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10dafe:	e8 41 5b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(real);
  10db03:	b8 f0 99 11 00       	mov    $0x1199f0,%eax
    }
  10db08:	c9                   	leaveq 
  10db09:	c3                   	retq   

000000000010db0a <_D3std8typeinfo8ti_Areal11TypeInfo_Aj8toStringMFZAa>:

// ireal[]

class TypeInfo_Aj : TypeInfo_Ae
{
    char[] toString() { return "ireal[]"; }
  10db0a:	55                   	push   %rbp
  10db0b:	48 89 e5             	mov    %rsp,%rbp
  10db0e:	53                   	push   %rbx
  10db0f:	48 83 ec 08          	sub    $0x8,%rsp
  10db13:	48 89 fb             	mov    %rdi,%rbx
  10db16:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10db1a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10db1e:	e8 21 5b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10db23:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10db2a:	48 c7 43 08 70 8b 11 	movq   $0x118b70,0x8(%rbx)
  10db31:	00 
  10db32:	48 89 d8             	mov    %rbx,%rax
  10db35:	48 83 c4 08          	add    $0x8,%rsp
  10db39:	5b                   	pop    %rbx
  10db3a:	c9                   	leaveq 
  10db3b:	c3                   	retq   

000000000010db3c <_D3std8typeinfo8ti_Areal11TypeInfo_Aj4nextMFZC8TypeInfo>:

    TypeInfo next()
  10db3c:	55                   	push   %rbp
  10db3d:	48 89 e5             	mov    %rsp,%rbp
  10db40:	48 83 ec 10          	sub    $0x10,%rsp
  10db44:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10db48:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10db4c:	e8 f3 5a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ireal);
  10db51:	b8 d0 97 11 00       	mov    $0x1197d0,%eax
    }
  10db56:	c9                   	leaveq 
  10db57:	c3                   	retq   

000000000010db58 <_D3std8typeinfo9ti_Ashort11TypeInfo_As8toStringMFZAa>:

// short[]

class TypeInfo_As : TypeInfo
{
    char[] toString() { return "short[]"; }
  10db58:	55                   	push   %rbp
  10db59:	48 89 e5             	mov    %rsp,%rbp
  10db5c:	53                   	push   %rbx
  10db5d:	48 83 ec 08          	sub    $0x8,%rsp
  10db61:	48 89 fb             	mov    %rdi,%rbx
  10db64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10db68:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10db6c:	e8 d3 5a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10db71:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10db78:	48 c7 43 08 20 8c 11 	movq   $0x118c20,0x8(%rbx)
  10db7f:	00 
  10db80:	48 89 d8             	mov    %rbx,%rax
  10db83:	48 83 c4 08          	add    $0x8,%rsp
  10db87:	5b                   	pop    %rbx
  10db88:	c9                   	leaveq 
  10db89:	c3                   	retq   

000000000010db8a <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm>:

    hash_t getHash(void *p)
  10db8a:	55                   	push   %rbp
  10db8b:	48 89 e5             	mov    %rsp,%rbp
  10db8e:	48 83 ec 50          	sub    $0x50,%rsp
  10db92:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10db96:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10db9a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10db9e:	e8 a1 5a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	short[] s = *cast(short[]*)p;
  10dba3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  10dba7:	48 8b 02             	mov    (%rdx),%rax
  10dbaa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10dbae:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10dbb2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	size_t len = s.length;
  10dbb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10dbba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	short *str = s.ptr;
  10dbbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10dbc2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	hash_t hash = 0;
  10dbc6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  10dbcd:	00 

	while (1)
  10dbce:	b8 00 00 00 00       	mov    $0x0,%eax
  10dbd3:	84 c0                	test   %al,%al
  10dbd5:	75 76                	jne    10dc4d <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xc3>
		default:
		    hash *= 9;
		    hash += *cast(uint *)str;
		    str += 2;
		    len -= 2;
		    break;
  10dbd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10dbdb:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10dbdf:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  10dbe4:	74 09                	je     10dbef <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x65>
  10dbe6:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
  10dbeb:	74 0c                	je     10dbf9 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x6f>
  10dbed:	eb 34                	jmp    10dc23 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x99>
	while (1)
	{
	    switch (len)
	    {
		case 0:
		    return hash;
  10dbef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10dbf3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10dbf7:	eb 5c                	jmp    10dc55 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		case 1:
		    hash *= 9;
  10dbf9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10dbfd:	48 89 d0             	mov    %rdx,%rax
  10dc00:	48 c1 e0 03          	shl    $0x3,%rax
  10dc04:	48 01 d0             	add    %rdx,%rax
  10dc07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(ushort *)str;
  10dc0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10dc0f:	0f b7 00             	movzwl (%rax),%eax
  10dc12:	0f b7 c0             	movzwl %ax,%eax
  10dc15:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    return hash;
  10dc19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10dc1d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10dc21:	eb 32                	jmp    10dc55 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0xcb>

		default:
		    hash *= 9;
  10dc23:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10dc27:	48 89 d0             	mov    %rdx,%rax
  10dc2a:	48 c1 e0 03          	shl    $0x3,%rax
  10dc2e:	48 01 d0             	add    %rdx,%rax
  10dc31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		    hash += *cast(uint *)str;
  10dc35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10dc39:	8b 00                	mov    (%rax),%eax
  10dc3b:	89 c0                	mov    %eax,%eax
  10dc3d:	48 01 45 e8          	add    %rax,-0x18(%rbp)
		    str += 2;
  10dc41:	48 83 45 f0 04       	addq   $0x4,-0x10(%rbp)
		    len -= 2;
  10dc46:	48 83 6d f8 02       	subq   $0x2,-0x8(%rbp)
		    break;
  10dc4b:	eb 81                	jmp    10dbce <_D3std8typeinfo9ti_Ashort11TypeInfo_As7getHashMFPvZm+0x44>
	    }
	}

	return hash;
  10dc4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10dc51:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10dc55:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    }
  10dc59:	c9                   	leaveq 
  10dc5a:	c3                   	retq   

000000000010dc5b <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10dc5b:	55                   	push   %rbp
  10dc5c:	48 89 e5             	mov    %rsp,%rbp
  10dc5f:	48 83 ec 40          	sub    $0x40,%rsp
  10dc63:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10dc67:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10dc6b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10dc6f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10dc73:	e8 cc 59 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  10dc78:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10dc7c:	48 8b 02             	mov    (%rdx),%rax
  10dc7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10dc83:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10dc87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	short[] s2 = *cast(short[]*)p2;
  10dc8b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10dc8f:	48 8b 02             	mov    (%rdx),%rax
  10dc92:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10dc96:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10dc9a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return s1.length == s2.length &&
  10dc9e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10dca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10dca6:	48 39 c2             	cmp    %rax,%rdx
  10dca9:	75 26                	jne    10dcd1 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  10dcab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10dcaf:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  10dcb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10dcb7:	48 89 c6             	mov    %rax,%rsi
  10dcba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10dcbe:	48 89 c7             	mov    %rax,%rdi
  10dcc1:	e8 58 7a ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  10dcc6:	48 85 c0             	test   %rax,%rax
  10dcc9:	75 06                	jne    10dcd1 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x76>
  10dccb:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  10dccf:	eb 04                	jmp    10dcd5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As6equalsMFPvPvZi+0x7a>
  10dcd1:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  10dcd5:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	       memcmp(cast(ubyte*)s1.ptr, cast(ubyte*)s2.ptr, s1.length * short.sizeof) == 0;
    }
  10dcd9:	c9                   	leaveq 
  10dcda:	c3                   	retq   

000000000010dcdb <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10dcdb:	55                   	push   %rbp
  10dcdc:	48 89 e5             	mov    %rsp,%rbp
  10dcdf:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10dce6:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10dcea:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10dcee:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10dcf2:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10dcf6:	e8 49 59 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short[] s1 = *cast(short[]*)p1;
  10dcfb:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10dcff:	48 8b 02             	mov    (%rdx),%rax
  10dd02:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10dd06:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10dd0a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	short[] s2 = *cast(short[]*)p2;
  10dd0e:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10dd12:	48 8b 02             	mov    (%rdx),%rax
  10dd15:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10dd19:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10dd1d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10dd21:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10dd25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10dd29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10dd2d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10dd31:	73 08                	jae    10dd3b <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x60>
	    len = s2.length;
  10dd33:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10dd37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10dd3b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10dd42:	00 
  10dd43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10dd47:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10dd4b:	0f 92 c0             	setb   %al
  10dd4e:	83 f0 01             	xor    $0x1,%eax
  10dd51:	84 c0                	test   %al,%al
  10dd53:	0f 85 dc 00 00 00    	jne    10de35 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x15a>
	{
	    int result = s1[u] - s2[u];
  10dd59:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10dd5d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10dd64:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10dd68:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10dd6c:	73 0d                	jae    10dd7b <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xa0>
  10dd6e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10dd72:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10dd79:	eb 22                	jmp    10dd9d <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xc2>
  10dd7b:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10dd82:	00 
  10dd83:	48 c7 45 c8 28 8c 11 	movq   $0x118c28,-0x38(%rbp)
  10dd8a:	00 
  10dd8b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10dd8f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10dd93:	ba 3d 00 00 00       	mov    $0x3d,%edx
  10dd98:	e8 98 6f 00 00       	callq  114d35 <_d_array_bounds>
  10dd9d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10dda4:	48 01 c0             	add    %rax,%rax
  10dda7:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10ddae:	0f b7 00             	movzwl (%rax),%eax
  10ddb1:	98                   	cwtl   
  10ddb2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  10ddb8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10ddbc:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10ddc3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ddc7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10ddcb:	73 0d                	jae    10ddda <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0xff>
  10ddcd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10ddd1:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10ddd8:	eb 22                	jmp    10ddfc <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x121>
  10ddda:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10dde1:	00 
  10dde2:	48 c7 45 d8 28 8c 11 	movq   $0x118c28,-0x28(%rbp)
  10dde9:	00 
  10ddea:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10ddee:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10ddf2:	ba 3d 00 00 00       	mov    $0x3d,%edx
  10ddf7:	e8 39 6f 00 00       	callq  114d35 <_d_array_bounds>
  10ddfc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10de03:	48 01 c0             	add    %rax,%rax
  10de06:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10de0d:	0f b7 00             	movzwl (%rax),%eax
  10de10:	98                   	cwtl   
  10de11:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  10de17:	29 c2                	sub    %eax,%edx
  10de19:	89 d0                	mov    %edx,%eax
  10de1b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  10de1e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10de22:	74 08                	je     10de2c <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x151>
		return result;
  10de24:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10de27:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10de2a:	eb 3c                	jmp    10de68 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  10de2c:	48 ff 45 f0          	incq   -0x10(%rbp)
  10de30:	e9 0e ff ff ff       	jmpq   10dd43 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  10de35:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10de39:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10de3d:	48 39 c2             	cmp    %rax,%rdx
  10de40:	73 09                	jae    10de4b <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x170>
	    return -1;
  10de42:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10de49:	eb 1d                	jmp    10de68 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	else if (s1.length > s2.length)
  10de4b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10de4f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10de53:	48 39 c2             	cmp    %rax,%rdx
  10de56:	76 09                	jbe    10de61 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x186>
	    return 1;
  10de58:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10de5f:	eb 07                	jmp    10de68 <_D3std8typeinfo9ti_Ashort11TypeInfo_As7compareMFPvPvZi+0x18d>
	return 0;
  10de61:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10de68:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10de6b:	c9                   	leaveq 
  10de6c:	c3                   	retq   

000000000010de6d <_D3std8typeinfo9ti_Ashort11TypeInfo_As5tsizeMFZm>:

    size_t tsize()
  10de6d:	55                   	push   %rbp
  10de6e:	48 89 e5             	mov    %rsp,%rbp
  10de71:	48 83 ec 10          	sub    $0x10,%rsp
  10de75:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10de79:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10de7d:	e8 c2 57 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (short[]).sizeof;
  10de82:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10de87:	c9                   	leaveq 
  10de88:	c3                   	retq   

000000000010de89 <_D3std8typeinfo9ti_Ashort11TypeInfo_As5flagsMFZk>:

    uint flags()
  10de89:	55                   	push   %rbp
  10de8a:	48 89 e5             	mov    %rsp,%rbp
  10de8d:	48 83 ec 10          	sub    $0x10,%rsp
  10de91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10de95:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10de99:	e8 a6 57 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10de9e:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10dea3:	c9                   	leaveq 
  10dea4:	c3                   	retq   

000000000010dea5 <_D3std8typeinfo9ti_Ashort11TypeInfo_As4nextMFZC8TypeInfo>:

    TypeInfo next()
  10dea5:	55                   	push   %rbp
  10dea6:	48 89 e5             	mov    %rsp,%rbp
  10dea9:	48 83 ec 10          	sub    $0x10,%rsp
  10dead:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10deb1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10deb5:	e8 8a 57 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(short);
  10deba:	b8 b0 9a 11 00       	mov    $0x119ab0,%eax
    }
  10debf:	c9                   	leaveq 
  10dec0:	c3                   	retq   

000000000010dec1 <_D3std8typeinfo9ti_Ashort11TypeInfo_At8toStringMFZAa>:

// ushort[]

class TypeInfo_At : TypeInfo_As
{
    char[] toString() { return "ushort[]"; }
  10dec1:	55                   	push   %rbp
  10dec2:	48 89 e5             	mov    %rsp,%rbp
  10dec5:	53                   	push   %rbx
  10dec6:	48 83 ec 08          	sub    $0x8,%rsp
  10deca:	48 89 fb             	mov    %rdi,%rbx
  10decd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ded1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10ded5:	e8 6a 57 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10deda:	48 c7 03 08 00 00 00 	movq   $0x8,(%rbx)
  10dee1:	48 c7 43 08 f0 8c 11 	movq   $0x118cf0,0x8(%rbx)
  10dee8:	00 
  10dee9:	48 89 d8             	mov    %rbx,%rax
  10deec:	48 83 c4 08          	add    $0x8,%rsp
  10def0:	5b                   	pop    %rbx
  10def1:	c9                   	leaveq 
  10def2:	c3                   	retq   

000000000010def3 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10def3:	55                   	push   %rbp
  10def4:	48 89 e5             	mov    %rsp,%rbp
  10def7:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  10defe:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  10df02:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10df06:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  10df0a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  10df0e:	e8 31 57 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort[] s1 = *cast(ushort[]*)p1;
  10df13:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10df17:	48 8b 02             	mov    (%rdx),%rax
  10df1a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10df1e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10df22:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	ushort[] s2 = *cast(ushort[]*)p2;
  10df26:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10df2a:	48 8b 02             	mov    (%rdx),%rax
  10df2d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10df31:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10df35:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	size_t len = s1.length;
  10df39:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10df3d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (s2.length < len)
  10df41:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10df45:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10df49:	73 08                	jae    10df53 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x60>
	    len = s2.length;
  10df4b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10df4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (size_t u = 0; u < len; u++)
  10df53:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10df5a:	00 
  10df5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10df5f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  10df63:	0f 92 c0             	setb   %al
  10df66:	83 f0 01             	xor    $0x1,%eax
  10df69:	84 c0                	test   %al,%al
  10df6b:	0f 85 e0 00 00 00    	jne    10e051 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x15e>
	{
	    int result = s1[u] - s2[u];
  10df71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  10df75:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10df7c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10df80:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10df84:	73 0d                	jae    10df93 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xa0>
  10df86:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10df8a:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10df91:	eb 22                	jmp    10dfb5 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0xc2>
  10df93:	48 c7 45 c0 18 00 00 	movq   $0x18,-0x40(%rbp)
  10df9a:	00 
  10df9b:	48 c7 45 c8 28 8c 11 	movq   $0x118c28,-0x38(%rbp)
  10dfa2:	00 
  10dfa3:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10dfa7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10dfab:	ba 69 00 00 00       	mov    $0x69,%edx
  10dfb0:	e8 80 6d 00 00       	callq  114d35 <_d_array_bounds>
  10dfb5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10dfbc:	48 01 c0             	add    %rax,%rax
  10dfbf:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  10dfc6:	0f b7 00             	movzwl (%rax),%eax
  10dfc9:	0f b7 c0             	movzwl %ax,%eax
  10dfcc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  10dfd2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10dfd6:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10dfdd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10dfe1:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  10dfe5:	73 0d                	jae    10dff4 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x101>
  10dfe7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10dfeb:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  10dff2:	eb 22                	jmp    10e016 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x123>
  10dff4:	48 c7 45 d0 18 00 00 	movq   $0x18,-0x30(%rbp)
  10dffb:	00 
  10dffc:	48 c7 45 d8 28 8c 11 	movq   $0x118c28,-0x28(%rbp)
  10e003:	00 
  10e004:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  10e008:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10e00c:	ba 69 00 00 00       	mov    $0x69,%edx
  10e011:	e8 1f 6d 00 00       	callq  114d35 <_d_array_bounds>
  10e016:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  10e01d:	48 01 c0             	add    %rax,%rax
  10e020:	48 03 85 70 ff ff ff 	add    -0x90(%rbp),%rax
  10e027:	0f b7 00             	movzwl (%rax),%eax
  10e02a:	0f b7 c0             	movzwl %ax,%eax
  10e02d:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  10e033:	29 c2                	sub    %eax,%edx
  10e035:	89 d0                	mov    %edx,%eax
  10e037:	89 45 fc             	mov    %eax,-0x4(%rbp)
	    if (result)
  10e03a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  10e03e:	74 08                	je     10e048 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x155>
		return result;
  10e040:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10e043:	89 45 84             	mov    %eax,-0x7c(%rbp)
  10e046:	eb 3c                	jmp    10e084 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	if (s2.length < len)
	    len = s2.length;
	for (size_t u = 0; u < len; u++)
	{
	    int result = s1[u] - s2[u];
	    if (result)
  10e048:	48 ff 45 f0          	incq   -0x10(%rbp)
  10e04c:	e9 0a ff ff ff       	jmpq   10df5b <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x68>
		return result;
	}
	if (s1.length < s2.length)
  10e051:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10e055:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10e059:	48 39 c2             	cmp    %rax,%rdx
  10e05c:	73 09                	jae    10e067 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x174>
	    return -1;
  10e05e:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
  10e065:	eb 1d                	jmp    10e084 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	else if (s1.length > s2.length)
  10e067:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  10e06b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10e06f:	48 39 c2             	cmp    %rax,%rdx
  10e072:	76 09                	jbe    10e07d <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x18a>
	    return 1;
  10e074:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
  10e07b:	eb 07                	jmp    10e084 <_D3std8typeinfo9ti_Ashort11TypeInfo_At7compareMFPvPvZi+0x191>
	return 0;
  10e07d:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  10e084:	8b 45 84             	mov    -0x7c(%rbp),%eax
    }
  10e087:	c9                   	leaveq 
  10e088:	c3                   	retq   

000000000010e089 <_D3std8typeinfo9ti_Ashort11TypeInfo_At4nextMFZC8TypeInfo>:

    TypeInfo next()
  10e089:	55                   	push   %rbp
  10e08a:	48 89 e5             	mov    %rsp,%rbp
  10e08d:	48 83 ec 10          	sub    $0x10,%rsp
  10e091:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e095:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e099:	e8 a6 55 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(ushort);
  10e09e:	b8 50 9e 11 00       	mov    $0x119e50,%eax
    }
  10e0a3:	c9                   	leaveq 
  10e0a4:	c3                   	retq   

000000000010e0a5 <_D3std8typeinfo9ti_Ashort11TypeInfo_Au8toStringMFZAa>:

// wchar[]

class TypeInfo_Au : TypeInfo_At
{
    char[] toString() { return "wchar[]"; }
  10e0a5:	55                   	push   %rbp
  10e0a6:	48 89 e5             	mov    %rsp,%rbp
  10e0a9:	53                   	push   %rbx
  10e0aa:	48 83 ec 08          	sub    $0x8,%rsp
  10e0ae:	48 89 fb             	mov    %rdi,%rbx
  10e0b1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e0b5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10e0b9:	e8 86 55 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10e0be:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10e0c5:	48 c7 43 08 90 8d 11 	movq   $0x118d90,0x8(%rbx)
  10e0cc:	00 
  10e0cd:	48 89 d8             	mov    %rbx,%rax
  10e0d0:	48 83 c4 08          	add    $0x8,%rsp
  10e0d4:	5b                   	pop    %rbx
  10e0d5:	c9                   	leaveq 
  10e0d6:	c3                   	retq   

000000000010e0d7 <_D3std8typeinfo9ti_Ashort11TypeInfo_Au4nextMFZC8TypeInfo>:

    TypeInfo next()
  10e0d7:	55                   	push   %rbp
  10e0d8:	48 89 e5             	mov    %rsp,%rbp
  10e0db:	48 83 ec 10          	sub    $0x10,%rsp
  10e0df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e0e3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e0e7:	e8 58 55 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return typeid(wchar);
  10e0ec:	b8 d0 9f 11 00       	mov    $0x119fd0,%eax
    }
  10e0f1:	c9                   	leaveq 
  10e0f2:	c3                   	retq   
  10e0f3:	90                   	nop    

000000000010e0f4 <_D3std8typeinfo4ti_C10TypeInfo_C7getHashMFPvZm>:

// Object

class TypeInfo_C : TypeInfo
{
    hash_t getHash(void *p)
  10e0f4:	55                   	push   %rbp
  10e0f5:	48 89 e5             	mov    %rsp,%rbp
  10e0f8:	48 83 ec 20          	sub    $0x20,%rsp
  10e0fc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10e100:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e104:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10e108:	e8 37 55 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o = *cast(Object*)p;
  10e10d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10e111:	48 8b 00             	mov    (%rax),%rax
  10e114:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(o);
  10e118:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e11c:	e8 23 55 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	return o.toHash();
  10e121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10e125:	48 8b 00             	mov    (%rax),%rax
  10e128:	48 83 c0 10          	add    $0x10,%rax
  10e12c:	48 8b 00             	mov    (%rax),%rax
  10e12f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e133:	ff d0                	callq  *%rax
    }
  10e135:	c9                   	leaveq 
  10e136:	c3                   	retq   

000000000010e137 <_D3std8typeinfo4ti_C10TypeInfo_C6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10e137:	55                   	push   %rbp
  10e138:	48 89 e5             	mov    %rsp,%rbp
  10e13b:	48 83 ec 30          	sub    $0x30,%rsp
  10e13f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10e143:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e147:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10e14b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10e14f:	e8 f0 54 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  10e154:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10e158:	48 8b 00             	mov    (%rax),%rax
  10e15b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  10e15f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e163:	48 8b 00             	mov    (%rax),%rax
  10e166:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	return o1 == o2;
  10e16a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10e16e:	48 8b 00             	mov    (%rax),%rax
  10e171:	48 83 c0 20          	add    $0x20,%rax
  10e175:	48 8b 00             	mov    (%rax),%rax
  10e178:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  10e17c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e180:	ff d0                	callq  *%rax
    }
  10e182:	c9                   	leaveq 
  10e183:	c3                   	retq   

000000000010e184 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10e184:	55                   	push   %rbp
  10e185:	48 89 e5             	mov    %rsp,%rbp
  10e188:	48 83 ec 40          	sub    $0x40,%rsp
  10e18c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10e190:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10e194:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10e198:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10e19c:	e8 a3 54 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	Object o1 = *cast(Object*)p1;
  10e1a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10e1a5:	48 8b 00             	mov    (%rax),%rax
  10e1a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	Object o2 = *cast(Object*)p2;
  10e1ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10e1b0:	48 8b 00             	mov    (%rax),%rax
  10e1b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int c = 0;
  10e1b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	// Regard null references as always being "less than"
	if (!(o1 is o2))
  10e1be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10e1c2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  10e1c6:	0f 94 c0             	sete   %al
  10e1c9:	83 f0 01             	xor    $0x1,%eax
  10e1cc:	84 c0                	test   %al,%al
  10e1ce:	74 43                	je     10e213 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	{
	    if (o1)
  10e1d0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10e1d5:	74 35                	je     10e20c <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x88>
	    {	if (!o2)
  10e1d7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  10e1dc:	0f 95 c0             	setne  %al
  10e1df:	83 f0 01             	xor    $0x1,%eax
  10e1e2:	84 c0                	test   %al,%al
  10e1e4:	74 09                	je     10e1ef <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x6b>
		    c = 1;
  10e1e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  10e1ed:	eb 24                	jmp    10e213 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
		else
		    c = o1.opCmp(o2);
  10e1ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10e1f3:	48 8b 00             	mov    (%rax),%rax
  10e1f6:	48 83 c0 18          	add    $0x18,%rax
  10e1fa:	48 8b 00             	mov    (%rax),%rax
  10e1fd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  10e201:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e205:	ff d0                	callq  *%rax
  10e207:	89 45 ec             	mov    %eax,-0x14(%rbp)
  10e20a:	eb 07                	jmp    10e213 <_D3std8typeinfo4ti_C10TypeInfo_C7compareMFPvPvZi+0x8f>
	    }
	    else
		c = -1;
  10e20c:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
	}
	return c;
  10e213:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  10e216:	c9                   	leaveq 
  10e217:	c3                   	retq   

000000000010e218 <_D3std8typeinfo4ti_C10TypeInfo_C5tsizeMFZm>:

    size_t tsize()
  10e218:	55                   	push   %rbp
  10e219:	48 89 e5             	mov    %rsp,%rbp
  10e21c:	48 83 ec 10          	sub    $0x10,%rsp
  10e220:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e224:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e228:	e8 17 54 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return Object.sizeof;
  10e22d:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  10e232:	c9                   	leaveq 
  10e233:	c3                   	retq   

000000000010e234 <_D3std8typeinfo4ti_C10TypeInfo_C5flagsMFZk>:

    uint flags()
  10e234:	55                   	push   %rbp
  10e235:	48 89 e5             	mov    %rsp,%rbp
  10e238:	48 83 ec 10          	sub    $0x10,%rsp
  10e23c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e240:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e244:	e8 fb 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10e249:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10e24e:	c9                   	leaveq 
  10e24f:	c3                   	retq   

000000000010e250 <_D3std8typeinfo7ti_byte10TypeInfo_g8toStringMFZAa>:

module std.typeinfo.ti_byte;

class TypeInfo_g : TypeInfo
{
    char[] toString() { return "byte"; }
  10e250:	55                   	push   %rbp
  10e251:	48 89 e5             	mov    %rsp,%rbp
  10e254:	53                   	push   %rbx
  10e255:	48 83 ec 08          	sub    $0x8,%rsp
  10e259:	48 89 fb             	mov    %rdi,%rbx
  10e25c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e260:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10e264:	e8 db 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10e269:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  10e270:	48 c7 43 08 e0 8e 11 	movq   $0x118ee0,0x8(%rbx)
  10e277:	00 
  10e278:	48 89 d8             	mov    %rbx,%rax
  10e27b:	48 83 c4 08          	add    $0x8,%rsp
  10e27f:	5b                   	pop    %rbx
  10e280:	c9                   	leaveq 
  10e281:	c3                   	retq   

000000000010e282 <_D3std8typeinfo7ti_byte10TypeInfo_g7getHashMFPvZm>:

    hash_t getHash(void *p)
  10e282:	55                   	push   %rbp
  10e283:	48 89 e5             	mov    %rsp,%rbp
  10e286:	48 83 ec 10          	sub    $0x10,%rsp
  10e28a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e28e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e292:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e296:	e8 a9 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p;
  10e29b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e29f:	0f b6 00             	movzbl (%rax),%eax
  10e2a2:	48 0f be c0          	movsbq %al,%rax
    }
  10e2a6:	c9                   	leaveq 
  10e2a7:	c3                   	retq   

000000000010e2a8 <_D3std8typeinfo7ti_byte10TypeInfo_g6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10e2a8:	55                   	push   %rbp
  10e2a9:	48 89 e5             	mov    %rsp,%rbp
  10e2ac:	48 83 ec 20          	sub    $0x20,%rsp
  10e2b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e2b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e2b8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e2bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e2c0:	e8 7f 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  10e2c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e2c9:	0f b6 10             	movzbl (%rax),%edx
  10e2cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e2d0:	0f b6 00             	movzbl (%rax),%eax
  10e2d3:	38 c2                	cmp    %al,%dl
  10e2d5:	0f 94 c0             	sete   %al
  10e2d8:	0f b6 c0             	movzbl %al,%eax
    }
  10e2db:	c9                   	leaveq 
  10e2dc:	c3                   	retq   

000000000010e2dd <_D3std8typeinfo7ti_byte10TypeInfo_g7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10e2dd:	55                   	push   %rbp
  10e2de:	48 89 e5             	mov    %rsp,%rbp
  10e2e1:	48 83 ec 20          	sub    $0x20,%rsp
  10e2e5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e2e9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e2ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e2f1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e2f5:	e8 4a 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  10e2fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e2fe:	0f b6 00             	movzbl (%rax),%eax
  10e301:	0f be d0             	movsbl %al,%edx
  10e304:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e308:	0f b6 00             	movzbl (%rax),%eax
  10e30b:	0f be c0             	movsbl %al,%eax
  10e30e:	89 d1                	mov    %edx,%ecx
  10e310:	29 c1                	sub    %eax,%ecx
  10e312:	89 c8                	mov    %ecx,%eax
    }
  10e314:	c9                   	leaveq 
  10e315:	c3                   	retq   

000000000010e316 <_D3std8typeinfo7ti_byte10TypeInfo_g5tsizeMFZm>:

    size_t tsize()
  10e316:	55                   	push   %rbp
  10e317:	48 89 e5             	mov    %rsp,%rbp
  10e31a:	48 83 ec 10          	sub    $0x10,%rsp
  10e31e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e322:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e326:	e8 19 53 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return byte.sizeof;
  10e32b:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10e330:	c9                   	leaveq 
  10e331:	c3                   	retq   

000000000010e332 <_D3std8typeinfo7ti_byte10TypeInfo_g4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10e332:	55                   	push   %rbp
  10e333:	48 89 e5             	mov    %rsp,%rbp
  10e336:	48 83 ec 30          	sub    $0x30,%rsp
  10e33a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10e33e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e342:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10e346:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10e34a:	e8 f5 52 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  10e34f:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  10e353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10e357:	0f b6 00             	movzbl (%rax),%eax
  10e35a:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  10e35d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10e361:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e365:	0f b6 00             	movzbl (%rax),%eax
  10e368:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  10e36a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10e36e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10e372:	88 02                	mov    %al,(%rdx)
    }
  10e374:	c9                   	leaveq 
  10e375:	c3                   	retq   
  10e376:	90                   	nop    
  10e377:	90                   	nop    

000000000010e378 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8toStringMFZAa>:

module std.typeinfo.ti_cdouble;

class TypeInfo_r : TypeInfo
{
    char[] toString() { return "cdouble"; }
  10e378:	55                   	push   %rbp
  10e379:	48 89 e5             	mov    %rsp,%rbp
  10e37c:	53                   	push   %rbx
  10e37d:	48 83 ec 08          	sub    $0x8,%rsp
  10e381:	48 89 fb             	mov    %rdi,%rbx
  10e384:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e388:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10e38c:	e8 b3 52 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10e391:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10e398:	48 c7 43 08 a0 8f 11 	movq   $0x118fa0,0x8(%rbx)
  10e39f:	00 
  10e3a0:	48 89 d8             	mov    %rbx,%rax
  10e3a3:	48 83 c4 08          	add    $0x8,%rsp
  10e3a7:	5b                   	pop    %rbx
  10e3a8:	c9                   	leaveq 
  10e3a9:	c3                   	retq   

000000000010e3aa <_D3std8typeinfo10ti_cdouble10TypeInfo_r7getHashMFPvZm>:

    hash_t getHash(void *p)
  10e3aa:	55                   	push   %rbp
  10e3ab:	48 89 e5             	mov    %rsp,%rbp
  10e3ae:	48 83 ec 10          	sub    $0x10,%rsp
  10e3b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e3b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e3ba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e3be:	e8 81 52 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  10e3c3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e3c7:	b8 00 00 00 00       	mov    $0x0,%eax
  10e3cc:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e3d0:	8b 08                	mov    (%rax),%ecx
  10e3d2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e3d6:	b8 04 00 00 00       	mov    $0x4,%eax
  10e3db:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e3df:	8b 00                	mov    (%rax),%eax
  10e3e1:	01 c1                	add    %eax,%ecx
  10e3e3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e3e7:	b8 08 00 00 00       	mov    $0x8,%eax
  10e3ec:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e3f0:	8b 00                	mov    (%rax),%eax
  10e3f2:	01 c1                	add    %eax,%ecx
  10e3f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e3f8:	b8 0c 00 00 00       	mov    $0xc,%eax
  10e3fd:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e401:	8b 00                	mov    (%rax),%eax
  10e403:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10e406:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3];
    }
  10e408:	c9                   	leaveq 
  10e409:	c3                   	retq   

000000000010e40a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>:

    static int _equals(cdouble f1, cdouble f2)
  10e40a:	55                   	push   %rbp
  10e40b:	48 89 e5             	mov    %rsp,%rbp
  10e40e:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
  10e413:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e417:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  10e41c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10e420:	f2 0f 11 55 d8       	movsd  %xmm2,-0x28(%rbp)
  10e425:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  10e429:	f2 0f 11 5d d8       	movsd  %xmm3,-0x28(%rbp)
  10e42e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10e432:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10e436:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  10e43a:	48 89 c8             	mov    %rcx,%rax
  10e43d:	48 89 f2             	mov    %rsi,%rdx
  10e440:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10e444:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    {
	return f1 == f2;
  10e448:	66 0f 12 4d f0       	movlpd -0x10(%rbp),%xmm1
  10e44d:	66 0f 12 5d f8       	movlpd -0x8(%rbp),%xmm3
  10e452:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  10e457:	66 0f 12 55 e8       	movlpd -0x18(%rbp),%xmm2
  10e45c:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10e460:	0f 94 c1             	sete   %cl
  10e463:	0f 9b c0             	setnp  %al
  10e466:	21 c1                	and    %eax,%ecx
  10e468:	66 0f 2e da          	ucomisd %xmm2,%xmm3
  10e46c:	0f 94 c0             	sete   %al
  10e46f:	0f 9b c2             	setnp  %dl
  10e472:	21 d0                	and    %edx,%eax
  10e474:	21 c8                	and    %ecx,%eax
  10e476:	0f b6 c0             	movzbl %al,%eax
    }
  10e479:	c9                   	leaveq 
  10e47a:	c3                   	retq   

000000000010e47b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>:

    static int _compare(cdouble f1, cdouble f2)
  10e47b:	55                   	push   %rbp
  10e47c:	48 89 e5             	mov    %rsp,%rbp
  10e47f:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  10e484:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10e488:	f2 0f 11 4d c8       	movsd  %xmm1,-0x38(%rbp)
  10e48d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10e491:	f2 0f 11 55 c8       	movsd  %xmm2,-0x38(%rbp)
  10e496:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  10e49a:	f2 0f 11 5d c8       	movsd  %xmm3,-0x38(%rbp)
  10e49f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10e4a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10e4a7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e4ab:	48 89 c8             	mov    %rcx,%rax
  10e4ae:	48 89 f2             	mov    %rsi,%rdx
  10e4b1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10e4b5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {   int result;
  10e4b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  10e4c0:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10e4c5:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  10e4ca:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10e4ce:	77 02                	ja     10e4d2 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x57>
  10e4d0:	eb 09                	jmp    10e4db <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x60>
	    result = -1;
  10e4d2:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10e4d9:	eb 58                	jmp    10e533 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.re > f2.re)
  10e4db:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10e4e0:	66 0f 12 45 d0       	movlpd -0x30(%rbp),%xmm0
  10e4e5:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10e4e9:	77 02                	ja     10e4ed <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x72>
  10e4eb:	eb 09                	jmp    10e4f6 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x7b>
	    result = 1;
  10e4ed:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10e4f4:	eb 3d                	jmp    10e533 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im < f2.im)
  10e4f6:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  10e4fb:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  10e500:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10e504:	77 02                	ja     10e508 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x8d>
  10e506:	eb 09                	jmp    10e511 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0x96>
	    result = -1;
  10e508:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10e50f:	eb 22                	jmp    10e533 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else if (f1.im > f2.im)
  10e511:	66 0f 12 4d e8       	movlpd -0x18(%rbp),%xmm1
  10e516:	66 0f 12 45 d8       	movlpd -0x28(%rbp),%xmm0
  10e51b:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10e51f:	77 02                	ja     10e523 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xa8>
  10e521:	eb 09                	jmp    10e52c <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb1>
	    result = 1;
  10e523:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10e52a:	eb 07                	jmp    10e533 <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi+0xb8>
	else
	    result = 0;
  10e52c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  10e533:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  10e536:	c9                   	leaveq 
  10e537:	c3                   	retq   

000000000010e538 <_D3std8typeinfo10ti_cdouble10TypeInfo_r6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10e538:	55                   	push   %rbp
  10e539:	48 89 e5             	mov    %rsp,%rbp
  10e53c:	48 83 ec 20          	sub    $0x20,%rsp
  10e540:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e544:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e548:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e54c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e550:	e8 ef 50 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cdouble *)p1, *cast(cdouble *)p2);
  10e555:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e559:	48 8b 10             	mov    (%rax),%rdx
  10e55c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  10e560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e564:	48 8b 30             	mov    (%rax),%rsi
  10e567:	48 8b 40 08          	mov    0x8(%rax),%rax
  10e56b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10e56f:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  10e574:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  10e578:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  10e57d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e581:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  10e586:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10e58a:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10e58f:	e8 76 fe ff ff       	callq  10e40a <_D3std8typeinfo10ti_cdouble10TypeInfo_r7_equalsFrrZi>
    }
  10e594:	c9                   	leaveq 
  10e595:	c3                   	retq   

000000000010e596 <_D3std8typeinfo10ti_cdouble10TypeInfo_r7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10e596:	55                   	push   %rbp
  10e597:	48 89 e5             	mov    %rsp,%rbp
  10e59a:	48 83 ec 20          	sub    $0x20,%rsp
  10e59e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e5a2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e5a6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e5aa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e5ae:	e8 91 50 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cdouble *)p1, *cast(cdouble *)p2);
  10e5b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e5b7:	48 8b 10             	mov    (%rax),%rdx
  10e5ba:	48 8b 48 08          	mov    0x8(%rax),%rcx
  10e5be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e5c2:	48 8b 30             	mov    (%rax),%rsi
  10e5c5:	48 8b 40 08          	mov    0x8(%rax),%rax
  10e5c9:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10e5cd:	66 0f 12 55 e0       	movlpd -0x20(%rbp),%xmm2
  10e5d2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  10e5d6:	66 0f 12 5d e0       	movlpd -0x20(%rbp),%xmm3
  10e5db:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e5df:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  10e5e4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10e5e8:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10e5ed:	e8 89 fe ff ff       	callq  10e47b <_D3std8typeinfo10ti_cdouble10TypeInfo_r8_compareFrrZi>
    }
  10e5f2:	c9                   	leaveq 
  10e5f3:	c3                   	retq   

000000000010e5f4 <_D3std8typeinfo10ti_cdouble10TypeInfo_r5tsizeMFZm>:

    size_t tsize()
  10e5f4:	55                   	push   %rbp
  10e5f5:	48 89 e5             	mov    %rsp,%rbp
  10e5f8:	48 83 ec 10          	sub    $0x10,%rsp
  10e5fc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e600:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e604:	e8 3b 50 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cdouble.sizeof;
  10e609:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10e60e:	c9                   	leaveq 
  10e60f:	c3                   	retq   

000000000010e610 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10e610:	55                   	push   %rbp
  10e611:	48 89 e5             	mov    %rsp,%rbp
  10e614:	48 83 ec 30          	sub    $0x30,%rsp
  10e618:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10e61c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e620:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10e624:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10e628:	e8 17 50 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cdouble t;
  10e62d:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  10e634:	00 f8 7f 
  10e637:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10e63b:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  10e642:	00 f8 7f 
  10e645:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(cdouble *)p1;
  10e649:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10e64d:	48 8b 02             	mov    (%rdx),%rax
  10e650:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10e654:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10e658:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(cdouble *)p1 = *cast(cdouble *)p2;
  10e65c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e660:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e664:	48 8b 10             	mov    (%rax),%rdx
  10e667:	48 8b 40 08          	mov    0x8(%rax),%rax
  10e66b:	48 89 11             	mov    %rdx,(%rcx)
  10e66e:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(cdouble *)p2 = t;
  10e672:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10e676:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e67a:	48 89 02             	mov    %rax,(%rdx)
  10e67d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10e681:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  10e685:	c9                   	leaveq 
  10e686:	c3                   	retq   

000000000010e687 <_D3std8typeinfo10ti_cdouble10TypeInfo_r4initMFZAv>:

    void[] init()
  10e687:	55                   	push   %rbp
  10e688:	48 89 e5             	mov    %rsp,%rbp
  10e68b:	53                   	push   %rbx
  10e68c:	48 83 ec 28          	sub    $0x28,%rsp
  10e690:	48 89 fb             	mov    %rdi,%rbx
  10e693:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10e697:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10e69b:	e8 a4 4f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cdouble r;

	return (cast(cdouble *)&r)[0 .. 1];
  10e6a0:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10e6a7:	00 
  10e6a8:	48 c7 45 e8 20 1e 12 	movq   $0x121e20,-0x18(%rbp)
  10e6af:	00 
  10e6b0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e6b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e6b8:	49 89 c0             	mov    %rax,%r8
  10e6bb:	ba 10 00 00 00       	mov    $0x10,%edx
  10e6c0:	be 01 00 00 00       	mov    $0x1,%esi
  10e6c5:	48 89 df             	mov    %rbx,%rdi
  10e6c8:	e8 23 88 00 00       	callq  116ef0 <_d_arraycast>
    }
  10e6cd:	48 89 d8             	mov    %rbx,%rax
  10e6d0:	48 83 c4 28          	add    $0x28,%rsp
  10e6d4:	5b                   	pop    %rbx
  10e6d5:	c9                   	leaveq 
  10e6d6:	c3                   	retq   
  10e6d7:	90                   	nop    

000000000010e6d8 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8toStringMFZAa>:

module std.typeinfo.ti_cfloat;

class TypeInfo_q : TypeInfo
{
    char[] toString() { return "cfloat"; }
  10e6d8:	55                   	push   %rbp
  10e6d9:	48 89 e5             	mov    %rsp,%rbp
  10e6dc:	53                   	push   %rbx
  10e6dd:	48 83 ec 08          	sub    $0x8,%rsp
  10e6e1:	48 89 fb             	mov    %rdi,%rbx
  10e6e4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e6e8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10e6ec:	e8 53 4f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10e6f1:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10e6f8:	48 c7 43 08 60 90 11 	movq   $0x119060,0x8(%rbx)
  10e6ff:	00 
  10e700:	48 89 d8             	mov    %rbx,%rax
  10e703:	48 83 c4 08          	add    $0x8,%rsp
  10e707:	5b                   	pop    %rbx
  10e708:	c9                   	leaveq 
  10e709:	c3                   	retq   

000000000010e70a <_D3std8typeinfo9ti_cfloat10TypeInfo_q7getHashMFPvZm>:

    hash_t getHash(void *p)
  10e70a:	55                   	push   %rbp
  10e70b:	48 89 e5             	mov    %rsp,%rbp
  10e70e:	48 83 ec 10          	sub    $0x10,%rsp
  10e712:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e716:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e71a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e71e:	e8 21 4f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  10e723:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e727:	b8 00 00 00 00       	mov    $0x0,%eax
  10e72c:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e730:	8b 08                	mov    (%rax),%ecx
  10e732:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10e736:	b8 04 00 00 00       	mov    $0x4,%eax
  10e73b:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10e73f:	8b 00                	mov    (%rax),%eax
  10e741:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10e744:	89 c0                	mov    %eax,%eax
    }
  10e746:	c9                   	leaveq 
  10e747:	c3                   	retq   

000000000010e748 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>:

    static int _equals(cfloat f1, cfloat f2)
  10e748:	55                   	push   %rbp
  10e749:	48 89 e5             	mov    %rsp,%rbp
  10e74c:	66 48 0f 7e c0       	movq   %xmm0,%rax
  10e751:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  10e756:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10e75a:	48 89 d0             	mov    %rdx,%rax
  10e75d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    {
	return f1 == f2;
  10e761:	f3 0f 10 4d f8       	movss  -0x8(%rbp),%xmm1
  10e766:	f3 0f 10 5d fc       	movss  -0x4(%rbp),%xmm3
  10e76b:	f3 0f 10 45 f0       	movss  -0x10(%rbp),%xmm0
  10e770:	f3 0f 10 55 f4       	movss  -0xc(%rbp),%xmm2
  10e775:	0f 2e c8             	ucomiss %xmm0,%xmm1
  10e778:	0f 94 c1             	sete   %cl
  10e77b:	0f 9b c0             	setnp  %al
  10e77e:	21 c1                	and    %eax,%ecx
  10e780:	0f 2e da             	ucomiss %xmm2,%xmm3
  10e783:	0f 94 c0             	sete   %al
  10e786:	0f 9b c2             	setnp  %dl
  10e789:	21 d0                	and    %edx,%eax
  10e78b:	21 c8                	and    %ecx,%eax
  10e78d:	0f b6 c0             	movzbl %al,%eax
    }
  10e790:	c9                   	leaveq 
  10e791:	c3                   	retq   

000000000010e792 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>:

    static int _compare(cfloat f1, cfloat f2)
  10e792:	55                   	push   %rbp
  10e793:	48 89 e5             	mov    %rsp,%rbp
  10e796:	66 48 0f 7e c0       	movq   %xmm0,%rax
  10e79b:	66 48 0f 7e ca       	movq   %xmm1,%rdx
  10e7a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  10e7a4:	48 89 d0             	mov    %rdx,%rax
  10e7a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    {   int result;
  10e7ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  10e7b2:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  10e7b7:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  10e7bc:	0f 2e c1             	ucomiss %xmm1,%xmm0
  10e7bf:	77 02                	ja     10e7c3 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x31>
  10e7c1:	eb 09                	jmp    10e7cc <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x3a>
	    result = -1;
  10e7c3:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10e7ca:	eb 55                	jmp    10e821 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.re > f2.re)
  10e7cc:	f3 0f 10 4d e8       	movss  -0x18(%rbp),%xmm1
  10e7d1:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  10e7d6:	0f 2e c8             	ucomiss %xmm0,%xmm1
  10e7d9:	77 02                	ja     10e7dd <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x4b>
  10e7db:	eb 09                	jmp    10e7e6 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x54>
	    result = 1;
  10e7dd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10e7e4:	eb 3b                	jmp    10e821 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im < f2.im)
  10e7e6:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  10e7eb:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  10e7f0:	0f 2e c1             	ucomiss %xmm1,%xmm0
  10e7f3:	77 02                	ja     10e7f7 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x65>
  10e7f5:	eb 09                	jmp    10e800 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x6e>
	    result = -1;
  10e7f7:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10e7fe:	eb 21                	jmp    10e821 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else if (f1.im > f2.im)
  10e800:	f3 0f 10 4d ec       	movss  -0x14(%rbp),%xmm1
  10e805:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  10e80a:	0f 2e c8             	ucomiss %xmm0,%xmm1
  10e80d:	77 02                	ja     10e811 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x7f>
  10e80f:	eb 09                	jmp    10e81a <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x88>
	    result = 1;
  10e811:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10e818:	eb 07                	jmp    10e821 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi+0x8f>
	else
	    result = 0;
  10e81a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  10e821:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  10e824:	c9                   	leaveq 
  10e825:	c3                   	retq   

000000000010e826 <_D3std8typeinfo9ti_cfloat10TypeInfo_q6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10e826:	55                   	push   %rbp
  10e827:	48 89 e5             	mov    %rsp,%rbp
  10e82a:	48 83 ec 30          	sub    $0x30,%rsp
  10e82e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e832:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e836:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e83a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e83e:	e8 01 4e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(cfloat *)p1, *cast(cfloat *)p2);
  10e843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e847:	8b 10                	mov    (%rax),%edx
  10e849:	8b 48 04             	mov    0x4(%rax),%ecx
  10e84c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e850:	8b 30                	mov    (%rax),%esi
  10e852:	8b 78 04             	mov    0x4(%rax),%edi
  10e855:	89 d0                	mov    %edx,%eax
  10e857:	89 ca                	mov    %ecx,%edx
  10e859:	89 45 e0             	mov    %eax,-0x20(%rbp)
  10e85c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  10e85f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e863:	89 f0                	mov    %esi,%eax
  10e865:	89 fa                	mov    %edi,%edx
  10e867:	89 45 d8             	mov    %eax,-0x28(%rbp)
  10e86a:	89 55 dc             	mov    %edx,-0x24(%rbp)
  10e86d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e871:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  10e876:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10e87b:	e8 c8 fe ff ff       	callq  10e748 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7_equalsFqqZi>
    }
  10e880:	c9                   	leaveq 
  10e881:	c3                   	retq   

000000000010e882 <_D3std8typeinfo9ti_cfloat10TypeInfo_q7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10e882:	55                   	push   %rbp
  10e883:	48 89 e5             	mov    %rsp,%rbp
  10e886:	48 83 ec 30          	sub    $0x30,%rsp
  10e88a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e88e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e892:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10e896:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e89a:	e8 a5 4d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(cfloat *)p1, *cast(cfloat *)p2);
  10e89f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e8a3:	8b 10                	mov    (%rax),%edx
  10e8a5:	8b 48 04             	mov    0x4(%rax),%ecx
  10e8a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e8ac:	8b 30                	mov    (%rax),%esi
  10e8ae:	8b 78 04             	mov    0x4(%rax),%edi
  10e8b1:	89 d0                	mov    %edx,%eax
  10e8b3:	89 ca                	mov    %ecx,%edx
  10e8b5:	89 45 e0             	mov    %eax,-0x20(%rbp)
  10e8b8:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  10e8bb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e8bf:	89 f0                	mov    %esi,%eax
  10e8c1:	89 fa                	mov    %edi,%edx
  10e8c3:	89 45 d8             	mov    %eax,-0x28(%rbp)
  10e8c6:	89 55 dc             	mov    %edx,-0x24(%rbp)
  10e8c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e8cd:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  10e8d2:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10e8d7:	e8 b6 fe ff ff       	callq  10e792 <_D3std8typeinfo9ti_cfloat10TypeInfo_q8_compareFqqZi>
    }
  10e8dc:	c9                   	leaveq 
  10e8dd:	c3                   	retq   

000000000010e8de <_D3std8typeinfo9ti_cfloat10TypeInfo_q5tsizeMFZm>:

    size_t tsize()
  10e8de:	55                   	push   %rbp
  10e8df:	48 89 e5             	mov    %rsp,%rbp
  10e8e2:	48 83 ec 10          	sub    $0x10,%rsp
  10e8e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e8ea:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e8ee:	e8 51 4d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cfloat.sizeof;
  10e8f3:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  10e8f8:	c9                   	leaveq 
  10e8f9:	c3                   	retq   

000000000010e8fa <_D3std8typeinfo9ti_cfloat10TypeInfo_q4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10e8fa:	55                   	push   %rbp
  10e8fb:	48 89 e5             	mov    %rsp,%rbp
  10e8fe:	48 83 ec 30          	sub    $0x30,%rsp
  10e902:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10e906:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10e90a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10e90e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10e912:	e8 2d 4d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	cfloat t;
  10e917:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  10e91c:	89 45 f8             	mov    %eax,-0x8(%rbp)
  10e91f:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  10e924:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(cfloat *)p1;
  10e927:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10e92b:	8b 02                	mov    (%rdx),%eax
  10e92d:	89 45 f8             	mov    %eax,-0x8(%rbp)
  10e930:	8b 42 04             	mov    0x4(%rdx),%eax
  10e933:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(cfloat *)p1 = *cast(cfloat *)p2;
  10e936:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e93a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10e93e:	8b 10                	mov    (%rax),%edx
  10e940:	8b 40 04             	mov    0x4(%rax),%eax
  10e943:	89 11                	mov    %edx,(%rcx)
  10e945:	89 41 04             	mov    %eax,0x4(%rcx)
	*cast(cfloat *)p2 = t;
  10e948:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10e94c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10e94f:	89 02                	mov    %eax,(%rdx)
  10e951:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10e954:	89 42 04             	mov    %eax,0x4(%rdx)
    }
  10e957:	c9                   	leaveq 
  10e958:	c3                   	retq   

000000000010e959 <_D3std8typeinfo9ti_cfloat10TypeInfo_q4initMFZAv>:

    void[] init()
  10e959:	55                   	push   %rbp
  10e95a:	48 89 e5             	mov    %rsp,%rbp
  10e95d:	53                   	push   %rbx
  10e95e:	48 83 ec 28          	sub    $0x28,%rsp
  10e962:	48 89 fb             	mov    %rdi,%rbx
  10e965:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10e969:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10e96d:	e8 d2 4c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static cfloat r;

	return (cast(cfloat *)&r)[0 .. 1];
  10e972:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10e979:	00 
  10e97a:	48 c7 45 e8 e0 1e 12 	movq   $0x121ee0,-0x18(%rbp)
  10e981:	00 
  10e982:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10e986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10e98a:	49 89 c0             	mov    %rax,%r8
  10e98d:	ba 08 00 00 00       	mov    $0x8,%edx
  10e992:	be 01 00 00 00       	mov    $0x1,%esi
  10e997:	48 89 df             	mov    %rbx,%rdi
  10e99a:	e8 51 85 00 00       	callq  116ef0 <_d_arraycast>
    }
  10e99f:	48 89 d8             	mov    %rbx,%rax
  10e9a2:	48 83 c4 28          	add    $0x28,%rsp
  10e9a6:	5b                   	pop    %rbx
  10e9a7:	c9                   	leaveq 
  10e9a8:	c3                   	retq   
  10e9a9:	90                   	nop    
  10e9aa:	90                   	nop    
  10e9ab:	90                   	nop    

000000000010e9ac <_D3std8typeinfo7ti_char10TypeInfo_a8toStringMFZAa>:

module std.typeinfo.ti_char;

class TypeInfo_a : TypeInfo
{
    char[] toString() { return "char"; }
  10e9ac:	55                   	push   %rbp
  10e9ad:	48 89 e5             	mov    %rsp,%rbp
  10e9b0:	53                   	push   %rbx
  10e9b1:	48 83 ec 08          	sub    $0x8,%rsp
  10e9b5:	48 89 fb             	mov    %rdi,%rbx
  10e9b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e9bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10e9c0:	e8 7f 4c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10e9c5:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  10e9cc:	48 c7 43 08 20 91 11 	movq   $0x119120,0x8(%rbx)
  10e9d3:	00 
  10e9d4:	48 89 d8             	mov    %rbx,%rax
  10e9d7:	48 83 c4 08          	add    $0x8,%rsp
  10e9db:	5b                   	pop    %rbx
  10e9dc:	c9                   	leaveq 
  10e9dd:	c3                   	retq   

000000000010e9de <_D3std8typeinfo7ti_char10TypeInfo_a7getHashMFPvZm>:

    hash_t getHash(void *p)
  10e9de:	55                   	push   %rbp
  10e9df:	48 89 e5             	mov    %rsp,%rbp
  10e9e2:	48 83 ec 10          	sub    $0x10,%rsp
  10e9e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10e9ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10e9ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10e9f2:	e8 4d 4c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p;
  10e9f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10e9fb:	0f b6 00             	movzbl (%rax),%eax
  10e9fe:	0f b6 c0             	movzbl %al,%eax
    }
  10ea01:	c9                   	leaveq 
  10ea02:	c3                   	retq   

000000000010ea03 <_D3std8typeinfo7ti_char10TypeInfo_a6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10ea03:	55                   	push   %rbp
  10ea04:	48 89 e5             	mov    %rsp,%rbp
  10ea07:	48 83 ec 20          	sub    $0x20,%rsp
  10ea0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ea0f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ea13:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ea17:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ea1b:	e8 24 4c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 == *cast(char *)p2;
  10ea20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ea24:	0f b6 10             	movzbl (%rax),%edx
  10ea27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ea2b:	0f b6 00             	movzbl (%rax),%eax
  10ea2e:	38 c2                	cmp    %al,%dl
  10ea30:	0f 94 c0             	sete   %al
  10ea33:	0f b6 c0             	movzbl %al,%eax
    }
  10ea36:	c9                   	leaveq 
  10ea37:	c3                   	retq   

000000000010ea38 <_D3std8typeinfo7ti_char10TypeInfo_a7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10ea38:	55                   	push   %rbp
  10ea39:	48 89 e5             	mov    %rsp,%rbp
  10ea3c:	48 83 ec 20          	sub    $0x20,%rsp
  10ea40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ea44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ea48:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ea4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ea50:	e8 ef 4b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(char *)p1 - *cast(char *)p2;
  10ea55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ea59:	0f b6 00             	movzbl (%rax),%eax
  10ea5c:	0f b6 d0             	movzbl %al,%edx
  10ea5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ea63:	0f b6 00             	movzbl (%rax),%eax
  10ea66:	0f b6 c0             	movzbl %al,%eax
  10ea69:	89 d1                	mov    %edx,%ecx
  10ea6b:	29 c1                	sub    %eax,%ecx
  10ea6d:	89 c8                	mov    %ecx,%eax
    }
  10ea6f:	c9                   	leaveq 
  10ea70:	c3                   	retq   

000000000010ea71 <_D3std8typeinfo7ti_char10TypeInfo_a5tsizeMFZm>:

    size_t tsize()
  10ea71:	55                   	push   %rbp
  10ea72:	48 89 e5             	mov    %rsp,%rbp
  10ea75:	48 83 ec 10          	sub    $0x10,%rsp
  10ea79:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ea7d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ea81:	e8 be 4b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return char.sizeof;
  10ea86:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10ea8b:	c9                   	leaveq 
  10ea8c:	c3                   	retq   

000000000010ea8d <_D3std8typeinfo7ti_char10TypeInfo_a4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10ea8d:	55                   	push   %rbp
  10ea8e:	48 89 e5             	mov    %rsp,%rbp
  10ea91:	48 83 ec 30          	sub    $0x30,%rsp
  10ea95:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10ea99:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10ea9d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10eaa1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10eaa5:	e8 9a 4b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	char t;
  10eaaa:	c6 45 ff ff          	movb   $0xff,-0x1(%rbp)

	t = *cast(char *)p1;
  10eaae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10eab2:	0f b6 00             	movzbl (%rax),%eax
  10eab5:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(char *)p1 = *cast(char *)p2;
  10eab8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10eabc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10eac0:	0f b6 00             	movzbl (%rax),%eax
  10eac3:	88 02                	mov    %al,(%rdx)
	*cast(char *)p2 = t;
  10eac5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10eac9:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10eacd:	88 02                	mov    %al,(%rdx)
    }
  10eacf:	c9                   	leaveq 
  10ead0:	c3                   	retq   

000000000010ead1 <_D3std8typeinfo7ti_char10TypeInfo_a4initMFZAv>:

    void[] init()
  10ead1:	55                   	push   %rbp
  10ead2:	48 89 e5             	mov    %rsp,%rbp
  10ead5:	53                   	push   %rbx
  10ead6:	48 83 ec 28          	sub    $0x28,%rsp
  10eada:	48 89 fb             	mov    %rdi,%rbx
  10eadd:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10eae1:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10eae5:	e8 5a 4b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static char c;

	return (cast(char *)&c)[0 .. 1];
  10eaea:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10eaf1:	00 
  10eaf2:	48 c7 45 e8 a0 1f 12 	movq   $0x121fa0,-0x18(%rbp)
  10eaf9:	00 
  10eafa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10eafe:	48 89 03             	mov    %rax,(%rbx)
  10eb01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10eb05:	48 89 43 08          	mov    %rax,0x8(%rbx)
    }
  10eb09:	48 89 d8             	mov    %rbx,%rax
  10eb0c:	48 83 c4 28          	add    $0x28,%rsp
  10eb10:	5b                   	pop    %rbx
  10eb11:	c9                   	leaveq 
  10eb12:	c3                   	retq   
  10eb13:	90                   	nop    

000000000010eb14 <_D3std8typeinfo8ti_creal10TypeInfo_c8toStringMFZAa>:

module std.typeinfo.ti_creal;

class TypeInfo_c : TypeInfo
{
    char[] toString() { return "creal"; }
  10eb14:	55                   	push   %rbp
  10eb15:	48 89 e5             	mov    %rsp,%rbp
  10eb18:	53                   	push   %rbx
  10eb19:	48 83 ec 08          	sub    $0x8,%rsp
  10eb1d:	48 89 fb             	mov    %rdi,%rbx
  10eb20:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10eb24:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10eb28:	e8 17 4b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10eb2d:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10eb34:	48 c7 43 08 e0 91 11 	movq   $0x1191e0,0x8(%rbx)
  10eb3b:	00 
  10eb3c:	48 89 d8             	mov    %rbx,%rax
  10eb3f:	48 83 c4 08          	add    $0x8,%rsp
  10eb43:	5b                   	pop    %rbx
  10eb44:	c9                   	leaveq 
  10eb45:	c3                   	retq   

000000000010eb46 <_D3std8typeinfo8ti_creal10TypeInfo_c7getHashMFPvZm>:

    hash_t getHash(void *p)
  10eb46:	55                   	push   %rbp
  10eb47:	48 89 e5             	mov    %rsp,%rbp
  10eb4a:	48 83 ec 10          	sub    $0x10,%rsp
  10eb4e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10eb52:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10eb56:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10eb5a:	e8 e5 4a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] +
  10eb5f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10eb63:	b8 00 00 00 00       	mov    $0x0,%eax
  10eb68:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10eb6c:	8b 08                	mov    (%rax),%ecx
  10eb6e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10eb72:	b8 04 00 00 00       	mov    $0x4,%eax
  10eb77:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10eb7b:	8b 00                	mov    (%rax),%eax
  10eb7d:	01 c1                	add    %eax,%ecx
  10eb7f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10eb83:	b8 08 00 00 00       	mov    $0x8,%eax
  10eb88:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10eb8c:	8b 00                	mov    (%rax),%eax
  10eb8e:	01 c1                	add    %eax,%ecx
  10eb90:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10eb94:	b8 0c 00 00 00       	mov    $0xc,%eax
  10eb99:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10eb9d:	8b 00                	mov    (%rax),%eax
  10eb9f:	01 c1                	add    %eax,%ecx
  10eba1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10eba5:	b8 10 00 00 00       	mov    $0x10,%eax
  10ebaa:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10ebae:	8b 00                	mov    (%rax),%eax
  10ebb0:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10ebb3:	89 c0                	mov    %eax,%eax
	       (cast(uint *)p)[2] + (cast(uint *)p)[3] +
	       (cast(uint *)p)[4];
    }
  10ebb5:	c9                   	leaveq 
  10ebb6:	c3                   	retq   

000000000010ebb7 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>:

    static int _equals(creal f1, creal f2)
  10ebb7:	55                   	push   %rbp
  10ebb8:	48 89 e5             	mov    %rsp,%rbp
    {
	return f1 == f2;
  10ebbb:	db 6d 10             	fldt   0x10(%rbp)
  10ebbe:	db 6d 20             	fldt   0x20(%rbp)
  10ebc1:	db 6d 30             	fldt   0x30(%rbp)
  10ebc4:	db 6d 40             	fldt   0x40(%rbp)
  10ebc7:	d9 cb                	fxch   %st(3)
  10ebc9:	df e9                	fucomip %st(1),%st
  10ebcb:	df c0                	ffreep %st(0)
  10ebcd:	0f 94 c1             	sete   %cl
  10ebd0:	0f 9b c0             	setnp  %al
  10ebd3:	21 c1                	and    %eax,%ecx
  10ebd5:	df e9                	fucomip %st(1),%st
  10ebd7:	df c0                	ffreep %st(0)
  10ebd9:	0f 94 c0             	sete   %al
  10ebdc:	0f 9b c2             	setnp  %dl
  10ebdf:	21 d0                	and    %edx,%eax
  10ebe1:	21 c8                	and    %ecx,%eax
  10ebe3:	0f b6 c0             	movzbl %al,%eax
    }
  10ebe6:	c9                   	leaveq 
  10ebe7:	c3                   	retq   

000000000010ebe8 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>:

    static int _compare(creal f1, creal f2)
  10ebe8:	55                   	push   %rbp
  10ebe9:	48 89 e5             	mov    %rsp,%rbp
    {   int result;
  10ebec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if (f1.re < f2.re)
  10ebf3:	db 6d 10             	fldt   0x10(%rbp)
  10ebf6:	db 6d 30             	fldt   0x30(%rbp)
  10ebf9:	df e9                	fucomip %st(1),%st
  10ebfb:	df c0                	ffreep %st(0)
  10ebfd:	77 02                	ja     10ec01 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x19>
  10ebff:	eb 09                	jmp    10ec0a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x22>
	    result = -1;
  10ec01:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10ec08:	eb 50                	jmp    10ec5a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.re > f2.re)
  10ec0a:	db 6d 10             	fldt   0x10(%rbp)
  10ec0d:	db 6d 30             	fldt   0x30(%rbp)
  10ec10:	d9 c9                	fxch   %st(1)
  10ec12:	df e9                	fucomip %st(1),%st
  10ec14:	df c0                	ffreep %st(0)
  10ec16:	77 02                	ja     10ec1a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x32>
  10ec18:	eb 09                	jmp    10ec23 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x3b>
	    result = 1;
  10ec1a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10ec21:	eb 37                	jmp    10ec5a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im < f2.im)
  10ec23:	db 6d 20             	fldt   0x20(%rbp)
  10ec26:	db 6d 40             	fldt   0x40(%rbp)
  10ec29:	df e9                	fucomip %st(1),%st
  10ec2b:	df c0                	ffreep %st(0)
  10ec2d:	77 02                	ja     10ec31 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x49>
  10ec2f:	eb 09                	jmp    10ec3a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x52>
	    result = -1;
  10ec31:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10ec38:	eb 20                	jmp    10ec5a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else if (f1.im > f2.im)
  10ec3a:	db 6d 20             	fldt   0x20(%rbp)
  10ec3d:	db 6d 40             	fldt   0x40(%rbp)
  10ec40:	d9 c9                	fxch   %st(1)
  10ec42:	df e9                	fucomip %st(1),%st
  10ec44:	df c0                	ffreep %st(0)
  10ec46:	77 02                	ja     10ec4a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x62>
  10ec48:	eb 09                	jmp    10ec53 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x6b>
	    result = 1;
  10ec4a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10ec51:	eb 07                	jmp    10ec5a <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi+0x72>
	else
	    result = 0;
  10ec53:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
        return result;
  10ec5a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    }
  10ec5d:	c9                   	leaveq 
  10ec5e:	c3                   	retq   

000000000010ec5f <_D3std8typeinfo8ti_creal10TypeInfo_c6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10ec5f:	55                   	push   %rbp
  10ec60:	48 89 e5             	mov    %rsp,%rbp
  10ec63:	48 83 ec 60          	sub    $0x60,%rsp
  10ec67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ec6b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ec6f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ec73:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ec77:	e8 c8 49 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(creal *)p1, *cast(creal *)p2);
  10ec7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ec80:	4c 8b 00             	mov    (%rax),%r8
  10ec83:	44 8b 48 08          	mov    0x8(%rax),%r9d
  10ec87:	4c 8b 50 10          	mov    0x10(%rax),%r10
  10ec8b:	44 8b 58 18          	mov    0x18(%rax),%r11d
  10ec8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ec93:	48 8b 10             	mov    (%rax),%rdx
  10ec96:	8b 48 08             	mov    0x8(%rax),%ecx
  10ec99:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10ec9d:	8b 78 18             	mov    0x18(%rax),%edi
  10eca0:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  10eca5:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  10ecaa:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  10ecaf:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  10ecb4:	48 89 14 24          	mov    %rdx,(%rsp)
  10ecb8:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  10ecbc:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  10ecc1:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  10ecc5:	e8 ed fe ff ff       	callq  10ebb7 <_D3std8typeinfo8ti_creal10TypeInfo_c7_equalsFccZi>
    }
  10ecca:	c9                   	leaveq 
  10eccb:	c3                   	retq   

000000000010eccc <_D3std8typeinfo8ti_creal10TypeInfo_c7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10eccc:	55                   	push   %rbp
  10eccd:	48 89 e5             	mov    %rsp,%rbp
  10ecd0:	48 83 ec 60          	sub    $0x60,%rsp
  10ecd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ecd8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ecdc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ece0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ece4:	e8 5b 49 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(creal *)p1, *cast(creal *)p2);
  10ece9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10eced:	4c 8b 00             	mov    (%rax),%r8
  10ecf0:	44 8b 48 08          	mov    0x8(%rax),%r9d
  10ecf4:	4c 8b 50 10          	mov    0x10(%rax),%r10
  10ecf8:	44 8b 58 18          	mov    0x18(%rax),%r11d
  10ecfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ed00:	48 8b 10             	mov    (%rax),%rdx
  10ed03:	8b 48 08             	mov    0x8(%rax),%ecx
  10ed06:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10ed0a:	8b 78 18             	mov    0x18(%rax),%edi
  10ed0d:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  10ed12:	44 89 4c 24 28       	mov    %r9d,0x28(%rsp)
  10ed17:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
  10ed1c:	44 89 5c 24 38       	mov    %r11d,0x38(%rsp)
  10ed21:	48 89 14 24          	mov    %rdx,(%rsp)
  10ed25:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  10ed29:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  10ed2e:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  10ed32:	e8 b1 fe ff ff       	callq  10ebe8 <_D3std8typeinfo8ti_creal10TypeInfo_c8_compareFccZi>
    }
  10ed37:	c9                   	leaveq 
  10ed38:	c3                   	retq   

000000000010ed39 <_D3std8typeinfo8ti_creal10TypeInfo_c5tsizeMFZm>:

    size_t tsize()
  10ed39:	55                   	push   %rbp
  10ed3a:	48 89 e5             	mov    %rsp,%rbp
  10ed3d:	48 83 ec 10          	sub    $0x10,%rsp
  10ed41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ed45:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ed49:	e8 f6 48 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return creal.sizeof;
  10ed4e:	b8 20 00 00 00       	mov    $0x20,%eax
    }
  10ed53:	c9                   	leaveq 
  10ed54:	c3                   	retq   

000000000010ed55 <_D3std8typeinfo8ti_creal10TypeInfo_c4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10ed55:	55                   	push   %rbp
  10ed56:	48 89 e5             	mov    %rsp,%rbp
  10ed59:	53                   	push   %rbx
  10ed5a:	48 83 ec 48          	sub    $0x48,%rsp
  10ed5e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10ed62:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10ed66:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  10ed6a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10ed6e:	e8 d1 48 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	creal t;
  10ed73:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  10ed7a:	00 00 c0 
  10ed7d:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  10ed82:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10ed86:	89 55 d8             	mov    %edx,-0x28(%rbp)
  10ed89:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  10ed90:	00 00 c0 
  10ed93:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  10ed98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10ed9c:	89 55 e8             	mov    %edx,-0x18(%rbp)

	t = *cast(creal *)p1;
  10ed9f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  10eda3:	48 8b 01             	mov    (%rcx),%rax
  10eda6:	8b 51 08             	mov    0x8(%rcx),%edx
  10eda9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  10edad:	89 55 d8             	mov    %edx,-0x28(%rbp)
  10edb0:	48 8b 41 10          	mov    0x10(%rcx),%rax
  10edb4:	8b 51 18             	mov    0x18(%rcx),%edx
  10edb7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10edbb:	89 55 e8             	mov    %edx,-0x18(%rbp)
	*cast(creal *)p1 = *cast(creal *)p2;
  10edbe:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  10edc2:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10edc6:	48 8b 01             	mov    (%rcx),%rax
  10edc9:	8b 51 08             	mov    0x8(%rcx),%edx
  10edcc:	8b 59 18             	mov    0x18(%rcx),%ebx
  10edcf:	48 8b 49 10          	mov    0x10(%rcx),%rcx
  10edd3:	48 89 06             	mov    %rax,(%rsi)
  10edd6:	89 56 08             	mov    %edx,0x8(%rsi)
  10edd9:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  10eddd:	89 5e 18             	mov    %ebx,0x18(%rsi)
	*cast(creal *)p2 = t;
  10ede0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10ede4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10ede8:	8b 55 d8             	mov    -0x28(%rbp),%edx
  10edeb:	48 89 01             	mov    %rax,(%rcx)
  10edee:	89 51 08             	mov    %edx,0x8(%rcx)
  10edf1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10edf5:	8b 55 e8             	mov    -0x18(%rbp),%edx
  10edf8:	48 89 41 10          	mov    %rax,0x10(%rcx)
  10edfc:	89 51 18             	mov    %edx,0x18(%rcx)
    }
  10edff:	48 83 c4 48          	add    $0x48,%rsp
  10ee03:	5b                   	pop    %rbx
  10ee04:	c9                   	leaveq 
  10ee05:	c3                   	retq   

000000000010ee06 <_D3std8typeinfo8ti_creal10TypeInfo_c4initMFZAv>:

    void[] init()
  10ee06:	55                   	push   %rbp
  10ee07:	48 89 e5             	mov    %rsp,%rbp
  10ee0a:	53                   	push   %rbx
  10ee0b:	48 83 ec 28          	sub    $0x28,%rsp
  10ee0f:	48 89 fb             	mov    %rdi,%rbx
  10ee12:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10ee16:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10ee1a:	e8 25 48 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static creal r;

	return (cast(creal *)&r)[0 .. 1];
  10ee1f:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10ee26:	00 
  10ee27:	48 c7 45 e8 60 20 12 	movq   $0x122060,-0x18(%rbp)
  10ee2e:	00 
  10ee2f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10ee33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ee37:	49 89 c0             	mov    %rax,%r8
  10ee3a:	ba 20 00 00 00       	mov    $0x20,%edx
  10ee3f:	be 01 00 00 00       	mov    $0x1,%esi
  10ee44:	48 89 df             	mov    %rbx,%rdi
  10ee47:	e8 a4 80 00 00       	callq  116ef0 <_d_arraycast>
    }
  10ee4c:	48 89 d8             	mov    %rbx,%rax
  10ee4f:	48 83 c4 28          	add    $0x28,%rsp
  10ee53:	5b                   	pop    %rbx
  10ee54:	c9                   	leaveq 
  10ee55:	c3                   	retq   
  10ee56:	90                   	nop    
  10ee57:	90                   	nop    

000000000010ee58 <_D3std8typeinfo8ti_dchar10TypeInfo_w8toStringMFZAa>:

module std.typeinfo.ti_dchar;

class TypeInfo_w : TypeInfo
{
    char[] toString() { return "dchar"; }
  10ee58:	55                   	push   %rbp
  10ee59:	48 89 e5             	mov    %rsp,%rbp
  10ee5c:	53                   	push   %rbx
  10ee5d:	48 83 ec 08          	sub    $0x8,%rsp
  10ee61:	48 89 fb             	mov    %rdi,%rbx
  10ee64:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ee68:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10ee6c:	e8 d3 47 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10ee71:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10ee78:	48 c7 43 08 a0 92 11 	movq   $0x1192a0,0x8(%rbx)
  10ee7f:	00 
  10ee80:	48 89 d8             	mov    %rbx,%rax
  10ee83:	48 83 c4 08          	add    $0x8,%rsp
  10ee87:	5b                   	pop    %rbx
  10ee88:	c9                   	leaveq 
  10ee89:	c3                   	retq   

000000000010ee8a <_D3std8typeinfo8ti_dchar10TypeInfo_w7getHashMFPvZm>:

    hash_t getHash(void *p)
  10ee8a:	55                   	push   %rbp
  10ee8b:	48 89 e5             	mov    %rsp,%rbp
  10ee8e:	48 83 ec 10          	sub    $0x10,%rsp
  10ee92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ee96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ee9a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ee9e:	e8 a1 47 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p;
  10eea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10eea7:	8b 00                	mov    (%rax),%eax
  10eea9:	89 c0                	mov    %eax,%eax
    }
  10eeab:	c9                   	leaveq 
  10eeac:	c3                   	retq   

000000000010eead <_D3std8typeinfo8ti_dchar10TypeInfo_w6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10eead:	55                   	push   %rbp
  10eeae:	48 89 e5             	mov    %rsp,%rbp
  10eeb1:	48 83 ec 20          	sub    $0x20,%rsp
  10eeb5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10eeb9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10eebd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10eec1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10eec5:	e8 7a 47 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 == *cast(dchar *)p2;
  10eeca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10eece:	8b 10                	mov    (%rax),%edx
  10eed0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10eed4:	8b 00                	mov    (%rax),%eax
  10eed6:	39 c2                	cmp    %eax,%edx
  10eed8:	0f 94 c0             	sete   %al
  10eedb:	0f b6 c0             	movzbl %al,%eax
    }
  10eede:	c9                   	leaveq 
  10eedf:	c3                   	retq   

000000000010eee0 <_D3std8typeinfo8ti_dchar10TypeInfo_w7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10eee0:	55                   	push   %rbp
  10eee1:	48 89 e5             	mov    %rsp,%rbp
  10eee4:	48 83 ec 20          	sub    $0x20,%rsp
  10eee8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10eeec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10eef0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10eef4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10eef8:	e8 47 47 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dchar *)p1 - *cast(dchar *)p2;
  10eefd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ef01:	8b 10                	mov    (%rax),%edx
  10ef03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ef07:	8b 00                	mov    (%rax),%eax
  10ef09:	89 d1                	mov    %edx,%ecx
  10ef0b:	29 c1                	sub    %eax,%ecx
  10ef0d:	89 c8                	mov    %ecx,%eax
    }
  10ef0f:	c9                   	leaveq 
  10ef10:	c3                   	retq   

000000000010ef11 <_D3std8typeinfo8ti_dchar10TypeInfo_w5tsizeMFZm>:

    size_t tsize()
  10ef11:	55                   	push   %rbp
  10ef12:	48 89 e5             	mov    %rsp,%rbp
  10ef15:	48 83 ec 10          	sub    $0x10,%rsp
  10ef19:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ef1d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ef21:	e8 1e 47 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dchar.sizeof;
  10ef26:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  10ef2b:	c9                   	leaveq 
  10ef2c:	c3                   	retq   

000000000010ef2d <_D3std8typeinfo8ti_dchar10TypeInfo_w4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10ef2d:	55                   	push   %rbp
  10ef2e:	48 89 e5             	mov    %rsp,%rbp
  10ef31:	48 83 ec 30          	sub    $0x30,%rsp
  10ef35:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10ef39:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10ef3d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10ef41:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10ef45:	e8 fa 46 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dchar t;
  10ef4a:	c7 45 fc ff ff 00 00 	movl   $0xffff,-0x4(%rbp)

	t = *cast(dchar *)p1;
  10ef51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10ef55:	8b 00                	mov    (%rax),%eax
  10ef57:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(dchar *)p1 = *cast(dchar *)p2;
  10ef5a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10ef5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10ef62:	8b 00                	mov    (%rax),%eax
  10ef64:	89 02                	mov    %eax,(%rdx)
	*cast(dchar *)p2 = t;
  10ef66:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10ef6a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10ef6d:	89 02                	mov    %eax,(%rdx)
    }
  10ef6f:	c9                   	leaveq 
  10ef70:	c3                   	retq   

000000000010ef71 <_D3std8typeinfo8ti_dchar10TypeInfo_w4initMFZAv>:

    void[] init()
  10ef71:	55                   	push   %rbp
  10ef72:	48 89 e5             	mov    %rsp,%rbp
  10ef75:	53                   	push   %rbx
  10ef76:	48 83 ec 28          	sub    $0x28,%rsp
  10ef7a:	48 89 fb             	mov    %rdi,%rbx
  10ef7d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10ef81:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10ef85:	e8 ba 46 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static dchar c;

	return (cast(dchar *)&c)[0 .. 1];
  10ef8a:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10ef91:	00 
  10ef92:	48 c7 45 e8 20 21 12 	movq   $0x122120,-0x18(%rbp)
  10ef99:	00 
  10ef9a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10ef9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10efa2:	49 89 c0             	mov    %rax,%r8
  10efa5:	ba 04 00 00 00       	mov    $0x4,%edx
  10efaa:	be 01 00 00 00       	mov    $0x1,%esi
  10efaf:	48 89 df             	mov    %rbx,%rdi
  10efb2:	e8 39 7f 00 00       	callq  116ef0 <_d_arraycast>
    }
  10efb7:	48 89 d8             	mov    %rbx,%rax
  10efba:	48 83 c4 28          	add    $0x28,%rsp
  10efbe:	5b                   	pop    %rbx
  10efbf:	c9                   	leaveq 
  10efc0:	c3                   	retq   
  10efc1:	90                   	nop    
  10efc2:	90                   	nop    
  10efc3:	90                   	nop    

000000000010efc4 <_D3std8typeinfo11ti_delegate10TypeInfo_D7getHashMFPvZm>:

alias void delegate(int) dg;

class TypeInfo_D : TypeInfo
{
    hash_t getHash(void *p)
  10efc4:	55                   	push   %rbp
  10efc5:	48 89 e5             	mov    %rsp,%rbp
  10efc8:	48 83 ec 20          	sub    $0x20,%rsp
  10efcc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10efd0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10efd4:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10efd8:	e8 67 46 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	long l = *cast(long *)p;
  10efdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10efe1:	48 8b 00             	mov    (%rax),%rax
  10efe4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	return cast(uint)(l + (l >> 32));
  10efe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10efec:	89 c2                	mov    %eax,%edx
  10efee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10eff2:	48 c1 f8 20          	sar    $0x20,%rax
  10eff6:	8d 04 02             	lea    (%rdx,%rax,1),%eax
  10eff9:	89 c0                	mov    %eax,%eax
    }
  10effb:	c9                   	leaveq 
  10effc:	c3                   	retq   

000000000010effd <_D3std8typeinfo11ti_delegate10TypeInfo_D6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10effd:	55                   	push   %rbp
  10effe:	48 89 e5             	mov    %rsp,%rbp
  10f001:	48 83 ec 30          	sub    $0x30,%rsp
  10f005:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f009:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f00d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f011:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f015:	e8 2a 46 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(dg *)p1 == *cast(dg *)p2;
  10f01a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10f01e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f022:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10f026:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f02a:	48 c7 45 d0 10 00 00 	movq   $0x10,-0x30(%rbp)
  10f031:	00 
  10f032:	fc                   	cld    
  10f033:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  10f037:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10f03b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  10f03f:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  10f041:	0f 97 c2             	seta   %dl
  10f044:	0f 92 c0             	setb   %al
  10f047:	89 d1                	mov    %edx,%ecx
  10f049:	28 c1                	sub    %al,%cl
  10f04b:	89 c8                	mov    %ecx,%eax
  10f04d:	0f be c0             	movsbl %al,%eax
  10f050:	85 c0                	test   %eax,%eax
  10f052:	0f 94 c0             	sete   %al
  10f055:	0f b6 c0             	movzbl %al,%eax
    }
  10f058:	c9                   	leaveq 
  10f059:	c3                   	retq   

000000000010f05a <_D3std8typeinfo11ti_delegate10TypeInfo_D5tsizeMFZm>:

    size_t tsize()
  10f05a:	55                   	push   %rbp
  10f05b:	48 89 e5             	mov    %rsp,%rbp
  10f05e:	48 83 ec 10          	sub    $0x10,%rsp
  10f062:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f066:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f06a:	e8 d5 45 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return dg.sizeof;
  10f06f:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10f074:	c9                   	leaveq 
  10f075:	c3                   	retq   

000000000010f076 <_D3std8typeinfo11ti_delegate10TypeInfo_D4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10f076:	55                   	push   %rbp
  10f077:	48 89 e5             	mov    %rsp,%rbp
  10f07a:	48 83 ec 30          	sub    $0x30,%rsp
  10f07e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f082:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f086:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f08a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f08e:	e8 b1 45 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	dg t;
  10f093:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  10f09a:	00 
  10f09b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  10f0a2:	00 

	t = *cast(dg *)p1;
  10f0a3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10f0a7:	48 8b 02             	mov    (%rdx),%rax
  10f0aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10f0ae:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10f0b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(dg *)p1 = *cast(dg *)p2;
  10f0b6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10f0ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f0be:	48 8b 02             	mov    (%rdx),%rax
  10f0c1:	48 89 01             	mov    %rax,(%rcx)
  10f0c4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10f0c8:	48 89 41 08          	mov    %rax,0x8(%rcx)
	*cast(dg *)p2 = t;
  10f0cc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f0d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f0d4:	48 89 02             	mov    %rax,(%rdx)
  10f0d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10f0db:	48 89 42 08          	mov    %rax,0x8(%rdx)
    }
  10f0df:	c9                   	leaveq 
  10f0e0:	c3                   	retq   

000000000010f0e1 <_D3std8typeinfo11ti_delegate10TypeInfo_D5flagsMFZk>:

    uint flags()
  10f0e1:	55                   	push   %rbp
  10f0e2:	48 89 e5             	mov    %rsp,%rbp
  10f0e5:	48 83 ec 10          	sub    $0x10,%rsp
  10f0e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f0ed:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f0f1:	e8 4e 45 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10f0f6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10f0fb:	c9                   	leaveq 
  10f0fc:	c3                   	retq   
  10f0fd:	90                   	nop    
  10f0fe:	90                   	nop    
  10f0ff:	90                   	nop    

000000000010f100 <_D3std8typeinfo9ti_double10TypeInfo_d8toStringMFZAa>:
import system;
//private import std.math;

class TypeInfo_d : TypeInfo
{
    char[] toString() { return "double"; }
  10f100:	55                   	push   %rbp
  10f101:	48 89 e5             	mov    %rsp,%rbp
  10f104:	53                   	push   %rbx
  10f105:	48 83 ec 08          	sub    $0x8,%rsp
  10f109:	48 89 fb             	mov    %rdi,%rbx
  10f10c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f110:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f114:	e8 2b 45 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f119:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10f120:	48 c7 43 08 00 94 11 	movq   $0x119400,0x8(%rbx)
  10f127:	00 
  10f128:	48 89 d8             	mov    %rbx,%rax
  10f12b:	48 83 c4 08          	add    $0x8,%rsp
  10f12f:	5b                   	pop    %rbx
  10f130:	c9                   	leaveq 
  10f131:	c3                   	retq   

000000000010f132 <_D3std8typeinfo9ti_double10TypeInfo_d7getHashMFPvZm>:

    hash_t getHash(void *p)
  10f132:	55                   	push   %rbp
  10f133:	48 89 e5             	mov    %rsp,%rbp
  10f136:	48 83 ec 10          	sub    $0x10,%rsp
  10f13a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f13e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f142:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f146:	e8 f9 44 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1];
  10f14b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10f14f:	b8 00 00 00 00       	mov    $0x0,%eax
  10f154:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10f158:	8b 08                	mov    (%rax),%ecx
  10f15a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10f15e:	b8 04 00 00 00       	mov    $0x4,%eax
  10f163:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10f167:	8b 00                	mov    (%rax),%eax
  10f169:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10f16c:	89 c0                	mov    %eax,%eax
    }
  10f16e:	c9                   	leaveq 
  10f16f:	c3                   	retq   

000000000010f170 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>:

    static int _equals(double f1, double f2)
  10f170:	55                   	push   %rbp
  10f171:	48 89 e5             	mov    %rsp,%rbp
  10f174:	48 83 ec 30          	sub    $0x30,%rsp
  10f178:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  10f17d:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	return f1 == f2 ||
  10f182:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  10f187:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  10f18c:	7a 02                	jp     10f190 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x20>
  10f18e:	74 1e                	je     10f1ae <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x3e>
  10f190:	dd 45 f8             	fldl   -0x8(%rbp)
  10f193:	db 3c 24             	fstpt  (%rsp)
  10f196:	e8 c3 66 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f19b:	85 c0                	test   %eax,%eax
  10f19d:	74 15                	je     10f1b4 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  10f19f:	dd 45 f0             	fldl   -0x10(%rbp)
  10f1a2:	db 3c 24             	fstpt  (%rsp)
  10f1a5:	e8 b4 66 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f1aa:	85 c0                	test   %eax,%eax
  10f1ac:	74 06                	je     10f1b4 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x44>
  10f1ae:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  10f1b2:	eb 04                	jmp    10f1b8 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi+0x48>
  10f1b4:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  10f1b8:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  10f1bc:	c9                   	leaveq 
  10f1bd:	c3                   	retq   

000000000010f1be <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>:

    static int _compare(double d1, double d2)
  10f1be:	55                   	push   %rbp
  10f1bf:	48 89 e5             	mov    %rsp,%rbp
  10f1c2:	48 83 ec 30          	sub    $0x30,%rsp
  10f1c6:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  10f1cb:	f2 0f 11 4d f0       	movsd  %xmm1,-0x10(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  10f1d0:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  10f1d5:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  10f1da:	0f 9a c0             	setp   %al
  10f1dd:	84 c0                	test   %al,%al
  10f1df:	74 39                	je     10f21a <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x5c>
	{
	    if (isnan(d1))
  10f1e1:	dd 45 f8             	fldl   -0x8(%rbp)
  10f1e4:	db 3c 24             	fstpt  (%rsp)
  10f1e7:	e8 72 66 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f1ec:	85 c0                	test   %eax,%eax
  10f1ee:	74 21                	je     10f211 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x53>
	    {	if (isnan(d2))
  10f1f0:	dd 45 f0             	fldl   -0x10(%rbp)
  10f1f3:	db 3c 24             	fstpt  (%rsp)
  10f1f6:	e8 63 66 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f1fb:	85 c0                	test   %eax,%eax
  10f1fd:	74 09                	je     10f208 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x4a>
		    return 0;
  10f1ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  10f206:	eb 59                	jmp    10f261 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
		return -1;
  10f208:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  10f20f:	eb 50                	jmp    10f261 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	    }
	    return 1;
  10f211:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  10f218:	eb 47                	jmp    10f261 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0xa3>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  10f21a:	66 0f 12 45 f8       	movlpd -0x8(%rbp),%xmm0
  10f21f:	66 0f 2e 45 f0       	ucomisd -0x10(%rbp),%xmm0
  10f224:	7a 02                	jp     10f228 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6a>
  10f226:	74 02                	je     10f22a <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x6c>
  10f228:	eb 09                	jmp    10f233 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x75>
  10f22a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  10f231:	eb 28                	jmp    10f25b <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x9d>
  10f233:	66 0f 12 4d f8       	movlpd -0x8(%rbp),%xmm1
  10f238:	66 0f 12 45 f0       	movlpd -0x10(%rbp),%xmm0
  10f23d:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10f241:	77 02                	ja     10f245 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x87>
  10f243:	eb 09                	jmp    10f24e <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x90>
  10f245:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  10f24c:	eb 07                	jmp    10f255 <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi+0x97>
  10f24e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  10f255:	8b 45 ec             	mov    -0x14(%rbp),%eax
  10f258:	89 45 e8             	mov    %eax,-0x18(%rbp)
  10f25b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  10f25e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  10f261:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  10f264:	c9                   	leaveq 
  10f265:	c3                   	retq   

000000000010f266 <_D3std8typeinfo9ti_double10TypeInfo_d6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10f266:	55                   	push   %rbp
  10f267:	48 89 e5             	mov    %rsp,%rbp
  10f26a:	48 83 ec 20          	sub    $0x20,%rsp
  10f26e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f272:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f276:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f27a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f27e:	e8 c1 43 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(double *)p1, *cast(double *)p2);
  10f283:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f287:	48 8b 10             	mov    (%rax),%rdx
  10f28a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f28e:	48 8b 00             	mov    (%rax),%rax
  10f291:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10f295:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10f29a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10f29e:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  10f2a3:	e8 c8 fe ff ff       	callq  10f170 <_D3std8typeinfo9ti_double10TypeInfo_d7_equalsFddZi>
    }
  10f2a8:	c9                   	leaveq 
  10f2a9:	c3                   	retq   

000000000010f2aa <_D3std8typeinfo9ti_double10TypeInfo_d7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10f2aa:	55                   	push   %rbp
  10f2ab:	48 89 e5             	mov    %rsp,%rbp
  10f2ae:	48 83 ec 20          	sub    $0x20,%rsp
  10f2b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f2b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f2ba:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f2be:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f2c2:	e8 7d 43 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(double *)p1, *cast(double *)p2);
  10f2c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f2cb:	48 8b 10             	mov    (%rax),%rdx
  10f2ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f2d2:	48 8b 00             	mov    (%rax),%rax
  10f2d5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10f2d9:	66 0f 12 4d e0       	movlpd -0x20(%rbp),%xmm1
  10f2de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  10f2e2:	66 0f 12 45 e0       	movlpd -0x20(%rbp),%xmm0
  10f2e7:	e8 d2 fe ff ff       	callq  10f1be <_D3std8typeinfo9ti_double10TypeInfo_d8_compareFddZi>
    }
  10f2ec:	c9                   	leaveq 
  10f2ed:	c3                   	retq   

000000000010f2ee <_D3std8typeinfo9ti_double10TypeInfo_d5tsizeMFZm>:

    size_t tsize()
  10f2ee:	55                   	push   %rbp
  10f2ef:	48 89 e5             	mov    %rsp,%rbp
  10f2f2:	48 83 ec 10          	sub    $0x10,%rsp
  10f2f6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f2fa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f2fe:	e8 41 43 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return double.sizeof;
  10f303:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  10f308:	c9                   	leaveq 
  10f309:	c3                   	retq   

000000000010f30a <_D3std8typeinfo9ti_double10TypeInfo_d4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10f30a:	55                   	push   %rbp
  10f30b:	48 89 e5             	mov    %rsp,%rbp
  10f30e:	48 83 ec 30          	sub    $0x30,%rsp
  10f312:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f316:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f31a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f31e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f322:	e8 1d 43 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	double t;
  10f327:	48 b8 00 00 00 00 00 	mov    $0x7ff8000000000000,%rax
  10f32e:	00 f8 7f 
  10f331:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	t = *cast(double *)p1;
  10f335:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10f339:	48 8b 00             	mov    (%rax),%rax
  10f33c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(double *)p1 = *cast(double *)p2;
  10f340:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10f344:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10f348:	48 8b 00             	mov    (%rax),%rax
  10f34b:	48 89 02             	mov    %rax,(%rdx)
	*cast(double *)p2 = t;
  10f34e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10f356:	48 89 02             	mov    %rax,(%rdx)
    }
  10f359:	c9                   	leaveq 
  10f35a:	c3                   	retq   

000000000010f35b <_D3std8typeinfo9ti_double10TypeInfo_d4initMFZAv>:

    void[] init()
  10f35b:	55                   	push   %rbp
  10f35c:	48 89 e5             	mov    %rsp,%rbp
  10f35f:	53                   	push   %rbx
  10f360:	48 83 ec 28          	sub    $0x28,%rsp
  10f364:	48 89 fb             	mov    %rdi,%rbx
  10f367:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10f36b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10f36f:	e8 d0 42 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static double r;

	return (cast(double *)&r)[0 .. 1];
  10f374:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10f37b:	00 
  10f37c:	48 c7 45 e8 80 22 12 	movq   $0x122280,-0x18(%rbp)
  10f383:	00 
  10f384:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10f388:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f38c:	49 89 c0             	mov    %rax,%r8
  10f38f:	ba 08 00 00 00       	mov    $0x8,%edx
  10f394:	be 01 00 00 00       	mov    $0x1,%esi
  10f399:	48 89 df             	mov    %rbx,%rdi
  10f39c:	e8 4f 7b 00 00       	callq  116ef0 <_d_arraycast>
    }
  10f3a1:	48 89 d8             	mov    %rbx,%rax
  10f3a4:	48 83 c4 28          	add    $0x28,%rsp
  10f3a8:	5b                   	pop    %rbx
  10f3a9:	c9                   	leaveq 
  10f3aa:	c3                   	retq   
  10f3ab:	90                   	nop    

000000000010f3ac <_D3std8typeinfo8ti_float10TypeInfo_f8toStringMFZAa>:
import system;
//private import std.math;

class TypeInfo_f : TypeInfo
{
    char[] toString() { return "float"; }
  10f3ac:	55                   	push   %rbp
  10f3ad:	48 89 e5             	mov    %rsp,%rbp
  10f3b0:	53                   	push   %rbx
  10f3b1:	48 83 ec 08          	sub    $0x8,%rsp
  10f3b5:	48 89 fb             	mov    %rdi,%rbx
  10f3b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f3bc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f3c0:	e8 7f 42 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f3c5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10f3cc:	48 c7 43 08 c0 94 11 	movq   $0x1194c0,0x8(%rbx)
  10f3d3:	00 
  10f3d4:	48 89 d8             	mov    %rbx,%rax
  10f3d7:	48 83 c4 08          	add    $0x8,%rsp
  10f3db:	5b                   	pop    %rbx
  10f3dc:	c9                   	leaveq 
  10f3dd:	c3                   	retq   

000000000010f3de <_D3std8typeinfo8ti_float10TypeInfo_f7getHashMFPvZm>:

    hash_t getHash(void *p)
  10f3de:	55                   	push   %rbp
  10f3df:	48 89 e5             	mov    %rsp,%rbp
  10f3e2:	48 83 ec 10          	sub    $0x10,%rsp
  10f3e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f3ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f3ee:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f3f2:	e8 4d 42 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  10f3f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f3fb:	8b 00                	mov    (%rax),%eax
  10f3fd:	89 c0                	mov    %eax,%eax
    }
  10f3ff:	c9                   	leaveq 
  10f400:	c3                   	retq   

000000000010f401 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>:

    static int _equals(float f1, float f2)
  10f401:	55                   	push   %rbp
  10f402:	48 89 e5             	mov    %rsp,%rbp
  10f405:	48 83 ec 20          	sub    $0x20,%rsp
  10f409:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  10f40e:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	return f1 == f2 ||
  10f413:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  10f418:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  10f41c:	7a 02                	jp     10f420 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x1f>
  10f41e:	74 1e                	je     10f43e <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x3d>
  10f420:	d9 45 fc             	flds   -0x4(%rbp)
  10f423:	db 3c 24             	fstpt  (%rsp)
  10f426:	e8 33 64 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f42b:	85 c0                	test   %eax,%eax
  10f42d:	74 15                	je     10f444 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  10f42f:	d9 45 f8             	flds   -0x8(%rbp)
  10f432:	db 3c 24             	fstpt  (%rsp)
  10f435:	e8 24 64 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f43a:	85 c0                	test   %eax,%eax
  10f43c:	74 06                	je     10f444 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x43>
  10f43e:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  10f442:	eb 04                	jmp    10f448 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi+0x47>
  10f444:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  10f448:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  10f44c:	c9                   	leaveq 
  10f44d:	c3                   	retq   

000000000010f44e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>:

    static int _compare(float d1, float d2)
  10f44e:	55                   	push   %rbp
  10f44f:	48 89 e5             	mov    %rsp,%rbp
  10f452:	48 83 ec 30          	sub    $0x30,%rsp
  10f456:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  10f45b:	f3 0f 11 4d f8       	movss  %xmm1,-0x8(%rbp)
    {
	if (d1 !<>= d2)		// if either are NaN
  10f460:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  10f465:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  10f469:	0f 9a c0             	setp   %al
  10f46c:	84 c0                	test   %al,%al
  10f46e:	74 39                	je     10f4a9 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x5b>
	{
	    if (isnan(d1))
  10f470:	d9 45 fc             	flds   -0x4(%rbp)
  10f473:	db 3c 24             	fstpt  (%rsp)
  10f476:	e8 e3 63 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f47b:	85 c0                	test   %eax,%eax
  10f47d:	74 21                	je     10f4a0 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x52>
	    {	if (isnan(d2))
  10f47f:	d9 45 f8             	flds   -0x8(%rbp)
  10f482:	db 3c 24             	fstpt  (%rsp)
  10f485:	e8 d4 63 ff ff       	callq  10585e <_D6system5isnanFeZi>
  10f48a:	85 c0                	test   %eax,%eax
  10f48c:	74 09                	je     10f497 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x49>
		    return 0;
  10f48e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  10f495:	eb 57                	jmp    10f4ee <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
		return -1;
  10f497:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
  10f49e:	eb 4e                	jmp    10f4ee <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	    }
	    return 1;
  10f4a0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  10f4a7:	eb 45                	jmp    10f4ee <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0xa0>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  10f4a9:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  10f4ae:	0f 2e 45 f8          	ucomiss -0x8(%rbp),%xmm0
  10f4b2:	7a 02                	jp     10f4b6 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x68>
  10f4b4:	74 02                	je     10f4b8 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x6a>
  10f4b6:	eb 09                	jmp    10f4c1 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x73>
  10f4b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  10f4bf:	eb 27                	jmp    10f4e8 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x9a>
  10f4c1:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  10f4c6:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  10f4cb:	0f 2e c1             	ucomiss %xmm1,%xmm0
  10f4ce:	77 02                	ja     10f4d2 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x84>
  10f4d0:	eb 09                	jmp    10f4db <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x8d>
  10f4d2:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  10f4d9:	eb 07                	jmp    10f4e2 <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi+0x94>
  10f4db:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  10f4e2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  10f4e5:	89 45 f0             	mov    %eax,-0x10(%rbp)
  10f4e8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  10f4eb:	89 45 ec             	mov    %eax,-0x14(%rbp)
  10f4ee:	8b 45 ec             	mov    -0x14(%rbp),%eax
    }
  10f4f1:	c9                   	leaveq 
  10f4f2:	c3                   	retq   

000000000010f4f3 <_D3std8typeinfo8ti_float10TypeInfo_f6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10f4f3:	55                   	push   %rbp
  10f4f4:	48 89 e5             	mov    %rsp,%rbp
  10f4f7:	48 83 ec 20          	sub    $0x20,%rsp
  10f4fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f4ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f503:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f507:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f50b:	e8 34 41 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(float *)p1, *cast(float *)p2);
  10f510:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f514:	8b 10                	mov    (%rax),%edx
  10f516:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f51a:	8b 00                	mov    (%rax),%eax
  10f51c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  10f51f:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  10f524:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  10f527:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  10f52c:	e8 d0 fe ff ff       	callq  10f401 <_D3std8typeinfo8ti_float10TypeInfo_f7_equalsFffZi>
    }
  10f531:	c9                   	leaveq 
  10f532:	c3                   	retq   

000000000010f533 <_D3std8typeinfo8ti_float10TypeInfo_f7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10f533:	55                   	push   %rbp
  10f534:	48 89 e5             	mov    %rsp,%rbp
  10f537:	48 83 ec 20          	sub    $0x20,%rsp
  10f53b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f53f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f543:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f547:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f54b:	e8 f4 40 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(float *)p1, *cast(float *)p2);
  10f550:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f554:	8b 10                	mov    (%rax),%edx
  10f556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f55a:	8b 00                	mov    (%rax),%eax
  10f55c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  10f55f:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  10f564:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  10f567:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  10f56c:	e8 dd fe ff ff       	callq  10f44e <_D3std8typeinfo8ti_float10TypeInfo_f8_compareFffZi>
    }
  10f571:	c9                   	leaveq 
  10f572:	c3                   	retq   

000000000010f573 <_D3std8typeinfo8ti_float10TypeInfo_f5tsizeMFZm>:

    size_t tsize()
  10f573:	55                   	push   %rbp
  10f574:	48 89 e5             	mov    %rsp,%rbp
  10f577:	48 83 ec 10          	sub    $0x10,%rsp
  10f57b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f57f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f583:	e8 bc 40 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return float.sizeof;
  10f588:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  10f58d:	c9                   	leaveq 
  10f58e:	c3                   	retq   

000000000010f58f <_D3std8typeinfo8ti_float10TypeInfo_f4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10f58f:	55                   	push   %rbp
  10f590:	48 89 e5             	mov    %rsp,%rbp
  10f593:	48 83 ec 30          	sub    $0x30,%rsp
  10f597:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f59b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f59f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f5a3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f5a7:	e8 98 40 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	float t;
  10f5ac:	b8 00 00 c0 7f       	mov    $0x7fc00000,%eax
  10f5b1:	89 45 fc             	mov    %eax,-0x4(%rbp)

	t = *cast(float *)p1;
  10f5b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10f5b8:	8b 00                	mov    (%rax),%eax
  10f5ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(float *)p1 = *cast(float *)p2;
  10f5bd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10f5c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10f5c5:	8b 00                	mov    (%rax),%eax
  10f5c7:	89 02                	mov    %eax,(%rdx)
	*cast(float *)p2 = t;
  10f5c9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f5cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10f5d0:	89 02                	mov    %eax,(%rdx)
    }
  10f5d2:	c9                   	leaveq 
  10f5d3:	c3                   	retq   

000000000010f5d4 <_D3std8typeinfo8ti_float10TypeInfo_f4initMFZAv>:

    void[] init()
  10f5d4:	55                   	push   %rbp
  10f5d5:	48 89 e5             	mov    %rsp,%rbp
  10f5d8:	53                   	push   %rbx
  10f5d9:	48 83 ec 28          	sub    $0x28,%rsp
  10f5dd:	48 89 fb             	mov    %rdi,%rbx
  10f5e0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10f5e4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10f5e8:	e8 57 40 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static float r;

	return (cast(float *)&r)[0 .. 1];
  10f5ed:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10f5f4:	00 
  10f5f5:	48 c7 45 e8 40 23 12 	movq   $0x122340,-0x18(%rbp)
  10f5fc:	00 
  10f5fd:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10f601:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f605:	49 89 c0             	mov    %rax,%r8
  10f608:	ba 04 00 00 00       	mov    $0x4,%edx
  10f60d:	be 01 00 00 00       	mov    $0x1,%esi
  10f612:	48 89 df             	mov    %rbx,%rdi
  10f615:	e8 d6 78 00 00       	callq  116ef0 <_d_arraycast>
    }
  10f61a:	48 89 d8             	mov    %rbx,%rax
  10f61d:	48 83 c4 28          	add    $0x28,%rsp
  10f621:	5b                   	pop    %rbx
  10f622:	c9                   	leaveq 
  10f623:	c3                   	retq   

000000000010f624 <_D3std8typeinfo10ti_idouble10TypeInfo_p8toStringMFZAa>:

private import std.typeinfo.ti_double;

class TypeInfo_p : TypeInfo_d
{
    char[] toString() { return "idouble"; }
  10f624:	55                   	push   %rbp
  10f625:	48 89 e5             	mov    %rsp,%rbp
  10f628:	53                   	push   %rbx
  10f629:	48 83 ec 08          	sub    $0x8,%rsp
  10f62d:	48 89 fb             	mov    %rdi,%rbx
  10f630:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f634:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f638:	e8 07 40 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f63d:	48 c7 03 07 00 00 00 	movq   $0x7,(%rbx)
  10f644:	48 c7 43 08 80 95 11 	movq   $0x119580,0x8(%rbx)
  10f64b:	00 
  10f64c:	48 89 d8             	mov    %rbx,%rax
  10f64f:	48 83 c4 08          	add    $0x8,%rsp
  10f653:	5b                   	pop    %rbx
  10f654:	c9                   	leaveq 
  10f655:	c3                   	retq   
  10f656:	90                   	nop    
  10f657:	90                   	nop    

000000000010f658 <_D3std8typeinfo9ti_ifloat10TypeInfo_o8toStringMFZAa>:

private import std.typeinfo.ti_float;

class TypeInfo_o : TypeInfo_f
{
    char[] toString() { return "ifloat"; }
  10f658:	55                   	push   %rbp
  10f659:	48 89 e5             	mov    %rsp,%rbp
  10f65c:	53                   	push   %rbx
  10f65d:	48 83 ec 08          	sub    $0x8,%rsp
  10f661:	48 89 fb             	mov    %rdi,%rbx
  10f664:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f668:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f66c:	e8 d3 3f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f671:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  10f678:	48 c7 43 08 40 96 11 	movq   $0x119640,0x8(%rbx)
  10f67f:	00 
  10f680:	48 89 d8             	mov    %rbx,%rax
  10f683:	48 83 c4 08          	add    $0x8,%rsp
  10f687:	5b                   	pop    %rbx
  10f688:	c9                   	leaveq 
  10f689:	c3                   	retq   
  10f68a:	90                   	nop    
  10f68b:	90                   	nop    

000000000010f68c <_D3std8typeinfo6ti_int10TypeInfo_i8toStringMFZAa>:

module std.typeinfo.ti_int;

class TypeInfo_i : TypeInfo
{
    char[] toString() { return "int"; }
  10f68c:	55                   	push   %rbp
  10f68d:	48 89 e5             	mov    %rsp,%rbp
  10f690:	53                   	push   %rbx
  10f691:	48 83 ec 08          	sub    $0x8,%rsp
  10f695:	48 89 fb             	mov    %rdi,%rbx
  10f698:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f69c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f6a0:	e8 9f 3f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f6a5:	48 c7 03 03 00 00 00 	movq   $0x3,(%rbx)
  10f6ac:	48 c7 43 08 00 97 11 	movq   $0x119700,0x8(%rbx)
  10f6b3:	00 
  10f6b4:	48 89 d8             	mov    %rbx,%rax
  10f6b7:	48 83 c4 08          	add    $0x8,%rsp
  10f6bb:	5b                   	pop    %rbx
  10f6bc:	c9                   	leaveq 
  10f6bd:	c3                   	retq   

000000000010f6be <_D3std8typeinfo6ti_int10TypeInfo_i7getHashMFPvZm>:

    hash_t getHash(void *p)
  10f6be:	55                   	push   %rbp
  10f6bf:	48 89 e5             	mov    %rsp,%rbp
  10f6c2:	48 83 ec 10          	sub    $0x10,%rsp
  10f6c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f6ca:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f6ce:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f6d2:	e8 6d 3f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  10f6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f6db:	8b 00                	mov    (%rax),%eax
  10f6dd:	89 c0                	mov    %eax,%eax
    }
  10f6df:	c9                   	leaveq 
  10f6e0:	c3                   	retq   

000000000010f6e1 <_D3std8typeinfo6ti_int10TypeInfo_i6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10f6e1:	55                   	push   %rbp
  10f6e2:	48 89 e5             	mov    %rsp,%rbp
  10f6e5:	48 83 ec 20          	sub    $0x20,%rsp
  10f6e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f6ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f6f1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f6f5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f6f9:	e8 46 3f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  10f6fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f702:	8b 10                	mov    (%rax),%edx
  10f704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f708:	8b 00                	mov    (%rax),%eax
  10f70a:	39 c2                	cmp    %eax,%edx
  10f70c:	0f 94 c0             	sete   %al
  10f70f:	0f b6 c0             	movzbl %al,%eax
    }
  10f712:	c9                   	leaveq 
  10f713:	c3                   	retq   

000000000010f714 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10f714:	55                   	push   %rbp
  10f715:	48 89 e5             	mov    %rsp,%rbp
  10f718:	48 83 ec 20          	sub    $0x20,%rsp
  10f71c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f720:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f724:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f728:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f72c:	e8 13 3f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(int*) p1 < *cast(int*) p2)
  10f731:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f735:	8b 10                	mov    (%rax),%edx
  10f737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f73b:	8b 00                	mov    (%rax),%eax
  10f73d:	39 c2                	cmp    %eax,%edx
  10f73f:	7d 09                	jge    10f74a <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x36>
	    return -1;
  10f741:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  10f748:	eb 20                	jmp    10f76a <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	else if (*cast(int*) p1 > *cast(int*) p2)
  10f74a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f74e:	8b 10                	mov    (%rax),%edx
  10f750:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f754:	8b 00                	mov    (%rax),%eax
  10f756:	39 c2                	cmp    %eax,%edx
  10f758:	7e 09                	jle    10f763 <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x4f>
	    return 1;
  10f75a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  10f761:	eb 07                	jmp    10f76a <_D3std8typeinfo6ti_int10TypeInfo_i7compareMFPvPvZi+0x56>
	return 0;
  10f763:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  10f76a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  10f76d:	c9                   	leaveq 
  10f76e:	c3                   	retq   

000000000010f76f <_D3std8typeinfo6ti_int10TypeInfo_i5tsizeMFZm>:

    size_t tsize()
  10f76f:	55                   	push   %rbp
  10f770:	48 89 e5             	mov    %rsp,%rbp
  10f773:	48 83 ec 10          	sub    $0x10,%rsp
  10f777:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f77b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f77f:	e8 c0 3e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return int.sizeof;
  10f784:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  10f789:	c9                   	leaveq 
  10f78a:	c3                   	retq   

000000000010f78b <_D3std8typeinfo6ti_int10TypeInfo_i4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10f78b:	55                   	push   %rbp
  10f78c:	48 89 e5             	mov    %rsp,%rbp
  10f78f:	48 83 ec 30          	sub    $0x30,%rsp
  10f793:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f797:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f79b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f79f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f7a3:	e8 9c 3e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  10f7a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(int *)p1;
  10f7af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10f7b3:	8b 00                	mov    (%rax),%eax
  10f7b5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(int *)p1 = *cast(int *)p2;
  10f7b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10f7bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10f7c0:	8b 00                	mov    (%rax),%eax
  10f7c2:	89 02                	mov    %eax,(%rdx)
	*cast(int *)p2 = t;
  10f7c4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f7c8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10f7cb:	89 02                	mov    %eax,(%rdx)
    }
  10f7cd:	c9                   	leaveq 
  10f7ce:	c3                   	retq   
  10f7cf:	90                   	nop    

000000000010f7d0 <_D3std8typeinfo8ti_ireal10TypeInfo_j8toStringMFZAa>:

private import std.typeinfo.ti_real;

class TypeInfo_j : TypeInfo_e
{
    char[] toString() { return "ireal"; }
  10f7d0:	55                   	push   %rbp
  10f7d1:	48 89 e5             	mov    %rsp,%rbp
  10f7d4:	53                   	push   %rbx
  10f7d5:	48 83 ec 08          	sub    $0x8,%rsp
  10f7d9:	48 89 fb             	mov    %rdi,%rbx
  10f7dc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f7e0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f7e4:	e8 5b 3e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f7e9:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10f7f0:	48 c7 43 08 c0 97 11 	movq   $0x1197c0,0x8(%rbx)
  10f7f7:	00 
  10f7f8:	48 89 d8             	mov    %rbx,%rax
  10f7fb:	48 83 c4 08          	add    $0x8,%rsp
  10f7ff:	5b                   	pop    %rbx
  10f800:	c9                   	leaveq 
  10f801:	c3                   	retq   
  10f802:	90                   	nop    
  10f803:	90                   	nop    

000000000010f804 <_D3std8typeinfo7ti_long10TypeInfo_l8toStringMFZAa>:

module std.typeinfo.ti_long;

class TypeInfo_l : TypeInfo
{
    char[] toString() { return "long"; }
  10f804:	55                   	push   %rbp
  10f805:	48 89 e5             	mov    %rsp,%rbp
  10f808:	53                   	push   %rbx
  10f809:	48 83 ec 08          	sub    $0x8,%rsp
  10f80d:	48 89 fb             	mov    %rdi,%rbx
  10f810:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f814:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10f818:	e8 27 3e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10f81d:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  10f824:	48 c7 43 08 80 98 11 	movq   $0x119880,0x8(%rbx)
  10f82b:	00 
  10f82c:	48 89 d8             	mov    %rbx,%rax
  10f82f:	48 83 c4 08          	add    $0x8,%rsp
  10f833:	5b                   	pop    %rbx
  10f834:	c9                   	leaveq 
  10f835:	c3                   	retq   

000000000010f836 <_D3std8typeinfo7ti_long10TypeInfo_l7getHashMFPvZm>:

    hash_t getHash(void *p)
  10f836:	55                   	push   %rbp
  10f837:	48 89 e5             	mov    %rsp,%rbp
  10f83a:	48 83 ec 10          	sub    $0x10,%rsp
  10f83e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f842:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f846:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f84a:	e8 f5 3d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  10f84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f853:	8b 08                	mov    (%rax),%ecx
  10f855:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10f859:	b8 04 00 00 00       	mov    $0x4,%eax
  10f85e:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10f862:	8b 00                	mov    (%rax),%eax
  10f864:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10f867:	89 c0                	mov    %eax,%eax
    }
  10f869:	c9                   	leaveq 
  10f86a:	c3                   	retq   

000000000010f86b <_D3std8typeinfo7ti_long10TypeInfo_l6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10f86b:	55                   	push   %rbp
  10f86c:	48 89 e5             	mov    %rsp,%rbp
  10f86f:	48 83 ec 20          	sub    $0x20,%rsp
  10f873:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f877:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f87b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f87f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f883:	e8 bc 3d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(long *)p1 == *cast(long *)p2;
  10f888:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f88c:	48 8b 10             	mov    (%rax),%rdx
  10f88f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f893:	48 8b 00             	mov    (%rax),%rax
  10f896:	48 39 c2             	cmp    %rax,%rdx
  10f899:	0f 94 c0             	sete   %al
  10f89c:	0f b6 c0             	movzbl %al,%eax
    }
  10f89f:	c9                   	leaveq 
  10f8a0:	c3                   	retq   

000000000010f8a1 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10f8a1:	55                   	push   %rbp
  10f8a2:	48 89 e5             	mov    %rsp,%rbp
  10f8a5:	48 83 ec 20          	sub    $0x20,%rsp
  10f8a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f8ad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f8b1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f8b5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f8b9:	e8 86 3d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(long *)p1 < *cast(long *)p2)
  10f8be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f8c2:	48 8b 10             	mov    (%rax),%rdx
  10f8c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f8c9:	48 8b 00             	mov    (%rax),%rax
  10f8cc:	48 39 c2             	cmp    %rax,%rdx
  10f8cf:	7d 09                	jge    10f8da <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x39>
	    return -1;
  10f8d1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  10f8d8:	eb 23                	jmp    10f8fd <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	else if (*cast(long *)p1 > *cast(long *)p2)
  10f8da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f8de:	48 8b 10             	mov    (%rax),%rdx
  10f8e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f8e5:	48 8b 00             	mov    (%rax),%rax
  10f8e8:	48 39 c2             	cmp    %rax,%rdx
  10f8eb:	7e 09                	jle    10f8f6 <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x55>
	    return 1;
  10f8ed:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  10f8f4:	eb 07                	jmp    10f8fd <_D3std8typeinfo7ti_long10TypeInfo_l7compareMFPvPvZi+0x5c>
	return 0;
  10f8f6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  10f8fd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  10f900:	c9                   	leaveq 
  10f901:	c3                   	retq   

000000000010f902 <_D3std8typeinfo7ti_long10TypeInfo_l5tsizeMFZm>:

    size_t tsize()
  10f902:	55                   	push   %rbp
  10f903:	48 89 e5             	mov    %rsp,%rbp
  10f906:	48 83 ec 10          	sub    $0x10,%rsp
  10f90a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f90e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f912:	e8 2d 3d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return long.sizeof;
  10f917:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  10f91c:	c9                   	leaveq 
  10f91d:	c3                   	retq   

000000000010f91e <_D3std8typeinfo7ti_long10TypeInfo_l4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10f91e:	55                   	push   %rbp
  10f91f:	48 89 e5             	mov    %rsp,%rbp
  10f922:	48 83 ec 30          	sub    $0x30,%rsp
  10f926:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f92a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f92e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f932:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f936:	e8 09 3d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	long t;
  10f93b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  10f942:	00 

	t = *cast(long *)p1;
  10f943:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10f947:	48 8b 00             	mov    (%rax),%rax
  10f94a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(long *)p1 = *cast(long *)p2;
  10f94e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10f952:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10f956:	48 8b 00             	mov    (%rax),%rax
  10f959:	48 89 02             	mov    %rax,(%rdx)
	*cast(long *)p2 = t;
  10f95c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10f960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10f964:	48 89 02             	mov    %rax,(%rdx)
    }
  10f967:	c9                   	leaveq 
  10f968:	c3                   	retq   
  10f969:	90                   	nop    
  10f96a:	90                   	nop    
  10f96b:	90                   	nop    

000000000010f96c <_D3std8typeinfo6ti_ptr10TypeInfo_P7getHashMFPvZm>:

module std.typeinfo.ti_ptr;

class TypeInfo_P : TypeInfo
{
    hash_t getHash(void *p)
  10f96c:	55                   	push   %rbp
  10f96d:	48 89 e5             	mov    %rsp,%rbp
  10f970:	48 83 ec 10          	sub    $0x10,%rsp
  10f974:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f978:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f97c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f980:	e8 bf 3c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return cast(uint)*cast(void* *)p;
  10f985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f989:	48 8b 00             	mov    (%rax),%rax
  10f98c:	89 c0                	mov    %eax,%eax
    }
  10f98e:	c9                   	leaveq 
  10f98f:	c3                   	retq   

000000000010f990 <_D3std8typeinfo6ti_ptr10TypeInfo_P6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10f990:	55                   	push   %rbp
  10f991:	48 89 e5             	mov    %rsp,%rbp
  10f994:	48 83 ec 20          	sub    $0x20,%rsp
  10f998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10f99c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10f9a0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10f9a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10f9a8:	e8 97 3c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(void* *)p1 == *cast(void* *)p2;
  10f9ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10f9b1:	48 8b 10             	mov    (%rax),%rdx
  10f9b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10f9b8:	48 8b 00             	mov    (%rax),%rax
  10f9bb:	48 39 c2             	cmp    %rax,%rdx
  10f9be:	0f 94 c0             	sete   %al
  10f9c1:	0f b6 c0             	movzbl %al,%eax
    }
  10f9c4:	c9                   	leaveq 
  10f9c5:	c3                   	retq   

000000000010f9c6 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10f9c6:	55                   	push   %rbp
  10f9c7:	48 89 e5             	mov    %rsp,%rbp
  10f9ca:	48 83 ec 30          	sub    $0x30,%rsp
  10f9ce:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10f9d2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10f9d6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10f9da:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10f9de:	e8 61 3c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	auto c = *cast(void* *)p1 - *cast(void* *)p2;
  10f9e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10f9e7:	48 8b 10             	mov    (%rax),%rdx
  10f9ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10f9ee:	48 8b 00             	mov    (%rax),%rax
  10f9f1:	48 89 d1             	mov    %rdx,%rcx
  10f9f4:	48 29 c1             	sub    %rax,%rcx
  10f9f7:	48 89 c8             	mov    %rcx,%rax
  10f9fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (c < 0)
  10f9fe:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10fa03:	79 09                	jns    10fa0e <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x48>
	    return -1;
  10fa05:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%rbp)
  10fa0c:	eb 17                	jmp    10fa25 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	else if (c > 0)
  10fa0e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  10fa13:	7e 09                	jle    10fa1e <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x58>
	    return 1;
  10fa15:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  10fa1c:	eb 07                	jmp    10fa25 <_D3std8typeinfo6ti_ptr10TypeInfo_P7compareMFPvPvZi+0x5f>
	return 0;
  10fa1e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  10fa25:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    }
  10fa28:	c9                   	leaveq 
  10fa29:	c3                   	retq   

000000000010fa2a <_D3std8typeinfo6ti_ptr10TypeInfo_P5tsizeMFZm>:

    size_t tsize()
  10fa2a:	55                   	push   %rbp
  10fa2b:	48 89 e5             	mov    %rsp,%rbp
  10fa2e:	48 83 ec 10          	sub    $0x10,%rsp
  10fa32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fa36:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fa3a:	e8 05 3c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (void*).sizeof;
  10fa3f:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  10fa44:	c9                   	leaveq 
  10fa45:	c3                   	retq   

000000000010fa46 <_D3std8typeinfo6ti_ptr10TypeInfo_P4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10fa46:	55                   	push   %rbp
  10fa47:	48 89 e5             	mov    %rsp,%rbp
  10fa4a:	48 83 ec 30          	sub    $0x30,%rsp
  10fa4e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10fa52:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10fa56:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10fa5a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10fa5e:	e8 e1 3b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	void* t;
  10fa63:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  10fa6a:	00 

	t = *cast(void* *)p1;
  10fa6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10fa6f:	48 8b 00             	mov    (%rax),%rax
  10fa72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(void* *)p1 = *cast(void* *)p2;
  10fa76:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10fa7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fa7e:	48 8b 00             	mov    (%rax),%rax
  10fa81:	48 89 02             	mov    %rax,(%rdx)
	*cast(void* *)p2 = t;
  10fa84:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10fa88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10fa8c:	48 89 02             	mov    %rax,(%rdx)
    }
  10fa8f:	c9                   	leaveq 
  10fa90:	c3                   	retq   

000000000010fa91 <_D3std8typeinfo6ti_ptr10TypeInfo_P5flagsMFZk>:

    uint flags()
  10fa91:	55                   	push   %rbp
  10fa92:	48 89 e5             	mov    %rsp,%rbp
  10fa95:	48 83 ec 10          	sub    $0x10,%rsp
  10fa99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fa9d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10faa1:	e8 9e 3b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  10faa6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10faab:	c9                   	leaveq 
  10faac:	c3                   	retq   
  10faad:	90                   	nop    
  10faae:	90                   	nop    
  10faaf:	90                   	nop    

000000000010fab0 <_D3std8typeinfo7ti_real10TypeInfo_e8toStringMFZAa>:
import system;
//private import std.math;

class TypeInfo_e : TypeInfo
{
    char[] toString() { return "real"; }
  10fab0:	55                   	push   %rbp
  10fab1:	48 89 e5             	mov    %rsp,%rbp
  10fab4:	53                   	push   %rbx
  10fab5:	48 83 ec 08          	sub    $0x8,%rsp
  10fab9:	48 89 fb             	mov    %rdi,%rbx
  10fabc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10fac0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10fac4:	e8 7b 3b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10fac9:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  10fad0:	48 c7 43 08 e0 99 11 	movq   $0x1199e0,0x8(%rbx)
  10fad7:	00 
  10fad8:	48 89 d8             	mov    %rbx,%rax
  10fadb:	48 83 c4 08          	add    $0x8,%rsp
  10fadf:	5b                   	pop    %rbx
  10fae0:	c9                   	leaveq 
  10fae1:	c3                   	retq   

000000000010fae2 <_D3std8typeinfo7ti_real10TypeInfo_e7getHashMFPvZm>:

    hash_t getHash(void *p)
  10fae2:	55                   	push   %rbp
  10fae3:	48 89 e5             	mov    %rsp,%rbp
  10fae6:	48 83 ec 10          	sub    $0x10,%rsp
  10faea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10faee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10faf2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10faf6:	e8 49 3b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return (cast(uint *)p)[0] + (cast(uint *)p)[1] + (cast(ushort *)p)[4];
  10fafb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10faff:	b8 00 00 00 00       	mov    $0x0,%eax
  10fb04:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10fb08:	8b 08                	mov    (%rax),%ecx
  10fb0a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10fb0e:	b8 04 00 00 00       	mov    $0x4,%eax
  10fb13:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10fb17:	8b 00                	mov    (%rax),%eax
  10fb19:	01 c1                	add    %eax,%ecx
  10fb1b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10fb1f:	b8 08 00 00 00       	mov    $0x8,%eax
  10fb24:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  10fb28:	0f b7 00             	movzwl (%rax),%eax
  10fb2b:	0f b7 c0             	movzwl %ax,%eax
  10fb2e:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  10fb31:	89 c0                	mov    %eax,%eax
    }
  10fb33:	c9                   	leaveq 
  10fb34:	c3                   	retq   

000000000010fb35 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>:

    static int _equals(real f1, real f2)
  10fb35:	55                   	push   %rbp
  10fb36:	48 89 e5             	mov    %rsp,%rbp
  10fb39:	48 83 ec 20          	sub    $0x20,%rsp
    {
	return f1 == f2 ||
  10fb3d:	db 6d 10             	fldt   0x10(%rbp)
  10fb40:	db 6d 20             	fldt   0x20(%rbp)
  10fb43:	d9 c9                	fxch   %st(1)
  10fb45:	df e9                	fucomip %st(1),%st
  10fb47:	df c0                	ffreep %st(0)
  10fb49:	7a 02                	jp     10fb4d <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x18>
  10fb4b:	74 30                	je     10fb7d <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x48>
  10fb4d:	48 8b 45 10          	mov    0x10(%rbp),%rax
  10fb51:	8b 55 18             	mov    0x18(%rbp),%edx
  10fb54:	48 89 04 24          	mov    %rax,(%rsp)
  10fb58:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fb5c:	e8 fd 5c ff ff       	callq  10585e <_D6system5isnanFeZi>
  10fb61:	85 c0                	test   %eax,%eax
  10fb63:	74 1e                	je     10fb83 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  10fb65:	48 8b 45 20          	mov    0x20(%rbp),%rax
  10fb69:	8b 55 28             	mov    0x28(%rbp),%edx
  10fb6c:	48 89 04 24          	mov    %rax,(%rsp)
  10fb70:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fb74:	e8 e5 5c ff ff       	callq  10585e <_D6system5isnanFeZi>
  10fb79:	85 c0                	test   %eax,%eax
  10fb7b:	74 06                	je     10fb83 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x4e>
  10fb7d:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
  10fb81:	eb 04                	jmp    10fb87 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi+0x52>
  10fb83:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
  10fb87:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
		(isnan(f1) && isnan(f2));
    }
  10fb8b:	c9                   	leaveq 
  10fb8c:	c3                   	retq   

000000000010fb8d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>:

    static int _compare(real d1, real d2)
  10fb8d:	55                   	push   %rbp
  10fb8e:	48 89 e5             	mov    %rsp,%rbp
  10fb91:	48 83 ec 20          	sub    $0x20,%rsp
    {
	if (d1 !<>= d2)		// if either are NaN
  10fb95:	db 6d 10             	fldt   0x10(%rbp)
  10fb98:	db 6d 20             	fldt   0x20(%rbp)
  10fb9b:	df e9                	fucomip %st(1),%st
  10fb9d:	df c0                	ffreep %st(0)
  10fb9f:	0f 9a c0             	setp   %al
  10fba2:	84 c0                	test   %al,%al
  10fba4:	74 4b                	je     10fbf1 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x64>
	{
	    if (isnan(d1))
  10fba6:	48 8b 45 10          	mov    0x10(%rbp),%rax
  10fbaa:	8b 55 18             	mov    0x18(%rbp),%edx
  10fbad:	48 89 04 24          	mov    %rax,(%rsp)
  10fbb1:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fbb5:	e8 a4 5c ff ff       	callq  10585e <_D6system5isnanFeZi>
  10fbba:	85 c0                	test   %eax,%eax
  10fbbc:	74 2a                	je     10fbe8 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x5b>
	    {	if (isnan(d2))
  10fbbe:	48 8b 45 20          	mov    0x20(%rbp),%rax
  10fbc2:	8b 55 28             	mov    0x28(%rbp),%edx
  10fbc5:	48 89 04 24          	mov    %rax,(%rsp)
  10fbc9:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fbcd:	e8 8c 5c ff ff       	callq  10585e <_D6system5isnanFeZi>
  10fbd2:	85 c0                	test   %eax,%eax
  10fbd4:	74 09                	je     10fbdf <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x52>
		    return 0;
  10fbd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  10fbdd:	eb 57                	jmp    10fc36 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
		return -1;
  10fbdf:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
  10fbe6:	eb 4e                	jmp    10fc36 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	    }
	    return 1;
  10fbe8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  10fbef:	eb 45                	jmp    10fc36 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa9>
	}
	return (d1 == d2) ? 0 : ((d1 < d2) ? -1 : 1);
  10fbf1:	db 6d 10             	fldt   0x10(%rbp)
  10fbf4:	db 6d 20             	fldt   0x20(%rbp)
  10fbf7:	d9 c9                	fxch   %st(1)
  10fbf9:	df e9                	fucomip %st(1),%st
  10fbfb:	df c0                	ffreep %st(0)
  10fbfd:	7a 02                	jp     10fc01 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x74>
  10fbff:	74 02                	je     10fc03 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x76>
  10fc01:	eb 09                	jmp    10fc0c <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x7f>
  10fc03:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  10fc0a:	eb 24                	jmp    10fc30 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0xa3>
  10fc0c:	db 6d 10             	fldt   0x10(%rbp)
  10fc0f:	db 6d 20             	fldt   0x20(%rbp)
  10fc12:	df e9                	fucomip %st(1),%st
  10fc14:	df c0                	ffreep %st(0)
  10fc16:	77 02                	ja     10fc1a <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x8d>
  10fc18:	eb 09                	jmp    10fc23 <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x96>
  10fc1a:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
  10fc21:	eb 07                	jmp    10fc2a <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi+0x9d>
  10fc23:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  10fc2a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  10fc2d:	89 45 f8             	mov    %eax,-0x8(%rbp)
  10fc30:	8b 45 f8             	mov    -0x8(%rbp),%eax
  10fc33:	89 45 f4             	mov    %eax,-0xc(%rbp)
  10fc36:	8b 45 f4             	mov    -0xc(%rbp),%eax
    }
  10fc39:	c9                   	leaveq 
  10fc3a:	c3                   	retq   

000000000010fc3b <_D3std8typeinfo7ti_real10TypeInfo_e6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10fc3b:	55                   	push   %rbp
  10fc3c:	48 89 e5             	mov    %rsp,%rbp
  10fc3f:	53                   	push   %rbx
  10fc40:	48 83 ec 48          	sub    $0x48,%rsp
  10fc44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10fc48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10fc4c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10fc50:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10fc54:	e8 eb 39 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _equals(*cast(real *)p1, *cast(real *)p2);
  10fc59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fc5d:	48 8b 08             	mov    (%rax),%rcx
  10fc60:	8b 58 08             	mov    0x8(%rax),%ebx
  10fc63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10fc67:	8b 50 08             	mov    0x8(%rax),%edx
  10fc6a:	48 8b 00             	mov    (%rax),%rax
  10fc6d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  10fc72:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  10fc76:	48 89 04 24          	mov    %rax,(%rsp)
  10fc7a:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fc7e:	e8 b2 fe ff ff       	callq  10fb35 <_D3std8typeinfo7ti_real10TypeInfo_e7_equalsFeeZi>
    }
  10fc83:	48 83 c4 48          	add    $0x48,%rsp
  10fc87:	5b                   	pop    %rbx
  10fc88:	c9                   	leaveq 
  10fc89:	c3                   	retq   

000000000010fc8a <_D3std8typeinfo7ti_real10TypeInfo_e7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10fc8a:	55                   	push   %rbp
  10fc8b:	48 89 e5             	mov    %rsp,%rbp
  10fc8e:	53                   	push   %rbx
  10fc8f:	48 83 ec 48          	sub    $0x48,%rsp
  10fc93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10fc97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10fc9b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10fc9f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10fca3:	e8 9c 39 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return _compare(*cast(real *)p1, *cast(real *)p2);
  10fca8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fcac:	48 8b 08             	mov    (%rax),%rcx
  10fcaf:	8b 58 08             	mov    0x8(%rax),%ebx
  10fcb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10fcb6:	8b 50 08             	mov    0x8(%rax),%edx
  10fcb9:	48 8b 00             	mov    (%rax),%rax
  10fcbc:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  10fcc1:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  10fcc5:	48 89 04 24          	mov    %rax,(%rsp)
  10fcc9:	89 54 24 08          	mov    %edx,0x8(%rsp)
  10fccd:	e8 bb fe ff ff       	callq  10fb8d <_D3std8typeinfo7ti_real10TypeInfo_e8_compareFeeZi>
    }
  10fcd2:	48 83 c4 48          	add    $0x48,%rsp
  10fcd6:	5b                   	pop    %rbx
  10fcd7:	c9                   	leaveq 
  10fcd8:	c3                   	retq   

000000000010fcd9 <_D3std8typeinfo7ti_real10TypeInfo_e5tsizeMFZm>:

    size_t tsize()
  10fcd9:	55                   	push   %rbp
  10fcda:	48 89 e5             	mov    %rsp,%rbp
  10fcdd:	48 83 ec 10          	sub    $0x10,%rsp
  10fce1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fce5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fce9:	e8 56 39 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return real.sizeof;
  10fcee:	b8 10 00 00 00       	mov    $0x10,%eax
    }
  10fcf3:	c9                   	leaveq 
  10fcf4:	c3                   	retq   

000000000010fcf5 <_D3std8typeinfo7ti_real10TypeInfo_e4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10fcf5:	55                   	push   %rbp
  10fcf6:	48 89 e5             	mov    %rsp,%rbp
  10fcf9:	48 83 ec 30          	sub    $0x30,%rsp
  10fcfd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10fd01:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10fd05:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10fd09:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10fd0d:	e8 32 39 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	real t;
  10fd12:	48 b8 00 00 00 00 00 	mov    $0xc000000000000000,%rax
  10fd19:	00 00 c0 
  10fd1c:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  10fd21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10fd25:	89 55 f8             	mov    %edx,-0x8(%rbp)

	t = *cast(real *)p1;
  10fd28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10fd2c:	8b 50 08             	mov    0x8(%rax),%edx
  10fd2f:	48 8b 00             	mov    (%rax),%rax
  10fd32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  10fd36:	89 55 f8             	mov    %edx,-0x8(%rbp)
	*cast(real *)p1 = *cast(real *)p2;
  10fd39:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10fd3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fd41:	8b 50 08             	mov    0x8(%rax),%edx
  10fd44:	48 8b 00             	mov    (%rax),%rax
  10fd47:	48 89 01             	mov    %rax,(%rcx)
  10fd4a:	89 51 08             	mov    %edx,0x8(%rcx)
	*cast(real *)p2 = t;
  10fd4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  10fd51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10fd55:	8b 55 f8             	mov    -0x8(%rbp),%edx
  10fd58:	48 89 01             	mov    %rax,(%rcx)
  10fd5b:	89 51 08             	mov    %edx,0x8(%rcx)
    }
  10fd5e:	c9                   	leaveq 
  10fd5f:	c3                   	retq   

000000000010fd60 <_D3std8typeinfo7ti_real10TypeInfo_e4initMFZAv>:

    void[] init()
  10fd60:	55                   	push   %rbp
  10fd61:	48 89 e5             	mov    %rsp,%rbp
  10fd64:	53                   	push   %rbx
  10fd65:	48 83 ec 28          	sub    $0x28,%rsp
  10fd69:	48 89 fb             	mov    %rdi,%rbx
  10fd6c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  10fd70:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10fd74:	e8 cb 38 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static real r;

	return (cast(real *)&r)[0 .. 1];
  10fd79:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  10fd80:	00 
  10fd81:	48 c7 45 e8 c0 27 12 	movq   $0x1227c0,-0x18(%rbp)
  10fd88:	00 
  10fd89:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  10fd8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10fd91:	49 89 c0             	mov    %rax,%r8
  10fd94:	ba 10 00 00 00       	mov    $0x10,%edx
  10fd99:	be 01 00 00 00       	mov    $0x1,%esi
  10fd9e:	48 89 df             	mov    %rbx,%rdi
  10fda1:	e8 4a 71 00 00       	callq  116ef0 <_d_arraycast>
    }
  10fda6:	48 89 d8             	mov    %rbx,%rax
  10fda9:	48 83 c4 28          	add    $0x28,%rsp
  10fdad:	5b                   	pop    %rbx
  10fdae:	c9                   	leaveq 
  10fdaf:	c3                   	retq   

000000000010fdb0 <_D3std8typeinfo8ti_short10TypeInfo_s8toStringMFZAa>:

module std.typeinfo.ti_short;

class TypeInfo_s : TypeInfo
{
    char[] toString() { return "short"; }
  10fdb0:	55                   	push   %rbp
  10fdb1:	48 89 e5             	mov    %rsp,%rbp
  10fdb4:	53                   	push   %rbx
  10fdb5:	48 83 ec 08          	sub    $0x8,%rsp
  10fdb9:	48 89 fb             	mov    %rdi,%rbx
  10fdbc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10fdc0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10fdc4:	e8 7b 38 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10fdc9:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10fdd0:	48 c7 43 08 a0 9a 11 	movq   $0x119aa0,0x8(%rbx)
  10fdd7:	00 
  10fdd8:	48 89 d8             	mov    %rbx,%rax
  10fddb:	48 83 c4 08          	add    $0x8,%rsp
  10fddf:	5b                   	pop    %rbx
  10fde0:	c9                   	leaveq 
  10fde1:	c3                   	retq   

000000000010fde2 <_D3std8typeinfo8ti_short10TypeInfo_s7getHashMFPvZm>:

    hash_t getHash(void *p)
  10fde2:	55                   	push   %rbp
  10fde3:	48 89 e5             	mov    %rsp,%rbp
  10fde6:	48 83 ec 10          	sub    $0x10,%rsp
  10fdea:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fdee:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10fdf2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fdf6:	e8 49 38 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p;
  10fdfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10fdff:	0f b7 00             	movzwl (%rax),%eax
  10fe02:	48 0f bf c0          	movswq %ax,%rax
    }
  10fe06:	c9                   	leaveq 
  10fe07:	c3                   	retq   

000000000010fe08 <_D3std8typeinfo8ti_short10TypeInfo_s6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10fe08:	55                   	push   %rbp
  10fe09:	48 89 e5             	mov    %rsp,%rbp
  10fe0c:	48 83 ec 20          	sub    $0x20,%rsp
  10fe10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fe14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10fe18:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10fe1c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fe20:	e8 1f 38 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 == *cast(short *)p2;
  10fe25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10fe29:	0f b7 10             	movzwl (%rax),%edx
  10fe2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10fe30:	0f b7 00             	movzwl (%rax),%eax
  10fe33:	66 39 c2             	cmp    %ax,%dx
  10fe36:	0f 94 c0             	sete   %al
  10fe39:	0f b6 c0             	movzbl %al,%eax
    }
  10fe3c:	c9                   	leaveq 
  10fe3d:	c3                   	retq   

000000000010fe3e <_D3std8typeinfo8ti_short10TypeInfo_s7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10fe3e:	55                   	push   %rbp
  10fe3f:	48 89 e5             	mov    %rsp,%rbp
  10fe42:	48 83 ec 20          	sub    $0x20,%rsp
  10fe46:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fe4a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10fe4e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10fe52:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fe56:	e8 e9 37 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(short *)p1 - *cast(short *)p2;
  10fe5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10fe5f:	0f b7 00             	movzwl (%rax),%eax
  10fe62:	0f bf d0             	movswl %ax,%edx
  10fe65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10fe69:	0f b7 00             	movzwl (%rax),%eax
  10fe6c:	98                   	cwtl   
  10fe6d:	89 d1                	mov    %edx,%ecx
  10fe6f:	29 c1                	sub    %eax,%ecx
  10fe71:	89 c8                	mov    %ecx,%eax
    }
  10fe73:	c9                   	leaveq 
  10fe74:	c3                   	retq   

000000000010fe75 <_D3std8typeinfo8ti_short10TypeInfo_s5tsizeMFZm>:

    size_t tsize()
  10fe75:	55                   	push   %rbp
  10fe76:	48 89 e5             	mov    %rsp,%rbp
  10fe79:	48 83 ec 10          	sub    $0x10,%rsp
  10fe7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fe81:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fe85:	e8 ba 37 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return short.sizeof;
  10fe8a:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  10fe8f:	c9                   	leaveq 
  10fe90:	c3                   	retq   

000000000010fe91 <_D3std8typeinfo8ti_short10TypeInfo_s4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10fe91:	55                   	push   %rbp
  10fe92:	48 89 e5             	mov    %rsp,%rbp
  10fe95:	48 83 ec 30          	sub    $0x30,%rsp
  10fe99:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10fe9d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10fea1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10fea5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10fea9:	e8 96 37 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	short t;
  10feae:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(short *)p1;
  10feb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10feb8:	0f b7 00             	movzwl (%rax),%eax
  10febb:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(short *)p1 = *cast(short *)p2;
  10febf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10fec3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fec7:	0f b7 00             	movzwl (%rax),%eax
  10feca:	66 89 02             	mov    %ax,(%rdx)
	*cast(short *)p2 = t;
  10fecd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10fed1:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  10fed5:	66 89 02             	mov    %ax,(%rdx)
    }
  10fed8:	c9                   	leaveq 
  10fed9:	c3                   	retq   
  10feda:	90                   	nop    
  10fedb:	90                   	nop    

000000000010fedc <_D3std8typeinfo8ti_ubyte10TypeInfo_h8toStringMFZAa>:

module std.typeinfo.ti_ubyte;

class TypeInfo_h : TypeInfo
{
    char[] toString() { return "ubyte"; }
  10fedc:	55                   	push   %rbp
  10fedd:	48 89 e5             	mov    %rsp,%rbp
  10fee0:	53                   	push   %rbx
  10fee1:	48 83 ec 08          	sub    $0x8,%rsp
  10fee5:	48 89 fb             	mov    %rdi,%rbx
  10fee8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10feec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  10fef0:	e8 4f 37 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  10fef5:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  10fefc:	48 c7 43 08 60 9b 11 	movq   $0x119b60,0x8(%rbx)
  10ff03:	00 
  10ff04:	48 89 d8             	mov    %rbx,%rax
  10ff07:	48 83 c4 08          	add    $0x8,%rsp
  10ff0b:	5b                   	pop    %rbx
  10ff0c:	c9                   	leaveq 
  10ff0d:	c3                   	retq   

000000000010ff0e <_D3std8typeinfo8ti_ubyte10TypeInfo_h7getHashMFPvZm>:

    hash_t getHash(void *p)
  10ff0e:	55                   	push   %rbp
  10ff0f:	48 89 e5             	mov    %rsp,%rbp
  10ff12:	48 83 ec 10          	sub    $0x10,%rsp
  10ff16:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ff1a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ff1e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ff22:	e8 1d 37 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p;
  10ff27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ff2b:	0f b6 00             	movzbl (%rax),%eax
  10ff2e:	0f b6 c0             	movzbl %al,%eax
    }
  10ff31:	c9                   	leaveq 
  10ff32:	c3                   	retq   

000000000010ff33 <_D3std8typeinfo8ti_ubyte10TypeInfo_h6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  10ff33:	55                   	push   %rbp
  10ff34:	48 89 e5             	mov    %rsp,%rbp
  10ff37:	48 83 ec 20          	sub    $0x20,%rsp
  10ff3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ff3f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ff43:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ff47:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ff4b:	e8 f4 36 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 == *cast(ubyte *)p2;
  10ff50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ff54:	0f b6 10             	movzbl (%rax),%edx
  10ff57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ff5b:	0f b6 00             	movzbl (%rax),%eax
  10ff5e:	38 c2                	cmp    %al,%dl
  10ff60:	0f 94 c0             	sete   %al
  10ff63:	0f b6 c0             	movzbl %al,%eax
    }
  10ff66:	c9                   	leaveq 
  10ff67:	c3                   	retq   

000000000010ff68 <_D3std8typeinfo8ti_ubyte10TypeInfo_h7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  10ff68:	55                   	push   %rbp
  10ff69:	48 89 e5             	mov    %rsp,%rbp
  10ff6c:	48 83 ec 20          	sub    $0x20,%rsp
  10ff70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ff74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10ff78:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  10ff7c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ff80:	e8 bf 36 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ubyte *)p1 - *cast(ubyte *)p2;
  10ff85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10ff89:	0f b6 00             	movzbl (%rax),%eax
  10ff8c:	0f b6 d0             	movzbl %al,%edx
  10ff8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10ff93:	0f b6 00             	movzbl (%rax),%eax
  10ff96:	0f b6 c0             	movzbl %al,%eax
  10ff99:	89 d1                	mov    %edx,%ecx
  10ff9b:	29 c1                	sub    %eax,%ecx
  10ff9d:	89 c8                	mov    %ecx,%eax
    }
  10ff9f:	c9                   	leaveq 
  10ffa0:	c3                   	retq   

000000000010ffa1 <_D3std8typeinfo8ti_ubyte10TypeInfo_h5tsizeMFZm>:

    size_t tsize()
  10ffa1:	55                   	push   %rbp
  10ffa2:	48 89 e5             	mov    %rsp,%rbp
  10ffa5:	48 83 ec 10          	sub    $0x10,%rsp
  10ffa9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10ffad:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10ffb1:	e8 8e 36 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ubyte.sizeof;
  10ffb6:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  10ffbb:	c9                   	leaveq 
  10ffbc:	c3                   	retq   

000000000010ffbd <_D3std8typeinfo8ti_ubyte10TypeInfo_h4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  10ffbd:	55                   	push   %rbp
  10ffbe:	48 89 e5             	mov    %rsp,%rbp
  10ffc1:	48 83 ec 30          	sub    $0x30,%rsp
  10ffc5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10ffc9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10ffcd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  10ffd1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10ffd5:	e8 6a 36 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ubyte t;
  10ffda:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(ubyte *)p1;
  10ffde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  10ffe2:	0f b6 00             	movzbl (%rax),%eax
  10ffe5:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(ubyte *)p1 = *cast(ubyte *)p2;
  10ffe8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10ffec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10fff0:	0f b6 00             	movzbl (%rax),%eax
  10fff3:	88 02                	mov    %al,(%rdx)
	*cast(ubyte *)p2 = t;
  10fff5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10fff9:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  10fffd:	88 02                	mov    %al,(%rdx)
    }
  10ffff:	c9                   	leaveq 
  110000:	c3                   	retq   

0000000000110001 <_D3std8typeinfo8ti_ubyte10TypeInfo_b8toStringMFZAa>:
}

class TypeInfo_b : TypeInfo_h
{
    char[] toString() { return "bool"; }
  110001:	55                   	push   %rbp
  110002:	48 89 e5             	mov    %rsp,%rbp
  110005:	53                   	push   %rbx
  110006:	48 83 ec 08          	sub    $0x8,%rsp
  11000a:	48 89 fb             	mov    %rdi,%rbx
  11000d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110011:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110015:	e8 2a 36 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  11001a:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  110021:	48 c7 43 08 10 9c 11 	movq   $0x119c10,0x8(%rbx)
  110028:	00 
  110029:	48 89 d8             	mov    %rbx,%rax
  11002c:	48 83 c4 08          	add    $0x8,%rsp
  110030:	5b                   	pop    %rbx
  110031:	c9                   	leaveq 
  110032:	c3                   	retq   
  110033:	90                   	nop    

0000000000110034 <_D3std8typeinfo7ti_uint10TypeInfo_k8toStringMFZAa>:

module std.typeinfo.ti_uint;

class TypeInfo_k : TypeInfo
{
    char[] toString() { return "uint"; }
  110034:	55                   	push   %rbp
  110035:	48 89 e5             	mov    %rsp,%rbp
  110038:	53                   	push   %rbx
  110039:	48 83 ec 08          	sub    $0x8,%rsp
  11003d:	48 89 fb             	mov    %rdi,%rbx
  110040:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110044:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110048:	e8 f7 35 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  11004d:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  110054:	48 c7 43 08 c0 9c 11 	movq   $0x119cc0,0x8(%rbx)
  11005b:	00 
  11005c:	48 89 d8             	mov    %rbx,%rax
  11005f:	48 83 c4 08          	add    $0x8,%rsp
  110063:	5b                   	pop    %rbx
  110064:	c9                   	leaveq 
  110065:	c3                   	retq   

0000000000110066 <_D3std8typeinfo7ti_uint10TypeInfo_k7getHashMFPvZm>:

    hash_t getHash(void *p)
  110066:	55                   	push   %rbp
  110067:	48 89 e5             	mov    %rsp,%rbp
  11006a:	48 83 ec 10          	sub    $0x10,%rsp
  11006e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110072:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110076:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11007a:	e8 c5 35 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p;
  11007f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110083:	8b 00                	mov    (%rax),%eax
  110085:	89 c0                	mov    %eax,%eax
    }
  110087:	c9                   	leaveq 
  110088:	c3                   	retq   

0000000000110089 <_D3std8typeinfo7ti_uint10TypeInfo_k6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  110089:	55                   	push   %rbp
  11008a:	48 89 e5             	mov    %rsp,%rbp
  11008d:	48 83 ec 20          	sub    $0x20,%rsp
  110091:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110095:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110099:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11009d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1100a1:	e8 9e 35 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p1 == *cast(uint *)p2;
  1100a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1100aa:	8b 10                	mov    (%rax),%edx
  1100ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1100b0:	8b 00                	mov    (%rax),%eax
  1100b2:	39 c2                	cmp    %eax,%edx
  1100b4:	0f 94 c0             	sete   %al
  1100b7:	0f b6 c0             	movzbl %al,%eax
    }
  1100ba:	c9                   	leaveq 
  1100bb:	c3                   	retq   

00000000001100bc <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  1100bc:	55                   	push   %rbp
  1100bd:	48 89 e5             	mov    %rsp,%rbp
  1100c0:	48 83 ec 20          	sub    $0x20,%rsp
  1100c4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1100c8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1100cc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1100d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1100d4:	e8 6b 35 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(uint*) p1 < *cast(uint*) p2)
  1100d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1100dd:	8b 10                	mov    (%rax),%edx
  1100df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1100e3:	8b 00                	mov    (%rax),%eax
  1100e5:	39 c2                	cmp    %eax,%edx
  1100e7:	73 09                	jae    1100f2 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x36>
	    return -1;
  1100e9:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  1100f0:	eb 20                	jmp    110112 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	else if (*cast(uint*) p1 > *cast(uint*) p2)
  1100f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1100f6:	8b 10                	mov    (%rax),%edx
  1100f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1100fc:	8b 00                	mov    (%rax),%eax
  1100fe:	39 c2                	cmp    %eax,%edx
  110100:	76 09                	jbe    11010b <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x4f>
	    return 1;
  110102:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  110109:	eb 07                	jmp    110112 <_D3std8typeinfo7ti_uint10TypeInfo_k7compareMFPvPvZi+0x56>
	return 0;
  11010b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  110112:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  110115:	c9                   	leaveq 
  110116:	c3                   	retq   

0000000000110117 <_D3std8typeinfo7ti_uint10TypeInfo_k5tsizeMFZm>:

    size_t tsize()
  110117:	55                   	push   %rbp
  110118:	48 89 e5             	mov    %rsp,%rbp
  11011b:	48 83 ec 10          	sub    $0x10,%rsp
  11011f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110123:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110127:	e8 18 35 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return uint.sizeof;
  11012c:	b8 04 00 00 00       	mov    $0x4,%eax
    }
  110131:	c9                   	leaveq 
  110132:	c3                   	retq   

0000000000110133 <_D3std8typeinfo7ti_uint10TypeInfo_k4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  110133:	55                   	push   %rbp
  110134:	48 89 e5             	mov    %rsp,%rbp
  110137:	48 83 ec 30          	sub    $0x30,%rsp
  11013b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11013f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  110143:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  110147:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11014b:	e8 f4 34 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	int t;
  110150:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	t = *cast(uint *)p1;
  110157:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11015b:	8b 00                	mov    (%rax),%eax
  11015d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	*cast(uint *)p1 = *cast(uint *)p2;
  110160:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  110164:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  110168:	8b 00                	mov    (%rax),%eax
  11016a:	89 02                	mov    %eax,(%rdx)
	*cast(uint *)p2 = t;
  11016c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  110170:	8b 45 fc             	mov    -0x4(%rbp),%eax
  110173:	89 02                	mov    %eax,(%rdx)
    }
  110175:	c9                   	leaveq 
  110176:	c3                   	retq   
  110177:	90                   	nop    

0000000000110178 <_D3std8typeinfo8ti_ulong10TypeInfo_m8toStringMFZAa>:

module std.typeinfo.ti_ulong;

class TypeInfo_m : TypeInfo
{
    char[] toString() { return "ulong"; }
  110178:	55                   	push   %rbp
  110179:	48 89 e5             	mov    %rsp,%rbp
  11017c:	53                   	push   %rbx
  11017d:	48 83 ec 08          	sub    $0x8,%rsp
  110181:	48 89 fb             	mov    %rdi,%rbx
  110184:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110188:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11018c:	e8 b3 34 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110191:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  110198:	48 c7 43 08 80 9d 11 	movq   $0x119d80,0x8(%rbx)
  11019f:	00 
  1101a0:	48 89 d8             	mov    %rbx,%rax
  1101a3:	48 83 c4 08          	add    $0x8,%rsp
  1101a7:	5b                   	pop    %rbx
  1101a8:	c9                   	leaveq 
  1101a9:	c3                   	retq   

00000000001101aa <_D3std8typeinfo8ti_ulong10TypeInfo_m7getHashMFPvZm>:

    hash_t getHash(void *p)
  1101aa:	55                   	push   %rbp
  1101ab:	48 89 e5             	mov    %rsp,%rbp
  1101ae:	48 83 ec 10          	sub    $0x10,%rsp
  1101b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1101b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1101ba:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1101be:	e8 81 34 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(uint *)p + (cast(uint *)p)[1];
  1101c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1101c7:	8b 08                	mov    (%rax),%ecx
  1101c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1101cd:	b8 04 00 00 00       	mov    $0x4,%eax
  1101d2:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  1101d6:	8b 00                	mov    (%rax),%eax
  1101d8:	8d 04 01             	lea    (%rcx,%rax,1),%eax
  1101db:	89 c0                	mov    %eax,%eax
    }
  1101dd:	c9                   	leaveq 
  1101de:	c3                   	retq   

00000000001101df <_D3std8typeinfo8ti_ulong10TypeInfo_m6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  1101df:	55                   	push   %rbp
  1101e0:	48 89 e5             	mov    %rsp,%rbp
  1101e3:	48 83 ec 20          	sub    $0x20,%rsp
  1101e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1101eb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1101ef:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1101f3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1101f7:	e8 48 34 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ulong *)p1 == *cast(ulong *)p2;
  1101fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110200:	48 8b 10             	mov    (%rax),%rdx
  110203:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110207:	48 8b 00             	mov    (%rax),%rax
  11020a:	48 39 c2             	cmp    %rax,%rdx
  11020d:	0f 94 c0             	sete   %al
  110210:	0f b6 c0             	movzbl %al,%eax
    }
  110213:	c9                   	leaveq 
  110214:	c3                   	retq   

0000000000110215 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  110215:	55                   	push   %rbp
  110216:	48 89 e5             	mov    %rsp,%rbp
  110219:	48 83 ec 20          	sub    $0x20,%rsp
  11021d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110221:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110225:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110229:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11022d:	e8 12 34 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	if (*cast(ulong *)p1 < *cast(ulong *)p2)
  110232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110236:	48 8b 10             	mov    (%rax),%rdx
  110239:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11023d:	48 8b 00             	mov    (%rax),%rax
  110240:	48 39 c2             	cmp    %rax,%rdx
  110243:	73 09                	jae    11024e <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x39>
	    return -1;
  110245:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  11024c:	eb 23                	jmp    110271 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	else if (*cast(ulong *)p1 > *cast(ulong *)p2)
  11024e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110252:	48 8b 10             	mov    (%rax),%rdx
  110255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110259:	48 8b 00             	mov    (%rax),%rax
  11025c:	48 39 c2             	cmp    %rax,%rdx
  11025f:	76 09                	jbe    11026a <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x55>
	    return 1;
  110261:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  110268:	eb 07                	jmp    110271 <_D3std8typeinfo8ti_ulong10TypeInfo_m7compareMFPvPvZi+0x5c>
	return 0;
  11026a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  110271:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    }
  110274:	c9                   	leaveq 
  110275:	c3                   	retq   

0000000000110276 <_D3std8typeinfo8ti_ulong10TypeInfo_m5tsizeMFZm>:

    size_t tsize()
  110276:	55                   	push   %rbp
  110277:	48 89 e5             	mov    %rsp,%rbp
  11027a:	48 83 ec 10          	sub    $0x10,%rsp
  11027e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110282:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110286:	e8 b9 33 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ulong.sizeof;
  11028b:	b8 08 00 00 00       	mov    $0x8,%eax
    }
  110290:	c9                   	leaveq 
  110291:	c3                   	retq   

0000000000110292 <_D3std8typeinfo8ti_ulong10TypeInfo_m4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  110292:	55                   	push   %rbp
  110293:	48 89 e5             	mov    %rsp,%rbp
  110296:	48 83 ec 30          	sub    $0x30,%rsp
  11029a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11029e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1102a2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1102a6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1102aa:	e8 95 33 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ulong t;
  1102af:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1102b6:	00 

	t = *cast(ulong *)p1;
  1102b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1102bb:	48 8b 00             	mov    (%rax),%rax
  1102be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(ulong *)p1 = *cast(ulong *)p2;
  1102c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1102c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1102ca:	48 8b 00             	mov    (%rax),%rax
  1102cd:	48 89 02             	mov    %rax,(%rdx)
	*cast(ulong *)p2 = t;
  1102d0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  1102d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1102d8:	48 89 02             	mov    %rax,(%rdx)
    }
  1102db:	c9                   	leaveq 
  1102dc:	c3                   	retq   
  1102dd:	90                   	nop    
  1102de:	90                   	nop    
  1102df:	90                   	nop    

00000000001102e0 <_D3std8typeinfo9ti_ushort10TypeInfo_t8toStringMFZAa>:

module std.typeinfo.ti_ushort;

class TypeInfo_t : TypeInfo
{
    char[] toString() { return "ushort"; }
  1102e0:	55                   	push   %rbp
  1102e1:	48 89 e5             	mov    %rsp,%rbp
  1102e4:	53                   	push   %rbx
  1102e5:	48 83 ec 08          	sub    $0x8,%rsp
  1102e9:	48 89 fb             	mov    %rdi,%rbx
  1102ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1102f0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1102f4:	e8 4b 33 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1102f9:	48 c7 03 06 00 00 00 	movq   $0x6,(%rbx)
  110300:	48 c7 43 08 40 9e 11 	movq   $0x119e40,0x8(%rbx)
  110307:	00 
  110308:	48 89 d8             	mov    %rbx,%rax
  11030b:	48 83 c4 08          	add    $0x8,%rsp
  11030f:	5b                   	pop    %rbx
  110310:	c9                   	leaveq 
  110311:	c3                   	retq   

0000000000110312 <_D3std8typeinfo9ti_ushort10TypeInfo_t7getHashMFPvZm>:

    hash_t getHash(void *p)
  110312:	55                   	push   %rbp
  110313:	48 89 e5             	mov    %rsp,%rbp
  110316:	48 83 ec 10          	sub    $0x10,%rsp
  11031a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11031e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110322:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110326:	e8 19 33 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p;
  11032b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11032f:	0f b7 00             	movzwl (%rax),%eax
  110332:	0f b7 c0             	movzwl %ax,%eax
    }
  110335:	c9                   	leaveq 
  110336:	c3                   	retq   

0000000000110337 <_D3std8typeinfo9ti_ushort10TypeInfo_t6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  110337:	55                   	push   %rbp
  110338:	48 89 e5             	mov    %rsp,%rbp
  11033b:	48 83 ec 20          	sub    $0x20,%rsp
  11033f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110343:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110347:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11034b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11034f:	e8 f0 32 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 == *cast(ushort *)p2;
  110354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110358:	0f b7 10             	movzwl (%rax),%edx
  11035b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11035f:	0f b7 00             	movzwl (%rax),%eax
  110362:	66 39 c2             	cmp    %ax,%dx
  110365:	0f 94 c0             	sete   %al
  110368:	0f b6 c0             	movzbl %al,%eax
    }
  11036b:	c9                   	leaveq 
  11036c:	c3                   	retq   

000000000011036d <_D3std8typeinfo9ti_ushort10TypeInfo_t7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  11036d:	55                   	push   %rbp
  11036e:	48 89 e5             	mov    %rsp,%rbp
  110371:	48 83 ec 20          	sub    $0x20,%rsp
  110375:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110379:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  11037d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110381:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110385:	e8 ba 32 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(ushort *)p1 - *cast(ushort *)p2;
  11038a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11038e:	0f b7 00             	movzwl (%rax),%eax
  110391:	0f b7 d0             	movzwl %ax,%edx
  110394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110398:	0f b7 00             	movzwl (%rax),%eax
  11039b:	0f b7 c0             	movzwl %ax,%eax
  11039e:	89 d1                	mov    %edx,%ecx
  1103a0:	29 c1                	sub    %eax,%ecx
  1103a2:	89 c8                	mov    %ecx,%eax
    }
  1103a4:	c9                   	leaveq 
  1103a5:	c3                   	retq   

00000000001103a6 <_D3std8typeinfo9ti_ushort10TypeInfo_t5tsizeMFZm>:

    size_t tsize()
  1103a6:	55                   	push   %rbp
  1103a7:	48 89 e5             	mov    %rsp,%rbp
  1103aa:	48 83 ec 10          	sub    $0x10,%rsp
  1103ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1103b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1103b6:	e8 89 32 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return ushort.sizeof;
  1103bb:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  1103c0:	c9                   	leaveq 
  1103c1:	c3                   	retq   

00000000001103c2 <_D3std8typeinfo9ti_ushort10TypeInfo_t4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  1103c2:	55                   	push   %rbp
  1103c3:	48 89 e5             	mov    %rsp,%rbp
  1103c6:	48 83 ec 30          	sub    $0x30,%rsp
  1103ca:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1103ce:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1103d2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1103d6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1103da:	e8 65 32 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	ushort t;
  1103df:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%rbp)

	t = *cast(ushort *)p1;
  1103e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1103e9:	0f b7 00             	movzwl (%rax),%eax
  1103ec:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(ushort *)p1 = *cast(ushort *)p2;
  1103f0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1103f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1103f8:	0f b7 00             	movzwl (%rax),%eax
  1103fb:	66 89 02             	mov    %ax,(%rdx)
	*cast(ushort *)p2 = t;
  1103fe:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  110402:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  110406:	66 89 02             	mov    %ax,(%rdx)
    }
  110409:	c9                   	leaveq 
  11040a:	c3                   	retq   
  11040b:	90                   	nop    

000000000011040c <_D3std8typeinfo7ti_void10TypeInfo_v8toStringMFZAa>:

module std.typeinfo.ti_void;

class TypeInfo_v : TypeInfo
{
    char[] toString() { return "void"; }
  11040c:	55                   	push   %rbp
  11040d:	48 89 e5             	mov    %rsp,%rbp
  110410:	53                   	push   %rbx
  110411:	48 83 ec 08          	sub    $0x8,%rsp
  110415:	48 89 fb             	mov    %rdi,%rbx
  110418:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  11041c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110420:	e8 1f 32 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110425:	48 c7 03 04 00 00 00 	movq   $0x4,(%rbx)
  11042c:	48 c7 43 08 00 9f 11 	movq   $0x119f00,0x8(%rbx)
  110433:	00 
  110434:	48 89 d8             	mov    %rbx,%rax
  110437:	48 83 c4 08          	add    $0x8,%rsp
  11043b:	5b                   	pop    %rbx
  11043c:	c9                   	leaveq 
  11043d:	c3                   	retq   

000000000011043e <_D3std8typeinfo7ti_void10TypeInfo_v7getHashMFPvZm>:

    hash_t getHash(void *p)
  11043e:	55                   	push   %rbp
  11043f:	48 89 e5             	mov    %rsp,%rbp
  110442:	48 83 ec 20          	sub    $0x20,%rsp
  110446:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11044a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11044e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  110452:	e8 ed 31 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	assert(0);
  110457:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  11045e:	00 
  11045f:	48 c7 45 f8 05 9f 11 	movq   $0x119f05,-0x8(%rbp)
  110466:	00 
  110467:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11046b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11046f:	ba 0c 00 00 00       	mov    $0xc,%edx
  110474:	e8 49 48 00 00       	callq  114cc2 <_d_assert>
    }
  110479:	c9                   	leaveq 
  11047a:	c3                   	retq   

000000000011047b <_D3std8typeinfo7ti_void10TypeInfo_v6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  11047b:	55                   	push   %rbp
  11047c:	48 89 e5             	mov    %rsp,%rbp
  11047f:	48 83 ec 20          	sub    $0x20,%rsp
  110483:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110487:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  11048b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11048f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110493:	e8 ac 31 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 == *cast(byte *)p2;
  110498:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11049c:	0f b6 10             	movzbl (%rax),%edx
  11049f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1104a3:	0f b6 00             	movzbl (%rax),%eax
  1104a6:	38 c2                	cmp    %al,%dl
  1104a8:	0f 94 c0             	sete   %al
  1104ab:	0f b6 c0             	movzbl %al,%eax
    }
  1104ae:	c9                   	leaveq 
  1104af:	c3                   	retq   

00000000001104b0 <_D3std8typeinfo7ti_void10TypeInfo_v7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  1104b0:	55                   	push   %rbp
  1104b1:	48 89 e5             	mov    %rsp,%rbp
  1104b4:	48 83 ec 20          	sub    $0x20,%rsp
  1104b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1104bc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1104c0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1104c4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1104c8:	e8 77 31 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(byte *)p1 - *cast(byte *)p2;
  1104cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1104d1:	0f b6 00             	movzbl (%rax),%eax
  1104d4:	0f be d0             	movsbl %al,%edx
  1104d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1104db:	0f b6 00             	movzbl (%rax),%eax
  1104de:	0f be c0             	movsbl %al,%eax
  1104e1:	89 d1                	mov    %edx,%ecx
  1104e3:	29 c1                	sub    %eax,%ecx
  1104e5:	89 c8                	mov    %ecx,%eax
    }
  1104e7:	c9                   	leaveq 
  1104e8:	c3                   	retq   

00000000001104e9 <_D3std8typeinfo7ti_void10TypeInfo_v5tsizeMFZm>:

    size_t tsize()
  1104e9:	55                   	push   %rbp
  1104ea:	48 89 e5             	mov    %rsp,%rbp
  1104ed:	48 83 ec 10          	sub    $0x10,%rsp
  1104f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1104f5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1104f9:	e8 46 31 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return void.sizeof;
  1104fe:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  110503:	c9                   	leaveq 
  110504:	c3                   	retq   

0000000000110505 <_D3std8typeinfo7ti_void10TypeInfo_v4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  110505:	55                   	push   %rbp
  110506:	48 89 e5             	mov    %rsp,%rbp
  110509:	48 83 ec 30          	sub    $0x30,%rsp
  11050d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  110511:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  110515:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  110519:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11051d:	e8 22 31 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	byte t;
  110522:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

	t = *cast(byte *)p1;
  110526:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11052a:	0f b6 00             	movzbl (%rax),%eax
  11052d:	88 45 ff             	mov    %al,-0x1(%rbp)
	*cast(byte *)p1 = *cast(byte *)p2;
  110530:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  110534:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  110538:	0f b6 00             	movzbl (%rax),%eax
  11053b:	88 02                	mov    %al,(%rdx)
	*cast(byte *)p2 = t;
  11053d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  110541:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  110545:	88 02                	mov    %al,(%rdx)
    }
  110547:	c9                   	leaveq 
  110548:	c3                   	retq   

0000000000110549 <_D3std8typeinfo7ti_void10TypeInfo_v5flagsMFZk>:

    uint flags()
  110549:	55                   	push   %rbp
  11054a:	48 89 e5             	mov    %rsp,%rbp
  11054d:	48 83 ec 10          	sub    $0x10,%rsp
  110551:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110555:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110559:	e8 e6 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return 1;
  11055e:	b8 01 00 00 00       	mov    $0x1,%eax
    }
  110563:	c9                   	leaveq 
  110564:	c3                   	retq   
  110565:	90                   	nop    
  110566:	90                   	nop    
  110567:	90                   	nop    

0000000000110568 <_D3std8typeinfo8ti_wchar10TypeInfo_u8toStringMFZAa>:
module std.typeinfo.ti_wchar;


class TypeInfo_u : TypeInfo
{
    char[] toString() { return "wchar"; }
  110568:	55                   	push   %rbp
  110569:	48 89 e5             	mov    %rsp,%rbp
  11056c:	53                   	push   %rbx
  11056d:	48 83 ec 08          	sub    $0x8,%rsp
  110571:	48 89 fb             	mov    %rdi,%rbx
  110574:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110578:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11057c:	e8 c3 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110581:	48 c7 03 05 00 00 00 	movq   $0x5,(%rbx)
  110588:	48 c7 43 08 c0 9f 11 	movq   $0x119fc0,0x8(%rbx)
  11058f:	00 
  110590:	48 89 d8             	mov    %rbx,%rax
  110593:	48 83 c4 08          	add    $0x8,%rsp
  110597:	5b                   	pop    %rbx
  110598:	c9                   	leaveq 
  110599:	c3                   	retq   

000000000011059a <_D3std8typeinfo8ti_wchar10TypeInfo_u7getHashMFPvZm>:

    hash_t getHash(void *p)
  11059a:	55                   	push   %rbp
  11059b:	48 89 e5             	mov    %rsp,%rbp
  11059e:	48 83 ec 10          	sub    $0x10,%rsp
  1105a2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1105a6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1105aa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1105ae:	e8 91 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p;
  1105b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1105b7:	0f b7 00             	movzwl (%rax),%eax
  1105ba:	0f b7 c0             	movzwl %ax,%eax
    }
  1105bd:	c9                   	leaveq 
  1105be:	c3                   	retq   

00000000001105bf <_D3std8typeinfo8ti_wchar10TypeInfo_u6equalsMFPvPvZi>:

    int equals(void *p1, void *p2)
  1105bf:	55                   	push   %rbp
  1105c0:	48 89 e5             	mov    %rsp,%rbp
  1105c3:	48 83 ec 20          	sub    $0x20,%rsp
  1105c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1105cb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1105cf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1105d3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1105d7:	e8 68 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 == *cast(wchar *)p2;
  1105dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1105e0:	0f b7 10             	movzwl (%rax),%edx
  1105e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1105e7:	0f b7 00             	movzwl (%rax),%eax
  1105ea:	66 39 c2             	cmp    %ax,%dx
  1105ed:	0f 94 c0             	sete   %al
  1105f0:	0f b6 c0             	movzbl %al,%eax
    }
  1105f3:	c9                   	leaveq 
  1105f4:	c3                   	retq   

00000000001105f5 <_D3std8typeinfo8ti_wchar10TypeInfo_u7compareMFPvPvZi>:

    int compare(void *p1, void *p2)
  1105f5:	55                   	push   %rbp
  1105f6:	48 89 e5             	mov    %rsp,%rbp
  1105f9:	48 83 ec 20          	sub    $0x20,%rsp
  1105fd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110601:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110605:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110609:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11060d:	e8 32 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return *cast(wchar *)p1 - *cast(wchar *)p2;
  110612:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110616:	0f b7 00             	movzwl (%rax),%eax
  110619:	0f b7 d0             	movzwl %ax,%edx
  11061c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110620:	0f b7 00             	movzwl (%rax),%eax
  110623:	0f b7 c0             	movzwl %ax,%eax
  110626:	89 d1                	mov    %edx,%ecx
  110628:	29 c1                	sub    %eax,%ecx
  11062a:	89 c8                	mov    %ecx,%eax
    }
  11062c:	c9                   	leaveq 
  11062d:	c3                   	retq   

000000000011062e <_D3std8typeinfo8ti_wchar10TypeInfo_u5tsizeMFZm>:

    size_t tsize()
  11062e:	55                   	push   %rbp
  11062f:	48 89 e5             	mov    %rsp,%rbp
  110632:	48 83 ec 10          	sub    $0x10,%rsp
  110636:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11063a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11063e:	e8 01 30 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	return wchar.sizeof;
  110643:	b8 02 00 00 00       	mov    $0x2,%eax
    }
  110648:	c9                   	leaveq 
  110649:	c3                   	retq   

000000000011064a <_D3std8typeinfo8ti_wchar10TypeInfo_u4swapMFPvPvZv>:

    void swap(void *p1, void *p2)
  11064a:	55                   	push   %rbp
  11064b:	48 89 e5             	mov    %rsp,%rbp
  11064e:	48 83 ec 30          	sub    $0x30,%rsp
  110652:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  110656:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11065a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11065e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  110662:	e8 dd 2f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {
	wchar t;
  110667:	66 c7 45 fe ff ff    	movw   $0xffff,-0x2(%rbp)

	t = *cast(wchar *)p1;
  11066d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  110671:	0f b7 00             	movzwl (%rax),%eax
  110674:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	*cast(wchar *)p1 = *cast(wchar *)p2;
  110678:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  11067c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  110680:	0f b7 00             	movzwl (%rax),%eax
  110683:	66 89 02             	mov    %ax,(%rdx)
	*cast(wchar *)p2 = t;
  110686:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  11068a:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  11068e:	66 89 02             	mov    %ax,(%rdx)
    }
  110691:	c9                   	leaveq 
  110692:	c3                   	retq   

0000000000110693 <_D3std8typeinfo8ti_wchar10TypeInfo_u4initMFZAv>:

    void[] init()
  110693:	55                   	push   %rbp
  110694:	48 89 e5             	mov    %rsp,%rbp
  110697:	53                   	push   %rbx
  110698:	48 83 ec 28          	sub    $0x28,%rsp
  11069c:	48 89 fb             	mov    %rdi,%rbx
  11069f:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  1106a3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  1106a7:	e8 98 2f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
    {	static wchar c;

	return (cast(wchar *)&c)[0 .. 1];
  1106ac:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  1106b3:	00 
  1106b4:	48 c7 45 e8 e0 2c 12 	movq   $0x122ce0,-0x18(%rbp)
  1106bb:	00 
  1106bc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  1106c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1106c4:	49 89 c0             	mov    %rax,%r8
  1106c7:	ba 02 00 00 00       	mov    $0x2,%edx
  1106cc:	be 01 00 00 00       	mov    $0x1,%esi
  1106d1:	48 89 df             	mov    %rbx,%rdi
  1106d4:	e8 17 68 00 00       	callq  116ef0 <_d_arraycast>
    }
  1106d9:	48 89 d8             	mov    %rbx,%rax
  1106dc:	48 83 c4 28          	add    $0x28,%rsp
  1106e0:	5b                   	pop    %rbx
  1106e1:	c9                   	leaveq 
  1106e2:	c3                   	retq   
  1106e3:	90                   	nop    

00000000001106e4 <_D6object6Object8toStringMFZAa>:
class Object
{
	/**
	 * Convert Object to a human readable string.
	 */
	char[] toString()
  1106e4:	55                   	push   %rbp
  1106e5:	48 89 e5             	mov    %rsp,%rbp
  1106e8:	53                   	push   %rbx
  1106e9:	48 83 ec 08          	sub    $0x8,%rsp
  1106ed:	48 89 fb             	mov    %rdi,%rbx
  1106f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1106f4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1106f8:	e8 47 2f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return this.classinfo.name;
  1106fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110701:	48 8b 00             	mov    (%rax),%rax
  110704:	48 8b 10             	mov    (%rax),%rdx
  110707:	48 8b 42 20          	mov    0x20(%rdx),%rax
  11070b:	48 89 03             	mov    %rax,(%rbx)
  11070e:	48 8b 42 28          	mov    0x28(%rdx),%rax
  110712:	48 89 43 08          	mov    %rax,0x8(%rbx)
	}
  110716:	48 89 d8             	mov    %rbx,%rax
  110719:	48 83 c4 08          	add    $0x8,%rsp
  11071d:	5b                   	pop    %rbx
  11071e:	c9                   	leaveq 
  11071f:	c3                   	retq   

0000000000110720 <_D6object6Object6toHashMFZm>:

	/**
	 * Compute hash function for Object.
	 */
	hash_t toHash()
  110720:	55                   	push   %rbp
  110721:	48 89 e5             	mov    %rsp,%rbp
  110724:	48 83 ec 10          	sub    $0x10,%rsp
  110728:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11072c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110730:	e8 0f 2f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		return cast(uint)cast(void *)this;
  110735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110739:	89 c0                	mov    %eax,%eax
	}
  11073b:	c9                   	leaveq 
  11073c:	c3                   	retq   

000000000011073d <_D6object6Object5opCmpMFC6ObjectZi>:
	 *	$(TR $(TD this &lt; obj) $(TD &lt; 0))
	 *	$(TR $(TD this == obj) $(TD 0))
	 *	$(TR $(TD this &gt; obj) $(TD &gt; 0))
	 *	)
	 */
	int opCmp(Object o)
  11073d:	55                   	push   %rbp
  11073e:	48 89 e5             	mov    %rsp,%rbp
  110741:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  110748:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  11074c:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  110750:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
  110754:	e8 eb 2e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		// BUG: this prevents a compacting GC from working, needs to be fixed
		//return cast(int)cast(void *)this - cast(int)cast(void *)o;

		throw new Error("need opCmp for class " ~ this.classinfo.name);
  110759:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  11075d:	48 8b 00             	mov    (%rax),%rax
  110760:	48 8b 10             	mov    (%rax),%rdx
  110763:	48 8b 42 20          	mov    0x20(%rdx),%rax
  110767:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  11076b:	48 8b 42 28          	mov    0x28(%rdx),%rax
  11076f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  110773:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  110777:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  11077b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11077f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  110783:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  110787:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  11078b:	48 8b 00             	mov    (%rax),%rax
  11078e:	48 8b 10             	mov    (%rax),%rdx
  110791:	48 8b 42 20          	mov    0x20(%rdx),%rax
  110795:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  110799:	48 8b 42 28          	mov    0x28(%rdx),%rax
  11079d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  1107a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  1107a5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1107a9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1107ad:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1107b1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  1107b5:	48 c7 45 d0 15 00 00 	movq   $0x15,-0x30(%rbp)
  1107bc:	00 
  1107bd:	48 c7 45 d8 90 a0 11 	movq   $0x11a090,-0x28(%rbp)
  1107c4:	00 
  1107c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1107c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1107cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1107d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1107d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1107d9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  1107dd:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  1107e1:	48 89 34 24          	mov    %rsi,(%rsp)
  1107e5:	49 89 d1             	mov    %rdx,%r9
  1107e8:	49 89 c0             	mov    %rax,%r8
  1107eb:	ba 02 00 00 00       	mov    $0x2,%edx
  1107f0:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1107f5:	b8 00 00 00 00       	mov    $0x0,%eax
  1107fa:	e8 35 40 00 00       	callq  114834 <_d_arraycatnT>
  1107ff:	bf a0 37 12 00       	mov    $0x1237a0,%edi
  110804:	e8 c5 3c 00 00       	callq  1144ce <_d_newclass>
  110809:	48 89 c7             	mov    %rax,%rdi
  11080c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  110810:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  110814:	e8 ac 2d 00 00       	callq  1135c5 <_D6object5Error5_ctorMFAaZC6object5Error>
  110819:	48 89 c7             	mov    %rax,%rdi
  11081c:	e8 c5 47 00 00       	callq  114fe6 <_d_throw>
	}
  110821:	c9                   	leaveq 
  110822:	c3                   	retq   

0000000000110823 <_D6object6Object8opEqualsMFC6ObjectZi>:

	/**
	 * Returns !=0 if this object does have the same contents as obj.
	 */
	int opEquals(Object o)
  110823:	55                   	push   %rbp
  110824:	48 89 e5             	mov    %rsp,%rbp
  110827:	48 83 ec 10          	sub    $0x10,%rsp
  11082b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11082f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110833:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110837:	e8 08 2e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(this is o);
  11083c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110840:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  110844:	0f 94 c0             	sete   %al
  110847:	0f b6 c0             	movzbl %al,%eax
	}
  11084a:	c9                   	leaveq 
  11084b:	c3                   	retq   

000000000011084c <_D6object9ClassInfo6createMFZC6Object>:
	}*/

	/********************
	 * Create instance of Object represented by 'this'.
	 */
	Object create()
  11084c:	55                   	push   %rbp
  11084d:	48 89 e5             	mov    %rsp,%rbp
  110850:	48 83 ec 20          	sub    $0x20,%rsp
  110854:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  110858:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11085c:	e8 e3 2d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (flags & 8 && !defaultConstructor)
  110861:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110865:	8b 40 68             	mov    0x68(%rax),%eax
  110868:	83 e0 08             	and    $0x8,%eax
  11086b:	85 c0                	test   %eax,%eax
  11086d:	74 22                	je     110891 <_D6object9ClassInfo6createMFZC6Object+0x45>
  11086f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110873:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  11087a:	48 85 c0             	test   %rax,%rax
  11087d:	0f 95 c0             	setne  %al
  110880:	83 f0 01             	xor    $0x1,%eax
  110883:	84 c0                	test   %al,%al
  110885:	74 0a                	je     110891 <_D6object9ClassInfo6createMFZC6Object+0x45>
			return null;
  110887:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  11088e:	00 
  11088f:	eb 44                	jmp    1108d5 <_D6object9ClassInfo6createMFZC6Object+0x89>
		Object o = _d_newclass(this);
  110891:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  110895:	e8 34 3c 00 00       	callq  1144ce <_d_newclass>
  11089a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (flags & 8 && defaultConstructor)
  11089e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1108a2:	8b 40 68             	mov    0x68(%rax),%eax
  1108a5:	83 e0 08             	and    $0x8,%eax
  1108a8:	85 c0                	test   %eax,%eax
  1108aa:	74 21                	je     1108cd <_D6object9ClassInfo6createMFZC6Object+0x81>
  1108ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1108b0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  1108b7:	48 85 c0             	test   %rax,%rax
  1108ba:	74 11                	je     1108cd <_D6object9ClassInfo6createMFZC6Object+0x81>
		{
			defaultConstructor(o);
  1108bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1108c0:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  1108c7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1108cb:	ff d0                	callq  *%rax
		}
		return o;
  1108cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1108d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1108d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
	}
  1108d9:	c9                   	leaveq 
  1108da:	c3                   	retq   

00000000001108db <_D6object8TypeInfo6toHashMFZm>:
 * Can be retrieved for any type using a
 * <a href="../expression.html#typeidexpression">TypeidExpression</a>.
 */
class TypeInfo
{
	hash_t toHash()
  1108db:	55                   	push   %rbp
  1108dc:	48 89 e5             	mov    %rsp,%rbp
  1108df:	48 83 ec 40          	sub    $0x40,%rsp
  1108e3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  1108e7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1108eb:	e8 54 2d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t hash;
  1108f0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  1108f7:	00 

		foreach (char c; this.toString())
  1108f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1108fc:	48 8b 00             	mov    (%rax),%rax
  1108ff:	48 83 c0 08          	add    $0x8,%rax
  110903:	48 8b 00             	mov    (%rax),%rax
  110906:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  11090a:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  11090e:	ff d0                	callq  *%rax
  110910:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  110914:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  110918:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  11091c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  110920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  110924:	48 03 45 c0          	add    -0x40(%rbp),%rax
  110928:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  11092c:	0f 95 c0             	setne  %al
  11092f:	83 f0 01             	xor    $0x1,%eax
  110932:	84 c0                	test   %al,%al
  110934:	75 2b                	jne    110961 <_D6object8TypeInfo6toHashMFZm+0x86>
  110936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11093a:	0f b6 00             	movzbl (%rax),%eax
  11093d:	88 45 ff             	mov    %al,-0x1(%rbp)
			hash = hash * 9 + c;
  110940:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  110944:	48 89 d0             	mov    %rdx,%rax
  110947:	48 c1 e0 03          	shl    $0x3,%rax
  11094b:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  11094f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  110953:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  110957:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  11095b:	48 ff 45 f0          	incq   -0x10(%rbp)
  11095f:	eb bf                	jmp    110920 <_D6object8TypeInfo6toHashMFZm+0x45>
		return hash;
  110961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  110965:	c9                   	leaveq 
  110966:	c3                   	retq   

0000000000110967 <_D6object8TypeInfo5opCmpMFC6ObjectZi>:

	int opCmp(Object o)
  110967:	55                   	push   %rbp
  110968:	48 89 e5             	mov    %rsp,%rbp
  11096b:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  110972:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  110976:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  11097a:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  11097e:	e8 c1 2c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  110983:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  110987:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  11098b:	75 0f                	jne    11099c <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x35>
			return 0;
  11098d:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  110994:	00 00 00 
  110997:	e9 d2 00 00 00       	jmpq   110a6e <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x107>
		TypeInfo ti = cast(TypeInfo)o;
  11099c:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  1109a0:	be e0 2e 12 00       	mov    $0x122ee0,%esi
  1109a5:	e8 ae 2e 00 00       	callq  113858 <_d_dynamic_cast>
  1109aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (ti is null)
  1109ae:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1109b3:	75 0f                	jne    1109c4 <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x5d>
			return 1;
  1109b5:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%rbp)
  1109bc:	00 00 00 
  1109bf:	e9 aa 00 00 00       	jmpq   110a6e <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x107>
			
		char[] t = this.toString();
  1109c4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1109c8:	48 8b 00             	mov    (%rax),%rax
  1109cb:	48 83 c0 08          	add    $0x8,%rax
  1109cf:	48 8b 00             	mov    (%rax),%rax
  1109d2:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1109d6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  1109da:	ff d0                	callq  *%rax
  1109dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  1109e0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  1109e4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1109e8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		char[] other = this.toString();
  1109ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1109f0:	48 8b 00             	mov    (%rax),%rax
  1109f3:	48 83 c0 08          	add    $0x8,%rax
  1109f7:	48 8b 00             	mov    (%rax),%rax
  1109fa:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  1109fe:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  110a02:	ff d0                	callq  *%rax
  110a04:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  110a08:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  110a0c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  110a10:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

		typeid(typeof(this.toString())).compare(&t, &other);
  110a14:	48 8b 05 a5 7c 00 00 	mov    0x7ca5(%rip),%rax        # 1186c0 <_D11TypeInfo_Aa6__initZ>
  110a1b:	48 83 c0 38          	add    $0x38,%rax
  110a1f:	48 8b 00             	mov    (%rax),%rax
  110a22:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  110a26:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  110a2a:	bf c0 86 11 00       	mov    $0x1186c0,%edi
  110a2f:	ff d0                	callq  *%rax
  110a31:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  110a38:	00 
  110a39:	48 c7 45 d8 40 a2 11 	movq   $0x11a240,-0x28(%rbp)
  110a40:	00 
  110a41:	48 c7 45 e0 19 00 00 	movq   $0x19,-0x20(%rbp)
  110a48:	00 
  110a49:	48 c7 45 e8 49 a2 11 	movq   $0x11a249,-0x18(%rbp)
  110a50:	00 
  110a51:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  110a55:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  110a59:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  110a5d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  110a61:	41 b8 60 01 00 00    	mov    $0x160,%r8d
  110a67:	e8 81 42 00 00       	callq  114ced <_d_assert_msg>
	}
  110a6c:	eb 0c                	jmp    110a7a <_D6object8TypeInfo5opCmpMFC6ObjectZi+0x113>
  110a6e:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  110a74:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  110a7a:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  110a80:	c9                   	leaveq 
  110a81:	c3                   	retq   

0000000000110a82 <_D6object8TypeInfo8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  110a82:	55                   	push   %rbp
  110a83:	48 89 e5             	mov    %rsp,%rbp
  110a86:	53                   	push   %rbx
  110a87:	48 83 ec 68          	sub    $0x68,%rsp
  110a8b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  110a8f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  110a93:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  110a97:	e8 a8 2b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		/* TypeInfo instances are singletons, but duplicates can exist
		 * across DLL's. Therefore, comparing for a name match is
		 * sufficient.
		 */
		if (this is o)
  110a9c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  110aa0:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  110aa4:	75 0c                	jne    110ab2 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0x30>
			return 1;
  110aa6:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%rbp)
  110aad:	e9 ad 00 00 00       	jmpq   110b5f <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xdd>
		TypeInfo ti = cast(TypeInfo)o;
  110ab2:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  110ab6:	be e0 2e 12 00       	mov    $0x122ee0,%esi
  110abb:	e8 98 2d 00 00       	callq  113858 <_d_dynamic_cast>
  110ac0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		return cast(int)(ti && this.toString() == ti.toString());
  110ac4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  110ac9:	0f 84 85 00 00 00    	je     110b54 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd2>
  110acf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  110ad3:	48 8b 00             	mov    (%rax),%rax
  110ad6:	48 83 c0 08          	add    $0x8,%rax
  110ada:	48 8b 00             	mov    (%rax),%rax
  110add:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  110ae1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  110ae5:	ff d0                	callq  *%rax
  110ae7:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  110aeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110aef:	48 8b 00             	mov    (%rax),%rax
  110af2:	48 83 c0 08          	add    $0x8,%rax
  110af6:	48 8b 00             	mov    (%rax),%rax
  110af9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  110afd:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  110b01:	ff d0                	callq  *%rax
  110b03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  110b07:	48 39 c3             	cmp    %rax,%rbx
  110b0a:	75 48                	jne    110b54 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd2>
  110b0c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  110b10:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  110b14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  110b18:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  110b1c:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  110b20:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  110b24:	fc                   	cld    
  110b25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  110b29:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  110b2d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  110b31:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  110b35:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  110b39:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  110b3b:	0f 97 c2             	seta   %dl
  110b3e:	0f 92 c0             	setb   %al
  110b41:	89 d1                	mov    %edx,%ecx
  110b43:	28 c1                	sub    %al,%cl
  110b45:	89 c8                	mov    %ecx,%eax
  110b47:	0f be c0             	movsbl %al,%eax
  110b4a:	85 c0                	test   %eax,%eax
  110b4c:	75 06                	jne    110b54 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd2>
  110b4e:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  110b52:	eb 04                	jmp    110b58 <_D6object8TypeInfo8opEqualsMFC6ObjectZi+0xd6>
  110b54:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  110b58:	0f b6 75 af          	movzbl -0x51(%rbp),%esi
  110b5c:	89 75 a8             	mov    %esi,-0x58(%rbp)
  110b5f:	8b 45 a8             	mov    -0x58(%rbp),%eax
	}
  110b62:	48 83 c4 68          	add    $0x68,%rsp
  110b66:	5b                   	pop    %rbx
  110b67:	c9                   	leaveq 
  110b68:	c3                   	retq   

0000000000110b69 <_D6object8TypeInfo7getHashMFPvZm>:

	/// Returns a hash of the instance of a type.
	hash_t getHash(void *p) { return cast(uint)p; }
  110b69:	55                   	push   %rbp
  110b6a:	48 89 e5             	mov    %rsp,%rbp
  110b6d:	48 83 ec 10          	sub    $0x10,%rsp
  110b71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110b75:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110b79:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110b7d:	e8 c2 2a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110b86:	89 c0                	mov    %eax,%eax
  110b88:	c9                   	leaveq 
  110b89:	c3                   	retq   

0000000000110b8a <_D6object8TypeInfo6equalsMFPvPvZi>:

	/// Compares two instances for equality.
	int equals(void *p1, void *p2) { return cast(int)(p1 == p2); }
  110b8a:	55                   	push   %rbp
  110b8b:	48 89 e5             	mov    %rsp,%rbp
  110b8e:	48 83 ec 20          	sub    $0x20,%rsp
  110b92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110b96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110b9a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110b9e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110ba2:	e8 9d 2a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110bab:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  110baf:	0f 94 c0             	sete   %al
  110bb2:	0f b6 c0             	movzbl %al,%eax
  110bb5:	c9                   	leaveq 
  110bb6:	c3                   	retq   

0000000000110bb7 <_D6object8TypeInfo7compareMFPvPvZi>:

	/// Compares two instances for &lt;, ==, or &gt;.
	int compare(void *p1, void *p2) { return 0; }
  110bb7:	55                   	push   %rbp
  110bb8:	48 89 e5             	mov    %rsp,%rbp
  110bbb:	48 83 ec 20          	sub    $0x20,%rsp
  110bbf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110bc3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110bc7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110bcb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110bcf:	e8 70 2a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110bd4:	b8 00 00 00 00       	mov    $0x0,%eax
  110bd9:	c9                   	leaveq 
  110bda:	c3                   	retq   

0000000000110bdb <_D6object8TypeInfo5tsizeMFZm>:

	/// Returns size of the type.
	size_t tsize() { return 0; }
  110bdb:	55                   	push   %rbp
  110bdc:	48 89 e5             	mov    %rsp,%rbp
  110bdf:	48 83 ec 10          	sub    $0x10,%rsp
  110be3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110be7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110beb:	e8 54 2a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  110bf5:	c9                   	leaveq 
  110bf6:	c3                   	retq   

0000000000110bf7 <_D6object8TypeInfo4swapMFPvPvZv>:

	/// Swaps two instances of the type.
	void swap(void *p1, void *p2)
  110bf7:	55                   	push   %rbp
  110bf8:	48 89 e5             	mov    %rsp,%rbp
  110bfb:	48 83 ec 40          	sub    $0x40,%rsp
  110bff:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  110c03:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  110c07:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  110c0b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  110c0f:	e8 30 2a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t n = tsize();
  110c14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  110c18:	48 8b 00             	mov    (%rax),%rax
  110c1b:	48 83 c0 40          	add    $0x40,%rax
  110c1f:	48 8b 00             	mov    (%rax),%rax
  110c22:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  110c26:	ff d0                	callq  *%rax
  110c28:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		for (size_t i = 0; i < n; i++)
  110c2c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  110c33:	00 
  110c34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110c38:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  110c3c:	0f 92 c0             	setb   %al
  110c3f:	83 f0 01             	xor    $0x1,%eax
  110c42:	84 c0                	test   %al,%al
  110c44:	75 4a                	jne    110c90 <_D6object8TypeInfo4swapMFPvPvZv+0x99>
		{	byte t;
  110c46:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)

			t = (cast(byte *)p1)[i];
  110c4a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  110c4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110c52:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  110c56:	0f b6 00             	movzbl (%rax),%eax
  110c59:	88 45 ff             	mov    %al,-0x1(%rbp)
			(cast(byte *)p1)[i] = (cast(byte *)p2)[i];
  110c5c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  110c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110c64:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  110c68:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  110c6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110c70:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  110c74:	0f b6 00             	movzbl (%rax),%eax
  110c77:	88 01                	mov    %al,(%rcx)
			(cast(byte *)p2)[i] = t;
  110c79:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  110c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  110c81:	48 01 c2             	add    %rax,%rdx
  110c84:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  110c88:	88 02                	mov    %al,(%rdx)
  110c8a:	48 ff 45 f0          	incq   -0x10(%rbp)
  110c8e:	eb a4                	jmp    110c34 <_D6object8TypeInfo4swapMFPvPvZv+0x3d>
		}
	}
  110c90:	c9                   	leaveq 
  110c91:	c3                   	retq   

0000000000110c92 <_D6object8TypeInfo4nextMFZC8TypeInfo>:

	/// Get TypeInfo for 'next' type, as defined by what kind of type this is,
	/// null if none.
	TypeInfo next() { return null; }
  110c92:	55                   	push   %rbp
  110c93:	48 89 e5             	mov    %rsp,%rbp
  110c96:	48 83 ec 10          	sub    $0x10,%rsp
  110c9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110c9e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110ca2:	e8 9d 29 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110ca7:	b8 00 00 00 00       	mov    $0x0,%eax
  110cac:	c9                   	leaveq 
  110cad:	c3                   	retq   

0000000000110cae <_D6object8TypeInfo4initMFZAv>:

	/// Return default initializer, null if default initialize to 0
	void[] init() { return null; }
  110cae:	55                   	push   %rbp
  110caf:	48 89 e5             	mov    %rsp,%rbp
  110cb2:	53                   	push   %rbx
  110cb3:	48 83 ec 08          	sub    $0x8,%rsp
  110cb7:	48 89 fb             	mov    %rdi,%rbx
  110cba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110cbe:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110cc2:	e8 7d 29 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110cc7:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  110cce:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  110cd5:	00 
  110cd6:	48 89 d8             	mov    %rbx,%rax
  110cd9:	48 83 c4 08          	add    $0x8,%rsp
  110cdd:	5b                   	pop    %rbx
  110cde:	c9                   	leaveq 
  110cdf:	c3                   	retq   

0000000000110ce0 <_D6object8TypeInfo5flagsMFZk>:

	/// Get flags for type: 1 means GC should scan for pointers
	uint flags() { return 0; }
  110ce0:	55                   	push   %rbp
  110ce1:	48 89 e5             	mov    %rsp,%rbp
  110ce4:	48 83 ec 10          	sub    $0x10,%rsp
  110ce8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110cec:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110cf0:	e8 4f 29 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110cf5:	b8 00 00 00 00       	mov    $0x0,%eax
  110cfa:	c9                   	leaveq 
  110cfb:	c3                   	retq   

0000000000110cfc <_D6object8TypeInfo5offTiMFZAS6object14OffsetTypeInfo>:

	/// Get type information on the contents of the type; null if not available
	OffsetTypeInfo[] offTi() { return null; }
  110cfc:	55                   	push   %rbp
  110cfd:	48 89 e5             	mov    %rsp,%rbp
  110d00:	53                   	push   %rbx
  110d01:	48 83 ec 08          	sub    $0x8,%rsp
  110d05:	48 89 fb             	mov    %rdi,%rbx
  110d08:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110d0c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110d10:	e8 2f 29 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110d15:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  110d1c:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  110d23:	00 
  110d24:	48 89 d8             	mov    %rbx,%rax
  110d27:	48 83 c4 08          	add    $0x8,%rsp
  110d2b:	5b                   	pop    %rbx
  110d2c:	c9                   	leaveq 
  110d2d:	c3                   	retq   

0000000000110d2e <_D6object16TypeInfo_Typedef8toStringMFZAa>:
}

class TypeInfo_Typedef : TypeInfo
{
	char[] toString() { return name; }
  110d2e:	55                   	push   %rbp
  110d2f:	48 89 e5             	mov    %rsp,%rbp
  110d32:	53                   	push   %rbx
  110d33:	48 83 ec 08          	sub    $0x8,%rsp
  110d37:	48 89 fb             	mov    %rdi,%rbx
  110d3a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110d3e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  110d42:	e8 fd 28 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110d47:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  110d4b:	48 8b 42 18          	mov    0x18(%rdx),%rax
  110d4f:	48 89 03             	mov    %rax,(%rbx)
  110d52:	48 8b 42 20          	mov    0x20(%rdx),%rax
  110d56:	48 89 43 08          	mov    %rax,0x8(%rbx)
  110d5a:	48 89 d8             	mov    %rbx,%rax
  110d5d:	48 83 c4 08          	add    $0x8,%rsp
  110d61:	5b                   	pop    %rbx
  110d62:	c9                   	leaveq 
  110d63:	c3                   	retq   

0000000000110d64 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  110d64:	55                   	push   %rbp
  110d65:	48 89 e5             	mov    %rsp,%rbp
  110d68:	48 83 ec 40          	sub    $0x40,%rsp
  110d6c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  110d70:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  110d74:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  110d78:	e8 c7 28 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Typedef c;
  110d7d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  110d84:	00 

		return cast(int)
  110d85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110d89:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  110d8d:	0f 84 ab 00 00 00    	je     110e3e <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xda>
  110d93:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  110d97:	be 80 2f 12 00       	mov    $0x122f80,%esi
  110d9c:	e8 b7 2a 00 00       	callq  113858 <_d_dynamic_cast>
  110da1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  110da5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  110daa:	0f 84 94 00 00 00    	je     110e44 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe0>
  110db0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110db4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  110db8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110dbc:	48 8b 40 18          	mov    0x18(%rax),%rax
  110dc0:	48 39 c2             	cmp    %rax,%rdx
  110dc3:	75 7f                	jne    110e44 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe0>
  110dc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110dc9:	48 8b 48 18          	mov    0x18(%rax),%rcx
  110dcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110dd1:	48 8b 50 20          	mov    0x20(%rax),%rdx
  110dd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110dd9:	48 8b 40 20          	mov    0x20(%rax),%rax
  110ddd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  110de1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  110de5:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  110de9:	fc                   	cld    
  110dea:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  110dee:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  110df2:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  110df6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  110dfa:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  110dfe:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  110e00:	0f 97 c2             	seta   %dl
  110e03:	0f 92 c0             	setb   %al
  110e06:	89 d1                	mov    %edx,%ecx
  110e08:	28 c1                	sub    %al,%cl
  110e0a:	89 c8                	mov    %ecx,%eax
  110e0c:	0f be c0             	movsbl %al,%eax
  110e0f:	85 c0                	test   %eax,%eax
  110e11:	75 31                	jne    110e44 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe0>
  110e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110e17:	48 8b 40 10          	mov    0x10(%rax),%rax
  110e1b:	48 8b 00             	mov    (%rax),%rax
  110e1e:	48 83 c0 20          	add    $0x20,%rax
  110e22:	48 8b 10             	mov    (%rax),%rdx
  110e25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110e29:	48 8b 40 10          	mov    0x10(%rax),%rax
  110e2d:	48 89 c6             	mov    %rax,%rsi
  110e30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  110e34:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110e38:	ff d2                	callq  *%rdx
  110e3a:	85 c0                	test   %eax,%eax
  110e3c:	74 06                	je     110e44 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe0>
  110e3e:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  110e42:	eb 04                	jmp    110e48 <_D6object16TypeInfo_Typedef8opEqualsMFC6ObjectZi+0xe4>
  110e44:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  110e48:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				(this is o ||
				((c = cast(TypeInfo_Typedef)o) !is null &&
				 this.name == c.name &&
				 this.base == c.base));
	}
  110e4c:	c9                   	leaveq 
  110e4d:	c3                   	retq   

0000000000110e4e <_D6object16TypeInfo_Typedef7getHashMFPvZm>:

	hash_t getHash(void *p) { return base.getHash(p); }
  110e4e:	55                   	push   %rbp
  110e4f:	48 89 e5             	mov    %rsp,%rbp
  110e52:	48 83 ec 10          	sub    $0x10,%rsp
  110e56:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110e5a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110e5e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110e62:	e8 dd 27 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110e6b:	48 8b 40 10          	mov    0x10(%rax),%rax
  110e6f:	48 8b 00             	mov    (%rax),%rax
  110e72:	48 83 c0 28          	add    $0x28,%rax
  110e76:	48 8b 10             	mov    (%rax),%rdx
  110e79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110e7d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110e81:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  110e85:	ff d2                	callq  *%rdx
  110e87:	c9                   	leaveq 
  110e88:	c3                   	retq   

0000000000110e89 <_D6object16TypeInfo_Typedef6equalsMFPvPvZi>:
	int equals(void *p1, void *p2) { return base.equals(p1, p2); }
  110e89:	55                   	push   %rbp
  110e8a:	48 89 e5             	mov    %rsp,%rbp
  110e8d:	48 83 ec 20          	sub    $0x20,%rsp
  110e91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110e95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110e99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110e9d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110ea1:	e8 9e 27 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110ea6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110eaa:	48 8b 40 10          	mov    0x10(%rax),%rax
  110eae:	48 8b 00             	mov    (%rax),%rax
  110eb1:	48 83 c0 30          	add    $0x30,%rax
  110eb5:	48 8b 08             	mov    (%rax),%rcx
  110eb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110ebc:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110ec0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  110ec4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  110ec8:	ff d1                	callq  *%rcx
  110eca:	c9                   	leaveq 
  110ecb:	c3                   	retq   

0000000000110ecc <_D6object16TypeInfo_Typedef7compareMFPvPvZi>:
	int compare(void *p1, void *p2) { return base.compare(p1, p2); }
  110ecc:	55                   	push   %rbp
  110ecd:	48 89 e5             	mov    %rsp,%rbp
  110ed0:	48 83 ec 20          	sub    $0x20,%rsp
  110ed4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110ed8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110edc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110ee0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110ee4:	e8 5b 27 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110ee9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110eed:	48 8b 40 10          	mov    0x10(%rax),%rax
  110ef1:	48 8b 00             	mov    (%rax),%rax
  110ef4:	48 83 c0 38          	add    $0x38,%rax
  110ef8:	48 8b 08             	mov    (%rax),%rcx
  110efb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110eff:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110f03:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  110f07:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  110f0b:	ff d1                	callq  *%rcx
  110f0d:	c9                   	leaveq 
  110f0e:	c3                   	retq   

0000000000110f0f <_D6object16TypeInfo_Typedef5tsizeMFZm>:
	size_t tsize() { return base.tsize(); }
  110f0f:	55                   	push   %rbp
  110f10:	48 89 e5             	mov    %rsp,%rbp
  110f13:	48 83 ec 10          	sub    $0x10,%rsp
  110f17:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110f1b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110f1f:	e8 20 27 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110f28:	48 8b 40 10          	mov    0x10(%rax),%rax
  110f2c:	48 8b 00             	mov    (%rax),%rax
  110f2f:	48 83 c0 40          	add    $0x40,%rax
  110f33:	48 8b 10             	mov    (%rax),%rdx
  110f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110f3a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110f3e:	ff d2                	callq  *%rdx
  110f40:	c9                   	leaveq 
  110f41:	c3                   	retq   

0000000000110f42 <_D6object16TypeInfo_Typedef4swapMFPvPvZv>:
	void swap(void *p1, void *p2) { return base.swap(p1, p2); }
  110f42:	55                   	push   %rbp
  110f43:	48 89 e5             	mov    %rsp,%rbp
  110f46:	48 83 ec 20          	sub    $0x20,%rsp
  110f4a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110f4e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  110f52:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  110f56:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110f5a:	e8 e5 26 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110f5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110f63:	48 8b 40 10          	mov    0x10(%rax),%rax
  110f67:	48 8b 00             	mov    (%rax),%rax
  110f6a:	48 83 c0 48          	add    $0x48,%rax
  110f6e:	48 8b 08             	mov    (%rax),%rcx
  110f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110f75:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110f79:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  110f7d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  110f81:	ff d1                	callq  *%rcx
  110f83:	c9                   	leaveq 
  110f84:	c3                   	retq   

0000000000110f85 <_D6object16TypeInfo_Typedef4nextMFZC8TypeInfo>:

	TypeInfo next() { return base.next(); }
  110f85:	55                   	push   %rbp
  110f86:	48 89 e5             	mov    %rsp,%rbp
  110f89:	48 83 ec 10          	sub    $0x10,%rsp
  110f8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110f91:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110f95:	e8 aa 26 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110f9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110f9e:	48 8b 40 10          	mov    0x10(%rax),%rax
  110fa2:	48 8b 00             	mov    (%rax),%rax
  110fa5:	48 83 c0 50          	add    $0x50,%rax
  110fa9:	48 8b 10             	mov    (%rax),%rdx
  110fac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110fb0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110fb4:	ff d2                	callq  *%rdx
  110fb6:	c9                   	leaveq 
  110fb7:	c3                   	retq   

0000000000110fb8 <_D6object16TypeInfo_Typedef5flagsMFZk>:
	uint flags() { return base.flags(); }
  110fb8:	55                   	push   %rbp
  110fb9:	48 89 e5             	mov    %rsp,%rbp
  110fbc:	48 83 ec 10          	sub    $0x10,%rsp
  110fc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  110fc4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110fc8:	e8 77 26 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  110fcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110fd1:	48 8b 40 10          	mov    0x10(%rax),%rax
  110fd5:	48 8b 00             	mov    (%rax),%rax
  110fd8:	48 83 c0 60          	add    $0x60,%rax
  110fdc:	48 8b 10             	mov    (%rax),%rdx
  110fdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  110fe3:	48 8b 78 10          	mov    0x10(%rax),%rdi
  110fe7:	ff d2                	callq  *%rdx
  110fe9:	c9                   	leaveq 
  110fea:	c3                   	retq   

0000000000110feb <_D6object16TypeInfo_Typedef4initMFZAv>:
	void[] init() { return m_init.length ? m_init : base.init(); }
  110feb:	55                   	push   %rbp
  110fec:	48 89 e5             	mov    %rsp,%rbp
  110fef:	48 83 ec 10          	sub    $0x10,%rsp
  110ff3:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  110ff7:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  110ffb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110fff:	e8 40 26 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  111004:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111008:	48 8b 40 28          	mov    0x28(%rax),%rax
  11100c:	48 85 c0             	test   %rax,%rax
  11100f:	74 1d                	je     11102e <_D6object16TypeInfo_Typedef4initMFZAv+0x43>
  111011:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111015:	48 8b 50 28          	mov    0x28(%rax),%rdx
  111019:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  11101d:	48 89 11             	mov    %rdx,(%rcx)
  111020:	48 8b 40 30          	mov    0x30(%rax),%rax
  111024:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  111028:	48 89 42 08          	mov    %rax,0x8(%rdx)
  11102c:	eb 20                	jmp    11104e <_D6object16TypeInfo_Typedef4initMFZAv+0x63>
  11102e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111032:	48 8b 40 10          	mov    0x10(%rax),%rax
  111036:	48 8b 00             	mov    (%rax),%rax
  111039:	48 83 c0 58          	add    $0x58,%rax
  11103d:	48 8b 10             	mov    (%rax),%rdx
  111040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111044:	48 8b 70 10          	mov    0x10(%rax),%rsi
  111048:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11104c:	ff d2                	callq  *%rdx
  11104e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111052:	c9                   	leaveq 
  111053:	c3                   	retq   

0000000000111054 <_D6object16TypeInfo_Pointer8toStringMFZAa>:
{
}

class TypeInfo_Pointer : TypeInfo
{
	char[] toString() { return m_next.toString() ~ "*"; }
  111054:	55                   	push   %rbp
  111055:	48 89 e5             	mov    %rsp,%rbp
  111058:	41 55                	push   %r13
  11105a:	41 54                	push   %r12
  11105c:	53                   	push   %rbx
  11105d:	48 83 ec 78          	sub    $0x78,%rsp
  111061:	48 89 fb             	mov    %rdi,%rbx
  111064:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  111068:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  11106c:	e8 d3 25 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  111071:	48 c7 45 a0 01 00 00 	movq   $0x1,-0x60(%rbp)
  111078:	00 
  111079:	48 c7 45 a8 d0 a4 11 	movq   $0x11a4d0,-0x58(%rbp)
  111080:	00 
  111081:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  111085:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  111089:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  11108d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  111091:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  111095:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  111099:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11109d:	48 8b 40 10          	mov    0x10(%rax),%rax
  1110a1:	48 8b 00             	mov    (%rax),%rax
  1110a4:	48 83 c0 08          	add    $0x8,%rax
  1110a8:	48 8b 10             	mov    (%rax),%rdx
  1110ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1110af:	48 8b 70 10          	mov    0x10(%rax),%rsi
  1110b3:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  1110b7:	ff d2                	callq  *%rdx
  1110b9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  1110bd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1110c1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  1110c5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1110c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1110cd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1110d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1110d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1110d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1110dd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  1110e1:	4c 89 24 24          	mov    %r12,(%rsp)
  1110e5:	4d 89 e9             	mov    %r13,%r9
  1110e8:	49 89 c0             	mov    %rax,%r8
  1110eb:	ba 02 00 00 00       	mov    $0x2,%edx
  1110f0:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1110f5:	48 89 df             	mov    %rbx,%rdi
  1110f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1110fd:	e8 32 37 00 00       	callq  114834 <_d_arraycatnT>
  111102:	48 89 d8             	mov    %rbx,%rax
  111105:	48 83 c4 78          	add    $0x78,%rsp
  111109:	5b                   	pop    %rbx
  11110a:	41 5c                	pop    %r12
  11110c:	41 5d                	pop    %r13
  11110e:	c9                   	leaveq 
  11110f:	c3                   	retq   

0000000000111110 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  111110:	55                   	push   %rbp
  111111:	48 89 e5             	mov    %rsp,%rbp
  111114:	48 83 ec 30          	sub    $0x30,%rsp
  111118:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11111c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  111120:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  111124:	e8 1b 25 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Pointer c;
  111129:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111130:	00 

		return this is o ||
  111131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111135:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  111139:	74 44                	je     11117f <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x6f>
  11113b:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  11113f:	be c0 30 12 00       	mov    $0x1230c0,%esi
  111144:	e8 0f 27 00 00       	callq  113858 <_d_dynamic_cast>
  111149:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  11114d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  111152:	74 31                	je     111185 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x75>
  111154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111158:	48 8b 40 10          	mov    0x10(%rax),%rax
  11115c:	48 8b 00             	mov    (%rax),%rax
  11115f:	48 83 c0 20          	add    $0x20,%rax
  111163:	48 8b 10             	mov    (%rax),%rdx
  111166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11116a:	48 8b 40 10          	mov    0x10(%rax),%rax
  11116e:	48 89 c6             	mov    %rax,%rsi
  111171:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111175:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111179:	ff d2                	callq  *%rdx
  11117b:	85 c0                	test   %eax,%eax
  11117d:	74 06                	je     111185 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x75>
  11117f:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  111183:	eb 04                	jmp    111189 <_D6object16TypeInfo_Pointer8opEqualsMFC6ObjectZi+0x79>
  111185:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  111189:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Pointer)o) !is null &&
				 this.m_next == c.m_next);
	}
  11118d:	c9                   	leaveq 
  11118e:	c3                   	retq   

000000000011118f <_D6object16TypeInfo_Pointer7getHashMFPvZm>:

	hash_t getHash(void *p)
  11118f:	55                   	push   %rbp
  111190:	48 89 e5             	mov    %rsp,%rbp
  111193:	48 83 ec 10          	sub    $0x10,%rsp
  111197:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11119b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  11119f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1111a3:	e8 9c 24 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(uint)*cast(void* *)p;
  1111a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1111ac:	48 8b 00             	mov    (%rax),%rax
  1111af:	89 c0                	mov    %eax,%eax
	}
  1111b1:	c9                   	leaveq 
  1111b2:	c3                   	retq   

00000000001111b3 <_D6object16TypeInfo_Pointer6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  1111b3:	55                   	push   %rbp
  1111b4:	48 89 e5             	mov    %rsp,%rbp
  1111b7:	48 83 ec 20          	sub    $0x20,%rsp
  1111bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1111bf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1111c3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1111c7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1111cb:	e8 74 24 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return cast(int)(*cast(void* *)p1 == *cast(void* *)p2);
  1111d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1111d4:	48 8b 10             	mov    (%rax),%rdx
  1111d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1111db:	48 8b 00             	mov    (%rax),%rax
  1111de:	48 39 c2             	cmp    %rax,%rdx
  1111e1:	0f 94 c0             	sete   %al
  1111e4:	0f b6 c0             	movzbl %al,%eax
	}
  1111e7:	c9                   	leaveq 
  1111e8:	c3                   	retq   

00000000001111e9 <_D6object16TypeInfo_Pointer7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  1111e9:	55                   	push   %rbp
  1111ea:	48 89 e5             	mov    %rsp,%rbp
  1111ed:	48 83 ec 20          	sub    $0x20,%rsp
  1111f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1111f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1111f9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1111fd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  111201:	e8 3e 24 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (*cast(void* *)p1 < *cast(void* *)p2)
  111206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11120a:	48 8b 10             	mov    (%rax),%rdx
  11120d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111211:	48 8b 00             	mov    (%rax),%rax
  111214:	48 39 c2             	cmp    %rax,%rdx
  111217:	73 09                	jae    111222 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x39>
			return -1;
  111219:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
  111220:	eb 23                	jmp    111245 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else if (*cast(void* *)p1 > *cast(void* *)p2)
  111222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111226:	48 8b 10             	mov    (%rax),%rdx
  111229:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11122d:	48 8b 00             	mov    (%rax),%rax
  111230:	48 39 c2             	cmp    %rax,%rdx
  111233:	76 09                	jbe    11123e <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x55>
			return 1;
  111235:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  11123c:	eb 07                	jmp    111245 <_D6object16TypeInfo_Pointer7compareMFPvPvZi+0x5c>
		else
			return 0;
  11123e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  111245:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  111248:	c9                   	leaveq 
  111249:	c3                   	retq   

000000000011124a <_D6object16TypeInfo_Pointer5tsizeMFZm>:

	size_t tsize()
  11124a:	55                   	push   %rbp
  11124b:	48 89 e5             	mov    %rsp,%rbp
  11124e:	48 83 ec 10          	sub    $0x10,%rsp
  111252:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  111256:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11125a:	e8 e5 23 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void*).sizeof;
  11125f:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  111264:	c9                   	leaveq 
  111265:	c3                   	retq   

0000000000111266 <_D6object16TypeInfo_Pointer4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  111266:	55                   	push   %rbp
  111267:	48 89 e5             	mov    %rsp,%rbp
  11126a:	48 83 ec 30          	sub    $0x30,%rsp
  11126e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  111272:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  111276:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11127a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11127e:	e8 c1 23 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  111283:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  11128a:	00 
		tmp = *cast(void**)p1;
  11128b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11128f:	48 8b 00             	mov    (%rax),%rax
  111292:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void**)p1 = *cast(void**)p2;
  111296:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  11129a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11129e:	48 8b 00             	mov    (%rax),%rax
  1112a1:	48 89 02             	mov    %rax,(%rdx)
		*cast(void**)p2 = tmp;
  1112a4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  1112a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1112ac:	48 89 02             	mov    %rax,(%rdx)
	}
  1112af:	c9                   	leaveq 
  1112b0:	c3                   	retq   

00000000001112b1 <_D6object16TypeInfo_Pointer4nextMFZC8TypeInfo>:

	TypeInfo next() { return m_next; }
  1112b1:	55                   	push   %rbp
  1112b2:	48 89 e5             	mov    %rsp,%rbp
  1112b5:	48 83 ec 10          	sub    $0x10,%rsp
  1112b9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1112bd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1112c1:	e8 7e 23 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1112c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1112ca:	48 8b 40 10          	mov    0x10(%rax),%rax
  1112ce:	c9                   	leaveq 
  1112cf:	c3                   	retq   

00000000001112d0 <_D6object16TypeInfo_Pointer5flagsMFZk>:
	uint flags() { return 1; }
  1112d0:	55                   	push   %rbp
  1112d1:	48 89 e5             	mov    %rsp,%rbp
  1112d4:	48 83 ec 10          	sub    $0x10,%rsp
  1112d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1112dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1112e0:	e8 5f 23 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1112e5:	b8 01 00 00 00       	mov    $0x1,%eax
  1112ea:	c9                   	leaveq 
  1112eb:	c3                   	retq   

00000000001112ec <_D6object14TypeInfo_Array8toStringMFZAa>:
	TypeInfo m_next;
}

class TypeInfo_Array : TypeInfo
{
	char[] toString() { return value.toString() ~ "[]"; }
  1112ec:	55                   	push   %rbp
  1112ed:	48 89 e5             	mov    %rsp,%rbp
  1112f0:	41 55                	push   %r13
  1112f2:	41 54                	push   %r12
  1112f4:	53                   	push   %rbx
  1112f5:	48 83 ec 78          	sub    $0x78,%rsp
  1112f9:	48 89 fb             	mov    %rdi,%rbx
  1112fc:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  111300:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  111304:	e8 3b 23 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  111309:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  111310:	00 
  111311:	48 c7 45 a8 90 a5 11 	movq   $0x11a590,-0x58(%rbp)
  111318:	00 
  111319:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  11131d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  111321:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  111325:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  111329:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  11132d:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  111331:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  111335:	48 8b 40 10          	mov    0x10(%rax),%rax
  111339:	48 8b 00             	mov    (%rax),%rax
  11133c:	48 83 c0 08          	add    $0x8,%rax
  111340:	48 8b 10             	mov    (%rax),%rdx
  111343:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  111347:	48 8b 70 10          	mov    0x10(%rax),%rsi
  11134b:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  11134f:	ff d2                	callq  *%rdx
  111351:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  111355:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  111359:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  11135d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  111361:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  111365:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  111369:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  11136d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  111371:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111375:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  111379:	4c 89 24 24          	mov    %r12,(%rsp)
  11137d:	4d 89 e9             	mov    %r13,%r9
  111380:	49 89 c0             	mov    %rax,%r8
  111383:	ba 02 00 00 00       	mov    $0x2,%edx
  111388:	be c0 86 11 00       	mov    $0x1186c0,%esi
  11138d:	48 89 df             	mov    %rbx,%rdi
  111390:	b8 00 00 00 00       	mov    $0x0,%eax
  111395:	e8 9a 34 00 00       	callq  114834 <_d_arraycatnT>
  11139a:	48 89 d8             	mov    %rbx,%rax
  11139d:	48 83 c4 78          	add    $0x78,%rsp
  1113a1:	5b                   	pop    %rbx
  1113a2:	41 5c                	pop    %r12
  1113a4:	41 5d                	pop    %r13
  1113a6:	c9                   	leaveq 
  1113a7:	c3                   	retq   

00000000001113a8 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  1113a8:	55                   	push   %rbp
  1113a9:	48 89 e5             	mov    %rsp,%rbp
  1113ac:	48 83 ec 30          	sub    $0x30,%rsp
  1113b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1113b4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1113b8:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1113bc:	e8 83 22 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Array c;
  1113c1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1113c8:	00 

		return cast(int)
  1113c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1113cd:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  1113d1:	74 44                	je     111417 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x6f>
  1113d3:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1113d7:	be 60 31 12 00       	mov    $0x123160,%esi
  1113dc:	e8 77 24 00 00       	callq  113858 <_d_dynamic_cast>
  1113e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1113e5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1113ea:	74 31                	je     11141d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x75>
  1113ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1113f0:	48 8b 40 10          	mov    0x10(%rax),%rax
  1113f4:	48 8b 00             	mov    (%rax),%rax
  1113f7:	48 83 c0 20          	add    $0x20,%rax
  1113fb:	48 8b 10             	mov    (%rax),%rdx
  1113fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111402:	48 8b 40 10          	mov    0x10(%rax),%rax
  111406:	48 89 c6             	mov    %rax,%rsi
  111409:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11140d:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111411:	ff d2                	callq  *%rdx
  111413:	85 c0                	test   %eax,%eax
  111415:	74 06                	je     11141d <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x75>
  111417:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  11141b:	eb 04                	jmp    111421 <_D6object14TypeInfo_Array8opEqualsMFC6ObjectZi+0x79>
  11141d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  111421:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_Array)o) !is null &&
				 this.value == c.value));
	}
  111425:	c9                   	leaveq 
  111426:	c3                   	retq   

0000000000111427 <_D6object14TypeInfo_Array7getHashMFPvZm>:

	hash_t getHash(void *p)
  111427:	55                   	push   %rbp
  111428:	48 89 e5             	mov    %rsp,%rbp
  11142b:	48 83 ec 40          	sub    $0x40,%rsp
  11142f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  111433:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  111437:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11143b:	e8 04 22 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  111440:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  111444:	48 8b 40 10          	mov    0x10(%rax),%rax
  111448:	48 8b 00             	mov    (%rax),%rax
  11144b:	48 83 c0 40          	add    $0x40,%rax
  11144f:	48 8b 10             	mov    (%rax),%rdx
  111452:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  111456:	48 8b 78 10          	mov    0x10(%rax),%rdi
  11145a:	ff d2                	callq  *%rdx
  11145c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  111460:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  111467:	00 
		void[] a = *cast(void[]*)p;
  111468:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  11146c:	48 8b 02             	mov    (%rdx),%rax
  11146f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  111473:	48 8b 42 08          	mov    0x8(%rdx),%rax
  111477:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		for (size_t i = 0; i < a.length; i++)
  11147b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111482:	00 
  111483:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111487:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  11148b:	0f 92 c0             	setb   %al
  11148e:	83 f0 01             	xor    $0x1,%eax
  111491:	84 c0                	test   %al,%al
  111493:	75 37                	jne    1114cc <_D6object14TypeInfo_Array7getHashMFPvZm+0xa5>
			hash += value.getHash(a.ptr + i * sz);
  111495:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  111499:	48 8b 40 10          	mov    0x10(%rax),%rax
  11149d:	48 8b 00             	mov    (%rax),%rax
  1114a0:	48 83 c0 28          	add    $0x28,%rax
  1114a4:	48 8b 08             	mov    (%rax),%rcx
  1114a7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  1114ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1114af:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  1114b4:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  1114b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1114bc:	48 8b 78 10          	mov    0x10(%rax),%rdi
  1114c0:	ff d1                	callq  *%rcx
  1114c2:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  1114c6:	48 ff 45 f8          	incq   -0x8(%rbp)
  1114ca:	eb b7                	jmp    111483 <_D6object14TypeInfo_Array7getHashMFPvZm+0x5c>
		return hash;
  1114cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  1114d0:	c9                   	leaveq 
  1114d1:	c3                   	retq   

00000000001114d2 <_D6object14TypeInfo_Array6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  1114d2:	55                   	push   %rbp
  1114d3:	48 89 e5             	mov    %rsp,%rbp
  1114d6:	48 83 ec 50          	sub    $0x50,%rsp
  1114da:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  1114de:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  1114e2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  1114e6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1114ea:	e8 55 21 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  1114ef:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  1114f3:	48 8b 02             	mov    (%rdx),%rax
  1114f6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1114fa:	48 8b 42 08          	mov    0x8(%rdx),%rax
  1114fe:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		void[] a2 = *cast(void[]*)p2;
  111502:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  111506:	48 8b 02             	mov    (%rdx),%rax
  111509:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11150d:	48 8b 42 08          	mov    0x8(%rdx),%rax
  111511:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (a1.length != a2.length)
  111515:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  111519:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11151d:	48 39 c2             	cmp    %rax,%rdx
  111520:	74 0c                	je     11152e <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x5c>
			return 0;
  111522:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  111529:	e9 9e 00 00 00       	jmpq   1115cc <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		size_t sz = value.tsize();
  11152e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  111532:	48 8b 40 10          	mov    0x10(%rax),%rax
  111536:	48 8b 00             	mov    (%rax),%rax
  111539:	48 83 c0 40          	add    $0x40,%rax
  11153d:	48 8b 10             	mov    (%rax),%rdx
  111540:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  111544:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111548:	ff d2                	callq  *%rdx
  11154a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		for (size_t i = 0; i < a1.length; i++)
  11154e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111555:	00 
  111556:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11155a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  11155e:	0f 92 c0             	setb   %al
  111561:	83 f0 01             	xor    $0x1,%eax
  111564:	84 c0                	test   %al,%al
  111566:	75 5d                	jne    1115c5 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xf3>
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  111568:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  11156c:	48 8b 40 10          	mov    0x10(%rax),%rax
  111570:	48 8b 00             	mov    (%rax),%rax
  111573:	48 83 c0 30          	add    $0x30,%rax
  111577:	4c 8b 00             	mov    (%rax),%r8
  11157a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11157e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111582:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  111587:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  11158b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  11158f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111593:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  111598:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  11159c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1115a0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  1115a4:	48 89 ca             	mov    %rcx,%rdx
  1115a7:	41 ff d0             	callq  *%r8
  1115aa:	85 c0                	test   %eax,%eax
  1115ac:	0f 95 c0             	setne  %al
  1115af:	83 f0 01             	xor    $0x1,%eax
  1115b2:	84 c0                	test   %al,%al
  1115b4:	74 09                	je     1115bf <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xed>
				return 0;
  1115b6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  1115bd:	eb 0d                	jmp    1115cc <_D6object14TypeInfo_Array6equalsMFPvPvZi+0xfa>
		if (a1.length != a2.length)
			return 0;
		size_t sz = value.tsize();
		for (size_t i = 0; i < a1.length; i++)
		{
			if (!value.equals(a1.ptr + i * sz, a2.ptr + i * sz))
  1115bf:	48 ff 45 f8          	incq   -0x8(%rbp)
  1115c3:	eb 91                	jmp    111556 <_D6object14TypeInfo_Array6equalsMFPvPvZi+0x84>
				return 0;
		}
		return 1;
  1115c5:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  1115cc:	8b 45 b4             	mov    -0x4c(%rbp),%eax
	}
  1115cf:	c9                   	leaveq 
  1115d0:	c3                   	retq   

00000000001115d1 <_D6object14TypeInfo_Array7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  1115d1:	55                   	push   %rbp
  1115d2:	48 89 e5             	mov    %rsp,%rbp
  1115d5:	48 83 ec 60          	sub    $0x60,%rsp
  1115d9:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  1115dd:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  1115e1:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  1115e5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1115e9:	e8 56 20 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		void[] a1 = *cast(void[]*)p1;
  1115ee:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1115f2:	48 8b 02             	mov    (%rdx),%rax
  1115f5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1115f9:	48 8b 42 08          	mov    0x8(%rdx),%rax
  1115fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		void[] a2 = *cast(void[]*)p2;
  111601:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  111605:	48 8b 02             	mov    (%rdx),%rax
  111608:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11160c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  111610:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		size_t sz = value.tsize();
  111614:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  111618:	48 8b 40 10          	mov    0x10(%rax),%rax
  11161c:	48 8b 00             	mov    (%rax),%rax
  11161f:	48 83 c0 40          	add    $0x40,%rax
  111623:	48 8b 10             	mov    (%rax),%rdx
  111626:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11162a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  11162e:	ff d2                	callq  *%rdx
  111630:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		size_t len = a1.length;
  111634:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  111638:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (a2.length < len)
  11163c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111640:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  111644:	73 08                	jae    11164e <_D6object14TypeInfo_Array7compareMFPvPvZi+0x7d>
			len = a2.length;
  111646:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11164a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		for (size_t u = 0; u < len; u++)
  11164e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  111655:	00 
  111656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11165a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  11165e:	0f 92 c0             	setb   %al
  111661:	83 f0 01             	xor    $0x1,%eax
  111664:	84 c0                	test   %al,%al
  111666:	75 59                	jne    1116c1 <_D6object14TypeInfo_Array7compareMFPvPvZi+0xf0>
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
  111668:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11166c:	48 8b 40 10          	mov    0x10(%rax),%rax
  111670:	48 8b 00             	mov    (%rax),%rax
  111673:	48 83 c0 38          	add    $0x38,%rax
  111677:	4c 8b 00             	mov    (%rax),%r8
  11167a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  11167e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111682:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  111687:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  11168b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  11168f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111693:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  111698:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
  11169c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1116a0:	48 8b 78 10          	mov    0x10(%rax),%rdi
  1116a4:	48 89 ca             	mov    %rcx,%rdx
  1116a7:	41 ff d0             	callq  *%r8
  1116aa:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  1116ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1116b1:	74 08                	je     1116bb <_D6object14TypeInfo_Array7compareMFPvPvZi+0xea>
				return result;
  1116b3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1116b6:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  1116b9:	eb 17                	jmp    1116d2 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x101>
		if (a2.length < len)
			len = a2.length;
		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(a1.ptr + u * sz, a2.ptr + u * sz);
			if (result)
  1116bb:	48 ff 45 f0          	incq   -0x10(%rbp)
  1116bf:	eb 95                	jmp    111656 <_D6object14TypeInfo_Array7compareMFPvPvZi+0x85>
				return result;
		}
		return cast(int)a1.length - cast(int)a2.length;
  1116c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1116c5:	89 c2                	mov    %eax,%edx
  1116c7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1116cb:	89 d1                	mov    %edx,%ecx
  1116cd:	29 c1                	sub    %eax,%ecx
  1116cf:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  1116d2:	8b 45 a4             	mov    -0x5c(%rbp),%eax
	}
  1116d5:	c9                   	leaveq 
  1116d6:	c3                   	retq   

00000000001116d7 <_D6object14TypeInfo_Array5tsizeMFZm>:

	size_t tsize()
  1116d7:	55                   	push   %rbp
  1116d8:	48 89 e5             	mov    %rsp,%rbp
  1116db:	48 83 ec 10          	sub    $0x10,%rsp
  1116df:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1116e3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1116e7:	e8 58 1f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (void[]).sizeof;
  1116ec:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  1116f1:	c9                   	leaveq 
  1116f2:	c3                   	retq   

00000000001116f3 <_D6object14TypeInfo_Array4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  1116f3:	55                   	push   %rbp
  1116f4:	48 89 e5             	mov    %rsp,%rbp
  1116f7:	48 83 ec 30          	sub    $0x30,%rsp
  1116fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1116ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  111703:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  111707:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11170b:	e8 34 1f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void[] tmp;
  111710:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  111717:	00 
  111718:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  11171f:	00 
		tmp = *cast(void[]*)p1;
  111720:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  111724:	48 8b 02             	mov    (%rdx),%rax
  111727:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  11172b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  11172f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		*cast(void[]*)p1 = *cast(void[]*)p2;
  111733:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  111737:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  11173b:	48 8b 02             	mov    (%rdx),%rax
  11173e:	48 89 01             	mov    %rax,(%rcx)
  111741:	48 8b 42 08          	mov    0x8(%rdx),%rax
  111745:	48 89 41 08          	mov    %rax,0x8(%rcx)
		*cast(void[]*)p2 = tmp;
  111749:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  11174d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111751:	48 89 02             	mov    %rax,(%rdx)
  111754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111758:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  11175c:	c9                   	leaveq 
  11175d:	c3                   	retq   

000000000011175e <_D6object14TypeInfo_Array4nextMFZC8TypeInfo>:

	TypeInfo value;

	TypeInfo next()
  11175e:	55                   	push   %rbp
  11175f:	48 89 e5             	mov    %rsp,%rbp
  111762:	48 83 ec 10          	sub    $0x10,%rsp
  111766:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11176a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11176e:	e8 d1 1e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value;
  111773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111777:	48 8b 40 10          	mov    0x10(%rax),%rax
	}
  11177b:	c9                   	leaveq 
  11177c:	c3                   	retq   

000000000011177d <_D6object14TypeInfo_Array5flagsMFZk>:

	uint flags() { return 1; }
  11177d:	55                   	push   %rbp
  11177e:	48 89 e5             	mov    %rsp,%rbp
  111781:	48 83 ec 10          	sub    $0x10,%rsp
  111785:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  111789:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11178d:	e8 b2 1e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  111792:	b8 01 00 00 00       	mov    $0x1,%eax
  111797:	c9                   	leaveq 
  111798:	c3                   	retq   

0000000000111799 <_D6object20TypeInfo_StaticArray8toStringMFZAa>:
}

class TypeInfo_StaticArray : TypeInfo
{
	char[] toString()
  111799:	55                   	push   %rbp
  11179a:	48 89 e5             	mov    %rsp,%rbp
  11179d:	41 57                	push   %r15
  11179f:	41 56                	push   %r14
  1117a1:	41 55                	push   %r13
  1117a3:	41 54                	push   %r12
  1117a5:	53                   	push   %rbx
  1117a6:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  1117ad:	48 89 bd 60 fe ff ff 	mov    %rdi,-0x1a0(%rbp)
  1117b4:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  1117bb:	48 8b bd b8 fe ff ff 	mov    -0x148(%rbp),%rdi
  1117c2:	e8 7d 1e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[20] buf;
  1117c7:	48 c7 85 e0 fe ff ff 	movq   $0x14,-0x120(%rbp)
  1117ce:	14 00 00 00 
  1117d2:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  1117d9:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  1117e0:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  1117e7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1117eb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  1117f2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1117f6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  1117fb:	0f 95 c0             	setne  %al
  1117fe:	83 f0 01             	xor    $0x1,%eax
  111801:	84 c0                	test   %al,%al
  111803:	75 11                	jne    111816 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x7d>
  111805:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  111809:	c6 00 ff             	movb   $0xff,(%rax)
  11180c:	48 ff 45 c0          	incq   -0x40(%rbp)
  111810:	48 ff 4d c8          	decq   -0x38(%rbp)
  111814:	eb e0                	jmp    1117f6 <_D6object20TypeInfo_StaticArray8toStringMFZAa+0x5d>
		return value.toString() ~ "[" ~ itoa(buf, 'd', len) ~ "]";
  111816:	48 c7 85 f0 fe ff ff 	movq   $0x1,-0x110(%rbp)
  11181d:	01 00 00 00 
  111821:	48 c7 85 f8 fe ff ff 	movq   $0x11a650,-0x108(%rbp)
  111828:	50 a6 11 00 
  11182c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  111833:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  11183a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  111841:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  111848:	48 8b 9d 08 ff ff ff 	mov    -0xf8(%rbp),%rbx
  11184f:	4c 8b a5 00 ff ff ff 	mov    -0x100(%rbp),%r12
  111856:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  11185d:	48 8b 40 18          	mov    0x18(%rax),%rax
  111861:	48 89 c1             	mov    %rax,%rcx
  111864:	48 c7 85 10 ff ff ff 	movq   $0x14,-0xf0(%rbp)
  11186b:	14 00 00 00 
  11186f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
  111876:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  11187d:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  111884:	48 8b b5 10 ff ff ff 	mov    -0xf0(%rbp),%rsi
  11188b:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  111892:	49 89 c8             	mov    %rcx,%r8
  111895:	b9 64 00 00 00       	mov    $0x64,%ecx
  11189a:	e8 de 3a ff ff       	callq  10537d <_D3vga4itoaFAaalZAa>
  11189f:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  1118a6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  1118ad:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  1118b4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  1118bb:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  1118c2:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  1118c9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  1118d0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  1118d7:	4c 8b ad 38 ff ff ff 	mov    -0xc8(%rbp),%r13
  1118de:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
  1118e5:	48 c7 85 40 ff ff ff 	movq   $0x1,-0xc0(%rbp)
  1118ec:	01 00 00 00 
  1118f0:	48 c7 85 48 ff ff ff 	movq   $0x11a652,-0xb8(%rbp)
  1118f7:	52 a6 11 00 
  1118fb:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  111902:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  111909:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  111910:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  111917:	4c 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%r15
  11191e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  111925:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  11192c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  111933:	48 8b 40 10          	mov    0x10(%rax),%rax
  111937:	48 8b 00             	mov    (%rax),%rax
  11193a:	48 83 c0 08          	add    $0x8,%rax
  11193e:	48 8b 10             	mov    (%rax),%rdx
  111941:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  111948:	48 8b 70 10          	mov    0x10(%rax),%rsi
  11194c:	48 8d bd 90 fe ff ff 	lea    -0x170(%rbp),%rdi
  111953:	ff d2                	callq  *%rdx
  111955:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  11195c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  111963:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  11196a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  111971:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  111978:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  11197f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  111986:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  11198d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  111994:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  11199b:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  1119a2:	4c 89 3c 24          	mov    %r15,(%rsp)
  1119a6:	4c 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%r9
  1119ad:	49 89 c0             	mov    %rax,%r8
  1119b0:	ba 02 00 00 00       	mov    $0x2,%edx
  1119b5:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1119ba:	b8 00 00 00 00       	mov    $0x0,%eax
  1119bf:	e8 70 2e 00 00       	callq  114834 <_d_arraycatnT>
  1119c4:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  1119cb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  1119cf:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  1119d6:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  1119da:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  1119de:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  1119e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  1119e6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  1119ea:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1119ee:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  1119f2:	48 8d bd 70 fe ff ff 	lea    -0x190(%rbp),%rdi
  1119f9:	4c 89 2c 24          	mov    %r13,(%rsp)
  1119fd:	4d 89 f1             	mov    %r14,%r9
  111a00:	49 89 c0             	mov    %rax,%r8
  111a03:	ba 02 00 00 00       	mov    $0x2,%edx
  111a08:	be c0 86 11 00       	mov    $0x1186c0,%esi
  111a0d:	b8 00 00 00 00       	mov    $0x0,%eax
  111a12:	e8 1d 2e 00 00       	callq  114834 <_d_arraycatnT>
  111a17:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  111a1e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  111a22:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  111a29:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  111a2d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  111a31:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  111a35:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  111a39:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  111a3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  111a41:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  111a45:	48 89 1c 24          	mov    %rbx,(%rsp)
  111a49:	4d 89 e1             	mov    %r12,%r9
  111a4c:	49 89 c0             	mov    %rax,%r8
  111a4f:	ba 02 00 00 00       	mov    $0x2,%edx
  111a54:	be c0 86 11 00       	mov    $0x1186c0,%esi
  111a59:	48 8b bd 60 fe ff ff 	mov    -0x1a0(%rbp),%rdi
  111a60:	b8 00 00 00 00       	mov    $0x0,%eax
  111a65:	e8 ca 2d 00 00       	callq  114834 <_d_arraycatnT>
	}
  111a6a:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  111a71:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  111a78:	5b                   	pop    %rbx
  111a79:	41 5c                	pop    %r12
  111a7b:	41 5d                	pop    %r13
  111a7d:	41 5e                	pop    %r14
  111a7f:	41 5f                	pop    %r15
  111a81:	c9                   	leaveq 
  111a82:	c3                   	retq   

0000000000111a83 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  111a83:	55                   	push   %rbp
  111a84:	48 89 e5             	mov    %rsp,%rbp
  111a87:	48 83 ec 30          	sub    $0x30,%rsp
  111a8b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  111a8f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  111a93:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  111a97:	e8 a8 1b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_StaticArray c;
  111a9c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111aa3:	00 

		return cast(int)
  111aa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111aa8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  111aac:	74 59                	je     111b07 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x84>
  111aae:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  111ab2:	be 00 32 12 00       	mov    $0x123200,%esi
  111ab7:	e8 9c 1d 00 00       	callq  113858 <_d_dynamic_cast>
  111abc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  111ac0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  111ac5:	74 46                	je     111b0d <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8a>
  111ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111acb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  111acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111ad3:	48 8b 40 18          	mov    0x18(%rax),%rax
  111ad7:	48 39 c2             	cmp    %rax,%rdx
  111ada:	75 31                	jne    111b0d <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8a>
  111adc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111ae0:	48 8b 40 10          	mov    0x10(%rax),%rax
  111ae4:	48 8b 00             	mov    (%rax),%rax
  111ae7:	48 83 c0 20          	add    $0x20,%rax
  111aeb:	48 8b 10             	mov    (%rax),%rdx
  111aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111af2:	48 8b 40 10          	mov    0x10(%rax),%rax
  111af6:	48 89 c6             	mov    %rax,%rsi
  111af9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111afd:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111b01:	ff d2                	callq  *%rdx
  111b03:	85 c0                	test   %eax,%eax
  111b05:	74 06                	je     111b0d <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8a>
  111b07:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  111b0b:	eb 04                	jmp    111b11 <_D6object20TypeInfo_StaticArray8opEqualsMFC6ObjectZi+0x8e>
  111b0d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  111b11:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			   (this is o ||
				((c = cast(TypeInfo_StaticArray)o) !is null &&
				 this.len == c.len &&
				 this.value == c.value));
	}
  111b15:	c9                   	leaveq 
  111b16:	c3                   	retq   

0000000000111b17 <_D6object20TypeInfo_StaticArray7getHashMFPvZm>:

	hash_t getHash(void *p)
  111b17:	55                   	push   %rbp
  111b18:	48 89 e5             	mov    %rsp,%rbp
  111b1b:	48 83 ec 30          	sub    $0x30,%rsp
  111b1f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  111b23:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  111b27:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  111b2b:	e8 14 1b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	size_t sz = value.tsize();
  111b30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111b34:	48 8b 40 10          	mov    0x10(%rax),%rax
  111b38:	48 8b 00             	mov    (%rax),%rax
  111b3b:	48 83 c0 40          	add    $0x40,%rax
  111b3f:	48 8b 10             	mov    (%rax),%rdx
  111b42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111b46:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111b4a:	ff d2                	callq  *%rdx
  111b4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		hash_t hash = 0;
  111b50:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  111b57:	00 
		for (size_t i = 0; i < len; i++)
  111b58:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111b5f:	00 
  111b60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111b64:	48 8b 40 18          	mov    0x18(%rax),%rax
  111b68:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  111b6c:	0f 92 c0             	setb   %al
  111b6f:	83 f0 01             	xor    $0x1,%eax
  111b72:	84 c0                	test   %al,%al
  111b74:	75 36                	jne    111bac <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x95>
			hash += value.getHash(p + i * sz);
  111b76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111b7a:	48 8b 40 10          	mov    0x10(%rax),%rax
  111b7e:	48 8b 00             	mov    (%rax),%rax
  111b81:	48 83 c0 28          	add    $0x28,%rax
  111b85:	48 8b 10             	mov    (%rax),%rdx
  111b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111b8c:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  111b91:	48 89 c6             	mov    %rax,%rsi
  111b94:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  111b98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111b9c:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111ba0:	ff d2                	callq  *%rdx
  111ba2:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  111ba6:	48 ff 45 f8          	incq   -0x8(%rbp)
  111baa:	eb b4                	jmp    111b60 <_D6object20TypeInfo_StaticArray7getHashMFPvZm+0x49>
		return hash;
  111bac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  111bb0:	c9                   	leaveq 
  111bb1:	c3                   	retq   

0000000000111bb2 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  111bb2:	55                   	push   %rbp
  111bb3:	48 89 e5             	mov    %rsp,%rbp
  111bb6:	48 83 ec 30          	sub    $0x30,%rsp
  111bba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  111bbe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  111bc2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  111bc6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  111bca:	e8 75 1a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  111bcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111bd3:	48 8b 40 10          	mov    0x10(%rax),%rax
  111bd7:	48 8b 00             	mov    (%rax),%rax
  111bda:	48 83 c0 40          	add    $0x40,%rax
  111bde:	48 8b 10             	mov    (%rax),%rdx
  111be1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111be5:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111be9:	ff d2                	callq  *%rdx
  111beb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		for (size_t u = 0; u < len; u++)
  111bef:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  111bf6:	00 
  111bf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111bfb:	48 8b 40 18          	mov    0x18(%rax),%rax
  111bff:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  111c03:	0f 92 c0             	setb   %al
  111c06:	83 f0 01             	xor    $0x1,%eax
  111c09:	84 c0                	test   %al,%al
  111c0b:	75 57                	jne    111c64 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb2>
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  111c0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111c11:	48 8b 40 10          	mov    0x10(%rax),%rax
  111c15:	48 8b 00             	mov    (%rax),%rax
  111c18:	48 83 c0 30          	add    $0x30,%rax
  111c1c:	48 8b 08             	mov    (%rax),%rcx
  111c1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111c23:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  111c28:	48 89 c2             	mov    %rax,%rdx
  111c2b:	48 03 55 d8          	add    -0x28(%rbp),%rdx
  111c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111c33:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  111c38:	48 89 c6             	mov    %rax,%rsi
  111c3b:	48 03 75 e0          	add    -0x20(%rbp),%rsi
  111c3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  111c43:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111c47:	ff d1                	callq  *%rcx
  111c49:	85 c0                	test   %eax,%eax
  111c4b:	0f 95 c0             	setne  %al
  111c4e:	83 f0 01             	xor    $0x1,%eax
  111c51:	84 c0                	test   %al,%al
  111c53:	74 09                	je     111c5e <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xac>
				return 0;
  111c55:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  111c5c:	eb 0d                	jmp    111c6b <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0xb9>
	{
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			if (!value.equals(p1 + u * sz, p2 + u * sz))
  111c5e:	48 ff 45 f8          	incq   -0x8(%rbp)
  111c62:	eb 93                	jmp    111bf7 <_D6object20TypeInfo_StaticArray6equalsMFPvPvZi+0x45>
				return 0;
		}
		return 1;
  111c64:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  111c6b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
	}
  111c6e:	c9                   	leaveq 
  111c6f:	c3                   	retq   

0000000000111c70 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  111c70:	55                   	push   %rbp
  111c71:	48 89 e5             	mov    %rsp,%rbp
  111c74:	48 83 ec 40          	sub    $0x40,%rsp
  111c78:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  111c7c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  111c80:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  111c84:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  111c88:	e8 b7 19 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		size_t sz = value.tsize();
  111c8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111c91:	48 8b 40 10          	mov    0x10(%rax),%rax
  111c95:	48 8b 00             	mov    (%rax),%rax
  111c98:	48 83 c0 40          	add    $0x40,%rax
  111c9c:	48 8b 10             	mov    (%rax),%rdx
  111c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111ca3:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111ca7:	ff d2                	callq  *%rdx
  111ca9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (size_t u = 0; u < len; u++)
  111cad:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  111cb4:	00 
  111cb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111cb9:	48 8b 40 18          	mov    0x18(%rax),%rax
  111cbd:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  111cc1:	0f 92 c0             	setb   %al
  111cc4:	83 f0 01             	xor    $0x1,%eax
  111cc7:	84 c0                	test   %al,%al
  111cc9:	75 53                	jne    111d1e <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xae>
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
  111ccb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111ccf:	48 8b 40 10          	mov    0x10(%rax),%rax
  111cd3:	48 8b 00             	mov    (%rax),%rax
  111cd6:	48 83 c0 38          	add    $0x38,%rax
  111cda:	48 8b 08             	mov    (%rax),%rcx
  111cdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111ce1:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  111ce6:	48 89 c2             	mov    %rax,%rdx
  111ce9:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  111ced:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111cf1:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  111cf6:	48 89 c6             	mov    %rax,%rsi
  111cf9:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  111cfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111d01:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111d05:	ff d1                	callq  *%rcx
  111d07:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (result)
  111d0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  111d0e:	74 08                	je     111d18 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xa8>
				return result;
  111d10:	8b 45 fc             	mov    -0x4(%rbp),%eax
  111d13:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  111d16:	eb 0d                	jmp    111d25 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0xb5>
		size_t sz = value.tsize();

		for (size_t u = 0; u < len; u++)
		{
			int result = value.compare(p1 + u * sz, p2 + u * sz);
			if (result)
  111d18:	48 ff 45 f0          	incq   -0x10(%rbp)
  111d1c:	eb 97                	jmp    111cb5 <_D6object20TypeInfo_StaticArray7compareMFPvPvZi+0x45>
				return result;
		}
		return 0;
  111d1e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  111d25:	8b 45 c4             	mov    -0x3c(%rbp),%eax
	}
  111d28:	c9                   	leaveq 
  111d29:	c3                   	retq   

0000000000111d2a <_D6object20TypeInfo_StaticArray5tsizeMFZm>:

	size_t tsize()
  111d2a:	55                   	push   %rbp
  111d2b:	48 89 e5             	mov    %rsp,%rbp
  111d2e:	53                   	push   %rbx
  111d2f:	48 83 ec 08          	sub    $0x8,%rsp
  111d33:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  111d37:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  111d3b:	e8 04 19 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return len * value.tsize();
  111d40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111d44:	48 8b 58 18          	mov    0x18(%rax),%rbx
  111d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111d4c:	48 8b 40 10          	mov    0x10(%rax),%rax
  111d50:	48 8b 00             	mov    (%rax),%rax
  111d53:	48 83 c0 40          	add    $0x40,%rax
  111d57:	48 8b 10             	mov    (%rax),%rdx
  111d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111d5e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111d62:	ff d2                	callq  *%rdx
  111d64:	48 0f af c3          	imul   %rbx,%rax
	}
  111d68:	48 83 c4 08          	add    $0x8,%rsp
  111d6c:	5b                   	pop    %rbx
  111d6d:	c9                   	leaveq 
  111d6e:	c3                   	retq   

0000000000111d6f <_D6object20TypeInfo_StaticArray4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  111d6f:	55                   	push   %rbp
  111d70:	48 89 e5             	mov    %rsp,%rbp
  111d73:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  111d7a:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  111d81:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  111d88:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  111d8f:	48 8b bd 28 ff ff ff 	mov    -0xd8(%rbp),%rdi
  111d96:	e8 a9 18 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	void* tmp;
  111d9b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  111da2:	00 
		size_t sz = value.tsize();
  111da3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  111daa:	48 8b 40 10          	mov    0x10(%rax),%rax
  111dae:	48 8b 00             	mov    (%rax),%rax
  111db1:	48 83 c0 40          	add    $0x40,%rax
  111db5:	48 8b 10             	mov    (%rax),%rdx
  111db8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  111dbf:	48 8b 78 10          	mov    0x10(%rax),%rdi
  111dc3:	ff d2                	callq  *%rdx
  111dc5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		ubyte[16] buffer;
  111dc9:	48 c7 85 50 ff ff ff 	movq   $0x10,-0xb0(%rbp)
  111dd0:	10 00 00 00 
  111dd4:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  111ddb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  111de2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  111de9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  111ded:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  111df4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  111df8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  111dfd:	0f 95 c0             	setne  %al
  111e00:	83 f0 01             	xor    $0x1,%eax
  111e03:	84 c0                	test   %al,%al
  111e05:	75 11                	jne    111e18 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xa9>
  111e07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  111e0b:	c6 00 00             	movb   $0x0,(%rax)
  111e0e:	48 ff 45 e0          	incq   -0x20(%rbp)
  111e12:	48 ff 4d e8          	decq   -0x18(%rbp)
  111e16:	eb e0                	jmp    111df8 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x89>
		void* pbuffer;
  111e18:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  111e1f:	00 00 00 00 

		if (sz < buffer.sizeof)
  111e23:	48 83 7d d0 10       	cmpq   $0x10,-0x30(%rbp)
  111e28:	73 0d                	jae    111e37 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xc8>
			tmp = buffer.ptr;
  111e2a:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  111e31:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  111e35:	eb 2e                	jmp    111e65 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xf6>
		else
			tmp = pbuffer = (new void[sz]).ptr;
  111e37:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  111e3e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  111e42:	be 80 85 11 00       	mov    $0x118580,%esi
  111e47:	e8 12 27 00 00       	callq  11455e <_d_newarrayT>
  111e4c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  111e53:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  111e5a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  111e61:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		for (size_t u = 0; u < len; u += sz)
  111e65:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  111e6c:	00 
  111e6d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  111e74:	48 8b 40 18          	mov    0x18(%rax),%rax
  111e78:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  111e7c:	0f 92 c0             	setb   %al
  111e7f:	83 f0 01             	xor    $0x1,%eax
  111e82:	84 c0                	test   %al,%al
  111e84:	0f 85 35 01 00 00    	jne    111fbf <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x250>
		{	size_t o = u * sz;
  111e8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111e8e:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  111e93:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			tmp[0 .. sz] = (p1 + o)[0 .. sz];
  111e97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111e9b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  111ea2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111ea6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  111ead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111eb1:	48 89 c2             	mov    %rax,%rdx
  111eb4:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  111ebb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111ebf:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  111ec3:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  111ec7:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  111ece:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  111ed5:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  111edc:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  111ee0:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  111ee4:	49 89 c0             	mov    %rax,%r8
  111ee7:	49 89 d1             	mov    %rdx,%r9
  111eea:	48 89 ca             	mov    %rcx,%rdx
  111eed:	48 89 f1             	mov    %rsi,%rcx
  111ef0:	be 01 00 00 00       	mov    $0x1,%esi
  111ef5:	e8 ad 50 00 00       	callq  116fa7 <_d_arraycopy>
			(p1 + o)[0 .. sz] = (p2 + o)[0 .. sz];
  111efa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111efe:	48 89 c2             	mov    %rax,%rdx
  111f01:	48 03 95 20 ff ff ff 	add    -0xe0(%rbp),%rdx
  111f08:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111f0c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  111f10:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  111f14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111f18:	48 89 c2             	mov    %rax,%rdx
  111f1b:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  111f22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111f26:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  111f2a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  111f2e:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  111f35:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  111f39:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  111f3d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  111f41:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  111f45:	49 89 c0             	mov    %rax,%r8
  111f48:	49 89 d1             	mov    %rdx,%r9
  111f4b:	48 89 ca             	mov    %rcx,%rdx
  111f4e:	48 89 f1             	mov    %rsi,%rcx
  111f51:	be 01 00 00 00       	mov    $0x1,%esi
  111f56:	e8 4c 50 00 00       	callq  116fa7 <_d_arraycopy>
			(p2 + o)[0 .. sz] = tmp[0 .. sz];
  111f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  111f5f:	48 89 c2             	mov    %rax,%rdx
  111f62:	48 03 95 18 ff ff ff 	add    -0xe8(%rbp),%rdx
  111f69:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111f6d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  111f71:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  111f75:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111f79:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  111f7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  111f81:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  111f85:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  111f8c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  111f90:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  111f94:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  111f98:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  111f9c:	49 89 c0             	mov    %rax,%r8
  111f9f:	49 89 d1             	mov    %rdx,%r9
  111fa2:	48 89 ca             	mov    %rcx,%rdx
  111fa5:	48 89 f1             	mov    %rsi,%rcx
  111fa8:	be 01 00 00 00       	mov    $0x1,%esi
  111fad:	e8 f5 4f 00 00       	callq  116fa7 <_d_arraycopy>
  111fb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  111fb6:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  111fba:	e9 ae fe ff ff       	jmpq   111e6d <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0xfe>
		}
		if (pbuffer)
  111fbf:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  111fc6:	48 85 c0             	test   %rax,%rax
  111fc9:	74 0c                	je     111fd7 <_D6object20TypeInfo_StaticArray4swapMFPvPvZv+0x268>
			delete pbuffer;
  111fcb:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  111fd2:	e8 8d 26 00 00       	callq  114664 <_d_delmemory>
	}
  111fd7:	c9                   	leaveq 
  111fd8:	c3                   	retq   

0000000000111fd9 <_D6object20TypeInfo_StaticArray4initMFZAv>:

	void[] init() { return value.init(); }
  111fd9:	55                   	push   %rbp
  111fda:	48 89 e5             	mov    %rsp,%rbp
  111fdd:	53                   	push   %rbx
  111fde:	48 83 ec 08          	sub    $0x8,%rsp
  111fe2:	48 89 fb             	mov    %rdi,%rbx
  111fe5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  111fe9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  111fed:	e8 52 16 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  111ff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  111ff6:	48 8b 40 10          	mov    0x10(%rax),%rax
  111ffa:	48 8b 00             	mov    (%rax),%rax
  111ffd:	48 83 c0 58          	add    $0x58,%rax
  112001:	48 8b 10             	mov    (%rax),%rdx
  112004:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112008:	48 8b 70 10          	mov    0x10(%rax),%rsi
  11200c:	48 89 df             	mov    %rbx,%rdi
  11200f:	ff d2                	callq  *%rdx
  112011:	48 89 d8             	mov    %rbx,%rax
  112014:	48 83 c4 08          	add    $0x8,%rsp
  112018:	5b                   	pop    %rbx
  112019:	c9                   	leaveq 
  11201a:	c3                   	retq   

000000000011201b <_D6object20TypeInfo_StaticArray4nextMFZC8TypeInfo>:
	TypeInfo next() { return value; }
  11201b:	55                   	push   %rbp
  11201c:	48 89 e5             	mov    %rsp,%rbp
  11201f:	48 83 ec 10          	sub    $0x10,%rsp
  112023:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112027:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11202b:	e8 14 16 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  112030:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112034:	48 8b 40 10          	mov    0x10(%rax),%rax
  112038:	c9                   	leaveq 
  112039:	c3                   	retq   

000000000011203a <_D6object20TypeInfo_StaticArray5flagsMFZk>:
	uint flags() { return value.flags(); }
  11203a:	55                   	push   %rbp
  11203b:	48 89 e5             	mov    %rsp,%rbp
  11203e:	48 83 ec 10          	sub    $0x10,%rsp
  112042:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112046:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11204a:	e8 f5 15 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  11204f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112053:	48 8b 40 10          	mov    0x10(%rax),%rax
  112057:	48 8b 00             	mov    (%rax),%rax
  11205a:	48 83 c0 60          	add    $0x60,%rax
  11205e:	48 8b 10             	mov    (%rax),%rdx
  112061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112065:	48 8b 78 10          	mov    0x10(%rax),%rdi
  112069:	ff d2                	callq  *%rdx
  11206b:	c9                   	leaveq 
  11206c:	c3                   	retq   

000000000011206d <_D6object25TypeInfo_AssociativeArray8toStringMFZAa>:
	size_t len;
}

class TypeInfo_AssociativeArray : TypeInfo
{
	char[] toString()
  11206d:	55                   	push   %rbp
  11206e:	48 89 e5             	mov    %rsp,%rbp
  112071:	41 57                	push   %r15
  112073:	41 56                	push   %r14
  112075:	41 55                	push   %r13
  112077:	41 54                	push   %r12
  112079:	53                   	push   %rbx
  11207a:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
  112081:	48 89 fb             	mov    %rdi,%rbx
  112084:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
  11208b:	48 8b bd 08 ff ff ff 	mov    -0xf8(%rbp),%rdi
  112092:	e8 ad 15 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return value.toString() ~ "[" ~ key.toString() ~ "]";
  112097:	48 c7 85 10 ff ff ff 	movq   $0x1,-0xf0(%rbp)
  11209e:	01 00 00 00 
  1120a2:	48 c7 85 18 ff ff ff 	movq   $0x11a650,-0xe8(%rbp)
  1120a9:	50 a6 11 00 
  1120ad:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  1120b4:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  1120bb:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  1120c2:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  1120c9:	4c 8b a5 28 ff ff ff 	mov    -0xd8(%rbp),%r12
  1120d0:	4c 8b ad 20 ff ff ff 	mov    -0xe0(%rbp),%r13
  1120d7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  1120de:	48 8b 40 18          	mov    0x18(%rax),%rax
  1120e2:	48 8b 00             	mov    (%rax),%rax
  1120e5:	48 83 c0 08          	add    $0x8,%rax
  1120e9:	48 8b 10             	mov    (%rax),%rdx
  1120ec:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  1120f3:	48 8b 70 18          	mov    0x18(%rax),%rsi
  1120f7:	48 8d bd f0 fe ff ff 	lea    -0x110(%rbp),%rdi
  1120fe:	ff d2                	callq  *%rdx
  112100:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  112107:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  11210e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  112115:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  11211c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  112123:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  11212a:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  112131:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  112138:	4c 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%r14
  11213f:	4c 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%r15
  112146:	48 c7 85 50 ff ff ff 	movq   $0x1,-0xb0(%rbp)
  11214d:	01 00 00 00 
  112151:	48 c7 85 58 ff ff ff 	movq   $0x11a652,-0xa8(%rbp)
  112158:	52 a6 11 00 
  11215c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  112163:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  11216a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  112171:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  112178:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  11217f:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  112186:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  11218d:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  112194:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  11219b:	48 8b 40 10          	mov    0x10(%rax),%rax
  11219f:	48 8b 00             	mov    (%rax),%rax
  1121a2:	48 83 c0 08          	add    $0x8,%rax
  1121a6:	48 8b 10             	mov    (%rax),%rdx
  1121a9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  1121b0:	48 8b 70 10          	mov    0x10(%rax),%rsi
  1121b4:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  1121bb:	ff d2                	callq  *%rdx
  1121bd:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  1121c4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  1121cb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  1121d2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  1121d9:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  1121e0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  1121e4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1121eb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  1121ef:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  1121f3:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  1121f7:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  1121fe:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  112205:	48 89 14 24          	mov    %rdx,(%rsp)
  112209:	4c 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%r9
  112210:	49 89 c0             	mov    %rax,%r8
  112213:	ba 02 00 00 00       	mov    $0x2,%edx
  112218:	be c0 86 11 00       	mov    $0x1186c0,%esi
  11221d:	b8 00 00 00 00       	mov    $0x0,%eax
  112222:	e8 0d 26 00 00       	callq  114834 <_d_arraycatnT>
  112227:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  11222e:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  112232:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  112239:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  11223d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  112241:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  112245:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  112249:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  11224d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  112251:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  112255:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  11225c:	4c 89 34 24          	mov    %r14,(%rsp)
  112260:	4d 89 f9             	mov    %r15,%r9
  112263:	49 89 c0             	mov    %rax,%r8
  112266:	ba 02 00 00 00       	mov    $0x2,%edx
  11226b:	be c0 86 11 00       	mov    $0x1186c0,%esi
  112270:	b8 00 00 00 00       	mov    $0x0,%eax
  112275:	e8 ba 25 00 00       	callq  114834 <_d_arraycatnT>
  11227a:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  112281:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  112285:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  11228c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  112290:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  112294:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  112298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11229c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1122a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1122a4:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  1122a8:	4c 89 24 24          	mov    %r12,(%rsp)
  1122ac:	4d 89 e9             	mov    %r13,%r9
  1122af:	49 89 c0             	mov    %rax,%r8
  1122b2:	ba 02 00 00 00       	mov    $0x2,%edx
  1122b7:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1122bc:	48 89 df             	mov    %rbx,%rdi
  1122bf:	b8 00 00 00 00       	mov    $0x0,%eax
  1122c4:	e8 6b 25 00 00       	callq  114834 <_d_arraycatnT>
	}
  1122c9:	48 89 d8             	mov    %rbx,%rax
  1122cc:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
  1122d3:	5b                   	pop    %rbx
  1122d4:	41 5c                	pop    %r12
  1122d6:	41 5d                	pop    %r13
  1122d8:	41 5e                	pop    %r14
  1122da:	41 5f                	pop    %r15
  1122dc:	c9                   	leaveq 
  1122dd:	c3                   	retq   

00000000001122de <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  1122de:	55                   	push   %rbp
  1122df:	48 89 e5             	mov    %rsp,%rbp
  1122e2:	48 83 ec 30          	sub    $0x30,%rsp
  1122e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1122ea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1122ee:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1122f2:	e8 4d 13 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_AssociativeArray c;
  1122f7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1122fe:	00 

		return this is o ||
  1122ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112303:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  112307:	74 6f                	je     112378 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0x9a>
  112309:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  11230d:	be a0 32 12 00       	mov    $0x1232a0,%esi
  112312:	e8 41 15 00 00       	callq  113858 <_d_dynamic_cast>
  112317:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  11231b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  112320:	74 5c                	je     11237e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa0>
  112322:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112326:	48 8b 40 18          	mov    0x18(%rax),%rax
  11232a:	48 8b 00             	mov    (%rax),%rax
  11232d:	48 83 c0 20          	add    $0x20,%rax
  112331:	48 8b 10             	mov    (%rax),%rdx
  112334:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112338:	48 8b 40 18          	mov    0x18(%rax),%rax
  11233c:	48 89 c6             	mov    %rax,%rsi
  11233f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112343:	48 8b 78 18          	mov    0x18(%rax),%rdi
  112347:	ff d2                	callq  *%rdx
  112349:	85 c0                	test   %eax,%eax
  11234b:	74 31                	je     11237e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa0>
  11234d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112351:	48 8b 40 10          	mov    0x10(%rax),%rax
  112355:	48 8b 00             	mov    (%rax),%rax
  112358:	48 83 c0 20          	add    $0x20,%rax
  11235c:	48 8b 10             	mov    (%rax),%rdx
  11235f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112363:	48 8b 40 10          	mov    0x10(%rax),%rax
  112367:	48 89 c6             	mov    %rax,%rsi
  11236a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11236e:	48 8b 78 10          	mov    0x10(%rax),%rdi
  112372:	ff d2                	callq  *%rdx
  112374:	85 c0                	test   %eax,%eax
  112376:	74 06                	je     11237e <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa0>
  112378:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  11237c:	eb 04                	jmp    112382 <_D6object25TypeInfo_AssociativeArray8opEqualsMFC6ObjectZi+0xa4>
  11237e:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  112382:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_AssociativeArray)o) !is null &&
				 this.key == c.key &&
				 this.value == c.value);
	}
  112386:	c9                   	leaveq 
  112387:	c3                   	retq   

0000000000112388 <_D6object25TypeInfo_AssociativeArray5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  112388:	55                   	push   %rbp
  112389:	48 89 e5             	mov    %rsp,%rbp
  11238c:	48 83 ec 10          	sub    $0x10,%rsp
  112390:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112394:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112398:	e8 a7 12 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (char[int]).sizeof;
  11239d:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  1123a2:	c9                   	leaveq 
  1123a3:	c3                   	retq   

00000000001123a4 <_D6object25TypeInfo_AssociativeArray4nextMFZC8TypeInfo>:

	TypeInfo next() { return value; }
  1123a4:	55                   	push   %rbp
  1123a5:	48 89 e5             	mov    %rsp,%rbp
  1123a8:	48 83 ec 10          	sub    $0x10,%rsp
  1123ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1123b0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1123b4:	e8 8b 12 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1123b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1123bd:	48 8b 40 10          	mov    0x10(%rax),%rax
  1123c1:	c9                   	leaveq 
  1123c2:	c3                   	retq   

00000000001123c3 <_D6object25TypeInfo_AssociativeArray5flagsMFZk>:
	uint flags() { return 1; }
  1123c3:	55                   	push   %rbp
  1123c4:	48 89 e5             	mov    %rsp,%rbp
  1123c7:	48 83 ec 10          	sub    $0x10,%rsp
  1123cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1123cf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1123d3:	e8 6c 12 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1123d8:	b8 01 00 00 00       	mov    $0x1,%eax
  1123dd:	c9                   	leaveq 
  1123de:	c3                   	retq   

00000000001123df <_D6object17TypeInfo_Function8toStringMFZAa>:
	TypeInfo key;
}

class TypeInfo_Function : TypeInfo
{
	char[] toString()
  1123df:	55                   	push   %rbp
  1123e0:	48 89 e5             	mov    %rsp,%rbp
  1123e3:	41 55                	push   %r13
  1123e5:	41 54                	push   %r12
  1123e7:	53                   	push   %rbx
  1123e8:	48 83 ec 78          	sub    $0x78,%rsp
  1123ec:	48 89 fb             	mov    %rdi,%rbx
  1123ef:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  1123f3:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  1123f7:	e8 48 12 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ "()";
  1123fc:	48 c7 45 a0 02 00 00 	movq   $0x2,-0x60(%rbp)
  112403:	00 
  112404:	48 c7 45 a8 d0 a7 11 	movq   $0x11a7d0,-0x58(%rbp)
  11240b:	00 
  11240c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  112410:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  112414:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  112418:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  11241c:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  112420:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  112424:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  112428:	48 8b 40 10          	mov    0x10(%rax),%rax
  11242c:	48 8b 00             	mov    (%rax),%rax
  11242f:	48 83 c0 08          	add    $0x8,%rax
  112433:	48 8b 10             	mov    (%rax),%rdx
  112436:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11243a:	48 8b 70 10          	mov    0x10(%rax),%rsi
  11243e:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  112442:	ff d2                	callq  *%rdx
  112444:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  112448:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  11244c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  112450:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  112454:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  112458:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11245c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112460:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  112464:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  112468:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  11246c:	4c 89 24 24          	mov    %r12,(%rsp)
  112470:	4d 89 e9             	mov    %r13,%r9
  112473:	49 89 c0             	mov    %rax,%r8
  112476:	ba 02 00 00 00       	mov    $0x2,%edx
  11247b:	be c0 86 11 00       	mov    $0x1186c0,%esi
  112480:	48 89 df             	mov    %rbx,%rdi
  112483:	b8 00 00 00 00       	mov    $0x0,%eax
  112488:	e8 a7 23 00 00       	callq  114834 <_d_arraycatnT>
	}
  11248d:	48 89 d8             	mov    %rbx,%rax
  112490:	48 83 c4 78          	add    $0x78,%rsp
  112494:	5b                   	pop    %rbx
  112495:	41 5c                	pop    %r12
  112497:	41 5d                	pop    %r13
  112499:	c9                   	leaveq 
  11249a:	c3                   	retq   

000000000011249b <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  11249b:	55                   	push   %rbp
  11249c:	48 89 e5             	mov    %rsp,%rbp
  11249f:	48 83 ec 30          	sub    $0x30,%rsp
  1124a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1124a7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1124ab:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1124af:	e8 90 11 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Function c;
  1124b4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1124bb:	00 

		return this is o ||
  1124bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1124c0:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  1124c4:	74 44                	je     11250a <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x6f>
  1124c6:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1124ca:	be 40 33 12 00       	mov    $0x123340,%esi
  1124cf:	e8 84 13 00 00       	callq  113858 <_d_dynamic_cast>
  1124d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1124d8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1124dd:	74 31                	je     112510 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x75>
  1124df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1124e3:	48 8b 40 10          	mov    0x10(%rax),%rax
  1124e7:	48 8b 00             	mov    (%rax),%rax
  1124ea:	48 83 c0 20          	add    $0x20,%rax
  1124ee:	48 8b 10             	mov    (%rax),%rdx
  1124f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1124f5:	48 8b 40 10          	mov    0x10(%rax),%rax
  1124f9:	48 89 c6             	mov    %rax,%rsi
  1124fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112500:	48 8b 78 10          	mov    0x10(%rax),%rdi
  112504:	ff d2                	callq  *%rdx
  112506:	85 c0                	test   %eax,%eax
  112508:	74 06                	je     112510 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x75>
  11250a:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  11250e:	eb 04                	jmp    112514 <_D6object17TypeInfo_Function8opEqualsMFC6ObjectZi+0x79>
  112510:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  112514:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Function)o) !is null &&
				 this.next == c.next);
	}
  112518:	c9                   	leaveq 
  112519:	c3                   	retq   

000000000011251a <_D6object17TypeInfo_Function5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  11251a:	55                   	push   %rbp
  11251b:	48 89 e5             	mov    %rsp,%rbp
  11251e:	48 83 ec 10          	sub    $0x10,%rsp
  112522:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112526:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11252a:	e8 15 11 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return 0;		// no size for functions
  11252f:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  112534:	c9                   	leaveq 
  112535:	c3                   	retq   

0000000000112536 <_D6object17TypeInfo_Delegate8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Delegate : TypeInfo
{
	char[] toString()
  112536:	55                   	push   %rbp
  112537:	48 89 e5             	mov    %rsp,%rbp
  11253a:	41 55                	push   %r13
  11253c:	41 54                	push   %r12
  11253e:	53                   	push   %rbx
  11253f:	48 83 ec 78          	sub    $0x78,%rsp
  112543:	48 89 fb             	mov    %rdi,%rbx
  112546:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
  11254a:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  11254e:	e8 f1 10 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return next.toString() ~ " delegate()";
  112553:	48 c7 45 a0 0b 00 00 	movq   $0xb,-0x60(%rbp)
  11255a:	00 
  11255b:	48 c7 45 a8 90 a8 11 	movq   $0x11a890,-0x58(%rbp)
  112562:	00 
  112563:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  112567:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  11256b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  11256f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  112573:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  112577:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
  11257b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11257f:	48 8b 40 10          	mov    0x10(%rax),%rax
  112583:	48 8b 00             	mov    (%rax),%rax
  112586:	48 83 c0 08          	add    $0x8,%rax
  11258a:	48 8b 10             	mov    (%rax),%rdx
  11258d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  112591:	48 8b 70 10          	mov    0x10(%rax),%rsi
  112595:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  112599:	ff d2                	callq  *%rdx
  11259b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  11259f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1125a3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  1125a7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1125ab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1125af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1125b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1125b7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1125bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1125bf:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  1125c3:	4c 89 24 24          	mov    %r12,(%rsp)
  1125c7:	4d 89 e9             	mov    %r13,%r9
  1125ca:	49 89 c0             	mov    %rax,%r8
  1125cd:	ba 02 00 00 00       	mov    $0x2,%edx
  1125d2:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1125d7:	48 89 df             	mov    %rbx,%rdi
  1125da:	b8 00 00 00 00       	mov    $0x0,%eax
  1125df:	e8 50 22 00 00       	callq  114834 <_d_arraycatnT>
	}
  1125e4:	48 89 d8             	mov    %rbx,%rax
  1125e7:	48 83 c4 78          	add    $0x78,%rsp
  1125eb:	5b                   	pop    %rbx
  1125ec:	41 5c                	pop    %r12
  1125ee:	41 5d                	pop    %r13
  1125f0:	c9                   	leaveq 
  1125f1:	c3                   	retq   

00000000001125f2 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  1125f2:	55                   	push   %rbp
  1125f3:	48 89 e5             	mov    %rsp,%rbp
  1125f6:	48 83 ec 30          	sub    $0x30,%rsp
  1125fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1125fe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  112602:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  112606:	e8 39 10 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Delegate c;
  11260b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  112612:	00 

		return this is o ||
  112613:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112617:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  11261b:	74 44                	je     112661 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x6f>
  11261d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  112621:	be e0 33 12 00       	mov    $0x1233e0,%esi
  112626:	e8 2d 12 00 00       	callq  113858 <_d_dynamic_cast>
  11262b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  11262f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  112634:	74 31                	je     112667 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x75>
  112636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11263a:	48 8b 40 10          	mov    0x10(%rax),%rax
  11263e:	48 8b 00             	mov    (%rax),%rax
  112641:	48 83 c0 20          	add    $0x20,%rax
  112645:	48 8b 10             	mov    (%rax),%rdx
  112648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11264c:	48 8b 40 10          	mov    0x10(%rax),%rax
  112650:	48 89 c6             	mov    %rax,%rsi
  112653:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112657:	48 8b 78 10          	mov    0x10(%rax),%rdi
  11265b:	ff d2                	callq  *%rdx
  11265d:	85 c0                	test   %eax,%eax
  11265f:	74 06                	je     112667 <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x75>
  112661:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  112665:	eb 04                	jmp    11266b <_D6object17TypeInfo_Delegate8opEqualsMFC6ObjectZi+0x79>
  112667:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  11266b:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Delegate)o) !is null &&
				 this.next == c.next);
	}
  11266f:	c9                   	leaveq 
  112670:	c3                   	retq   

0000000000112671 <_D6object17TypeInfo_Delegate5tsizeMFZm>:

	// BUG: need to add the rest of the functions

	size_t tsize()
  112671:	55                   	push   %rbp
  112672:	48 89 e5             	mov    %rsp,%rbp
  112675:	48 83 ec 10          	sub    $0x10,%rsp
  112679:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11267d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112681:	e8 be 0f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	alias int delegate() dg;
		return dg.sizeof;
  112686:	b8 10 00 00 00       	mov    $0x10,%eax
	}
  11268b:	c9                   	leaveq 
  11268c:	c3                   	retq   

000000000011268d <_D6object17TypeInfo_Delegate5flagsMFZk>:

	uint flags() { return 1; }
  11268d:	55                   	push   %rbp
  11268e:	48 89 e5             	mov    %rsp,%rbp
  112691:	48 83 ec 10          	sub    $0x10,%rsp
  112695:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112699:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  11269d:	e8 a2 0f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1126a2:	b8 01 00 00 00       	mov    $0x1,%eax
  1126a7:	c9                   	leaveq 
  1126a8:	c3                   	retq   

00000000001126a9 <_D6object14TypeInfo_Class8toStringMFZAa>:
	TypeInfo next;
}

class TypeInfo_Class : TypeInfo
{
	char[] toString() { return info.name; }
  1126a9:	55                   	push   %rbp
  1126aa:	48 89 e5             	mov    %rsp,%rbp
  1126ad:	53                   	push   %rbx
  1126ae:	48 83 ec 08          	sub    $0x8,%rsp
  1126b2:	48 89 fb             	mov    %rdi,%rbx
  1126b5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1126b9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1126bd:	e8 82 0f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1126c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1126c6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  1126ca:	48 8b 42 20          	mov    0x20(%rdx),%rax
  1126ce:	48 89 03             	mov    %rax,(%rbx)
  1126d1:	48 8b 42 28          	mov    0x28(%rdx),%rax
  1126d5:	48 89 43 08          	mov    %rax,0x8(%rbx)
  1126d9:	48 89 d8             	mov    %rbx,%rax
  1126dc:	48 83 c4 08          	add    $0x8,%rsp
  1126e0:	5b                   	pop    %rbx
  1126e1:	c9                   	leaveq 
  1126e2:	c3                   	retq   

00000000001126e3 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  1126e3:	55                   	push   %rbp
  1126e4:	48 89 e5             	mov    %rsp,%rbp
  1126e7:	48 83 ec 40          	sub    $0x40,%rsp
  1126eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1126ef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1126f3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1126f7:	e8 48 0f 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Class c;
  1126fc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  112703:	00 

		return this is o ||
  112704:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112708:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  11270c:	0f 84 98 00 00 00    	je     1127aa <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xc7>
  112712:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  112716:	be 80 34 12 00       	mov    $0x123480,%esi
  11271b:	e8 38 11 00 00       	callq  113858 <_d_dynamic_cast>
  112720:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  112724:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  112729:	0f 84 81 00 00 00    	je     1127b0 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcd>
  11272f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112733:	48 8b 40 10          	mov    0x10(%rax),%rax
  112737:	48 8b 50 20          	mov    0x20(%rax),%rdx
  11273b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11273f:	48 8b 00             	mov    (%rax),%rax
  112742:	48 8b 00             	mov    (%rax),%rax
  112745:	48 8b 40 20          	mov    0x20(%rax),%rax
  112749:	48 39 c2             	cmp    %rax,%rdx
  11274c:	75 62                	jne    1127b0 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcd>
  11274e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112752:	48 8b 40 10          	mov    0x10(%rax),%rax
  112756:	48 8b 48 20          	mov    0x20(%rax),%rcx
  11275a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11275e:	48 8b 00             	mov    (%rax),%rax
  112761:	48 8b 00             	mov    (%rax),%rax
  112764:	48 8b 50 28          	mov    0x28(%rax),%rdx
  112768:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11276c:	48 8b 40 10          	mov    0x10(%rax),%rax
  112770:	48 8b 40 28          	mov    0x28(%rax),%rax
  112774:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  112778:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  11277c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  112780:	fc                   	cld    
  112781:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  112785:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  112789:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  11278d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  112791:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  112795:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  112797:	0f 97 c2             	seta   %dl
  11279a:	0f 92 c0             	setb   %al
  11279d:	89 d1                	mov    %edx,%ecx
  11279f:	28 c1                	sub    %al,%cl
  1127a1:	89 c8                	mov    %ecx,%eax
  1127a3:	0f be c0             	movsbl %al,%eax
  1127a6:	85 c0                	test   %eax,%eax
  1127a8:	75 06                	jne    1127b0 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xcd>
  1127aa:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  1127ae:	eb 04                	jmp    1127b4 <_D6object14TypeInfo_Class8opEqualsMFC6ObjectZi+0xd1>
  1127b0:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  1127b4:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Class)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  1127b8:	c9                   	leaveq 
  1127b9:	c3                   	retq   

00000000001127ba <_D6object14TypeInfo_Class7getHashMFPvZm>:

	hash_t getHash(void *p)
  1127ba:	55                   	push   %rbp
  1127bb:	48 89 e5             	mov    %rsp,%rbp
  1127be:	48 83 ec 20          	sub    $0x20,%rsp
  1127c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1127c6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1127ca:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1127ce:	e8 71 0e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o = *cast(Object*)p;
  1127d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1127d7:	48 8b 00             	mov    (%rax),%rax
  1127da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		assert(o);
  1127de:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1127e2:	e8 5d 0e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  1127e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1127eb:	48 8b 00             	mov    (%rax),%rax
  1127ee:	48 83 c0 10          	add    $0x10,%rax
  1127f2:	48 8b 00             	mov    (%rax),%rax
  1127f5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1127f9:	ff d0                	callq  *%rax
	}
  1127fb:	c9                   	leaveq 
  1127fc:	c3                   	retq   

00000000001127fd <_D6object14TypeInfo_Class6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  1127fd:	55                   	push   %rbp
  1127fe:	48 89 e5             	mov    %rsp,%rbp
  112801:	48 83 ec 30          	sub    $0x30,%rsp
  112805:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  112809:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11280d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  112811:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  112815:	e8 2a 0e 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  11281a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11281e:	48 8b 00             	mov    (%rax),%rax
  112821:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  112825:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  112829:	48 8b 00             	mov    (%rax),%rax
  11282c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		return (o1 is o2) || (o1 && o1.opEquals(o2));
  112830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112834:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  112838:	74 23                	je     11285d <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x60>
  11283a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  11283f:	74 22                	je     112863 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  112841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112845:	48 8b 00             	mov    (%rax),%rax
  112848:	48 83 c0 20          	add    $0x20,%rax
  11284c:	48 8b 00             	mov    (%rax),%rax
  11284f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  112853:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112857:	ff d0                	callq  *%rax
  112859:	85 c0                	test   %eax,%eax
  11285b:	74 06                	je     112863 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x66>
  11285d:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
  112861:	eb 04                	jmp    112867 <_D6object14TypeInfo_Class6equalsMFPvPvZi+0x6a>
  112863:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
  112867:	0f b6 45 d7          	movzbl -0x29(%rbp),%eax
	}
  11286b:	c9                   	leaveq 
  11286c:	c3                   	retq   

000000000011286d <_D6object14TypeInfo_Class7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  11286d:	55                   	push   %rbp
  11286e:	48 89 e5             	mov    %rsp,%rbp
  112871:	48 83 ec 40          	sub    $0x40,%rsp
  112875:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  112879:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11287d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112881:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  112885:	e8 ba 0d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Object o1 = *cast(Object*)p1;
  11288a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11288e:	48 8b 00             	mov    (%rax),%rax
  112891:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = *cast(Object*)p2;
  112895:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112899:	48 8b 00             	mov    (%rax),%rax
  11289c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		int c = 0;
  1128a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

		// Regard null references as always being "less than"
		if (o1 !is o2)
  1128a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1128ab:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  1128af:	74 43                	je     1128f4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
		{
			if (o1)
  1128b1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1128b6:	74 35                	je     1128ed <_D6object14TypeInfo_Class7compareMFPvPvZi+0x80>
			{	if (!o2)
  1128b8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1128bd:	0f 95 c0             	setne  %al
  1128c0:	83 f0 01             	xor    $0x1,%eax
  1128c3:	84 c0                	test   %al,%al
  1128c5:	74 09                	je     1128d0 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x63>
					c = 1;
  1128c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  1128ce:	eb 24                	jmp    1128f4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
				else
					c = o1.opCmp(o2);
  1128d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1128d4:	48 8b 00             	mov    (%rax),%rax
  1128d7:	48 83 c0 18          	add    $0x18,%rax
  1128db:	48 8b 00             	mov    (%rax),%rax
  1128de:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  1128e2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1128e6:	ff d0                	callq  *%rax
  1128e8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  1128eb:	eb 07                	jmp    1128f4 <_D6object14TypeInfo_Class7compareMFPvPvZi+0x87>
			}
			else
				c = -1;
  1128ed:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%rbp)
		}
		return c;
  1128f4:	8b 45 ec             	mov    -0x14(%rbp),%eax
	}
  1128f7:	c9                   	leaveq 
  1128f8:	c3                   	retq   

00000000001128f9 <_D6object14TypeInfo_Class5tsizeMFZm>:

	size_t tsize()
  1128f9:	55                   	push   %rbp
  1128fa:	48 89 e5             	mov    %rsp,%rbp
  1128fd:	48 83 ec 10          	sub    $0x10,%rsp
  112901:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112905:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112909:	e8 36 0d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  11290e:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  112913:	c9                   	leaveq 
  112914:	c3                   	retq   

0000000000112915 <_D6object14TypeInfo_Class5flagsMFZk>:

	uint flags() { return 1; }
  112915:	55                   	push   %rbp
  112916:	48 89 e5             	mov    %rsp,%rbp
  112919:	48 83 ec 10          	sub    $0x10,%rsp
  11291d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112921:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112925:	e8 1a 0d 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  11292a:	b8 01 00 00 00       	mov    $0x1,%eax
  11292f:	c9                   	leaveq 
  112930:	c3                   	retq   

0000000000112931 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo>:

	OffsetTypeInfo[] offTi()
  112931:	55                   	push   %rbp
  112932:	48 89 e5             	mov    %rsp,%rbp
  112935:	48 83 ec 10          	sub    $0x10,%rsp
  112939:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11293d:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  112941:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112945:	e8 fa 0c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return (info.flags & 4) ? info.offTi : null;
  11294a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11294e:	48 8b 40 10          	mov    0x10(%rax),%rax
  112952:	8b 40 68             	mov    0x68(%rax),%eax
  112955:	83 e0 04             	and    $0x4,%eax
  112958:	85 c0                	test   %eax,%eax
  11295a:	74 24                	je     112980 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x4f>
  11295c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112960:	48 8b 50 10          	mov    0x10(%rax),%rdx
  112964:	48 8b 42 78          	mov    0x78(%rdx),%rax
  112968:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  11296c:	48 89 01             	mov    %rax,(%rcx)
  11296f:	48 8b 82 80 00 00 00 	mov    0x80(%rdx),%rax
  112976:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  11297a:	48 89 42 08          	mov    %rax,0x8(%rdx)
  11297e:	eb 17                	jmp    112997 <_D6object14TypeInfo_Class5offTiMFZAS6object14OffsetTypeInfo+0x66>
  112980:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  112984:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  11298b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11298f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  112996:	00 
	}
  112997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11299b:	c9                   	leaveq 
  11299c:	c3                   	retq   

000000000011299d <_D6object18TypeInfo_Interface8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Interface : TypeInfo
{
	char[] toString() { return info.name; }
  11299d:	55                   	push   %rbp
  11299e:	48 89 e5             	mov    %rsp,%rbp
  1129a1:	53                   	push   %rbx
  1129a2:	48 83 ec 08          	sub    $0x8,%rsp
  1129a6:	48 89 fb             	mov    %rdi,%rbx
  1129a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1129ad:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1129b1:	e8 8e 0c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1129b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1129ba:	48 8b 50 10          	mov    0x10(%rax),%rdx
  1129be:	48 8b 42 20          	mov    0x20(%rdx),%rax
  1129c2:	48 89 03             	mov    %rax,(%rbx)
  1129c5:	48 8b 42 28          	mov    0x28(%rdx),%rax
  1129c9:	48 89 43 08          	mov    %rax,0x8(%rbx)
  1129cd:	48 89 d8             	mov    %rbx,%rax
  1129d0:	48 83 c4 08          	add    $0x8,%rsp
  1129d4:	5b                   	pop    %rbx
  1129d5:	c9                   	leaveq 
  1129d6:	c3                   	retq   

00000000001129d7 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  1129d7:	55                   	push   %rbp
  1129d8:	48 89 e5             	mov    %rsp,%rbp
  1129db:	48 83 ec 40          	sub    $0x40,%rsp
  1129df:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1129e3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1129e7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1129eb:	e8 54 0c 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Interface c;
  1129f0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1129f7:	00 

		return this is o ||
  1129f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1129fc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  112a00:	0f 84 98 00 00 00    	je     112a9e <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xc7>
  112a06:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  112a0a:	be 20 35 12 00       	mov    $0x123520,%esi
  112a0f:	e8 44 0e 00 00       	callq  113858 <_d_dynamic_cast>
  112a14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  112a18:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  112a1d:	0f 84 81 00 00 00    	je     112aa4 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcd>
  112a23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112a27:	48 8b 40 10          	mov    0x10(%rax),%rax
  112a2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  112a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112a33:	48 8b 00             	mov    (%rax),%rax
  112a36:	48 8b 00             	mov    (%rax),%rax
  112a39:	48 8b 40 20          	mov    0x20(%rax),%rax
  112a3d:	48 39 c2             	cmp    %rax,%rdx
  112a40:	75 62                	jne    112aa4 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcd>
  112a42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112a46:	48 8b 40 10          	mov    0x10(%rax),%rax
  112a4a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  112a4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112a52:	48 8b 00             	mov    (%rax),%rax
  112a55:	48 8b 00             	mov    (%rax),%rax
  112a58:	48 8b 50 28          	mov    0x28(%rax),%rdx
  112a5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112a60:	48 8b 40 10          	mov    0x10(%rax),%rax
  112a64:	48 8b 40 28          	mov    0x28(%rax),%rax
  112a68:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  112a6c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112a70:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  112a74:	fc                   	cld    
  112a75:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  112a79:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  112a7d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  112a81:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  112a85:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  112a89:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  112a8b:	0f 97 c2             	seta   %dl
  112a8e:	0f 92 c0             	setb   %al
  112a91:	89 d1                	mov    %edx,%ecx
  112a93:	28 c1                	sub    %al,%cl
  112a95:	89 c8                	mov    %ecx,%eax
  112a97:	0f be c0             	movsbl %al,%eax
  112a9a:	85 c0                	test   %eax,%eax
  112a9c:	75 06                	jne    112aa4 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xcd>
  112a9e:	c6 45 df 01          	movb   $0x1,-0x21(%rbp)
  112aa2:	eb 04                	jmp    112aa8 <_D6object18TypeInfo_Interface8opEqualsMFC6ObjectZi+0xd1>
  112aa4:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  112aa8:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
				((c = cast(TypeInfo_Interface)o) !is null &&
				 this.info.name == c.classinfo.name);
	}
  112aac:	c9                   	leaveq 
  112aad:	c3                   	retq   

0000000000112aae <_D6object18TypeInfo_Interface7getHashMFPvZm>:

	hash_t getHash(void *p)
  112aae:	55                   	push   %rbp
  112aaf:	48 89 e5             	mov    %rsp,%rbp
  112ab2:	48 83 ec 20          	sub    $0x20,%rsp
  112ab6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  112aba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  112abe:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  112ac2:	e8 7d 0b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p;
  112ac7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  112acb:	48 8b 00             	mov    (%rax),%rax
  112ace:	48 8b 00             	mov    (%rax),%rax
  112ad1:	48 8b 00             	mov    (%rax),%rax
  112ad4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o = cast(Object)(*cast(void**)p - pi.offset);
  112ad8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  112adc:	48 8b 10             	mov    (%rax),%rdx
  112adf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112ae3:	48 83 c0 18          	add    $0x18,%rax
  112ae7:	8b 00                	mov    (%rax),%eax
  112ae9:	48 98                	cltq   
  112aeb:	48 89 d1             	mov    %rdx,%rcx
  112aee:	48 29 c1             	sub    %rax,%rcx
  112af1:	48 89 c8             	mov    %rcx,%rax
  112af4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		assert(o);
  112af8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112afc:	e8 43 0b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
		return o.toHash();
  112b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112b05:	48 8b 00             	mov    (%rax),%rax
  112b08:	48 83 c0 10          	add    $0x10,%rax
  112b0c:	48 8b 00             	mov    (%rax),%rax
  112b0f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112b13:	ff d0                	callq  *%rax
	}
  112b15:	c9                   	leaveq 
  112b16:	c3                   	retq   

0000000000112b17 <_D6object18TypeInfo_Interface6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  112b17:	55                   	push   %rbp
  112b18:	48 89 e5             	mov    %rsp,%rbp
  112b1b:	48 83 ec 40          	sub    $0x40,%rsp
  112b1f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  112b23:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  112b27:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112b2b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  112b2f:	e8 10 0b 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  112b34:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  112b38:	48 8b 00             	mov    (%rax),%rax
  112b3b:	48 8b 00             	mov    (%rax),%rax
  112b3e:	48 8b 00             	mov    (%rax),%rax
  112b41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  112b45:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  112b49:	48 8b 10             	mov    (%rax),%rdx
  112b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112b50:	48 83 c0 18          	add    $0x18,%rax
  112b54:	8b 00                	mov    (%rax),%eax
  112b56:	48 98                	cltq   
  112b58:	48 89 d1             	mov    %rdx,%rcx
  112b5b:	48 29 c1             	sub    %rax,%rcx
  112b5e:	48 89 c8             	mov    %rcx,%rax
  112b61:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  112b65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112b69:	48 8b 00             	mov    (%rax),%rax
  112b6c:	48 8b 00             	mov    (%rax),%rax
  112b6f:	48 8b 00             	mov    (%rax),%rax
  112b72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  112b76:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112b7a:	48 8b 10             	mov    (%rax),%rdx
  112b7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112b81:	48 83 c0 18          	add    $0x18,%rax
  112b85:	8b 00                	mov    (%rax),%eax
  112b87:	48 98                	cltq   
  112b89:	48 89 d1             	mov    %rdx,%rcx
  112b8c:	48 29 c1             	sub    %rax,%rcx
  112b8f:	48 89 c8             	mov    %rcx,%rax
  112b92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		return o1 == o2 || (o1 && o1.opCmp(o2) == 0);
  112b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112b9a:	48 8b 00             	mov    (%rax),%rax
  112b9d:	48 83 c0 20          	add    $0x20,%rax
  112ba1:	48 8b 00             	mov    (%rax),%rax
  112ba4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  112ba8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112bac:	ff d0                	callq  *%rax
  112bae:	85 c0                	test   %eax,%eax
  112bb0:	75 23                	jne    112bd5 <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xbe>
  112bb2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  112bb7:	74 22                	je     112bdb <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  112bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112bbd:	48 8b 00             	mov    (%rax),%rax
  112bc0:	48 83 c0 18          	add    $0x18,%rax
  112bc4:	48 8b 00             	mov    (%rax),%rax
  112bc7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  112bcb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112bcf:	ff d0                	callq  *%rax
  112bd1:	85 c0                	test   %eax,%eax
  112bd3:	75 06                	jne    112bdb <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc4>
  112bd5:	c6 45 c7 01          	movb   $0x1,-0x39(%rbp)
  112bd9:	eb 04                	jmp    112bdf <_D6object18TypeInfo_Interface6equalsMFPvPvZi+0xc8>
  112bdb:	c6 45 c7 00          	movb   $0x0,-0x39(%rbp)
  112bdf:	0f b6 45 c7          	movzbl -0x39(%rbp),%eax
	}
  112be3:	c9                   	leaveq 
  112be4:	c3                   	retq   

0000000000112be5 <_D6object18TypeInfo_Interface7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  112be5:	55                   	push   %rbp
  112be6:	48 89 e5             	mov    %rsp,%rbp
  112be9:	48 83 ec 40          	sub    $0x40,%rsp
  112bed:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  112bf1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  112bf5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112bf9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  112bfd:	e8 42 0a 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		Interface* pi = **cast(Interface ***)*cast(void**)p1;
  112c02:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  112c06:	48 8b 00             	mov    (%rax),%rax
  112c09:	48 8b 00             	mov    (%rax),%rax
  112c0c:	48 8b 00             	mov    (%rax),%rax
  112c0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o1 = cast(Object)(*cast(void**)p1 - pi.offset);
  112c13:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  112c17:	48 8b 10             	mov    (%rax),%rdx
  112c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112c1e:	48 83 c0 18          	add    $0x18,%rax
  112c22:	8b 00                	mov    (%rax),%eax
  112c24:	48 98                	cltq   
  112c26:	48 89 d1             	mov    %rdx,%rcx
  112c29:	48 29 c1             	sub    %rax,%rcx
  112c2c:	48 89 c8             	mov    %rcx,%rax
  112c2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		pi = **cast(Interface ***)*cast(void**)p2;
  112c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112c37:	48 8b 00             	mov    (%rax),%rax
  112c3a:	48 8b 00             	mov    (%rax),%rax
  112c3d:	48 8b 00             	mov    (%rax),%rax
  112c40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Object o2 = cast(Object)(*cast(void**)p2 - pi.offset);
  112c44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112c48:	48 8b 10             	mov    (%rax),%rdx
  112c4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  112c4f:	48 83 c0 18          	add    $0x18,%rax
  112c53:	8b 00                	mov    (%rax),%eax
  112c55:	48 98                	cltq   
  112c57:	48 89 d1             	mov    %rdx,%rcx
  112c5a:	48 29 c1             	sub    %rax,%rcx
  112c5d:	48 89 c8             	mov    %rcx,%rax
  112c60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		int c = 0;
  112c64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)

		// Regard null references as always being "less than"
		if (o1 != o2)
  112c6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112c6f:	48 8b 00             	mov    (%rax),%rax
  112c72:	48 83 c0 20          	add    $0x20,%rax
  112c76:	48 8b 00             	mov    (%rax),%rax
  112c79:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  112c7d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112c81:	ff d0                	callq  *%rax
  112c83:	85 c0                	test   %eax,%eax
  112c85:	0f 95 c0             	setne  %al
  112c88:	83 f0 01             	xor    $0x1,%eax
  112c8b:	84 c0                	test   %al,%al
  112c8d:	74 43                	je     112cd2 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
		{
			if (o1)
  112c8f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  112c94:	74 35                	je     112ccb <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xe6>
			{	if (!o2)
  112c96:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  112c9b:	0f 95 c0             	setne  %al
  112c9e:	83 f0 01             	xor    $0x1,%eax
  112ca1:	84 c0                	test   %al,%al
  112ca3:	74 09                	je     112cae <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xc9>
					c = 1;
  112ca5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  112cac:	eb 24                	jmp    112cd2 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
				else
					c = o1.opCmp(o2);
  112cae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  112cb2:	48 8b 00             	mov    (%rax),%rax
  112cb5:	48 83 c0 18          	add    $0x18,%rax
  112cb9:	48 8b 00             	mov    (%rax),%rax
  112cbc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  112cc0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112cc4:	ff d0                	callq  *%rax
  112cc6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  112cc9:	eb 07                	jmp    112cd2 <_D6object18TypeInfo_Interface7compareMFPvPvZi+0xed>
			}
			else
				c = -1;
  112ccb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%rbp)
		}
		return c;
  112cd2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
	}
  112cd5:	c9                   	leaveq 
  112cd6:	c3                   	retq   

0000000000112cd7 <_D6object18TypeInfo_Interface5tsizeMFZm>:

	size_t tsize()
  112cd7:	55                   	push   %rbp
  112cd8:	48 89 e5             	mov    %rsp,%rbp
  112cdb:	48 83 ec 10          	sub    $0x10,%rsp
  112cdf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112ce3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112ce7:	e8 58 09 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return Object.sizeof;
  112cec:	b8 08 00 00 00       	mov    $0x8,%eax
	}
  112cf1:	c9                   	leaveq 
  112cf2:	c3                   	retq   

0000000000112cf3 <_D6object18TypeInfo_Interface5flagsMFZk>:

	uint flags() { return 1; }
  112cf3:	55                   	push   %rbp
  112cf4:	48 89 e5             	mov    %rsp,%rbp
  112cf7:	48 83 ec 10          	sub    $0x10,%rsp
  112cfb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  112cff:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  112d03:	e8 3c 09 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  112d08:	b8 01 00 00 00       	mov    $0x1,%eax
  112d0d:	c9                   	leaveq 
  112d0e:	c3                   	retq   

0000000000112d0f <_D6object15TypeInfo_Struct8toStringMFZAa>:
	ClassInfo info;
}

class TypeInfo_Struct : TypeInfo
{
	char[] toString() { return name; }
  112d0f:	55                   	push   %rbp
  112d10:	48 89 e5             	mov    %rsp,%rbp
  112d13:	53                   	push   %rbx
  112d14:	48 83 ec 08          	sub    $0x8,%rsp
  112d18:	48 89 fb             	mov    %rdi,%rbx
  112d1b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  112d1f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  112d23:	e8 1c 09 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  112d28:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  112d2c:	48 8b 42 10          	mov    0x10(%rdx),%rax
  112d30:	48 89 03             	mov    %rax,(%rbx)
  112d33:	48 8b 42 18          	mov    0x18(%rdx),%rax
  112d37:	48 89 43 08          	mov    %rax,0x8(%rbx)
  112d3b:	48 89 d8             	mov    %rbx,%rax
  112d3e:	48 83 c4 08          	add    $0x8,%rsp
  112d42:	5b                   	pop    %rbx
  112d43:	c9                   	leaveq 
  112d44:	c3                   	retq   

0000000000112d45 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  112d45:	55                   	push   %rbp
  112d46:	48 89 e5             	mov    %rsp,%rbp
  112d49:	53                   	push   %rbx
  112d4a:	48 83 ec 68          	sub    $0x68,%rsp
  112d4e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  112d52:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  112d56:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  112d5a:	e8 e5 08 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	TypeInfo_Struct s;
  112d5f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  112d66:	00 

		return this is o ||
  112d67:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  112d6b:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  112d6f:	0f 84 c1 00 00 00    	je     112e36 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf1>
  112d75:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  112d79:	be c0 35 12 00       	mov    $0x1235c0,%esi
  112d7e:	e8 d5 0a 00 00       	callq  113858 <_d_dynamic_cast>
  112d83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  112d87:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  112d8c:	0f 84 aa 00 00 00    	je     112e3c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf7>
  112d92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  112d96:	48 8b 50 10          	mov    0x10(%rax),%rdx
  112d9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112d9e:	48 8b 40 10          	mov    0x10(%rax),%rax
  112da2:	48 39 c2             	cmp    %rax,%rdx
  112da5:	0f 85 91 00 00 00    	jne    112e3c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf7>
  112dab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  112daf:	48 8b 48 10          	mov    0x10(%rax),%rcx
  112db3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112db7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  112dbb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  112dbf:	48 8b 40 18          	mov    0x18(%rax),%rax
  112dc3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  112dc7:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  112dcb:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  112dcf:	fc                   	cld    
  112dd0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  112dd4:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
  112dd8:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  112ddc:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  112de0:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  112de4:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  112de6:	0f 97 c2             	seta   %dl
  112de9:	0f 92 c0             	setb   %al
  112dec:	89 d1                	mov    %edx,%ecx
  112dee:	28 c1                	sub    %al,%cl
  112df0:	89 c8                	mov    %ecx,%eax
  112df2:	0f be c0             	movsbl %al,%eax
  112df5:	85 c0                	test   %eax,%eax
  112df7:	75 43                	jne    112e3c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf7>
  112df9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  112dfd:	48 8b 00             	mov    (%rax),%rax
  112e00:	48 83 c0 58          	add    $0x58,%rax
  112e04:	48 8b 00             	mov    (%rax),%rax
  112e07:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  112e0b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  112e0f:	ff d0                	callq  *%rax
  112e11:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  112e15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  112e19:	48 8b 00             	mov    (%rax),%rax
  112e1c:	48 83 c0 58          	add    $0x58,%rax
  112e20:	48 8b 00             	mov    (%rax),%rax
  112e23:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
  112e27:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  112e2b:	ff d0                	callq  *%rax
  112e2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  112e31:	48 39 c3             	cmp    %rax,%rbx
  112e34:	75 06                	jne    112e3c <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xf7>
  112e36:	c6 45 af 01          	movb   $0x1,-0x51(%rbp)
  112e3a:	eb 04                	jmp    112e40 <_D6object15TypeInfo_Struct8opEqualsMFC6ObjectZi+0xfb>
  112e3c:	c6 45 af 00          	movb   $0x0,-0x51(%rbp)
  112e40:	0f b6 45 af          	movzbl -0x51(%rbp),%eax
				((s = cast(TypeInfo_Struct)o) !is null &&
				 this.name == s.name &&
				 this.init.length == s.init.length);
	}
  112e44:	48 83 c4 68          	add    $0x68,%rsp
  112e48:	5b                   	pop    %rbx
  112e49:	c9                   	leaveq 
  112e4a:	c3                   	retq   

0000000000112e4b <_D6object15TypeInfo_Struct7getHashMFPvZm>:

	hash_t getHash(void *p)
  112e4b:	55                   	push   %rbp
  112e4c:	48 89 e5             	mov    %rsp,%rbp
  112e4f:	48 83 ec 40          	sub    $0x40,%rsp
  112e53:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  112e57:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  112e5b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  112e5f:	e8 e0 07 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	hash_t h;
  112e64:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  112e6b:	00 

		assert(p);
  112e6c:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  112e71:	75 22                	jne    112e95 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x4a>
  112e73:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  112e7a:	00 
  112e7b:	48 c7 45 d8 40 a2 11 	movq   $0x11a240,-0x28(%rbp)
  112e82:	00 
  112e83:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  112e87:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  112e8b:	ba 6a 03 00 00       	mov    $0x36a,%edx
  112e90:	e8 2d 1e 00 00       	callq  114cc2 <_d_assert>
		if (xtoHash)
  112e95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112e99:	48 8b 40 30          	mov    0x30(%rax),%rax
  112e9d:	48 85 c0             	test   %rax,%rax
  112ea0:	74 14                	je     112eb6 <_D6object15TypeInfo_Struct7getHashMFPvZm+0x6b>
		{	//printf("getHash() using xtoHash\n");
			h = (*xtoHash)(p);
  112ea2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112ea6:	48 8b 40 30          	mov    0x30(%rax),%rax
  112eaa:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  112eae:	ff d0                	callq  *%rax
  112eb0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  112eb4:	eb 5d                	jmp    112f13 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
		{
			//printf("getHash() using default hash\n");
			// A sorry hash algorithm.
			// Should use the one for strings.
			// BUG: relies on the GC not moving objects
			for (size_t i = 0; i < init.length; i++)
  112eb6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  112ebd:	00 
  112ebe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112ec2:	48 8b 00             	mov    (%rax),%rax
  112ec5:	48 83 c0 58          	add    $0x58,%rax
  112ec9:	48 8b 00             	mov    (%rax),%rax
  112ecc:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  112ed0:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  112ed4:	ff d0                	callq  *%rax
  112ed6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  112eda:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  112ede:	0f 92 c0             	setb   %al
  112ee1:	83 f0 01             	xor    $0x1,%eax
  112ee4:	84 c0                	test   %al,%al
  112ee6:	75 2b                	jne    112f13 <_D6object15TypeInfo_Struct7getHashMFPvZm+0xc8>
			{	h = h * 9 + *cast(ubyte*)p;
  112ee8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  112eec:	48 89 d0             	mov    %rdx,%rax
  112eef:	48 c1 e0 03          	shl    $0x3,%rax
  112ef3:	48 8d 14 10          	lea    (%rax,%rdx,1),%rdx
  112ef7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  112efb:	0f b6 00             	movzbl (%rax),%eax
  112efe:	0f b6 c0             	movzbl %al,%eax
  112f01:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  112f05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
				p++;
  112f09:	48 ff 45 c0          	incq   -0x40(%rbp)
  112f0d:	48 ff 45 f8          	incq   -0x8(%rbp)
  112f11:	eb ab                	jmp    112ebe <_D6object15TypeInfo_Struct7getHashMFPvZm+0x73>
			}
		}
		return h;
  112f13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  112f17:	c9                   	leaveq 
  112f18:	c3                   	retq   

0000000000112f19 <_D6object15TypeInfo_Struct6equalsMFPvPvZi>:

	int equals(void *p2, void *p1)
  112f19:	55                   	push   %rbp
  112f1a:	48 89 e5             	mov    %rsp,%rbp
  112f1d:	48 83 ec 40          	sub    $0x40,%rsp
  112f21:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  112f25:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  112f29:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112f2d:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  112f31:	e8 0e 07 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{	int c;
  112f36:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		if (p1 == p2)
  112f3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  112f41:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  112f45:	75 0c                	jne    112f53 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x3a>
			c = 1;
  112f47:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  112f4e:	e9 80 00 00 00       	jmpq   112fd3 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else if (!p1 || !p2)
  112f53:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  112f58:	0f 95 c0             	setne  %al
  112f5b:	83 f0 01             	xor    $0x1,%eax
  112f5e:	84 c0                	test   %al,%al
  112f60:	75 0f                	jne    112f71 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x58>
  112f62:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  112f67:	0f 95 c0             	setne  %al
  112f6a:	83 f0 01             	xor    $0x1,%eax
  112f6d:	84 c0                	test   %al,%al
  112f6f:	74 09                	je     112f7a <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x61>
			c = 0;
  112f71:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int equals(void *p2, void *p1)
	{	int c;

		if (p1 == p2)
			c = 1;
		else if (!p1 || !p2)
  112f78:	eb 59                	jmp    112fd3 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
			c = 0;
		else if (xopEquals)
  112f7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  112f7e:	48 8b 40 38          	mov    0x38(%rax),%rax
  112f82:	48 85 c0             	test   %rax,%rax
  112f85:	74 17                	je     112f9e <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0x85>
			c = (*xopEquals)(p1, p2);
  112f87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  112f8b:	48 8b 40 38          	mov    0x38(%rax),%rax
  112f8f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  112f93:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  112f97:	ff d0                	callq  *%rax
  112f99:	89 45 fc             	mov    %eax,-0x4(%rbp)
  112f9c:	eb 35                	jmp    112fd3 <_D6object15TypeInfo_Struct6equalsMFPvPvZi+0xba>
		else
			// BUG: relies on the GC not moving objects
			c = (memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length) == 0);
  112f9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  112fa2:	48 8b 00             	mov    (%rax),%rax
  112fa5:	48 83 c0 58          	add    $0x58,%rax
  112fa9:	48 8b 00             	mov    (%rax),%rax
  112fac:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  112fb0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  112fb4:	ff d0                	callq  *%rax
  112fb6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  112fba:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  112fbe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  112fc2:	e8 57 27 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  112fc7:	48 85 c0             	test   %rax,%rax
  112fca:	0f 94 c0             	sete   %al
  112fcd:	0f b6 c0             	movzbl %al,%eax
  112fd0:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return c;
  112fd3:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  112fd6:	c9                   	leaveq 
  112fd7:	c3                   	retq   

0000000000112fd8 <_D6object15TypeInfo_Struct7compareMFPvPvZi>:

	int compare(void *p2, void *p1)
  112fd8:	55                   	push   %rbp
  112fd9:	48 89 e5             	mov    %rsp,%rbp
  112fdc:	48 83 ec 40          	sub    $0x40,%rsp
  112fe0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  112fe4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  112fe8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  112fec:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  112ff0:	e8 4f 06 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		int c = 0;
  112ff5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		// Regard null references as always being "less than"
		if (p1 != p2)
  112ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  113000:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  113004:	74 78                	je     11307e <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
		{
			if (p1)
  113006:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  11300b:	74 6a                	je     113077 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x9f>
			{	if (!p2)
  11300d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  113012:	0f 95 c0             	setne  %al
  113015:	83 f0 01             	xor    $0x1,%eax
  113018:	84 c0                	test   %al,%al
  11301a:	74 09                	je     113025 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x4d>
					c = 1;
  11301c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  113023:	eb 59                	jmp    11307e <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else if (xopCmp)
  113025:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113029:	48 8b 40 40          	mov    0x40(%rax),%rax
  11302d:	48 85 c0             	test   %rax,%rax
  113030:	74 17                	je     113049 <_D6object15TypeInfo_Struct7compareMFPvPvZi+0x71>
					c = (*xopCmp)(p1, p2);
  113032:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113036:	48 8b 40 40          	mov    0x40(%rax),%rax
  11303a:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  11303e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  113042:	ff d0                	callq  *%rax
  113044:	89 45 fc             	mov    %eax,-0x4(%rbp)
  113047:	eb 35                	jmp    11307e <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
				else
					// BUG: relies on the GC not moving objects
					c = memcmp(cast(ubyte*)p1, cast(ubyte*)p2, init.length);
  113049:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11304d:	48 8b 00             	mov    (%rax),%rax
  113050:	48 83 c0 58          	add    $0x58,%rax
  113054:	48 8b 00             	mov    (%rax),%rax
  113057:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  11305b:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  11305f:	ff d0                	callq  *%rax
  113061:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  113065:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  113069:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11306d:	e8 ac 26 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  113072:	89 45 fc             	mov    %eax,-0x4(%rbp)
  113075:	eb 07                	jmp    11307e <_D6object15TypeInfo_Struct7compareMFPvPvZi+0xa6>
			}
			else
				c = -1;
  113077:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)
		}
		return c;
  11307e:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}
  113081:	c9                   	leaveq 
  113082:	c3                   	retq   

0000000000113083 <_D6object15TypeInfo_Struct5tsizeMFZm>:

	size_t tsize()
  113083:	55                   	push   %rbp
  113084:	48 89 e5             	mov    %rsp,%rbp
  113087:	48 83 ec 20          	sub    $0x20,%rsp
  11308b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11308f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  113093:	e8 ac 05 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		return init.length;
  113098:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11309c:	48 8b 00             	mov    (%rax),%rax
  11309f:	48 83 c0 58          	add    $0x58,%rax
  1130a3:	48 8b 00             	mov    (%rax),%rax
  1130a6:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
  1130aa:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1130ae:	ff d0                	callq  *%rax
  1130b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
	}
  1130b4:	c9                   	leaveq 
  1130b5:	c3                   	retq   

00000000001130b6 <_D6object15TypeInfo_Struct4initMFZAv>:

	void[] init() { return m_init; }
  1130b6:	55                   	push   %rbp
  1130b7:	48 89 e5             	mov    %rsp,%rbp
  1130ba:	53                   	push   %rbx
  1130bb:	48 83 ec 08          	sub    $0x8,%rsp
  1130bf:	48 89 fb             	mov    %rdi,%rbx
  1130c2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  1130c6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1130ca:	e8 75 05 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1130cf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1130d3:	48 8b 42 20          	mov    0x20(%rdx),%rax
  1130d7:	48 89 03             	mov    %rax,(%rbx)
  1130da:	48 8b 42 28          	mov    0x28(%rdx),%rax
  1130de:	48 89 43 08          	mov    %rax,0x8(%rbx)
  1130e2:	48 89 d8             	mov    %rbx,%rax
  1130e5:	48 83 c4 08          	add    $0x8,%rsp
  1130e9:	5b                   	pop    %rbx
  1130ea:	c9                   	leaveq 
  1130eb:	c3                   	retq   

00000000001130ec <_D6object15TypeInfo_Struct5flagsMFZk>:

	uint flags() { return m_flags; }
  1130ec:	55                   	push   %rbp
  1130ed:	48 89 e5             	mov    %rsp,%rbp
  1130f0:	48 83 ec 10          	sub    $0x10,%rsp
  1130f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  1130f8:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  1130fc:	e8 43 05 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  113101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113105:	8b 40 50             	mov    0x50(%rax),%eax
  113108:	c9                   	leaveq 
  113109:	c3                   	retq   

000000000011310a <_D6object14TypeInfo_Tuple8toStringMFZAa>:

class TypeInfo_Tuple : TypeInfo
{
	TypeInfo[] elements;

	char[] toString()
  11310a:	55                   	push   %rbp
  11310b:	48 89 e5             	mov    %rsp,%rbp
  11310e:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  113115:	48 89 bd 30 ff ff ff 	mov    %rdi,-0xd0(%rbp)
  11311c:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
  113123:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  11312a:	e8 15 05 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		char[] s;
  11312f:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  113136:	00 
  113137:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  11313e:	00 
		s = "(";
  11313f:	48 c7 45 80 01 00 00 	movq   $0x1,-0x80(%rbp)
  113146:	00 
  113147:	48 c7 45 88 90 ab 11 	movq   $0x11ab90,-0x78(%rbp)
  11314e:	00 
		foreach (i, element; elements)
  11314f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  113156:	00 
  113157:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  11315e:	48 8b 40 18          	mov    0x18(%rax),%rax
  113162:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  113169:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  113170:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  113174:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  11317b:	48 8b 40 10          	mov    0x10(%rax),%rax
  11317f:	48 c1 e0 03          	shl    $0x3,%rax
  113183:	48 03 85 38 ff ff ff 	add    -0xc8(%rbp),%rax
  11318a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  11318e:	0f 95 c0             	setne  %al
  113191:	83 f0 01             	xor    $0x1,%eax
  113194:	84 c0                	test   %al,%al
  113196:	0f 85 9b 00 00 00    	jne    113237 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x12d>
  11319c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1131a0:	48 8b 00             	mov    (%rax),%rax
  1131a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		{
			if (i)
  1131a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  1131ac:	74 1a                	je     1131c8 <_D6object14TypeInfo_Tuple8toStringMFZAa+0xbe>
				s ~= ',';
  1131ae:	c6 45 ff 2c          	movb   $0x2c,-0x1(%rbp)
  1131b2:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1131b6:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
  1131ba:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  1131be:	be c0 86 11 00       	mov    $0x1186c0,%esi
  1131c3:	e8 e2 15 00 00       	callq  1147aa <_d_arrayappendcTp>
			s ~= element.toString();
  1131c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1131cc:	48 8b 00             	mov    (%rax),%rax
  1131cf:	48 83 c0 08          	add    $0x8,%rax
  1131d3:	48 8b 00             	mov    (%rax),%rax
  1131d6:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  1131dd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  1131e1:	ff d0                	callq  *%rax
  1131e3:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1131ea:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  1131ee:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1131f5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  1131f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1131fd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  113201:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  113205:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  113209:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  113210:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  113214:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  113218:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  11321c:	49 89 c0             	mov    %rax,%r8
  11321f:	be c0 86 11 00       	mov    $0x1186c0,%esi
  113224:	e8 3f 15 00 00       	callq  114768 <_d_arrayappendT>
  113229:	48 83 45 e0 08       	addq   $0x8,-0x20(%rbp)
  11322e:	48 ff 45 e8          	incq   -0x18(%rbp)
  113232:	e9 3d ff ff ff       	jmpq   113174 <_D6object14TypeInfo_Tuple8toStringMFZAa+0x6a>
		}
		s ~= ")";
  113237:	48 c7 45 c0 01 00 00 	movq   $0x1,-0x40(%rbp)
  11323e:	00 
  11323f:	48 c7 45 c8 92 ab 11 	movq   $0x11ab92,-0x38(%rbp)
  113246:	00 
  113247:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  11324b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11324f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  113253:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113257:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  11325e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  113262:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113266:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  11326a:	49 89 c0             	mov    %rax,%r8
  11326d:	be c0 86 11 00       	mov    $0x1186c0,%esi
  113272:	e8 f1 14 00 00       	callq  114768 <_d_arrayappendT>
		return s;
  113277:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  11327b:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  113282:	48 89 02             	mov    %rax,(%rdx)
  113285:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  113289:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  113290:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
  113294:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  11329b:	c9                   	leaveq 
  11329c:	c3                   	retq   

000000000011329d <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi>:

	int opEquals(Object o)
  11329d:	55                   	push   %rbp
  11329e:	48 89 e5             	mov    %rsp,%rbp
  1132a1:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  1132a5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  1132a9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  1132ad:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1132b1:	e8 8e 03 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		if (this is o)
  1132b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1132ba:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  1132be:	75 0c                	jne    1132cc <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x2f>
			return 1;
  1132c0:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  1132c7:	e9 50 01 00 00       	jmpq   11341c <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17f>

		auto t = cast(TypeInfo_Tuple)o;
  1132cc:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  1132d0:	be 60 36 12 00       	mov    $0x123660,%esi
  1132d5:	e8 7e 05 00 00       	callq  113858 <_d_dynamic_cast>
  1132da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		if (t && elements.length == t.elements.length)
  1132de:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1132e3:	0f 84 2c 01 00 00    	je     113415 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x178>
  1132e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1132ed:	48 8b 50 10          	mov    0x10(%rax),%rdx
  1132f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1132f5:	48 8b 40 10          	mov    0x10(%rax),%rax
  1132f9:	48 39 c2             	cmp    %rax,%rdx
  1132fc:	0f 85 13 01 00 00    	jne    113415 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x178>
		{
			for (size_t i = 0; i < elements.length; i++)
  113302:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113309:	00 
  11330a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  11330e:	48 8b 40 10          	mov    0x10(%rax),%rax
  113312:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  113316:	0f 92 c0             	setb   %al
  113319:	83 f0 01             	xor    $0x1,%eax
  11331c:	84 c0                	test   %al,%al
  11331e:	0f 85 e8 00 00 00    	jne    11340c <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x16f>
			{
				if (elements[i] != t.elements[i])
  113324:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  113328:	48 8b 40 18          	mov    0x18(%rax),%rax
  11332c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  113330:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  113334:	48 8b 40 10          	mov    0x10(%rax),%rax
  113338:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  11333c:	73 0a                	jae    113348 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xab>
  11333e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113342:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  113346:	eb 22                	jmp    11336a <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0xcd>
  113348:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  11334f:	00 
  113350:	48 c7 45 d8 40 a2 11 	movq   $0x11a240,-0x28(%rbp)
  113357:	00 
  113358:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  11335c:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  113360:	ba d2 03 00 00       	mov    $0x3d2,%edx
  113365:	e8 cb 19 00 00       	callq  114d35 <_d_array_bounds>
  11336a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11336e:	48 c1 e0 03          	shl    $0x3,%rax
  113372:	48 03 45 90          	add    -0x70(%rbp),%rax
  113376:	48 8b 00             	mov    (%rax),%rax
  113379:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  11337d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  113381:	48 8b 02             	mov    (%rdx),%rax
  113384:	48 83 c0 20          	add    $0x20,%rax
  113388:	48 8b 00             	mov    (%rax),%rax
  11338b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  11338f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  113393:	48 8b 40 18          	mov    0x18(%rax),%rax
  113397:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  11339b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11339f:	48 8b 40 10          	mov    0x10(%rax),%rax
  1133a3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  1133a7:	73 0a                	jae    1133b3 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x116>
  1133a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1133ad:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  1133b1:	eb 22                	jmp    1133d5 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x138>
  1133b3:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  1133ba:	00 
  1133bb:	48 c7 45 e8 40 a2 11 	movq   $0x11a240,-0x18(%rbp)
  1133c2:	00 
  1133c3:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1133c7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1133cb:	ba d2 03 00 00       	mov    $0x3d2,%edx
  1133d0:	e8 60 19 00 00       	callq  114d35 <_d_array_bounds>
  1133d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1133d9:	48 c1 e0 03          	shl    $0x3,%rax
  1133dd:	48 03 45 b0          	add    -0x50(%rbp),%rax
  1133e1:	48 8b 00             	mov    (%rax),%rax
  1133e4:	48 89 c6             	mov    %rax,%rsi
  1133e7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  1133eb:	ff 55 a8             	callq  *-0x58(%rbp)
  1133ee:	85 c0                	test   %eax,%eax
  1133f0:	0f 95 c0             	setne  %al
  1133f3:	83 f0 01             	xor    $0x1,%eax
  1133f6:	84 c0                	test   %al,%al
  1133f8:	74 09                	je     113403 <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x166>
					return 0;
  1133fa:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  113401:	eb 19                	jmp    11341c <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17f>
		auto t = cast(TypeInfo_Tuple)o;
		if (t && elements.length == t.elements.length)
		{
			for (size_t i = 0; i < elements.length; i++)
			{
				if (elements[i] != t.elements[i])
  113403:	48 ff 45 f8          	incq   -0x8(%rbp)
  113407:	e9 fe fe ff ff       	jmpq   11330a <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x6d>
					return 0;
			}
			return 1;
  11340c:	c7 45 8c 01 00 00 00 	movl   $0x1,-0x74(%rbp)
  113413:	eb 07                	jmp    11341c <_D6object14TypeInfo_Tuple8opEqualsMFC6ObjectZi+0x17f>
		}
		return 0;
  113415:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  11341c:	8b 45 8c             	mov    -0x74(%rbp),%eax
	}
  11341f:	c9                   	leaveq 
  113420:	c3                   	retq   

0000000000113421 <_D6object14TypeInfo_Tuple7getHashMFPvZm>:

	hash_t getHash(void *p)
  113421:	55                   	push   %rbp
  113422:	48 89 e5             	mov    %rsp,%rbp
  113425:	48 83 ec 20          	sub    $0x20,%rsp
  113429:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11342d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  113431:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  113435:	e8 0a 02 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  11343a:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  113441:	00 
  113442:	48 c7 45 f8 40 a2 11 	movq   $0x11a240,-0x8(%rbp)
  113449:	00 
  11344a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11344e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  113452:	ba dc 03 00 00       	mov    $0x3dc,%edx
  113457:	e8 66 18 00 00       	callq  114cc2 <_d_assert>
	}
  11345c:	c9                   	leaveq 
  11345d:	c3                   	retq   

000000000011345e <_D6object14TypeInfo_Tuple6equalsMFPvPvZi>:

	int equals(void *p1, void *p2)
  11345e:	55                   	push   %rbp
  11345f:	48 89 e5             	mov    %rsp,%rbp
  113462:	48 83 ec 30          	sub    $0x30,%rsp
  113466:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11346a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11346e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  113472:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  113476:	e8 c9 01 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  11347b:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  113482:	00 
  113483:	48 c7 45 f8 40 a2 11 	movq   $0x11a240,-0x8(%rbp)
  11348a:	00 
  11348b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11348f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  113493:	ba e1 03 00 00       	mov    $0x3e1,%edx
  113498:	e8 25 18 00 00       	callq  114cc2 <_d_assert>
	}
  11349d:	c9                   	leaveq 
  11349e:	c3                   	retq   

000000000011349f <_D6object14TypeInfo_Tuple7compareMFPvPvZi>:

	int compare(void *p1, void *p2)
  11349f:	55                   	push   %rbp
  1134a0:	48 89 e5             	mov    %rsp,%rbp
  1134a3:	48 83 ec 30          	sub    $0x30,%rsp
  1134a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1134ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1134af:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1134b3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1134b7:	e8 88 01 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  1134bc:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  1134c3:	00 
  1134c4:	48 c7 45 f8 40 a2 11 	movq   $0x11a240,-0x8(%rbp)
  1134cb:	00 
  1134cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1134d0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1134d4:	ba e6 03 00 00       	mov    $0x3e6,%edx
  1134d9:	e8 e4 17 00 00       	callq  114cc2 <_d_assert>
	}
  1134de:	c9                   	leaveq 
  1134df:	c3                   	retq   

00000000001134e0 <_D6object14TypeInfo_Tuple5tsizeMFZm>:

	size_t tsize()
  1134e0:	55                   	push   %rbp
  1134e1:	48 89 e5             	mov    %rsp,%rbp
  1134e4:	48 83 ec 20          	sub    $0x20,%rsp
  1134e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1134ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1134f0:	e8 4f 01 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  1134f5:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  1134fc:	00 
  1134fd:	48 c7 45 f8 40 a2 11 	movq   $0x11a240,-0x8(%rbp)
  113504:	00 
  113505:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  113509:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11350d:	ba eb 03 00 00       	mov    $0x3eb,%edx
  113512:	e8 ab 17 00 00       	callq  114cc2 <_d_assert>
	}
  113517:	c9                   	leaveq 
  113518:	c3                   	retq   

0000000000113519 <_D6object14TypeInfo_Tuple4swapMFPvPvZv>:

	void swap(void *p1, void *p2)
  113519:	55                   	push   %rbp
  11351a:	48 89 e5             	mov    %rsp,%rbp
  11351d:	48 83 ec 30          	sub    $0x30,%rsp
  113521:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  113525:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  113529:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11352d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  113531:	e8 0e 01 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
	{
		assert(0);
  113536:	48 c7 45 f0 08 00 00 	movq   $0x8,-0x10(%rbp)
  11353d:	00 
  11353e:	48 c7 45 f8 40 a2 11 	movq   $0x11a240,-0x8(%rbp)
  113545:	00 
  113546:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11354a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11354e:	ba f0 03 00 00       	mov    $0x3f0,%edx
  113553:	e8 6a 17 00 00       	callq  114cc2 <_d_assert>
	}
  113558:	c9                   	leaveq 
  113559:	c3                   	retq   

000000000011355a <_D6object9Exception5_ctorMFAaZC9Exception>:
	char[] msg;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  11355a:	55                   	push   %rbp
  11355b:	48 89 e5             	mov    %rsp,%rbp
  11355e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  113562:	48 89 f0             	mov    %rsi,%rax
  113565:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113569:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  11356d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113574:	00 
	{
		this.msg = msg;
  113575:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  113579:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11357d:	48 89 42 10          	mov    %rax,0x10(%rdx)
  113581:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  113585:	48 89 42 18          	mov    %rax,0x18(%rdx)
  113589:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  11358d:	c9                   	leaveq 
  11358e:	c3                   	retq   

000000000011358f <_D6object9Exception8toStringMFZAa>:

	char[] toString() { return msg; }
  11358f:	55                   	push   %rbp
  113590:	48 89 e5             	mov    %rsp,%rbp
  113593:	53                   	push   %rbx
  113594:	48 83 ec 08          	sub    $0x8,%rsp
  113598:	48 89 fb             	mov    %rdi,%rbx
  11359b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  11359f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1135a3:	e8 9c 00 00 00       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>
  1135a8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1135ac:	48 8b 42 10          	mov    0x10(%rdx),%rax
  1135b0:	48 89 03             	mov    %rax,(%rbx)
  1135b3:	48 8b 42 18          	mov    0x18(%rdx),%rax
  1135b7:	48 89 43 08          	mov    %rax,0x8(%rbx)
  1135bb:	48 89 d8             	mov    %rbx,%rax
  1135be:	48 83 c4 08          	add    $0x8,%rsp
  1135c2:	5b                   	pop    %rbx
  1135c3:	c9                   	leaveq 
  1135c4:	c3                   	retq   

00000000001135c5 <_D6object5Error5_ctorMFAaZC6object5Error>:
	Error next;

	/**
	 * Constructor; msg is a descriptive message for the exception.
	 */
	this(char[] msg)
  1135c5:	55                   	push   %rbp
  1135c6:	48 89 e5             	mov    %rsp,%rbp
  1135c9:	48 83 ec 28          	sub    $0x28,%rsp
  1135cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1135d1:	48 89 f0             	mov    %rsi,%rax
  1135d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1135d8:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  1135dc:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1135e3:	00 
	{
		super(msg);
  1135e4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  1135e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1135ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  1135f0:	e8 65 ff ff ff       	callq  11355a <_D6object9Exception5_ctorMFAaZC9Exception>
  1135f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  1135f9:	c9                   	leaveq 
  1135fa:	c3                   	retq   

00000000001135fb <_D6object5Error5_ctorMFAaC6object5ErrorZC6object5Error>:

	this(char[] msg, Error next)
  1135fb:	55                   	push   %rbp
  1135fc:	48 89 e5             	mov    %rsp,%rbp
  1135ff:	48 83 ec 30          	sub    $0x30,%rsp
  113603:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  113607:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  11360b:	48 89 f0             	mov    %rsi,%rax
  11360e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113612:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  113616:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  11361d:	00 
	{
		super(msg);
  11361e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  113622:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  113626:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11362a:	e8 2b ff ff ff       	callq  11355a <_D6object9Exception5_ctorMFAaZC9Exception>
		this.next = next;
  11362f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  113633:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  113637:	48 89 42 20          	mov    %rax,0x20(%rdx)
  11363b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  11363f:	c9                   	leaveq 
  113640:	c3                   	retq   
  113641:	90                   	nop    
  113642:	90                   	nop    
  113643:	90                   	nop    

0000000000113644 <_D9invariant12_d_invariantFC6ObjectZv>:
 * Placed into the Public Domain
 * written by Walter Bright
 * www.digitalmars.com
 */

void _d_invariant(Object o)
  113644:	55                   	push   %rbp
  113645:	48 89 e5             	mov    %rsp,%rbp
  113648:	48 83 ec 30          	sub    $0x30,%rsp
  11364c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{
	ClassInfo c;
  113650:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113657:	00 

	//printf("__d_invariant(%p)\n", o);

	// BUG: needs to be filename/line of caller, not library routine
	assert(o !is null); // just do null check, not invariant check
  113658:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  11365d:	75 22                	jne    113681 <_D9invariant12_d_invariantFC6ObjectZv+0x3d>
  11365f:	48 c7 45 e0 0b 00 00 	movq   $0xb,-0x20(%rbp)
  113666:	00 
  113667:	48 c7 45 e8 48 ad 11 	movq   $0x11ad48,-0x18(%rbp)
  11366e:	00 
  11366f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  113673:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  113677:	ba 0f 00 00 00       	mov    $0xf,%edx
  11367c:	e8 41 16 00 00       	callq  114cc2 <_d_assert>

	c = o.classinfo;
  113681:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113685:	48 8b 00             	mov    (%rax),%rax
  113688:	48 8b 00             	mov    (%rax),%rax
  11368b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	
	do
	{
		if(c.classInvariant)
  11368f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113693:	48 8b 40 60          	mov    0x60(%rax),%rax
  113697:	48 85 c0             	test   %rax,%rax
  11369a:	74 0e                	je     1136aa <_D9invariant12_d_invariantFC6ObjectZv+0x66>
		{
			(*c.classInvariant)(o);
  11369c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1136a0:	48 8b 40 60          	mov    0x60(%rax),%rax
  1136a4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  1136a8:	ff d0                	callq  *%rax
		}

		c = c.base;
  1136aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1136ae:	48 8b 40 50          	mov    0x50(%rax),%rax
  1136b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1136b6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1136bb:	0f 95 c0             	setne  %al
  1136be:	83 f0 01             	xor    $0x1,%eax
  1136c1:	84 c0                	test   %al,%al
  1136c3:	75 02                	jne    1136c7 <_D9invariant12_d_invariantFC6ObjectZv+0x83>
  1136c5:	eb c8                	jmp    11368f <_D9invariant12_d_invariantFC6ObjectZv+0x4b>
	} while(c)
}
  1136c7:	c9                   	leaveq 
  1136c8:	c3                   	retq   
  1136c9:	90                   	nop    
  1136ca:	90                   	nop    
  1136cb:	90                   	nop    

00000000001136cc <abort>:
  1136cc:	55                   	push   %rbp
  1136cd:	48 89 e5             	mov    %rsp,%rbp
  1136d0:	48 83 ec 10          	sub    $0x10,%rsp
  1136d4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1136db:	00 
  1136dc:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1136e3:	00 
  1136e4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1136e8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1136ec:	ba 00 00 00 00       	mov    $0x0,%edx
  1136f1:	e8 cc 15 00 00       	callq  114cc2 <_d_assert>
  1136f6:	c9                   	leaveq 
  1136f7:	c3                   	retq   

00000000001136f8 <rt_isHalting>:
  1136f8:	55                   	push   %rbp
  1136f9:	48 89 e5             	mov    %rsp,%rbp
  1136fc:	48 83 ec 10          	sub    $0x10,%rsp
  113700:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  113707:	00 
  113708:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11370f:	00 
  113710:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  113714:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  113718:	ba 00 00 00 00       	mov    $0x0,%edx
  11371d:	e8 a0 15 00 00       	callq  114cc2 <_d_assert>
  113722:	c9                   	leaveq 
  113723:	c3                   	retq   

0000000000113724 <runModuleUnitTests>:
  113724:	55                   	push   %rbp
  113725:	48 89 e5             	mov    %rsp,%rbp
  113728:	48 83 ec 10          	sub    $0x10,%rsp
  11372c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  113733:	00 
  113734:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11373b:	00 
  11373c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  113740:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  113744:	ba 00 00 00 00       	mov    $0x0,%edx
  113749:	e8 74 15 00 00       	callq  114cc2 <_d_assert>
  11374e:	c9                   	leaveq 
  11374f:	c3                   	retq   

0000000000113750 <_d_monitordelete>:
  113750:	55                   	push   %rbp
  113751:	48 89 e5             	mov    %rsp,%rbp
  113754:	48 83 ec 20          	sub    $0x20,%rsp
  113758:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11375c:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  113760:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  113767:	00 
  113768:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11376f:	00 
  113770:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  113774:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  113778:	ba 00 00 00 00       	mov    $0x0,%edx
  11377d:	e8 40 15 00 00       	callq  114cc2 <_d_assert>
  113782:	c9                   	leaveq 
  113783:	c3                   	retq   

0000000000113784 <_d_toObject>:
 *		If it is an interface, return the Object implementing the interface.
 *		If it is null, return null.
 *		Else, undefined crash
 */

Object _d_toObject(void* p)
  113784:	55                   	push   %rbp
  113785:	48 89 e5             	mov    %rsp,%rbp
  113788:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
{	Object o;
  11378c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  113793:	00 

	if (p)
  113794:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  113799:	74 4f                	je     1137ea <_d_toObject+0x66>
	{
		o = cast(Object)p;
  11379b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11379f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		ClassInfo oc = o.classinfo;
  1137a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1137a7:	48 8b 00             	mov    (%rax),%rax
  1137aa:	48 8b 00             	mov    (%rax),%rax
  1137ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		Interface *pi = **cast(Interface ***)p;
  1137b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1137b5:	48 8b 00             	mov    (%rax),%rax
  1137b8:	48 8b 00             	mov    (%rax),%rax
  1137bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		/* Interface.offset lines up with ClassInfo.name.ptr,
		 * so we rely on pointers never being less than 64K,
		 * and Objects never being greater.
		 */
		if (pi.offset < 0x10000)
  1137bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1137c3:	48 83 c0 18          	add    $0x18,%rax
  1137c7:	8b 00                	mov    (%rax),%eax
  1137c9:	3d 00 00 01 00       	cmp    $0x10000,%eax
  1137ce:	7d 1a                	jge    1137ea <_d_toObject+0x66>
		{
			//printf("\tpi.offset = %d\n", pi.offset);
			o = cast(Object)(p - pi.offset);
  1137d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1137d4:	48 83 c0 18          	add    $0x18,%rax
  1137d8:	8b 00                	mov    (%rax),%eax
  1137da:	48 98                	cltq   
  1137dc:	48 89 c2             	mov    %rax,%rdx
  1137df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1137e3:	48 29 d0             	sub    %rdx,%rax
  1137e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		}
	}
	return o;
  1137ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  1137ee:	c9                   	leaveq 
  1137ef:	c3                   	retq   

00000000001137f0 <_d_interface_cast>:
/*************************************
 * Attempts to cast Object o to class c.
 * Returns o if successful, null if not.
 */

Object _d_interface_cast(void* p, ClassInfo c)
  1137f0:	55                   	push   %rbp
  1137f1:	48 89 e5             	mov    %rsp,%rbp
  1137f4:	48 83 ec 30          	sub    $0x30,%rsp
  1137f8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1137fc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	Object o;
  113800:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  113807:	00 

	//printf("_d_interface_cast(p = %p, c = '%.*s')\n", p, c.name);
	if (p)
  113808:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  11380d:	74 3b                	je     11384a <_d_interface_cast+0x5a>
	{
		Interface *pi = **cast(Interface ***)p;
  11380f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113813:	48 8b 00             	mov    (%rax),%rax
  113816:	48 8b 00             	mov    (%rax),%rax
  113819:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

		//printf("\tpi.offset = %d\n", pi.offset);
		o = cast(Object)(p - pi.offset);
  11381d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113821:	48 83 c0 18          	add    $0x18,%rax
  113825:	8b 00                	mov    (%rax),%eax
  113827:	48 98                	cltq   
  113829:	48 89 c2             	mov    %rax,%rdx
  11382c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113830:	48 29 d0             	sub    %rdx,%rax
  113833:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
		return _d_dynamic_cast(o, c);
  113837:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  11383b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11383f:	e8 14 00 00 00       	callq  113858 <_d_dynamic_cast>
  113844:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113848:	eb 08                	jmp    113852 <_d_interface_cast+0x62>
	}
	return o;
  11384a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11384e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113852:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
  113856:	c9                   	leaveq 
  113857:	c3                   	retq   

0000000000113858 <_d_dynamic_cast>:

Object _d_dynamic_cast(Object o, ClassInfo c)
  113858:	55                   	push   %rbp
  113859:	48 89 e5             	mov    %rsp,%rbp
  11385c:	48 83 ec 20          	sub    $0x20,%rsp
  113860:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  113864:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
{	ClassInfo oc;
  113868:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  11386f:	00 
	size_t offset = 0;
  113870:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  113877:	00 

	//printf("_d_dynamic_cast(o = %p, c = '%.*s')\n", o, c.name);

	if (o)
  113878:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  11387d:	74 39                	je     1138b8 <_d_dynamic_cast+0x60>
	{
		oc = o.classinfo;
  11387f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113883:	48 8b 00             	mov    (%rax),%rax
  113886:	48 8b 00             	mov    (%rax),%rax
  113889:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (_d_isbaseof2(oc, c, offset))
  11388d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  113891:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  113895:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  113899:	e8 20 00 00 00       	callq  1138be <_d_isbaseof2>
  11389e:	85 c0                	test   %eax,%eax
  1138a0:	74 0e                	je     1138b0 <_d_dynamic_cast+0x58>
		{
			//printf("\toffset = %d\n", offset);
			o = cast(Object)(cast(void*)o + offset);
  1138a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1138a6:	48 03 45 e8          	add    -0x18(%rbp),%rax
  1138aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1138ae:	eb 08                	jmp    1138b8 <_d_dynamic_cast+0x60>
		}
		else
			o = null;
  1138b0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  1138b7:	00 
	}
	//printf("\tresult = %p\n", o);
	return o;
  1138b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  1138bc:	c9                   	leaveq 
  1138bd:	c3                   	retq   

00000000001138be <_d_isbaseof2>:

int _d_isbaseof2(ClassInfo oc, ClassInfo c, inout size_t offset)
  1138be:	55                   	push   %rbp
  1138bf:	48 89 e5             	mov    %rsp,%rbp
  1138c2:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  1138c9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  1138cd:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  1138d1:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
{	int i;
  1138d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)

	if (oc is c)
  1138dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1138e0:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  1138e4:	75 0f                	jne    1138f5 <_d_isbaseof2+0x37>
		return 1;
  1138e6:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  1138ed:	00 00 00 
  1138f0:	e9 a3 02 00 00       	jmpq   113b98 <_d_isbaseof2+0x2da>
	do
	{
		if (oc.base is c)
  1138f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1138f9:	48 8b 40 50          	mov    0x50(%rax),%rax
  1138fd:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  113901:	75 0f                	jne    113912 <_d_isbaseof2+0x54>
			return 1;
  113903:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  11390a:	00 00 00 
  11390d:	e9 86 02 00 00       	jmpq   113b98 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
  113912:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  113919:	8b 45 ec             	mov    -0x14(%rbp),%eax
  11391c:	48 63 d0             	movslq %eax,%rdx
  11391f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113923:	48 8b 40 40          	mov    0x40(%rax),%rax
  113927:	48 39 c2             	cmp    %rax,%rdx
  11392a:	0f 92 c0             	setb   %al
  11392d:	83 f0 01             	xor    $0x1,%eax
  113930:	84 c0                	test   %al,%al
  113932:	0f 85 09 01 00 00    	jne    113a41 <_d_isbaseof2+0x183>
		{
			ClassInfo ic;
  113938:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11393f:	00 

			ic = oc.interfaces[i].classinfo;
  113940:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113944:	48 8b 40 48          	mov    0x48(%rax),%rax
  113948:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  11394f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113952:	48 63 d0             	movslq %eax,%rdx
  113955:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113959:	48 8b 40 40          	mov    0x40(%rax),%rax
  11395d:	48 39 c2             	cmp    %rax,%rdx
  113960:	73 0e                	jae    113970 <_d_isbaseof2+0xb2>
  113962:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113965:	48 98                	cltq   
  113967:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  11396e:	eb 22                	jmp    113992 <_d_isbaseof2+0xd4>
  113970:	48 c7 45 a0 08 00 00 	movq   $0x8,-0x60(%rbp)
  113977:	00 
  113978:	48 c7 45 a8 04 ae 11 	movq   $0x11ae04,-0x58(%rbp)
  11397f:	00 
  113980:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  113984:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  113988:	ba 99 00 00 00       	mov    $0x99,%edx
  11398d:	e8 a3 13 00 00       	callq  114d35 <_d_array_bounds>
  113992:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  113999:	48 c1 e0 05          	shl    $0x5,%rax
  11399d:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
  1139a4:	48 8b 00             	mov    (%rax),%rax
  1139a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
			if (ic is c)
  1139ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1139af:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
  1139b3:	0f 85 80 00 00 00    	jne    113a39 <_d_isbaseof2+0x17b>
			{	offset = oc.interfaces[i].offset;
  1139b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1139bd:	48 8b 40 48          	mov    0x48(%rax),%rax
  1139c1:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  1139c8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1139cb:	48 63 d0             	movslq %eax,%rdx
  1139ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1139d2:	48 8b 40 40          	mov    0x40(%rax),%rax
  1139d6:	48 39 c2             	cmp    %rax,%rdx
  1139d9:	73 0e                	jae    1139e9 <_d_isbaseof2+0x12b>
  1139db:	8b 45 ec             	mov    -0x14(%rbp),%eax
  1139de:	48 98                	cltq   
  1139e0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  1139e7:	eb 22                	jmp    113a0b <_d_isbaseof2+0x14d>
  1139e9:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  1139f0:	00 
  1139f1:	48 c7 45 b8 04 ae 11 	movq   $0x11ae04,-0x48(%rbp)
  1139f8:	00 
  1139f9:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  1139fd:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  113a01:	ba 9b 00 00 00       	mov    $0x9b,%edx
  113a06:	e8 2a 13 00 00       	callq  114d35 <_d_array_bounds>
  113a0b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  113a12:	48 c1 e0 05          	shl    $0x5,%rax
  113a16:	48 03 85 58 ff ff ff 	add    -0xa8(%rbp),%rax
  113a1d:	8b 40 18             	mov    0x18(%rax),%eax
  113a20:	48 63 d0             	movslq %eax,%rdx
  113a23:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  113a27:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  113a2a:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  113a31:	00 00 00 
  113a34:	e9 5f 01 00 00       	jmpq   113b98 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c)
  113a39:	ff 45 ec             	incl   -0x14(%rbp)
  113a3c:	e9 d8 fe ff ff       	jmpq   113919 <_d_isbaseof2+0x5b>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		for (i = 0; i < oc.interfaces.length; i++)
  113a41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  113a48:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113a4b:	48 63 d0             	movslq %eax,%rdx
  113a4e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113a52:	48 8b 40 40          	mov    0x40(%rax),%rax
  113a56:	48 39 c2             	cmp    %rax,%rdx
  113a59:	0f 92 c0             	setb   %al
  113a5c:	83 f0 01             	xor    $0x1,%eax
  113a5f:	84 c0                	test   %al,%al
  113a61:	0f 85 07 01 00 00    	jne    113b6e <_d_isbaseof2+0x2b0>
		{
			ClassInfo ic;
  113a67:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113a6e:	00 

			ic = oc.interfaces[i].classinfo;
  113a6f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113a73:	48 8b 40 48          	mov    0x48(%rax),%rax
  113a77:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  113a7e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113a81:	48 63 d0             	movslq %eax,%rdx
  113a84:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113a88:	48 8b 40 40          	mov    0x40(%rax),%rax
  113a8c:	48 39 c2             	cmp    %rax,%rdx
  113a8f:	73 0e                	jae    113a9f <_d_isbaseof2+0x1e1>
  113a91:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113a94:	48 98                	cltq   
  113a96:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  113a9d:	eb 22                	jmp    113ac1 <_d_isbaseof2+0x203>
  113a9f:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
  113aa6:	00 
  113aa7:	48 c7 45 c8 04 ae 11 	movq   $0x11ae04,-0x38(%rbp)
  113aae:	00 
  113aaf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  113ab3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  113ab7:	ba a3 00 00 00       	mov    $0xa3,%edx
  113abc:	e8 74 12 00 00       	callq  114d35 <_d_array_bounds>
  113ac1:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  113ac8:	48 c1 e0 05          	shl    $0x5,%rax
  113acc:	48 03 85 68 ff ff ff 	add    -0x98(%rbp),%rax
  113ad3:	48 8b 00             	mov    (%rax),%rax
  113ad6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (_d_isbaseof2(ic, c, offset))
  113ada:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  113ade:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  113ae2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  113ae6:	e8 d3 fd ff ff       	callq  1138be <_d_isbaseof2>
  113aeb:	85 c0                	test   %eax,%eax
  113aed:	74 77                	je     113b66 <_d_isbaseof2+0x2a8>
			{	offset = oc.interfaces[i].offset;
  113aef:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113af3:	48 8b 40 48          	mov    0x48(%rax),%rax
  113af7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  113afe:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113b01:	48 63 d0             	movslq %eax,%rdx
  113b04:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113b08:	48 8b 40 40          	mov    0x40(%rax),%rax
  113b0c:	48 39 c2             	cmp    %rax,%rdx
  113b0f:	73 0b                	jae    113b1c <_d_isbaseof2+0x25e>
  113b11:	8b 45 ec             	mov    -0x14(%rbp),%eax
  113b14:	48 98                	cltq   
  113b16:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  113b1a:	eb 22                	jmp    113b3e <_d_isbaseof2+0x280>
  113b1c:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  113b23:	00 
  113b24:	48 c7 45 d8 04 ae 11 	movq   $0x11ae04,-0x28(%rbp)
  113b2b:	00 
  113b2c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  113b30:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  113b34:	ba a5 00 00 00       	mov    $0xa5,%edx
  113b39:	e8 f7 11 00 00       	callq  114d35 <_d_array_bounds>
  113b3e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  113b42:	48 c1 e0 05          	shl    $0x5,%rax
  113b46:	48 03 85 78 ff ff ff 	add    -0x88(%rbp),%rax
  113b4d:	8b 40 18             	mov    0x18(%rax),%eax
  113b50:	48 63 d0             	movslq %eax,%rdx
  113b53:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  113b57:	48 89 10             	mov    %rdx,(%rax)
				return 1;
  113b5a:	c7 85 44 ff ff ff 01 	movl   $0x1,-0xbc(%rbp)
  113b61:	00 00 00 
  113b64:	eb 32                	jmp    113b98 <_d_isbaseof2+0x2da>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (_d_isbaseof2(ic, c, offset))
  113b66:	ff 45 ec             	incl   -0x14(%rbp)
  113b69:	e9 da fe ff ff       	jmpq   113a48 <_d_isbaseof2+0x18a>
			{	offset = oc.interfaces[i].offset;
				return 1;
			}
		}
		oc = oc.base;
  113b6e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113b72:	48 8b 40 50          	mov    0x50(%rax),%rax
  113b76:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  113b7a:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  113b7f:	0f 95 c0             	setne  %al
  113b82:	83 f0 01             	xor    $0x1,%eax
  113b85:	84 c0                	test   %al,%al
  113b87:	75 05                	jne    113b8e <_d_isbaseof2+0x2d0>
  113b89:	e9 67 fd ff ff       	jmpq   1138f5 <_d_isbaseof2+0x37>
	} while (oc);
	return 0;
  113b8e:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
  113b95:	00 00 00 
  113b98:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
}
  113b9e:	c9                   	leaveq 
  113b9f:	c3                   	retq   

0000000000113ba0 <_d_isbaseof>:

int _d_isbaseof(ClassInfo oc, ClassInfo c)
  113ba0:	55                   	push   %rbp
  113ba1:	48 89 e5             	mov    %rsp,%rbp
  113ba4:	48 83 ec 50          	sub    $0x50,%rsp
  113ba8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  113bac:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
{	int i;
  113bb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	if (oc is c)
  113bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113bbb:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  113bbf:	75 0c                	jne    113bcd <_d_isbaseof+0x2d>
		return 1;
  113bc1:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  113bc8:	e9 fa 00 00 00       	jmpq   113cc7 <_d_isbaseof+0x127>
	do
	{
		if (oc.base is c)
  113bcd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113bd1:	48 8b 40 50          	mov    0x50(%rax),%rax
  113bd5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  113bd9:	75 0c                	jne    113be7 <_d_isbaseof+0x47>
			return 1;
  113bdb:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  113be2:	e9 e0 00 00 00       	jmpq   113cc7 <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
  113be7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  113bee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113bf1:	48 63 d0             	movslq %eax,%rdx
  113bf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113bf8:	48 8b 40 40          	mov    0x40(%rax),%rax
  113bfc:	48 39 c2             	cmp    %rax,%rdx
  113bff:	0f 92 c0             	setb   %al
  113c02:	83 f0 01             	xor    $0x1,%eax
  113c05:	84 c0                	test   %al,%al
  113c07:	0f 85 93 00 00 00    	jne    113ca0 <_d_isbaseof+0x100>
		{
			ClassInfo ic;
  113c0d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113c14:	00 

			ic = oc.interfaces[i].classinfo;
  113c15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113c19:	48 8b 40 48          	mov    0x48(%rax),%rax
  113c1d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  113c21:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113c24:	48 63 d0             	movslq %eax,%rdx
  113c27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113c2b:	48 8b 40 40          	mov    0x40(%rax),%rax
  113c2f:	48 39 c2             	cmp    %rax,%rdx
  113c32:	73 0b                	jae    113c3f <_d_isbaseof+0x9f>
  113c34:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113c37:	48 98                	cltq   
  113c39:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  113c3d:	eb 22                	jmp    113c61 <_d_isbaseof+0xc1>
  113c3f:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  113c46:	00 
  113c47:	48 c7 45 e8 04 ae 11 	movq   $0x11ae04,-0x18(%rbp)
  113c4e:	00 
  113c4f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  113c53:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  113c57:	ba bb 00 00 00       	mov    $0xbb,%edx
  113c5c:	e8 d4 10 00 00       	callq  114d35 <_d_array_bounds>
  113c61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  113c65:	48 c1 e0 05          	shl    $0x5,%rax
  113c69:	48 03 45 c0          	add    -0x40(%rbp),%rax
  113c6d:	48 8b 00             	mov    (%rax),%rax
  113c70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			if (ic is c || _d_isbaseof(ic, c))
  113c74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113c78:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  113c7c:	74 11                	je     113c8f <_d_isbaseof+0xef>
  113c7e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  113c82:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  113c86:	e8 15 ff ff ff       	callq  113ba0 <_d_isbaseof>
  113c8b:	85 c0                	test   %eax,%eax
  113c8d:	74 09                	je     113c98 <_d_isbaseof+0xf8>
				return 1;
  113c8f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  113c96:	eb 2f                	jmp    113cc7 <_d_isbaseof+0x127>
		for (i = 0; i < oc.interfaces.length; i++)
		{
			ClassInfo ic;

			ic = oc.interfaces[i].classinfo;
			if (ic is c || _d_isbaseof(ic, c))
  113c98:	ff 45 f4             	incl   -0xc(%rbp)
  113c9b:	e9 4e ff ff ff       	jmpq   113bee <_d_isbaseof+0x4e>
				return 1;
		}
		oc = oc.base;
  113ca0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  113ca4:	48 8b 40 50          	mov    0x50(%rax),%rax
  113ca8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  113cac:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  113cb1:	0f 95 c0             	setne  %al
  113cb4:	83 f0 01             	xor    $0x1,%eax
  113cb7:	84 c0                	test   %al,%al
  113cb9:	75 05                	jne    113cc0 <_d_isbaseof+0x120>
  113cbb:	e9 0d ff ff ff       	jmpq   113bcd <_d_isbaseof+0x2d>
	} while (oc);
	return 0;
  113cc0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
  113cc7:	8b 45 bc             	mov    -0x44(%rbp),%eax
}
  113cca:	c9                   	leaveq 
  113ccb:	c3                   	retq   

0000000000113ccc <_d_interface_vtbl>:

/*********************************
 * Find the vtbl[] associated with Interface ic.
 */

void *_d_interface_vtbl(ClassInfo ic, Object o)
  113ccc:	55                   	push   %rbp
  113ccd:	48 89 e5             	mov    %rsp,%rbp
  113cd0:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  113cd7:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  113cdb:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
{	int i;
  113cdf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	ClassInfo oc;
  113ce6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  113ced:	00 

	//printf("__d_interface_vtbl(o = %p, ic = %p)\n", o, ic);

	assert(o);
  113cee:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  113cf2:	e8 4d f9 ff ff       	callq  113644 <_D9invariant12_d_invariantFC6ObjectZv>

	oc = o.classinfo;
  113cf7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  113cfb:	48 8b 00             	mov    (%rax),%rax
  113cfe:	48 8b 00             	mov    (%rax),%rax
  113d01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	for (i = 0; i < oc.interfaces.length; i++)
  113d05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  113d0c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113d0f:	48 63 d0             	movslq %eax,%rdx
  113d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113d16:	48 8b 40 40          	mov    0x40(%rax),%rax
  113d1a:	48 39 c2             	cmp    %rax,%rdx
  113d1d:	0f 92 c0             	setb   %al
  113d20:	83 f0 01             	xor    $0x1,%eax
  113d23:	84 c0                	test   %al,%al
  113d25:	0f 85 de 00 00 00    	jne    113e09 <_d_interface_vtbl+0x13d>
	{
		ClassInfo oic;
  113d2b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  113d32:	00 

		oic = oc.interfaces[i].classinfo;
  113d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113d37:	48 8b 40 48          	mov    0x48(%rax),%rax
  113d3b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  113d3f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113d42:	48 63 d0             	movslq %eax,%rdx
  113d45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113d49:	48 8b 40 40          	mov    0x40(%rax),%rax
  113d4d:	48 39 c2             	cmp    %rax,%rdx
  113d50:	73 0b                	jae    113d5d <_d_interface_vtbl+0x91>
  113d52:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113d55:	48 98                	cltq   
  113d57:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  113d5b:	eb 22                	jmp    113d7f <_d_interface_vtbl+0xb3>
  113d5d:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  113d64:	00 
  113d65:	48 c7 45 b8 04 ae 11 	movq   $0x11ae04,-0x48(%rbp)
  113d6c:	00 
  113d6d:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  113d71:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  113d75:	ba d5 00 00 00       	mov    $0xd5,%edx
  113d7a:	e8 b6 0f 00 00       	callq  114d35 <_d_array_bounds>
  113d7f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  113d83:	48 c1 e0 05          	shl    $0x5,%rax
  113d87:	48 03 45 80          	add    -0x80(%rbp),%rax
  113d8b:	48 8b 00             	mov    (%rax),%rax
  113d8e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (oic is ic)
  113d92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113d96:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  113d9a:	75 65                	jne    113e01 <_d_interface_vtbl+0x135>
		{
			return cast(void *)oc.interfaces[i].vtbl;
  113d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113da0:	48 8b 40 48          	mov    0x48(%rax),%rax
  113da4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  113da8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113dab:	48 63 d0             	movslq %eax,%rdx
  113dae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  113db2:	48 8b 40 40          	mov    0x40(%rax),%rax
  113db6:	48 39 c2             	cmp    %rax,%rdx
  113db9:	73 0b                	jae    113dc6 <_d_interface_vtbl+0xfa>
  113dbb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113dbe:	48 98                	cltq   
  113dc0:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  113dc4:	eb 22                	jmp    113de8 <_d_interface_vtbl+0x11c>
  113dc6:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
  113dcd:	00 
  113dce:	48 c7 45 c8 04 ae 11 	movq   $0x11ae04,-0x38(%rbp)
  113dd5:	00 
  113dd6:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  113dda:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  113dde:	ba d8 00 00 00       	mov    $0xd8,%edx
  113de3:	e8 4d 0f 00 00       	callq  114d35 <_d_array_bounds>
  113de8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  113dec:	48 c1 e0 05          	shl    $0x5,%rax
  113df0:	48 03 45 90          	add    -0x70(%rbp),%rax
  113df4:	48 8b 40 10          	mov    0x10(%rax),%rax
  113df8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  113dff:	eb 2c                	jmp    113e2d <_d_interface_vtbl+0x161>
	for (i = 0; i < oc.interfaces.length; i++)
	{
		ClassInfo oic;

		oic = oc.interfaces[i].classinfo;
		if (oic is ic)
  113e01:	ff 45 f4             	incl   -0xc(%rbp)
  113e04:	e9 03 ff ff ff       	jmpq   113d0c <_d_interface_vtbl+0x40>
		{
			return cast(void *)oc.interfaces[i].vtbl;
		}
	}
	assert(0);
  113e09:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  113e10:	00 
  113e11:	48 c7 45 d8 04 ae 11 	movq   $0x11ae04,-0x28(%rbp)
  113e18:	00 
  113e19:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  113e1d:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  113e21:	ba db 00 00 00       	mov    $0xdb,%edx
  113e26:	e8 97 0e 00 00       	callq  114cc2 <_d_assert>
}
  113e2b:	eb 07                	jmp    113e34 <_d_interface_vtbl+0x168>
  113e2d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  113e34:	c9                   	leaveq 
  113e35:	c3                   	retq   

0000000000113e36 <_d_obj_eq>:

int _d_obj_eq(Object o1, Object o2)
  113e36:	55                   	push   %rbp
  113e37:	48 89 e5             	mov    %rsp,%rbp
  113e3a:	48 83 ec 20          	sub    $0x20,%rsp
  113e3e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  113e42:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1 is o2 || (o1 && o1.opEquals(o2));
  113e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113e4a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  113e4e:	74 23                	je     113e73 <_d_obj_eq+0x3d>
  113e50:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  113e55:	74 22                	je     113e79 <_d_obj_eq+0x43>
  113e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113e5b:	48 8b 00             	mov    (%rax),%rax
  113e5e:	48 83 c0 20          	add    $0x20,%rax
  113e62:	48 8b 00             	mov    (%rax),%rax
  113e65:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  113e69:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  113e6d:	ff d0                	callq  *%rax
  113e6f:	85 c0                	test   %eax,%eax
  113e71:	74 06                	je     113e79 <_d_obj_eq+0x43>
  113e73:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  113e77:	eb 04                	jmp    113e7d <_d_obj_eq+0x47>
  113e79:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  113e7d:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
}
  113e81:	c9                   	leaveq 
  113e82:	c3                   	retq   

0000000000113e83 <_d_obj_cmp>:

int _d_obj_cmp(Object o1, Object o2)
  113e83:	55                   	push   %rbp
  113e84:	48 89 e5             	mov    %rsp,%rbp
  113e87:	48 83 ec 10          	sub    $0x10,%rsp
  113e8b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  113e8f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
{
    return o1.opCmp(o2);
  113e93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  113e97:	48 8b 00             	mov    (%rax),%rax
  113e9a:	48 83 c0 18          	add    $0x18,%rax
  113e9e:	48 8b 00             	mov    (%rax),%rax
  113ea1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  113ea5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  113ea9:	ff d0                	callq  *%rax
}
  113eab:	c9                   	leaveq 
  113eac:	c3                   	retq   

0000000000113ead <_d_switch_string>:

int _d_switch_string(char[][] table, char[] ca)
  113ead:	55                   	push   %rbp
  113eae:	48 89 e5             	mov    %rsp,%rbp
  113eb1:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  113eb8:	49 89 d0             	mov    %rdx,%r8
  113ebb:	48 89 f8             	mov    %rdi,%rax
  113ebe:	48 89 f2             	mov    %rsi,%rdx
  113ec1:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  113ec8:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  113ecf:	4c 89 c0             	mov    %r8,%rax
  113ed2:	48 89 ca             	mov    %rcx,%rdx
  113ed5:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  113edc:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
{
	int low;
  113ee3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int high;
  113eea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int mid;
  113ef1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	int c;
  113ef8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char[] pca;
  113eff:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  113f06:	00 
  113f07:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
  113f0e:	00 

	low = 0;
  113f0f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	high = table.length;
  113f16:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  113f1d:	89 45 f4             	mov    %eax,-0xc(%rbp)

	if (high &&
  113f20:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  113f24:	0f 84 f4 02 00 00    	je     11421e <_d_switch_string+0x371>
  113f2a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  113f31:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  113f38:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  113f3f:	48 89 95 f0 fe ff ff 	mov    %rdx,-0x110(%rbp)
  113f46:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  113f4d:	48 83 f8 00          	cmp    $0x0,%rax
  113f51:	76 0d                	jbe    113f60 <_d_switch_string+0xb3>
  113f53:	48 c7 85 f8 fe ff ff 	movq   $0x0,-0x108(%rbp)
  113f5a:	00 00 00 00 
  113f5e:	eb 22                	jmp    113f82 <_d_switch_string+0xd5>
  113f60:	48 c7 45 90 08 00 00 	movq   $0x8,-0x70(%rbp)
  113f67:	00 
  113f68:	48 c7 45 98 04 ae 11 	movq   $0x11ae04,-0x68(%rbp)
  113f6f:	00 
  113f70:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  113f74:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  113f78:	ba f4 00 00 00       	mov    $0xf4,%edx
  113f7d:	e8 b3 0d 00 00       	callq  114d35 <_d_array_bounds>
  113f82:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  113f89:	48 c1 e0 04          	shl    $0x4,%rax
  113f8d:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  113f94:	48 8b 00             	mov    (%rax),%rax
  113f97:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  113f9e:	0f 82 7a 02 00 00    	jb     11421e <_d_switch_string+0x371>
  113fa4:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  113fab:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  113fb2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  113fb9:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  113fc0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  113fc3:	ff c8                	dec    %eax
  113fc5:	48 98                	cltq   
  113fc7:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  113fce:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  113fd5:	48 39 85 18 ff ff ff 	cmp    %rax,-0xe8(%rbp)
  113fdc:	73 10                	jae    113fee <_d_switch_string+0x141>
  113fde:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  113fe5:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
  113fec:	eb 22                	jmp    114010 <_d_switch_string+0x163>
  113fee:	48 c7 45 a0 08 00 00 	movq   $0x8,-0x60(%rbp)
  113ff5:	00 
  113ff6:	48 c7 45 a8 04 ae 11 	movq   $0x11ae04,-0x58(%rbp)
  113ffd:	00 
  113ffe:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  114002:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  114006:	ba f5 00 00 00       	mov    $0xf5,%edx
  11400b:	e8 25 0d 00 00       	callq  114d35 <_d_array_bounds>
  114010:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  114017:	48 c1 e0 04          	shl    $0x4,%rax
  11401b:	48 03 85 08 ff ff ff 	add    -0xf8(%rbp),%rax
  114022:	48 8b 00             	mov    (%rax),%rax
  114025:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  11402c:	0f 87 ec 01 00 00    	ja     11421e <_d_switch_string+0x371>
		ca.length >= table[0].length &&
		ca.length <= table[high - 1].length)
	{
		// Looking for 0 length string, which would only be at the beginning
		if (ca.length == 0)
  114032:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  114039:	48 85 c0             	test   %rax,%rax
  11403c:	75 0f                	jne    11404d <_d_switch_string+0x1a0>
			return 0;
  11403e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  114045:	00 00 00 
  114048:	e9 db 01 00 00       	jmpq   114228 <_d_switch_string+0x37b>

		char c1 = ca[0];
  11404d:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  114054:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  11405b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  114062:	48 83 f8 00          	cmp    $0x0,%rax
  114066:	76 0d                	jbe    114075 <_d_switch_string+0x1c8>
  114068:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  11406f:	00 00 00 00 
  114073:	eb 22                	jmp    114097 <_d_switch_string+0x1ea>
  114075:	48 c7 45 b0 08 00 00 	movq   $0x8,-0x50(%rbp)
  11407c:	00 
  11407d:	48 c7 45 b8 04 ae 11 	movq   $0x11ae04,-0x48(%rbp)
  114084:	00 
  114085:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  114089:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  11408d:	ba fb 00 00 00       	mov    $0xfb,%edx
  114092:	e8 9e 0c 00 00       	callq  114d35 <_d_array_bounds>
  114097:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  11409e:	48 03 85 28 ff ff ff 	add    -0xd8(%rbp),%rax
  1140a5:	0f b6 00             	movzbl (%rax),%eax
  1140a8:	88 45 ff             	mov    %al,-0x1(%rbp)
  1140ab:	eb 00                	jmp    1140ad <_d_switch_string+0x200>

		// Do binary search
		while (low < high)
  1140ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1140b0:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1140b3:	0f 9c c0             	setl   %al
  1140b6:	83 f0 01             	xor    $0x1,%eax
  1140b9:	84 c0                	test   %al,%al
  1140bb:	0f 85 5d 01 00 00    	jne    11421e <_d_switch_string+0x371>
		{
			mid = (low + high) >> 1;
  1140c1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1140c4:	03 45 f8             	add    -0x8(%rbp),%eax
  1140c7:	d1 f8                	sar    %eax
  1140c9:	89 45 f0             	mov    %eax,-0x10(%rbp)
			pca = table[mid];
  1140cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  1140d3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  1140da:	8b 45 f0             	mov    -0x10(%rbp),%eax
  1140dd:	48 63 d0             	movslq %eax,%rdx
  1140e0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  1140e7:	48 39 c2             	cmp    %rax,%rdx
  1140ea:	73 0e                	jae    1140fa <_d_switch_string+0x24d>
  1140ec:	8b 45 f0             	mov    -0x10(%rbp),%eax
  1140ef:	48 98                	cltq   
  1140f1:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  1140f8:	eb 22                	jmp    11411c <_d_switch_string+0x26f>
  1140fa:	48 c7 45 c0 08 00 00 	movq   $0x8,-0x40(%rbp)
  114101:	00 
  114102:	48 c7 45 c8 04 ae 11 	movq   $0x11ae04,-0x38(%rbp)
  114109:	00 
  11410a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  11410e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  114112:	ba 01 01 00 00       	mov    $0x101,%edx
  114117:	e8 19 0c 00 00       	callq  114d35 <_d_array_bounds>
  11411c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  114123:	48 c1 e0 04          	shl    $0x4,%rax
  114127:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  11412e:	48 01 c2             	add    %rax,%rdx
  114131:	48 8b 02             	mov    (%rdx),%rax
  114134:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  114138:	48 8b 42 08          	mov    0x8(%rdx),%rax
  11413c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
			c = ca.length - pca.length;
  114140:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  114147:	89 c2                	mov    %eax,%edx
  114149:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  11414d:	89 d1                	mov    %edx,%ecx
  11414f:	29 c1                	sub    %eax,%ecx
  114151:	89 c8                	mov    %ecx,%eax
  114153:	89 45 ec             	mov    %eax,-0x14(%rbp)
			if (c == 0)
  114156:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  11415a:	0f 85 a0 00 00 00    	jne    114200 <_d_switch_string+0x353>
			{
				c = cast(ubyte)c1 - cast(ubyte)pca[0];
  114160:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  114164:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  11416a:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  11416e:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  114175:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  114179:	48 83 f8 00          	cmp    $0x0,%rax
  11417d:	76 0d                	jbe    11418c <_d_switch_string+0x2df>
  11417f:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
  114186:	00 00 00 00 
  11418a:	eb 22                	jmp    1141ae <_d_switch_string+0x301>
  11418c:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
  114193:	00 
  114194:	48 c7 45 d8 04 ae 11 	movq   $0x11ae04,-0x28(%rbp)
  11419b:	00 
  11419c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  1141a0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  1141a4:	ba 05 01 00 00       	mov    $0x105,%edx
  1141a9:	e8 87 0b 00 00       	callq  114d35 <_d_array_bounds>
  1141ae:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  1141b5:	48 03 85 50 ff ff ff 	add    -0xb0(%rbp),%rax
  1141bc:	0f b6 00             	movzbl (%rax),%eax
  1141bf:	0f b6 c0             	movzbl %al,%eax
  1141c2:	8b 8d 4c ff ff ff    	mov    -0xb4(%rbp),%ecx
  1141c8:	29 c1                	sub    %eax,%ecx
  1141ca:	89 c8                	mov    %ecx,%eax
  1141cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
				if (c == 0)
  1141cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  1141d3:	75 2b                	jne    114200 <_d_switch_string+0x353>
				{
					c = memcmp(ca.ptr, pca.ptr, ca.length);
  1141d5:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  1141dc:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  1141e0:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  1141e7:	e8 32 15 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  1141ec:	89 45 ec             	mov    %eax,-0x14(%rbp)
					if (c == 0)
  1141ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  1141f3:	75 0b                	jne    114200 <_d_switch_string+0x353>
					{
						return mid;
  1141f5:	8b 45 f0             	mov    -0x10(%rbp),%eax
  1141f8:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  1141fe:	eb 28                	jmp    114228 <_d_switch_string+0x37b>
					}
				}
			}
			if (c < 0)
  114200:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  114204:	79 0b                	jns    114211 <_d_switch_string+0x364>
			{
				high = mid;
  114206:	8b 45 f0             	mov    -0x10(%rbp),%eax
  114209:	89 45 f4             	mov    %eax,-0xc(%rbp)
  11420c:	e9 9c fe ff ff       	jmpq   1140ad <_d_switch_string+0x200>
			}
			else
			{
				low = mid + 1;
  114211:	8b 45 f0             	mov    -0x10(%rbp),%eax
  114214:	ff c0                	inc    %eax
  114216:	89 45 f8             	mov    %eax,-0x8(%rbp)
					{
						return mid;
					}
				}
			}
			if (c < 0)
  114219:	e9 8f fe ff ff       	jmpq   1140ad <_d_switch_string+0x200>
				low = mid + 1;
			}
		}
	}

	return -1;				// not found
  11421e:	c7 85 24 ff ff ff ff 	movl   $0xffffffff,-0xdc(%rbp)
  114225:	ff ff ff 
  114228:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
}
  11422e:	c9                   	leaveq 
  11422f:	c3                   	retq   

0000000000114230 <_d_switch_ustring>:

int _d_switch_ustring(wchar[][] table, wchar[] ca)
  114230:	55                   	push   %rbp
  114231:	48 89 e5             	mov    %rsp,%rbp
  114234:	48 83 ec 70          	sub    $0x70,%rsp
  114238:	49 89 d0             	mov    %rdx,%r8
  11423b:	48 89 f8             	mov    %rdi,%rax
  11423e:	48 89 f2             	mov    %rsi,%rdx
  114241:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  114245:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  114249:	4c 89 c0             	mov    %r8,%rax
  11424c:	48 89 ca             	mov    %rcx,%rdx
  11424f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  114253:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  114257:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  11425e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  114265:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  11426c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	wchar[] pca;
  114273:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  11427a:	00 
  11427b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  114282:	00 

	low = 0;
  114283:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  11428a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  11428e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  114291:	eb 00                	jmp    114293 <_d_switch_ustring+0x63>

	// Do binary search
	while (low < high)
  114293:	8b 45 fc             	mov    -0x4(%rbp),%eax
  114296:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  114299:	0f 9c c0             	setl   %al
  11429c:	83 f0 01             	xor    $0x1,%eax
  11429f:	84 c0                	test   %al,%al
  1142a1:	0f 85 ca 00 00 00    	jne    114371 <_d_switch_ustring+0x141>
	{
		mid = (low + high) >> 1;
  1142a7:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1142aa:	03 45 fc             	add    -0x4(%rbp),%eax
  1142ad:	d1 f8                	sar    %eax
  1142af:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  1142b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1142b6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  1142ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1142bd:	48 63 d0             	movslq %eax,%rdx
  1142c0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1142c4:	48 39 c2             	cmp    %rax,%rdx
  1142c7:	73 0b                	jae    1142d4 <_d_switch_ustring+0xa4>
  1142c9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1142cc:	48 98                	cltq   
  1142ce:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  1142d2:	eb 22                	jmp    1142f6 <_d_switch_ustring+0xc6>
  1142d4:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  1142db:	00 
  1142dc:	48 c7 45 e8 04 ae 11 	movq   $0x11ae04,-0x18(%rbp)
  1142e3:	00 
  1142e4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  1142e8:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1142ec:	ba 2c 01 00 00       	mov    $0x12c,%edx
  1142f1:	e8 3f 0a 00 00       	callq  114d35 <_d_array_bounds>
  1142f6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1142fa:	48 c1 e0 04          	shl    $0x4,%rax
  1142fe:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  114302:	48 01 c2             	add    %rax,%rdx
  114305:	48 8b 02             	mov    (%rdx),%rax
  114308:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11430c:	48 8b 42 08          	mov    0x8(%rdx),%rax
  114310:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  114314:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  114318:	89 c2                	mov    %eax,%edx
  11431a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11431e:	89 d1                	mov    %edx,%ecx
  114320:	29 c1                	sub    %eax,%ecx
  114322:	89 c8                	mov    %ecx,%eax
  114324:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  114327:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  11432b:	75 26                	jne    114353 <_d_switch_ustring+0x123>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * wchar.sizeof);
  11432d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  114331:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  114335:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  114339:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  11433d:	e8 dc 13 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  114342:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  114345:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  114349:	75 08                	jne    114353 <_d_switch_ustring+0x123>
			{
				return mid;
  11434b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11434e:	89 45 ac             	mov    %eax,-0x54(%rbp)
  114351:	eb 25                	jmp    114378 <_d_switch_ustring+0x148>
			}
		}
		if (c < 0)
  114353:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  114357:	79 0b                	jns    114364 <_d_switch_ustring+0x134>
		{
			high = mid;
  114359:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11435c:	89 45 f8             	mov    %eax,-0x8(%rbp)
  11435f:	e9 2f ff ff ff       	jmpq   114293 <_d_switch_ustring+0x63>
		}
		else
		{
			low = mid + 1;
  114364:	8b 45 f4             	mov    -0xc(%rbp),%eax
  114367:	ff c0                	inc    %eax
  114369:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  11436c:	e9 22 ff ff ff       	jmpq   114293 <_d_switch_ustring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  114371:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  114378:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  11437b:	c9                   	leaveq 
  11437c:	c3                   	retq   

000000000011437d <_d_switch_dstring>:

int _d_switch_dstring(dchar[][] table, dchar[] ca)
  11437d:	55                   	push   %rbp
  11437e:	48 89 e5             	mov    %rsp,%rbp
  114381:	48 83 ec 70          	sub    $0x70,%rsp
  114385:	49 89 d0             	mov    %rdx,%r8
  114388:	48 89 f8             	mov    %rdi,%rax
  11438b:	48 89 f2             	mov    %rsi,%rdx
  11438e:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  114392:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  114396:	4c 89 c0             	mov    %r8,%rax
  114399:	48 89 ca             	mov    %rcx,%rdx
  11439c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  1143a0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
{
	int low;
  1143a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	int high;
  1143ab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
	int mid;
  1143b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	int c;
  1143b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	dchar[] pca;
  1143c0:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  1143c7:	00 
  1143c8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  1143cf:	00 

	low = 0;
  1143d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	high = table.length;
  1143d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1143db:	89 45 f8             	mov    %eax,-0x8(%rbp)
  1143de:	eb 00                	jmp    1143e0 <_d_switch_dstring+0x63>

	// Do binary search
	while (low < high)
  1143e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1143e3:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  1143e6:	0f 9c c0             	setl   %al
  1143e9:	83 f0 01             	xor    $0x1,%eax
  1143ec:	84 c0                	test   %al,%al
  1143ee:	0f 85 ce 00 00 00    	jne    1144c2 <_d_switch_dstring+0x145>
	{
		mid = (low + high) >> 1;
  1143f4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1143f7:	03 45 fc             	add    -0x4(%rbp),%eax
  1143fa:	d1 f8                	sar    %eax
  1143fc:	89 45 f4             	mov    %eax,-0xc(%rbp)
		pca = table[mid];
  1143ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  114403:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  114407:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11440a:	48 63 d0             	movslq %eax,%rdx
  11440d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  114411:	48 39 c2             	cmp    %rax,%rdx
  114414:	73 0b                	jae    114421 <_d_switch_dstring+0xa4>
  114416:	8b 45 f4             	mov    -0xc(%rbp),%eax
  114419:	48 98                	cltq   
  11441b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  11441f:	eb 22                	jmp    114443 <_d_switch_dstring+0xc6>
  114421:	48 c7 45 e0 08 00 00 	movq   $0x8,-0x20(%rbp)
  114428:	00 
  114429:	48 c7 45 e8 04 ae 11 	movq   $0x11ae04,-0x18(%rbp)
  114430:	00 
  114431:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114435:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  114439:	ba 52 01 00 00       	mov    $0x152,%edx
  11443e:	e8 f2 08 00 00       	callq  114d35 <_d_array_bounds>
  114443:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  114447:	48 c1 e0 04          	shl    $0x4,%rax
  11444b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  11444f:	48 01 c2             	add    %rax,%rdx
  114452:	48 8b 02             	mov    (%rdx),%rax
  114455:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  114459:	48 8b 42 08          	mov    0x8(%rdx),%rax
  11445d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		c = ca.length - pca.length;
  114461:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  114465:	89 c2                	mov    %eax,%edx
  114467:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11446b:	89 d1                	mov    %edx,%ecx
  11446d:	29 c1                	sub    %eax,%ecx
  11446f:	89 c8                	mov    %ecx,%eax
  114471:	89 45 f0             	mov    %eax,-0x10(%rbp)
		if (c == 0)
  114474:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  114478:	75 2a                	jne    1144a4 <_d_switch_dstring+0x127>
		{
			c = memcmp(ca.ptr, pca.ptr, ca.length * dchar.sizeof);
  11447a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  11447e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  114485:	00 
  114486:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  11448a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  11448e:	e8 8b 12 ff ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  114493:	89 45 f0             	mov    %eax,-0x10(%rbp)
			if (c == 0)
  114496:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  11449a:	75 08                	jne    1144a4 <_d_switch_dstring+0x127>
			{
				return mid;
  11449c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11449f:	89 45 ac             	mov    %eax,-0x54(%rbp)
  1144a2:	eb 25                	jmp    1144c9 <_d_switch_dstring+0x14c>
			}
		}
		if (c < 0)
  1144a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  1144a8:	79 0b                	jns    1144b5 <_d_switch_dstring+0x138>
		{
			high = mid;
  1144aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1144ad:	89 45 f8             	mov    %eax,-0x8(%rbp)
  1144b0:	e9 2b ff ff ff       	jmpq   1143e0 <_d_switch_dstring+0x63>
		}
		else
		{
			low = mid + 1;
  1144b5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1144b8:	ff c0                	inc    %eax
  1144ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c == 0)
			{
				return mid;
			}
		}
		if (c < 0)
  1144bd:	e9 1e ff ff ff       	jmpq   1143e0 <_d_switch_dstring+0x63>
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  1144c2:	c7 45 ac ff ff ff ff 	movl   $0xffffffff,-0x54(%rbp)
  1144c9:	8b 45 ac             	mov    -0x54(%rbp),%eax
}
  1144cc:	c9                   	leaveq 
  1144cd:	c3                   	retq   

00000000001144ce <_d_newclass>:
  1144ce:	55                   	push   %rbp
  1144cf:	48 89 e5             	mov    %rsp,%rbp
  1144d2:	48 83 ec 20          	sub    $0x20,%rsp
  1144d6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
		{
			low = mid + 1;
		}
	}

	return -1;				// not found
  1144da:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1144e1:	00 
  1144e2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1144e9:	00 
  1144ea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1144ee:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1144f2:	ba 00 00 00 00       	mov    $0x0,%edx
  1144f7:	e8 c6 07 00 00       	callq  114cc2 <_d_assert>
  1144fc:	c9                   	leaveq 
  1144fd:	c3                   	retq   

00000000001144fe <_d_delinterface>:
  1144fe:	55                   	push   %rbp
  1144ff:	48 89 e5             	mov    %rsp,%rbp
  114502:	48 83 ec 20          	sub    $0x20,%rsp
  114506:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11450a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114511:	00 
  114512:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114519:	00 
  11451a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11451e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114522:	ba 00 00 00 00       	mov    $0x0,%edx
  114527:	e8 96 07 00 00       	callq  114cc2 <_d_assert>
  11452c:	c9                   	leaveq 
  11452d:	c3                   	retq   

000000000011452e <_d_delclass>:
  11452e:	55                   	push   %rbp
  11452f:	48 89 e5             	mov    %rsp,%rbp
  114532:	48 83 ec 20          	sub    $0x20,%rsp
  114536:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11453a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114541:	00 
  114542:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114549:	00 
  11454a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11454e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114552:	ba 00 00 00 00       	mov    $0x0,%edx
  114557:	e8 66 07 00 00       	callq  114cc2 <_d_assert>
  11455c:	c9                   	leaveq 
  11455d:	c3                   	retq   

000000000011455e <_d_newarrayT>:
  11455e:	55                   	push   %rbp
  11455f:	48 89 e5             	mov    %rsp,%rbp
  114562:	48 83 ec 20          	sub    $0x20,%rsp
  114566:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  11456a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  11456e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114575:	00 
  114576:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11457d:	00 
  11457e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114582:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114586:	ba 00 00 00 00       	mov    $0x0,%edx
  11458b:	e8 32 07 00 00       	callq  114cc2 <_d_assert>
  114590:	c9                   	leaveq 
  114591:	c3                   	retq   

0000000000114592 <_d_newarrayiT>:
  114592:	55                   	push   %rbp
  114593:	48 89 e5             	mov    %rsp,%rbp
  114596:	48 83 ec 20          	sub    $0x20,%rsp
  11459a:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  11459e:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  1145a2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1145a9:	00 
  1145aa:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1145b1:	00 
  1145b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1145b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1145ba:	ba 00 00 00 00       	mov    $0x0,%edx
  1145bf:	e8 fe 06 00 00       	callq  114cc2 <_d_assert>
  1145c4:	c9                   	leaveq 
  1145c5:	c3                   	retq   

00000000001145c6 <_d_newarraymTp>:
  1145c6:	55                   	push   %rbp
  1145c7:	48 89 e5             	mov    %rsp,%rbp
  1145ca:	48 83 ec 30          	sub    $0x30,%rsp
  1145ce:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  1145d2:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  1145d5:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  1145d9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1145e0:	00 
  1145e1:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1145e8:	00 
  1145e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1145ed:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1145f1:	ba 00 00 00 00       	mov    $0x0,%edx
  1145f6:	e8 c7 06 00 00       	callq  114cc2 <_d_assert>
  1145fb:	c9                   	leaveq 
  1145fc:	c3                   	retq   

00000000001145fd <_d_newarraymiTp>:
  1145fd:	55                   	push   %rbp
  1145fe:	48 89 e5             	mov    %rsp,%rbp
  114601:	48 83 ec 30          	sub    $0x30,%rsp
  114605:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  114609:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  11460c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  114610:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114617:	00 
  114618:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11461f:	00 
  114620:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114624:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114628:	ba 00 00 00 00       	mov    $0x0,%edx
  11462d:	e8 90 06 00 00       	callq  114cc2 <_d_assert>
  114632:	c9                   	leaveq 
  114633:	c3                   	retq   

0000000000114634 <_d_delarray>:
  114634:	55                   	push   %rbp
  114635:	48 89 e5             	mov    %rsp,%rbp
  114638:	48 83 ec 20          	sub    $0x20,%rsp
  11463c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114640:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114647:	00 
  114648:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11464f:	00 
  114650:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114654:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114658:	ba 00 00 00 00       	mov    $0x0,%edx
  11465d:	e8 60 06 00 00       	callq  114cc2 <_d_assert>
  114662:	c9                   	leaveq 
  114663:	c3                   	retq   

0000000000114664 <_d_delmemory>:
  114664:	55                   	push   %rbp
  114665:	48 89 e5             	mov    %rsp,%rbp
  114668:	48 83 ec 20          	sub    $0x20,%rsp
  11466c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114670:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114677:	00 
  114678:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11467f:	00 
  114680:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114684:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114688:	ba 00 00 00 00       	mov    $0x0,%edx
  11468d:	e8 30 06 00 00       	callq  114cc2 <_d_assert>
  114692:	c9                   	leaveq 
  114693:	c3                   	retq   

0000000000114694 <_d_callfinalizer>:
  114694:	55                   	push   %rbp
  114695:	48 89 e5             	mov    %rsp,%rbp
  114698:	48 83 ec 20          	sub    $0x20,%rsp
  11469c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1146a0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1146a7:	00 
  1146a8:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1146af:	00 
  1146b0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1146b4:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1146b8:	ba 00 00 00 00       	mov    $0x0,%edx
  1146bd:	e8 00 06 00 00       	callq  114cc2 <_d_assert>
  1146c2:	c9                   	leaveq 
  1146c3:	c3                   	retq   

00000000001146c4 <rt_finalize>:
  1146c4:	55                   	push   %rbp
  1146c5:	48 89 e5             	mov    %rsp,%rbp
  1146c8:	48 83 ec 20          	sub    $0x20,%rsp
  1146cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1146d0:	40 88 75 e7          	mov    %sil,-0x19(%rbp)
  1146d4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1146db:	00 
  1146dc:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1146e3:	00 
  1146e4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1146e8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1146ec:	ba 00 00 00 00       	mov    $0x0,%edx
  1146f1:	e8 cc 05 00 00       	callq  114cc2 <_d_assert>
  1146f6:	c9                   	leaveq 
  1146f7:	c3                   	retq   

00000000001146f8 <_d_arraysetlengthT>:
  1146f8:	55                   	push   %rbp
  1146f9:	48 89 e5             	mov    %rsp,%rbp
  1146fc:	48 83 ec 30          	sub    $0x30,%rsp
  114700:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  114704:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  114708:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  11470c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114713:	00 
  114714:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11471b:	00 
  11471c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114720:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114724:	ba 00 00 00 00       	mov    $0x0,%edx
  114729:	e8 94 05 00 00       	callq  114cc2 <_d_assert>
  11472e:	c9                   	leaveq 
  11472f:	c3                   	retq   

0000000000114730 <_d_arraysetlengthiT>:
  114730:	55                   	push   %rbp
  114731:	48 89 e5             	mov    %rsp,%rbp
  114734:	48 83 ec 30          	sub    $0x30,%rsp
  114738:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  11473c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  114740:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  114744:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11474b:	00 
  11474c:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114753:	00 
  114754:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114758:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11475c:	ba 00 00 00 00       	mov    $0x0,%edx
  114761:	e8 5c 05 00 00       	callq  114cc2 <_d_assert>
  114766:	c9                   	leaveq 
  114767:	c3                   	retq   

0000000000114768 <_d_arrayappendT>:
  114768:	55                   	push   %rbp
  114769:	48 89 e5             	mov    %rsp,%rbp
  11476c:	48 83 ec 30          	sub    $0x30,%rsp
  114770:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  114774:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  114778:	4c 89 c0             	mov    %r8,%rax
  11477b:	48 89 ca             	mov    %rcx,%rdx
  11477e:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  114782:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  114786:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11478d:	00 
  11478e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114795:	00 
  114796:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11479a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11479e:	ba 00 00 00 00       	mov    $0x0,%edx
  1147a3:	e8 1a 05 00 00       	callq  114cc2 <_d_assert>
  1147a8:	c9                   	leaveq 
  1147a9:	c3                   	retq   

00000000001147aa <_d_arrayappendcTp>:
  1147aa:	55                   	push   %rbp
  1147ab:	48 89 e5             	mov    %rsp,%rbp
  1147ae:	48 83 ec 30          	sub    $0x30,%rsp
  1147b2:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  1147b6:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  1147ba:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  1147be:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1147c5:	00 
  1147c6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1147cd:	00 
  1147ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1147d2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1147d6:	ba 00 00 00 00       	mov    $0x0,%edx
  1147db:	e8 e2 04 00 00       	callq  114cc2 <_d_assert>
  1147e0:	c9                   	leaveq 
  1147e1:	c3                   	retq   

00000000001147e2 <_d_arraycatT>:
  1147e2:	55                   	push   %rbp
  1147e3:	48 89 e5             	mov    %rsp,%rbp
  1147e6:	48 83 ec 40          	sub    $0x40,%rsp
  1147ea:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  1147ee:	4c 89 c6             	mov    %r8,%rsi
  1147f1:	4c 89 cf             	mov    %r9,%rdi
  1147f4:	48 89 d0             	mov    %rdx,%rax
  1147f7:	48 89 ca             	mov    %rcx,%rdx
  1147fa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1147fe:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  114802:	48 89 f0             	mov    %rsi,%rax
  114805:	48 89 fa             	mov    %rdi,%rdx
  114808:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  11480c:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  114810:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114817:	00 
  114818:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11481f:	00 
  114820:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114824:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114828:	ba 00 00 00 00       	mov    $0x0,%edx
  11482d:	e8 90 04 00 00       	callq  114cc2 <_d_assert>
  114832:	c9                   	leaveq 
  114833:	c3                   	retq   

0000000000114834 <_d_arraycatnT>:
  114834:	55                   	push   %rbp
  114835:	48 89 e5             	mov    %rsp,%rbp
  114838:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  11483f:	48 89 b5 38 ff ff ff 	mov    %rsi,-0xc8(%rbp)
  114846:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  11484d:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  114854:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  11485b:	0f b6 c0             	movzbl %al,%eax
  11485e:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  114865:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  11486c:	48 8d 04 8d 00 00 00 	lea    0x0(,%rcx,4),%rax
  114873:	00 
  114874:	48 c7 85 28 ff ff ff 	movq   $0x1148b3,-0xd8(%rbp)
  11487b:	b3 48 11 00 
  11487f:	48 29 85 28 ff ff ff 	sub    %rax,-0xd8(%rbp)
  114886:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  11488a:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
  114891:	ff e1                	jmpq   *%rcx
  114893:	0f 29 78 f1          	movaps %xmm7,-0xf(%rax)
  114897:	0f 29 70 e1          	movaps %xmm6,-0x1f(%rax)
  11489b:	0f 29 68 d1          	movaps %xmm5,-0x2f(%rax)
  11489f:	0f 29 60 c1          	movaps %xmm4,-0x3f(%rax)
  1148a3:	0f 29 58 b1          	movaps %xmm3,-0x4f(%rax)
  1148a7:	0f 29 50 a1          	movaps %xmm2,-0x5f(%rax)
  1148ab:	0f 29 48 91          	movaps %xmm1,-0x6f(%rax)
  1148af:	0f 29 40 81          	movaps %xmm0,-0x7f(%rax)
  1148b3:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%rbp)
  1148b9:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  1148c0:	00 00 00 00 
  1148c4:	48 c7 85 48 ff ff ff 	movq   $0x11ae03,-0xb8(%rbp)
  1148cb:	03 ae 11 00 
  1148cf:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  1148d6:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
  1148dd:	ba 00 00 00 00       	mov    $0x0,%edx
  1148e2:	e8 db 03 00 00       	callq  114cc2 <_d_assert>
  1148e7:	c9                   	leaveq 
  1148e8:	c3                   	retq   

00000000001148e9 <_adDupT>:
  1148e9:	55                   	push   %rbp
  1148ea:	48 89 e5             	mov    %rsp,%rbp
  1148ed:	48 83 ec 30          	sub    $0x30,%rsp
  1148f1:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  1148f5:	48 89 d0             	mov    %rdx,%rax
  1148f8:	48 89 ca             	mov    %rcx,%rdx
  1148fb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1148ff:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  114903:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11490a:	00 
  11490b:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114912:	00 
  114913:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114917:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11491b:	ba 00 00 00 00       	mov    $0x0,%edx
  114920:	e8 9d 03 00 00       	callq  114cc2 <_d_assert>
  114925:	c9                   	leaveq 
  114926:	c3                   	retq   

0000000000114927 <gc_init>:
  114927:	55                   	push   %rbp
  114928:	48 89 e5             	mov    %rsp,%rbp
  11492b:	48 83 ec 10          	sub    $0x10,%rsp
  11492f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114936:	00 
  114937:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11493e:	00 
  11493f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114943:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114947:	ba 00 00 00 00       	mov    $0x0,%edx
  11494c:	e8 71 03 00 00       	callq  114cc2 <_d_assert>
  114951:	c9                   	leaveq 
  114952:	c3                   	retq   

0000000000114953 <gc_term>:
  114953:	55                   	push   %rbp
  114954:	48 89 e5             	mov    %rsp,%rbp
  114957:	48 83 ec 10          	sub    $0x10,%rsp
  11495b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114962:	00 
  114963:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11496a:	00 
  11496b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11496f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114973:	ba 00 00 00 00       	mov    $0x0,%edx
  114978:	e8 45 03 00 00       	callq  114cc2 <_d_assert>
  11497d:	c9                   	leaveq 
  11497e:	c3                   	retq   

000000000011497f <gc_enable>:
  11497f:	55                   	push   %rbp
  114980:	48 89 e5             	mov    %rsp,%rbp
  114983:	48 83 ec 10          	sub    $0x10,%rsp
  114987:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11498e:	00 
  11498f:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114996:	00 
  114997:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11499b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11499f:	ba 00 00 00 00       	mov    $0x0,%edx
  1149a4:	e8 19 03 00 00       	callq  114cc2 <_d_assert>
  1149a9:	c9                   	leaveq 
  1149aa:	c3                   	retq   

00000000001149ab <gc_disable>:
  1149ab:	55                   	push   %rbp
  1149ac:	48 89 e5             	mov    %rsp,%rbp
  1149af:	48 83 ec 10          	sub    $0x10,%rsp
  1149b3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1149ba:	00 
  1149bb:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1149c2:	00 
  1149c3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1149c7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1149cb:	ba 00 00 00 00       	mov    $0x0,%edx
  1149d0:	e8 ed 02 00 00       	callq  114cc2 <_d_assert>
  1149d5:	c9                   	leaveq 
  1149d6:	c3                   	retq   

00000000001149d7 <gc_collect>:
  1149d7:	55                   	push   %rbp
  1149d8:	48 89 e5             	mov    %rsp,%rbp
  1149db:	48 83 ec 10          	sub    $0x10,%rsp
  1149df:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1149e6:	00 
  1149e7:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1149ee:	00 
  1149ef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1149f3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1149f7:	ba 00 00 00 00       	mov    $0x0,%edx
  1149fc:	e8 c1 02 00 00       	callq  114cc2 <_d_assert>
  114a01:	c9                   	leaveq 
  114a02:	c3                   	retq   

0000000000114a03 <gc_getAttr>:
  114a03:	55                   	push   %rbp
  114a04:	48 89 e5             	mov    %rsp,%rbp
  114a07:	48 83 ec 20          	sub    $0x20,%rsp
  114a0b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114a0f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114a16:	00 
  114a17:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114a1e:	00 
  114a1f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114a23:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114a27:	ba 00 00 00 00       	mov    $0x0,%edx
  114a2c:	e8 91 02 00 00       	callq  114cc2 <_d_assert>
  114a31:	c9                   	leaveq 
  114a32:	c3                   	retq   

0000000000114a33 <gc_setAttr>:
  114a33:	55                   	push   %rbp
  114a34:	48 89 e5             	mov    %rsp,%rbp
  114a37:	48 83 ec 20          	sub    $0x20,%rsp
  114a3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114a3f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  114a42:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114a49:	00 
  114a4a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114a51:	00 
  114a52:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114a56:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114a5a:	ba 00 00 00 00       	mov    $0x0,%edx
  114a5f:	e8 5e 02 00 00       	callq  114cc2 <_d_assert>
  114a64:	c9                   	leaveq 
  114a65:	c3                   	retq   

0000000000114a66 <gc_clrAttr>:
  114a66:	55                   	push   %rbp
  114a67:	48 89 e5             	mov    %rsp,%rbp
  114a6a:	48 83 ec 20          	sub    $0x20,%rsp
  114a6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114a72:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  114a75:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114a7c:	00 
  114a7d:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114a84:	00 
  114a85:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114a89:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114a8d:	ba 00 00 00 00       	mov    $0x0,%edx
  114a92:	e8 2b 02 00 00       	callq  114cc2 <_d_assert>
  114a97:	c9                   	leaveq 
  114a98:	c3                   	retq   

0000000000114a99 <gc_malloc>:
  114a99:	55                   	push   %rbp
  114a9a:	48 89 e5             	mov    %rsp,%rbp
  114a9d:	48 83 ec 20          	sub    $0x20,%rsp
  114aa1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114aa5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  114aa8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114aaf:	00 
  114ab0:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114ab7:	00 
  114ab8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114abc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114ac0:	ba 00 00 00 00       	mov    $0x0,%edx
  114ac5:	e8 f8 01 00 00       	callq  114cc2 <_d_assert>
  114aca:	c9                   	leaveq 
  114acb:	c3                   	retq   

0000000000114acc <gc_calloc>:
  114acc:	55                   	push   %rbp
  114acd:	48 89 e5             	mov    %rsp,%rbp
  114ad0:	48 83 ec 20          	sub    $0x20,%rsp
  114ad4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114ad8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  114adb:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114ae2:	00 
  114ae3:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114aea:	00 
  114aeb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114aef:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114af3:	ba 00 00 00 00       	mov    $0x0,%edx
  114af8:	e8 c5 01 00 00       	callq  114cc2 <_d_assert>
  114afd:	c9                   	leaveq 
  114afe:	c3                   	retq   

0000000000114aff <gc_realloc>:
  114aff:	55                   	push   %rbp
  114b00:	48 89 e5             	mov    %rsp,%rbp
  114b03:	48 83 ec 30          	sub    $0x30,%rsp
  114b07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114b0b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  114b0f:	89 55 dc             	mov    %edx,-0x24(%rbp)
  114b12:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114b19:	00 
  114b1a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114b21:	00 
  114b22:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114b26:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114b2a:	ba 00 00 00 00       	mov    $0x0,%edx
  114b2f:	e8 8e 01 00 00       	callq  114cc2 <_d_assert>
  114b34:	c9                   	leaveq 
  114b35:	c3                   	retq   

0000000000114b36 <gc_extend>:
  114b36:	55                   	push   %rbp
  114b37:	48 89 e5             	mov    %rsp,%rbp
  114b3a:	48 83 ec 30          	sub    $0x30,%rsp
  114b3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114b42:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  114b46:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114b4a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114b51:	00 
  114b52:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114b59:	00 
  114b5a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114b5e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114b62:	ba 00 00 00 00       	mov    $0x0,%edx
  114b67:	e8 56 01 00 00       	callq  114cc2 <_d_assert>
  114b6c:	c9                   	leaveq 
  114b6d:	c3                   	retq   

0000000000114b6e <gc_free>:
  114b6e:	55                   	push   %rbp
  114b6f:	48 89 e5             	mov    %rsp,%rbp
  114b72:	48 83 ec 20          	sub    $0x20,%rsp
  114b76:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114b7a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114b81:	00 
  114b82:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114b89:	00 
  114b8a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114b8e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114b92:	ba 00 00 00 00       	mov    $0x0,%edx
  114b97:	e8 26 01 00 00       	callq  114cc2 <_d_assert>
  114b9c:	c9                   	leaveq 
  114b9d:	c3                   	retq   

0000000000114b9e <gc_sizeOf>:
  114b9e:	55                   	push   %rbp
  114b9f:	48 89 e5             	mov    %rsp,%rbp
  114ba2:	48 83 ec 20          	sub    $0x20,%rsp
  114ba6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114baa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114bb1:	00 
  114bb2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114bb9:	00 
  114bba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114bbe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114bc2:	ba 00 00 00 00       	mov    $0x0,%edx
  114bc7:	e8 f6 00 00 00       	callq  114cc2 <_d_assert>
  114bcc:	c9                   	leaveq 
  114bcd:	c3                   	retq   

0000000000114bce <gc_addRoot>:
  114bce:	55                   	push   %rbp
  114bcf:	48 89 e5             	mov    %rsp,%rbp
  114bd2:	48 83 ec 20          	sub    $0x20,%rsp
  114bd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114bda:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114be1:	00 
  114be2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114be9:	00 
  114bea:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114bee:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114bf2:	ba 00 00 00 00       	mov    $0x0,%edx
  114bf7:	e8 c6 00 00 00       	callq  114cc2 <_d_assert>
  114bfc:	c9                   	leaveq 
  114bfd:	c3                   	retq   

0000000000114bfe <gc_addRange>:
  114bfe:	55                   	push   %rbp
  114bff:	48 89 e5             	mov    %rsp,%rbp
  114c02:	48 83 ec 20          	sub    $0x20,%rsp
  114c06:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114c0a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  114c0e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114c15:	00 
  114c16:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114c1d:	00 
  114c1e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114c22:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114c26:	ba 00 00 00 00       	mov    $0x0,%edx
  114c2b:	e8 92 00 00 00       	callq  114cc2 <_d_assert>
  114c30:	c9                   	leaveq 
  114c31:	c3                   	retq   

0000000000114c32 <gc_removeRoot>:
  114c32:	55                   	push   %rbp
  114c33:	48 89 e5             	mov    %rsp,%rbp
  114c36:	48 83 ec 20          	sub    $0x20,%rsp
  114c3a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114c3e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114c45:	00 
  114c46:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114c4d:	00 
  114c4e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114c52:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114c56:	ba 00 00 00 00       	mov    $0x0,%edx
  114c5b:	e8 62 00 00 00       	callq  114cc2 <_d_assert>
  114c60:	c9                   	leaveq 
  114c61:	c3                   	retq   

0000000000114c62 <gc_removeRange>:
  114c62:	55                   	push   %rbp
  114c63:	48 89 e5             	mov    %rsp,%rbp
  114c66:	48 83 ec 20          	sub    $0x20,%rsp
  114c6a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114c6e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114c75:	00 
  114c76:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114c7d:	00 
  114c7e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114c82:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114c86:	ba 00 00 00 00       	mov    $0x0,%edx
  114c8b:	e8 32 00 00 00       	callq  114cc2 <_d_assert>
  114c90:	c9                   	leaveq 
  114c91:	c3                   	retq   

0000000000114c92 <onCollectResource>:
  114c92:	55                   	push   %rbp
  114c93:	48 89 e5             	mov    %rsp,%rbp
  114c96:	48 83 ec 20          	sub    $0x20,%rsp
  114c9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114c9e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114ca5:	00 
  114ca6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114cad:	00 
  114cae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114cb2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114cb6:	ba 00 00 00 00       	mov    $0x0,%edx
  114cbb:	e8 02 00 00 00       	callq  114cc2 <_d_assert>
  114cc0:	c9                   	leaveq 
  114cc1:	c3                   	retq   

0000000000114cc2 <_d_assert>:

/**************************************************
 Exception stubs
**************************************************/

void _d_assert( char[] file, uint line )
  114cc2:	55                   	push   %rbp
  114cc3:	48 89 e5             	mov    %rsp,%rbp
  114cc6:	48 83 ec 20          	sub    $0x20,%rsp
  114cca:	89 55 ec             	mov    %edx,-0x14(%rbp)
  114ccd:	48 89 f8             	mov    %rdi,%rax
  114cd0:	48 89 f2             	mov    %rsi,%rdx
  114cd3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  114cd7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onAssertError( file, line );
  114cdb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  114cde:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114ce2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114ce6:	e8 a0 00 00 00       	callq  114d8b <onAssertError>
}
  114ceb:	c9                   	leaveq 
  114cec:	c3                   	retq   

0000000000114ced <_d_assert_msg>:

void _d_assert_msg( char[] msg, char[] file, uint line )
  114ced:	55                   	push   %rbp
  114cee:	48 89 e5             	mov    %rsp,%rbp
  114cf1:	48 83 ec 30          	sub    $0x30,%rsp
  114cf5:	49 89 d1             	mov    %rdx,%r9
  114cf8:	44 89 45 dc          	mov    %r8d,-0x24(%rbp)
  114cfc:	48 89 f8             	mov    %rdi,%rax
  114cff:	48 89 f2             	mov    %rsi,%rdx
  114d02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  114d06:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  114d0a:	4c 89 c8             	mov    %r9,%rax
  114d0d:	48 89 ca             	mov    %rcx,%rdx
  114d10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114d14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
    onAssertErrorMsg( file, line, msg );
  114d18:	8b 55 dc             	mov    -0x24(%rbp),%edx
  114d1b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  114d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  114d23:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114d27:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  114d2b:	49 89 c0             	mov    %rax,%r8
  114d2e:	e8 b3 00 00 00       	callq  114de6 <onAssertErrorMsg>
}
  114d33:	c9                   	leaveq 
  114d34:	c3                   	retq   

0000000000114d35 <_d_array_bounds>:

void _d_array_bounds( char[] file, uint line )
  114d35:	55                   	push   %rbp
  114d36:	48 89 e5             	mov    %rsp,%rbp
  114d39:	48 83 ec 20          	sub    $0x20,%rsp
  114d3d:	89 55 ec             	mov    %edx,-0x14(%rbp)
  114d40:	48 89 f8             	mov    %rdi,%rax
  114d43:	48 89 f2             	mov    %rsi,%rdx
  114d46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  114d4a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onArrayBoundsError( file, line );
  114d4e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  114d51:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114d55:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114d59:	e8 08 01 00 00       	callq  114e66 <onArrayBoundsError>
}
  114d5e:	c9                   	leaveq 
  114d5f:	c3                   	retq   

0000000000114d60 <_d_switch_error>:

void _d_switch_error( char[] file, uint line )
  114d60:	55                   	push   %rbp
  114d61:	48 89 e5             	mov    %rsp,%rbp
  114d64:	48 83 ec 20          	sub    $0x20,%rsp
  114d68:	89 55 ec             	mov    %edx,-0x14(%rbp)
  114d6b:	48 89 f8             	mov    %rdi,%rax
  114d6e:	48 89 f2             	mov    %rsi,%rdx
  114d71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  114d75:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
{
    onSwitchError( file, line );
  114d79:	8b 55 ec             	mov    -0x14(%rbp),%edx
  114d7c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114d80:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114d84:	e8 38 01 00 00       	callq  114ec1 <onSwitchError>
}
  114d89:	c9                   	leaveq 
  114d8a:	c3                   	retq   

0000000000114d8b <onAssertError>:

private import vga;

private void onAssertError(char[] file, size_t line)
  114d8b:	55                   	push   %rbp
  114d8c:	48 89 e5             	mov    %rsp,%rbp
  114d8f:	48 83 ec 30          	sub    $0x30,%rsp
  114d93:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114d97:	48 89 f8             	mov    %rdi,%rax
  114d9a:	48 89 f2             	mov    %rsi,%rdx
  114d9d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114da1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	kprintfln("Error in %s, line %d: assertion failed.", file, line);
  114da5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  114da9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114dad:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
  114db4:	00 
  114db5:	48 c7 45 f8 10 ae 11 	movq   $0x11ae10,-0x8(%rbp)
  114dbc:	00 
  114dbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  114dc1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  114dc5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  114dc9:	49 89 c1             	mov    %rax,%r9
  114dcc:	49 89 c8             	mov    %rcx,%r8
  114dcf:	48 89 f9             	mov    %rdi,%rcx
  114dd2:	bf 30 3e 12 00       	mov    $0x123e30,%edi
  114dd7:	b8 00 00 00 00       	mov    $0x0,%eax
  114ddc:	e8 1d 04 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	asm { l: hlt; jmp l; }
  114de1:	f4                   	hlt    
  114de2:	eb fd                	jmp    114de1 <onAssertError+0x56>
}
  114de4:	c9                   	leaveq 
  114de5:	c3                   	retq   

0000000000114de6 <onAssertErrorMsg>:

private void onAssertErrorMsg(char[] file, size_t line, char[] msg)
  114de6:	55                   	push   %rbp
  114de7:	48 89 e5             	mov    %rsp,%rbp
  114dea:	48 83 ec 50          	sub    $0x50,%rsp
  114dee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114df2:	48 89 f8             	mov    %rdi,%rax
  114df5:	48 89 f2             	mov    %rsi,%rdx
  114df8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114dfc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  114e00:	48 89 c8             	mov    %rcx,%rax
  114e03:	4c 89 c2             	mov    %r8,%rdx
  114e06:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  114e0a:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
{
	kprintfln("Error in %s, line %d: assertion failed: \"%s\"", file, line, msg);
  114e0e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  114e12:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  114e16:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  114e1a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114e1e:	48 c7 45 f0 2c 00 00 	movq   $0x2c,-0x10(%rbp)
  114e25:	00 
  114e26:	48 c7 45 f8 38 ae 11 	movq   $0x11ae38,-0x8(%rbp)
  114e2d:	00 
  114e2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  114e32:	4c 8b 55 f0          	mov    -0x10(%rbp),%r10
  114e36:	4c 8b 5d f8          	mov    -0x8(%rbp),%r11
  114e3a:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  114e3f:	48 89 0c 24          	mov    %rcx,(%rsp)
  114e43:	49 89 c1             	mov    %rax,%r9
  114e46:	49 89 f0             	mov    %rsi,%r8
  114e49:	48 89 f9             	mov    %rdi,%rcx
  114e4c:	4c 89 d6             	mov    %r10,%rsi
  114e4f:	4c 89 da             	mov    %r11,%rdx
  114e52:	bf 50 3e 12 00       	mov    $0x123e50,%edi
  114e57:	b8 00 00 00 00       	mov    $0x0,%eax
  114e5c:	e8 9d 03 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	asm { l: hlt; jmp l; }
  114e61:	f4                   	hlt    
  114e62:	eb fd                	jmp    114e61 <onAssertErrorMsg+0x7b>
}
  114e64:	c9                   	leaveq 
  114e65:	c3                   	retq   

0000000000114e66 <onArrayBoundsError>:

private void onArrayBoundsError(char[] file, size_t line)
  114e66:	55                   	push   %rbp
  114e67:	48 89 e5             	mov    %rsp,%rbp
  114e6a:	48 83 ec 30          	sub    $0x30,%rsp
  114e6e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114e72:	48 89 f8             	mov    %rdi,%rax
  114e75:	48 89 f2             	mov    %rsi,%rdx
  114e78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114e7c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	kprintfln("Error in %s, line %d: array index out of bounds.", file, line);
  114e80:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  114e84:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114e88:	48 c7 45 f0 30 00 00 	movq   $0x30,-0x10(%rbp)
  114e8f:	00 
  114e90:	48 c7 45 f8 68 ae 11 	movq   $0x11ae68,-0x8(%rbp)
  114e97:	00 
  114e98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  114e9c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  114ea0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  114ea4:	49 89 c1             	mov    %rax,%r9
  114ea7:	49 89 c8             	mov    %rcx,%r8
  114eaa:	48 89 f9             	mov    %rdi,%rcx
  114ead:	bf 30 3e 12 00       	mov    $0x123e30,%edi
  114eb2:	b8 00 00 00 00       	mov    $0x0,%eax
  114eb7:	e8 42 03 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	asm { l: hlt; jmp l; }
  114ebc:	f4                   	hlt    
  114ebd:	eb fd                	jmp    114ebc <onArrayBoundsError+0x56>
}
  114ebf:	c9                   	leaveq 
  114ec0:	c3                   	retq   

0000000000114ec1 <onSwitchError>:

private void onSwitchError(char[] file, size_t line)
  114ec1:	55                   	push   %rbp
  114ec2:	48 89 e5             	mov    %rsp,%rbp
  114ec5:	48 83 ec 30          	sub    $0x30,%rsp
  114ec9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114ecd:	48 89 f8             	mov    %rdi,%rax
  114ed0:	48 89 f2             	mov    %rsi,%rdx
  114ed3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114ed7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
{
	kprintfln("Error in %s, line %d: switch has no case or default to handle the switched-upon value.", file, line);
  114edb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  114edf:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  114ee3:	48 c7 45 f0 56 00 00 	movq   $0x56,-0x10(%rbp)
  114eea:	00 
  114eeb:	48 c7 45 f8 a0 ae 11 	movq   $0x11aea0,-0x8(%rbp)
  114ef2:	00 
  114ef3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  114ef7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  114efb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  114eff:	49 89 c1             	mov    %rax,%r9
  114f02:	49 89 c8             	mov    %rcx,%r8
  114f05:	48 89 f9             	mov    %rdi,%rcx
  114f08:	bf 30 3e 12 00       	mov    $0x123e30,%edi
  114f0d:	b8 00 00 00 00       	mov    $0x0,%eax
  114f12:	e8 e7 02 ff ff       	callq  1051fe <_D3vga7Console9kprintflnFAaYv>
	asm { l: hlt; jmp l; }
  114f17:	f4                   	hlt    
  114f18:	eb fd                	jmp    114f17 <onSwitchError+0x56>
}
  114f1a:	c9                   	leaveq 
  114f1b:	c3                   	retq   

0000000000114f1c <onFinalizeError>:
  114f1c:	55                   	push   %rbp
  114f1d:	48 89 e5             	mov    %rsp,%rbp
  114f20:	48 83 ec 20          	sub    $0x20,%rsp
  114f24:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114f28:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
}

private void onSwitchError(char[] file, size_t line)
{
	kprintfln("Error in %s, line %d: switch has no case or default to handle the switched-upon value.", file, line);
	asm { l: hlt; jmp l; }
  114f2c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114f33:	00 
  114f34:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114f3b:	00 
  114f3c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114f40:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114f44:	ba 00 00 00 00       	mov    $0x0,%edx
  114f49:	e8 74 fd ff ff       	callq  114cc2 <_d_assert>
  114f4e:	c9                   	leaveq 
  114f4f:	c3                   	retq   

0000000000114f50 <onOutOfMemoryError>:
  114f50:	55                   	push   %rbp
  114f51:	48 89 e5             	mov    %rsp,%rbp
  114f54:	48 83 ec 10          	sub    $0x10,%rsp
  114f58:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114f5f:	00 
  114f60:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114f67:	00 
  114f68:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114f6c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114f70:	ba 00 00 00 00       	mov    $0x0,%edx
  114f75:	e8 48 fd ff ff       	callq  114cc2 <_d_assert>
  114f7a:	c9                   	leaveq 
  114f7b:	c3                   	retq   

0000000000114f7c <onUnicodeError>:
  114f7c:	55                   	push   %rbp
  114f7d:	48 89 e5             	mov    %rsp,%rbp
  114f80:	48 83 ec 30          	sub    $0x30,%rsp
  114f84:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  114f88:	48 89 f8             	mov    %rdi,%rax
  114f8b:	48 89 f2             	mov    %rsi,%rdx
  114f8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  114f92:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  114f96:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114f9d:	00 
  114f9e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114fa5:	00 
  114fa6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114faa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114fae:	ba 00 00 00 00       	mov    $0x0,%edx
  114fb3:	e8 0a fd ff ff       	callq  114cc2 <_d_assert>
  114fb8:	c9                   	leaveq 
  114fb9:	c3                   	retq   

0000000000114fba <_gdc_cleanupException>:
  114fba:	55                   	push   %rbp
  114fbb:	48 89 e5             	mov    %rsp,%rbp
  114fbe:	48 83 ec 10          	sub    $0x10,%rsp
  114fc2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114fc9:	00 
  114fca:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  114fd1:	00 
  114fd2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  114fd6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  114fda:	ba 00 00 00 00       	mov    $0x0,%edx
  114fdf:	e8 de fc ff ff       	callq  114cc2 <_d_assert>
  114fe4:	c9                   	leaveq 
  114fe5:	c3                   	retq   

0000000000114fe6 <_d_throw>:
  114fe6:	55                   	push   %rbp
  114fe7:	48 89 e5             	mov    %rsp,%rbp
  114fea:	48 83 ec 20          	sub    $0x20,%rsp
  114fee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  114ff2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  114ff9:	00 
  114ffa:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115001:	00 
  115002:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115006:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11500a:	ba 00 00 00 00       	mov    $0x0,%edx
  11500f:	e8 ae fc ff ff       	callq  114cc2 <_d_assert>
  115014:	c9                   	leaveq 
  115015:	c3                   	retq   

0000000000115016 <__gdc_personality_v0>:
  115016:	55                   	push   %rbp
  115017:	48 89 e5             	mov    %rsp,%rbp
  11501a:	48 83 ec 10          	sub    $0x10,%rsp
  11501e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115025:	00 
  115026:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11502d:	00 
  11502e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115032:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115036:	ba 00 00 00 00       	mov    $0x0,%edx
  11503b:	e8 82 fc ff ff       	callq  114cc2 <_d_assert>
  115040:	c9                   	leaveq 
  115041:	c3                   	retq   

0000000000115042 <_Unwind_RaiseException>:
  115042:	55                   	push   %rbp
  115043:	48 89 e5             	mov    %rsp,%rbp
  115046:	48 83 ec 10          	sub    $0x10,%rsp
  11504a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115051:	00 
  115052:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115059:	00 
  11505a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11505e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115062:	ba 00 00 00 00       	mov    $0x0,%edx
  115067:	e8 56 fc ff ff       	callq  114cc2 <_d_assert>
  11506c:	c9                   	leaveq 
  11506d:	c3                   	retq   

000000000011506e <_Unwind_ForcedUnwind>:
  11506e:	55                   	push   %rbp
  11506f:	48 89 e5             	mov    %rsp,%rbp
  115072:	48 83 ec 10          	sub    $0x10,%rsp
  115076:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11507d:	00 
  11507e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115085:	00 
  115086:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11508a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11508e:	ba 00 00 00 00       	mov    $0x0,%edx
  115093:	e8 2a fc ff ff       	callq  114cc2 <_d_assert>
  115098:	c9                   	leaveq 
  115099:	c3                   	retq   

000000000011509a <_Unwind_DeleteException>:
  11509a:	55                   	push   %rbp
  11509b:	48 89 e5             	mov    %rsp,%rbp
  11509e:	48 83 ec 10          	sub    $0x10,%rsp
  1150a2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1150a9:	00 
  1150aa:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1150b1:	00 
  1150b2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1150b6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1150ba:	ba 00 00 00 00       	mov    $0x0,%edx
  1150bf:	e8 fe fb ff ff       	callq  114cc2 <_d_assert>
  1150c4:	c9                   	leaveq 
  1150c5:	c3                   	retq   

00000000001150c6 <_Unwind_Resume>:
  1150c6:	55                   	push   %rbp
  1150c7:	48 89 e5             	mov    %rsp,%rbp
  1150ca:	48 83 ec 10          	sub    $0x10,%rsp
  1150ce:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1150d5:	00 
  1150d6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1150dd:	00 
  1150de:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1150e2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1150e6:	ba 00 00 00 00       	mov    $0x0,%edx
  1150eb:	e8 d2 fb ff ff       	callq  114cc2 <_d_assert>
  1150f0:	c9                   	leaveq 
  1150f1:	c3                   	retq   

00000000001150f2 <_Unwind_Resume_or_Rethrow>:
  1150f2:	55                   	push   %rbp
  1150f3:	48 89 e5             	mov    %rsp,%rbp
  1150f6:	48 83 ec 10          	sub    $0x10,%rsp
  1150fa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115101:	00 
  115102:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115109:	00 
  11510a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11510e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115112:	ba 00 00 00 00       	mov    $0x0,%edx
  115117:	e8 a6 fb ff ff       	callq  114cc2 <_d_assert>
  11511c:	c9                   	leaveq 
  11511d:	c3                   	retq   

000000000011511e <_Unwind_Backtrace>:
  11511e:	55                   	push   %rbp
  11511f:	48 89 e5             	mov    %rsp,%rbp
  115122:	48 83 ec 10          	sub    $0x10,%rsp
  115126:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11512d:	00 
  11512e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115135:	00 
  115136:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11513a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11513e:	ba 00 00 00 00       	mov    $0x0,%edx
  115143:	e8 7a fb ff ff       	callq  114cc2 <_d_assert>
  115148:	c9                   	leaveq 
  115149:	c3                   	retq   

000000000011514a <_Unwind_GetGR>:
  11514a:	55                   	push   %rbp
  11514b:	48 89 e5             	mov    %rsp,%rbp
  11514e:	48 83 ec 10          	sub    $0x10,%rsp
  115152:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115159:	00 
  11515a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115161:	00 
  115162:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115166:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11516a:	ba 00 00 00 00       	mov    $0x0,%edx
  11516f:	e8 4e fb ff ff       	callq  114cc2 <_d_assert>
  115174:	c9                   	leaveq 
  115175:	c3                   	retq   

0000000000115176 <_Unwind_SetGR>:
  115176:	55                   	push   %rbp
  115177:	48 89 e5             	mov    %rsp,%rbp
  11517a:	48 83 ec 10          	sub    $0x10,%rsp
  11517e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115185:	00 
  115186:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11518d:	00 
  11518e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115192:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115196:	ba 00 00 00 00       	mov    $0x0,%edx
  11519b:	e8 22 fb ff ff       	callq  114cc2 <_d_assert>
  1151a0:	c9                   	leaveq 
  1151a1:	c3                   	retq   

00000000001151a2 <_Unwind_GetIP>:
  1151a2:	55                   	push   %rbp
  1151a3:	48 89 e5             	mov    %rsp,%rbp
  1151a6:	48 83 ec 10          	sub    $0x10,%rsp
  1151aa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1151b1:	00 
  1151b2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1151b9:	00 
  1151ba:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1151be:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1151c2:	ba 00 00 00 00       	mov    $0x0,%edx
  1151c7:	e8 f6 fa ff ff       	callq  114cc2 <_d_assert>
  1151cc:	c9                   	leaveq 
  1151cd:	c3                   	retq   

00000000001151ce <_Unwind_SetIP>:
  1151ce:	55                   	push   %rbp
  1151cf:	48 89 e5             	mov    %rsp,%rbp
  1151d2:	48 83 ec 10          	sub    $0x10,%rsp
  1151d6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1151dd:	00 
  1151de:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1151e5:	00 
  1151e6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1151ea:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1151ee:	ba 00 00 00 00       	mov    $0x0,%edx
  1151f3:	e8 ca fa ff ff       	callq  114cc2 <_d_assert>
  1151f8:	c9                   	leaveq 
  1151f9:	c3                   	retq   

00000000001151fa <_Unwind_GetCFA>:
  1151fa:	55                   	push   %rbp
  1151fb:	48 89 e5             	mov    %rsp,%rbp
  1151fe:	48 83 ec 10          	sub    $0x10,%rsp
  115202:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115209:	00 
  11520a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115211:	00 
  115212:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115216:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11521a:	ba 00 00 00 00       	mov    $0x0,%edx
  11521f:	e8 9e fa ff ff       	callq  114cc2 <_d_assert>
  115224:	c9                   	leaveq 
  115225:	c3                   	retq   

0000000000115226 <_Unwind_GetLanguageSpecificData>:
  115226:	55                   	push   %rbp
  115227:	48 89 e5             	mov    %rsp,%rbp
  11522a:	48 83 ec 10          	sub    $0x10,%rsp
  11522e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115235:	00 
  115236:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11523d:	00 
  11523e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115242:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115246:	ba 00 00 00 00       	mov    $0x0,%edx
  11524b:	e8 72 fa ff ff       	callq  114cc2 <_d_assert>
  115250:	c9                   	leaveq 
  115251:	c3                   	retq   

0000000000115252 <_Unwind_GetRegionStart>:
  115252:	55                   	push   %rbp
  115253:	48 89 e5             	mov    %rsp,%rbp
  115256:	48 83 ec 10          	sub    $0x10,%rsp
  11525a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115261:	00 
  115262:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115269:	00 
  11526a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11526e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115272:	ba 00 00 00 00       	mov    $0x0,%edx
  115277:	e8 46 fa ff ff       	callq  114cc2 <_d_assert>
  11527c:	c9                   	leaveq 
  11527d:	c3                   	retq   

000000000011527e <_Unwind_SjLj_RaiseException>:
  11527e:	55                   	push   %rbp
  11527f:	48 89 e5             	mov    %rsp,%rbp
  115282:	48 83 ec 10          	sub    $0x10,%rsp
  115286:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11528d:	00 
  11528e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115295:	00 
  115296:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11529a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11529e:	ba 00 00 00 00       	mov    $0x0,%edx
  1152a3:	e8 1a fa ff ff       	callq  114cc2 <_d_assert>
  1152a8:	c9                   	leaveq 
  1152a9:	c3                   	retq   

00000000001152aa <_Unwind_SjLj_ForcedUnwind>:
  1152aa:	55                   	push   %rbp
  1152ab:	48 89 e5             	mov    %rsp,%rbp
  1152ae:	48 83 ec 10          	sub    $0x10,%rsp
  1152b2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1152b9:	00 
  1152ba:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1152c1:	00 
  1152c2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1152c6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1152ca:	ba 00 00 00 00       	mov    $0x0,%edx
  1152cf:	e8 ee f9 ff ff       	callq  114cc2 <_d_assert>
  1152d4:	c9                   	leaveq 
  1152d5:	c3                   	retq   

00000000001152d6 <_Unwind_SjLj_Resume>:
  1152d6:	55                   	push   %rbp
  1152d7:	48 89 e5             	mov    %rsp,%rbp
  1152da:	48 83 ec 10          	sub    $0x10,%rsp
  1152de:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1152e5:	00 
  1152e6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1152ed:	00 
  1152ee:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1152f2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1152f6:	ba 00 00 00 00       	mov    $0x0,%edx
  1152fb:	e8 c2 f9 ff ff       	callq  114cc2 <_d_assert>
  115300:	c9                   	leaveq 
  115301:	c3                   	retq   

0000000000115302 <_Unwind_GetDataRelBase>:
  115302:	55                   	push   %rbp
  115303:	48 89 e5             	mov    %rsp,%rbp
  115306:	48 83 ec 10          	sub    $0x10,%rsp
  11530a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115311:	00 
  115312:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115319:	00 
  11531a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11531e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115322:	ba 00 00 00 00       	mov    $0x0,%edx
  115327:	e8 96 f9 ff ff       	callq  114cc2 <_d_assert>
  11532c:	c9                   	leaveq 
  11532d:	c3                   	retq   

000000000011532e <_Unwind_GetTextRelBase>:
  11532e:	55                   	push   %rbp
  11532f:	48 89 e5             	mov    %rsp,%rbp
  115332:	48 83 ec 10          	sub    $0x10,%rsp
  115336:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11533d:	00 
  11533e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115345:	00 
  115346:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11534a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11534e:	ba 00 00 00 00       	mov    $0x0,%edx
  115353:	e8 6a f9 ff ff       	callq  114cc2 <_d_assert>
  115358:	c9                   	leaveq 
  115359:	c3                   	retq   

000000000011535a <size_of_encoded_value>:
  11535a:	55                   	push   %rbp
  11535b:	48 89 e5             	mov    %rsp,%rbp
  11535e:	48 83 ec 20          	sub    $0x20,%rsp
  115362:	40 88 7d ef          	mov    %dil,-0x11(%rbp)
  115366:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11536d:	00 
  11536e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115375:	00 
  115376:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11537a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11537e:	ba 00 00 00 00       	mov    $0x0,%edx
  115383:	e8 3a f9 ff ff       	callq  114cc2 <_d_assert>
  115388:	c9                   	leaveq 
  115389:	c3                   	retq   

000000000011538a <base_of_encoded_value>:
  11538a:	55                   	push   %rbp
  11538b:	48 89 e5             	mov    %rsp,%rbp
  11538e:	48 83 ec 10          	sub    $0x10,%rsp
  115392:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115399:	00 
  11539a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1153a1:	00 
  1153a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1153a6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1153aa:	ba 00 00 00 00       	mov    $0x0,%edx
  1153af:	e8 0e f9 ff ff       	callq  114cc2 <_d_assert>
  1153b4:	c9                   	leaveq 
  1153b5:	c3                   	retq   

00000000001153b6 <read_uleb128>:
  1153b6:	55                   	push   %rbp
  1153b7:	48 89 e5             	mov    %rsp,%rbp
  1153ba:	48 83 ec 10          	sub    $0x10,%rsp
  1153be:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1153c5:	00 
  1153c6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1153cd:	00 
  1153ce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1153d2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1153d6:	ba 00 00 00 00       	mov    $0x0,%edx
  1153db:	e8 e2 f8 ff ff       	callq  114cc2 <_d_assert>
  1153e0:	c9                   	leaveq 
  1153e1:	c3                   	retq   

00000000001153e2 <read_sleb128>:
  1153e2:	55                   	push   %rbp
  1153e3:	48 89 e5             	mov    %rsp,%rbp
  1153e6:	48 83 ec 10          	sub    $0x10,%rsp
  1153ea:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1153f1:	00 
  1153f2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1153f9:	00 
  1153fa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1153fe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115402:	ba 00 00 00 00       	mov    $0x0,%edx
  115407:	e8 b6 f8 ff ff       	callq  114cc2 <_d_assert>
  11540c:	c9                   	leaveq 
  11540d:	c3                   	retq   

000000000011540e <read_encoded_value_with_base>:
  11540e:	55                   	push   %rbp
  11540f:	48 89 e5             	mov    %rsp,%rbp
  115412:	48 83 ec 10          	sub    $0x10,%rsp
  115416:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11541d:	00 
  11541e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115425:	00 
  115426:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11542a:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11542e:	ba 00 00 00 00       	mov    $0x0,%edx
  115433:	e8 8a f8 ff ff       	callq  114cc2 <_d_assert>
  115438:	c9                   	leaveq 
  115439:	c3                   	retq   

000000000011543a <read_encoded_value>:
  11543a:	55                   	push   %rbp
  11543b:	48 89 e5             	mov    %rsp,%rbp
  11543e:	48 83 ec 10          	sub    $0x10,%rsp
  115442:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115449:	00 
  11544a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115451:	00 
  115452:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115456:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11545a:	ba 00 00 00 00       	mov    $0x0,%edx
  11545f:	e8 5e f8 ff ff       	callq  114cc2 <_d_assert>
  115464:	c9                   	leaveq 
  115465:	c3                   	retq   

0000000000115466 <_aaLen>:
  115466:	55                   	push   %rbp
  115467:	48 89 e5             	mov    %rsp,%rbp
  11546a:	48 83 ec 20          	sub    $0x20,%rsp
  11546e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  115472:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115479:	00 
  11547a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115481:	00 
  115482:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115486:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11548a:	ba 00 00 00 00       	mov    $0x0,%edx
  11548f:	e8 2e f8 ff ff       	callq  114cc2 <_d_assert>
  115494:	c9                   	leaveq 
  115495:	c3                   	retq   

0000000000115496 <_aaGetp>:
  115496:	55                   	push   %rbp
  115497:	48 89 e5             	mov    %rsp,%rbp
  11549a:	48 83 ec 30          	sub    $0x30,%rsp
  11549e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1154a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1154a6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1154aa:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1154ae:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1154b5:	00 
  1154b6:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1154bd:	00 
  1154be:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1154c2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1154c6:	ba 00 00 00 00       	mov    $0x0,%edx
  1154cb:	e8 f2 f7 ff ff       	callq  114cc2 <_d_assert>
  1154d0:	c9                   	leaveq 
  1154d1:	c3                   	retq   

00000000001154d2 <_aaGetRvaluep>:
  1154d2:	55                   	push   %rbp
  1154d3:	48 89 e5             	mov    %rsp,%rbp
  1154d6:	48 83 ec 30          	sub    $0x30,%rsp
  1154da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1154de:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1154e2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1154e6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1154ea:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1154f1:	00 
  1154f2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1154f9:	00 
  1154fa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1154fe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115502:	ba 00 00 00 00       	mov    $0x0,%edx
  115507:	e8 b6 f7 ff ff       	callq  114cc2 <_d_assert>
  11550c:	c9                   	leaveq 
  11550d:	c3                   	retq   

000000000011550e <_aaInp>:
  11550e:	55                   	push   %rbp
  11550f:	48 89 e5             	mov    %rsp,%rbp
  115512:	48 83 ec 30          	sub    $0x30,%rsp
  115516:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11551a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11551e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115522:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115529:	00 
  11552a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115531:	00 
  115532:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115536:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11553a:	ba 00 00 00 00       	mov    $0x0,%edx
  11553f:	e8 7e f7 ff ff       	callq  114cc2 <_d_assert>
  115544:	c9                   	leaveq 
  115545:	c3                   	retq   

0000000000115546 <_aaDelp>:
  115546:	55                   	push   %rbp
  115547:	48 89 e5             	mov    %rsp,%rbp
  11554a:	48 83 ec 30          	sub    $0x30,%rsp
  11554e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  115552:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  115556:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11555a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115561:	00 
  115562:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115569:	00 
  11556a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11556e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115572:	ba 00 00 00 00       	mov    $0x0,%edx
  115577:	e8 46 f7 ff ff       	callq  114cc2 <_d_assert>
  11557c:	c9                   	leaveq 
  11557d:	c3                   	retq   

000000000011557e <_aaValues>:
  11557e:	55                   	push   %rbp
  11557f:	48 89 e5             	mov    %rsp,%rbp
  115582:	48 83 ec 30          	sub    $0x30,%rsp
  115586:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  11558a:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  11558e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  115592:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115599:	00 
  11559a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1155a1:	00 
  1155a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1155a6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1155aa:	ba 00 00 00 00       	mov    $0x0,%edx
  1155af:	e8 0e f7 ff ff       	callq  114cc2 <_d_assert>
  1155b4:	c9                   	leaveq 
  1155b5:	c3                   	retq   

00000000001155b6 <_aaRehash>:
  1155b6:	55                   	push   %rbp
  1155b7:	48 89 e5             	mov    %rsp,%rbp
  1155ba:	48 83 ec 20          	sub    $0x20,%rsp
  1155be:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1155c2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1155c6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1155cd:	00 
  1155ce:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1155d5:	00 
  1155d6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1155da:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1155de:	ba 00 00 00 00       	mov    $0x0,%edx
  1155e3:	e8 da f6 ff ff       	callq  114cc2 <_d_assert>
  1155e8:	c9                   	leaveq 
  1155e9:	c3                   	retq   

00000000001155ea <_aaKeys>:
  1155ea:	55                   	push   %rbp
  1155eb:	48 89 e5             	mov    %rsp,%rbp
  1155ee:	48 83 ec 20          	sub    $0x20,%rsp
  1155f2:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  1155f6:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  1155fa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115601:	00 
  115602:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115609:	00 
  11560a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  11560e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115612:	ba 00 00 00 00       	mov    $0x0,%edx
  115617:	e8 a6 f6 ff ff       	callq  114cc2 <_d_assert>
  11561c:	c9                   	leaveq 
  11561d:	c3                   	retq   

000000000011561e <_aaApply>:
  11561e:	55                   	push   %rbp
  11561f:	48 89 e5             	mov    %rsp,%rbp
  115622:	48 83 ec 30          	sub    $0x30,%rsp
  115626:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11562a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11562e:	48 89 d0             	mov    %rdx,%rax
  115631:	48 89 ca             	mov    %rcx,%rdx
  115634:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115638:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11563c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115643:	00 
  115644:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11564b:	00 
  11564c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115650:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115654:	ba 00 00 00 00       	mov    $0x0,%edx
  115659:	e8 64 f6 ff ff       	callq  114cc2 <_d_assert>
  11565e:	c9                   	leaveq 
  11565f:	c3                   	retq   

0000000000115660 <_aaApply2>:
  115660:	55                   	push   %rbp
  115661:	48 89 e5             	mov    %rsp,%rbp
  115664:	48 83 ec 30          	sub    $0x30,%rsp
  115668:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11566c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  115670:	48 89 d0             	mov    %rdx,%rax
  115673:	48 89 ca             	mov    %rcx,%rdx
  115676:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11567a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11567e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115685:	00 
  115686:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11568d:	00 
  11568e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115692:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115696:	ba 00 00 00 00       	mov    $0x0,%edx
  11569b:	e8 22 f6 ff ff       	callq  114cc2 <_d_assert>
  1156a0:	c9                   	leaveq 
  1156a1:	c3                   	retq   

00000000001156a2 <_d_assocarrayliteralTp>:
  1156a2:	55                   	push   %rbp
  1156a3:	48 89 e5             	mov    %rsp,%rbp
  1156a6:	48 83 ec 30          	sub    $0x30,%rsp
  1156aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  1156ae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  1156b2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1156b6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1156ba:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1156c1:	00 
  1156c2:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1156c9:	00 
  1156ca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1156ce:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1156d2:	ba 00 00 00 00       	mov    $0x0,%edx
  1156d7:	e8 e6 f5 ff ff       	callq  114cc2 <_d_assert>
  1156dc:	c9                   	leaveq 
  1156dd:	c3                   	retq   

00000000001156de <_aApplycw1>:
  1156de:	55                   	push   %rbp
  1156df:	48 89 e5             	mov    %rsp,%rbp
  1156e2:	48 83 ec 30          	sub    $0x30,%rsp
  1156e6:	49 89 d0             	mov    %rdx,%r8
  1156e9:	48 89 f8             	mov    %rdi,%rax
  1156ec:	48 89 f2             	mov    %rsi,%rdx
  1156ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1156f3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1156f7:	4c 89 c0             	mov    %r8,%rax
  1156fa:	48 89 ca             	mov    %rcx,%rdx
  1156fd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115701:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115705:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  11570c:	00 
  11570d:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115714:	00 
  115715:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115719:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11571d:	ba 00 00 00 00       	mov    $0x0,%edx
  115722:	e8 9b f5 ff ff       	callq  114cc2 <_d_assert>
  115727:	c9                   	leaveq 
  115728:	c3                   	retq   

0000000000115729 <_aApplycd1>:
  115729:	55                   	push   %rbp
  11572a:	48 89 e5             	mov    %rsp,%rbp
  11572d:	48 83 ec 30          	sub    $0x30,%rsp
  115731:	49 89 d0             	mov    %rdx,%r8
  115734:	48 89 f8             	mov    %rdi,%rax
  115737:	48 89 f2             	mov    %rsi,%rdx
  11573a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11573e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115742:	4c 89 c0             	mov    %r8,%rax
  115745:	48 89 ca             	mov    %rcx,%rdx
  115748:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11574c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115750:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115757:	00 
  115758:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11575f:	00 
  115760:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115764:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115768:	ba 00 00 00 00       	mov    $0x0,%edx
  11576d:	e8 50 f5 ff ff       	callq  114cc2 <_d_assert>
  115772:	c9                   	leaveq 
  115773:	c3                   	retq   

0000000000115774 <_aApplywc1>:
  115774:	55                   	push   %rbp
  115775:	48 89 e5             	mov    %rsp,%rbp
  115778:	48 83 ec 30          	sub    $0x30,%rsp
  11577c:	49 89 d0             	mov    %rdx,%r8
  11577f:	48 89 f8             	mov    %rdi,%rax
  115782:	48 89 f2             	mov    %rsi,%rdx
  115785:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115789:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11578d:	4c 89 c0             	mov    %r8,%rax
  115790:	48 89 ca             	mov    %rcx,%rdx
  115793:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115797:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11579b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1157a2:	00 
  1157a3:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1157aa:	00 
  1157ab:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1157af:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1157b3:	ba 00 00 00 00       	mov    $0x0,%edx
  1157b8:	e8 05 f5 ff ff       	callq  114cc2 <_d_assert>
  1157bd:	c9                   	leaveq 
  1157be:	c3                   	retq   

00000000001157bf <_aApplywd1>:
  1157bf:	55                   	push   %rbp
  1157c0:	48 89 e5             	mov    %rsp,%rbp
  1157c3:	48 83 ec 30          	sub    $0x30,%rsp
  1157c7:	49 89 d0             	mov    %rdx,%r8
  1157ca:	48 89 f8             	mov    %rdi,%rax
  1157cd:	48 89 f2             	mov    %rsi,%rdx
  1157d0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1157d4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1157d8:	4c 89 c0             	mov    %r8,%rax
  1157db:	48 89 ca             	mov    %rcx,%rdx
  1157de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1157e2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1157e6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1157ed:	00 
  1157ee:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1157f5:	00 
  1157f6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1157fa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1157fe:	ba 00 00 00 00       	mov    $0x0,%edx
  115803:	e8 ba f4 ff ff       	callq  114cc2 <_d_assert>
  115808:	c9                   	leaveq 
  115809:	c3                   	retq   

000000000011580a <_aApplydc1>:
  11580a:	55                   	push   %rbp
  11580b:	48 89 e5             	mov    %rsp,%rbp
  11580e:	48 83 ec 30          	sub    $0x30,%rsp
  115812:	49 89 d0             	mov    %rdx,%r8
  115815:	48 89 f8             	mov    %rdi,%rax
  115818:	48 89 f2             	mov    %rsi,%rdx
  11581b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11581f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115823:	4c 89 c0             	mov    %r8,%rax
  115826:	48 89 ca             	mov    %rcx,%rdx
  115829:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11582d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115831:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115838:	00 
  115839:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115840:	00 
  115841:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115845:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115849:	ba 00 00 00 00       	mov    $0x0,%edx
  11584e:	e8 6f f4 ff ff       	callq  114cc2 <_d_assert>
  115853:	c9                   	leaveq 
  115854:	c3                   	retq   

0000000000115855 <_aApplydw1>:
  115855:	55                   	push   %rbp
  115856:	48 89 e5             	mov    %rsp,%rbp
  115859:	48 83 ec 30          	sub    $0x30,%rsp
  11585d:	49 89 d0             	mov    %rdx,%r8
  115860:	48 89 f8             	mov    %rdi,%rax
  115863:	48 89 f2             	mov    %rsi,%rdx
  115866:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11586a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11586e:	4c 89 c0             	mov    %r8,%rax
  115871:	48 89 ca             	mov    %rcx,%rdx
  115874:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115878:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11587c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115883:	00 
  115884:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11588b:	00 
  11588c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115890:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115894:	ba 00 00 00 00       	mov    $0x0,%edx
  115899:	e8 24 f4 ff ff       	callq  114cc2 <_d_assert>
  11589e:	c9                   	leaveq 
  11589f:	c3                   	retq   

00000000001158a0 <_aApplycw2>:
  1158a0:	55                   	push   %rbp
  1158a1:	48 89 e5             	mov    %rsp,%rbp
  1158a4:	48 83 ec 30          	sub    $0x30,%rsp
  1158a8:	49 89 d0             	mov    %rdx,%r8
  1158ab:	48 89 f8             	mov    %rdi,%rax
  1158ae:	48 89 f2             	mov    %rsi,%rdx
  1158b1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1158b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1158b9:	4c 89 c0             	mov    %r8,%rax
  1158bc:	48 89 ca             	mov    %rcx,%rdx
  1158bf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1158c3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1158c7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1158ce:	00 
  1158cf:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1158d6:	00 
  1158d7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1158db:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1158df:	ba 00 00 00 00       	mov    $0x0,%edx
  1158e4:	e8 d9 f3 ff ff       	callq  114cc2 <_d_assert>
  1158e9:	c9                   	leaveq 
  1158ea:	c3                   	retq   

00000000001158eb <_aApplycd2>:
  1158eb:	55                   	push   %rbp
  1158ec:	48 89 e5             	mov    %rsp,%rbp
  1158ef:	48 83 ec 30          	sub    $0x30,%rsp
  1158f3:	49 89 d0             	mov    %rdx,%r8
  1158f6:	48 89 f8             	mov    %rdi,%rax
  1158f9:	48 89 f2             	mov    %rsi,%rdx
  1158fc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115900:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115904:	4c 89 c0             	mov    %r8,%rax
  115907:	48 89 ca             	mov    %rcx,%rdx
  11590a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  11590e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115912:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115919:	00 
  11591a:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115921:	00 
  115922:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115926:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  11592a:	ba 00 00 00 00       	mov    $0x0,%edx
  11592f:	e8 8e f3 ff ff       	callq  114cc2 <_d_assert>
  115934:	c9                   	leaveq 
  115935:	c3                   	retq   

0000000000115936 <_aApplywc2>:
  115936:	55                   	push   %rbp
  115937:	48 89 e5             	mov    %rsp,%rbp
  11593a:	48 83 ec 30          	sub    $0x30,%rsp
  11593e:	49 89 d0             	mov    %rdx,%r8
  115941:	48 89 f8             	mov    %rdi,%rax
  115944:	48 89 f2             	mov    %rsi,%rdx
  115947:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11594b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11594f:	4c 89 c0             	mov    %r8,%rax
  115952:	48 89 ca             	mov    %rcx,%rdx
  115955:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115959:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11595d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115964:	00 
  115965:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  11596c:	00 
  11596d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115971:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115975:	ba 00 00 00 00       	mov    $0x0,%edx
  11597a:	e8 43 f3 ff ff       	callq  114cc2 <_d_assert>
  11597f:	c9                   	leaveq 
  115980:	c3                   	retq   

0000000000115981 <_aApplywd2>:
  115981:	55                   	push   %rbp
  115982:	48 89 e5             	mov    %rsp,%rbp
  115985:	48 83 ec 30          	sub    $0x30,%rsp
  115989:	49 89 d0             	mov    %rdx,%r8
  11598c:	48 89 f8             	mov    %rdi,%rax
  11598f:	48 89 f2             	mov    %rsi,%rdx
  115992:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115996:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11599a:	4c 89 c0             	mov    %r8,%rax
  11599d:	48 89 ca             	mov    %rcx,%rdx
  1159a0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1159a4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1159a8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1159af:	00 
  1159b0:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  1159b7:	00 
  1159b8:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  1159bc:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  1159c0:	ba 00 00 00 00       	mov    $0x0,%edx
  1159c5:	e8 f8 f2 ff ff       	callq  114cc2 <_d_assert>
  1159ca:	c9                   	leaveq 
  1159cb:	c3                   	retq   

00000000001159cc <_aApplydc2>:
  1159cc:	55                   	push   %rbp
  1159cd:	48 89 e5             	mov    %rsp,%rbp
  1159d0:	48 83 ec 30          	sub    $0x30,%rsp
  1159d4:	49 89 d0             	mov    %rdx,%r8
  1159d7:	48 89 f8             	mov    %rdi,%rax
  1159da:	48 89 f2             	mov    %rsi,%rdx
  1159dd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1159e1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  1159e5:	4c 89 c0             	mov    %r8,%rax
  1159e8:	48 89 ca             	mov    %rcx,%rdx
  1159eb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1159ef:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1159f3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  1159fa:	00 
  1159fb:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115a02:	00 
  115a03:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115a07:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115a0b:	ba 00 00 00 00       	mov    $0x0,%edx
  115a10:	e8 ad f2 ff ff       	callq  114cc2 <_d_assert>
  115a15:	c9                   	leaveq 
  115a16:	c3                   	retq   

0000000000115a17 <_aApplydw2>:
  115a17:	55                   	push   %rbp
  115a18:	48 89 e5             	mov    %rsp,%rbp
  115a1b:	48 83 ec 30          	sub    $0x30,%rsp
  115a1f:	49 89 d0             	mov    %rdx,%r8
  115a22:	48 89 f8             	mov    %rdi,%rax
  115a25:	48 89 f2             	mov    %rsi,%rdx
  115a28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115a2c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115a30:	4c 89 c0             	mov    %r8,%rax
  115a33:	48 89 ca             	mov    %rcx,%rdx
  115a36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115a3a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115a3e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115a45:	00 
  115a46:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115a4d:	00 
  115a4e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115a52:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115a56:	ba 00 00 00 00       	mov    $0x0,%edx
  115a5b:	e8 62 f2 ff ff       	callq  114cc2 <_d_assert>
  115a60:	c9                   	leaveq 
  115a61:	c3                   	retq   

0000000000115a62 <_aApplyRcw1>:
  115a62:	55                   	push   %rbp
  115a63:	48 89 e5             	mov    %rsp,%rbp
  115a66:	48 83 ec 30          	sub    $0x30,%rsp
  115a6a:	49 89 d0             	mov    %rdx,%r8
  115a6d:	48 89 f8             	mov    %rdi,%rax
  115a70:	48 89 f2             	mov    %rsi,%rdx
  115a73:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115a77:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115a7b:	4c 89 c0             	mov    %r8,%rax
  115a7e:	48 89 ca             	mov    %rcx,%rdx
  115a81:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115a85:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115a89:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115a90:	00 
  115a91:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115a98:	00 
  115a99:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115a9d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115aa1:	ba 00 00 00 00       	mov    $0x0,%edx
  115aa6:	e8 17 f2 ff ff       	callq  114cc2 <_d_assert>
  115aab:	c9                   	leaveq 
  115aac:	c3                   	retq   

0000000000115aad <_aApplyRcd1>:
  115aad:	55                   	push   %rbp
  115aae:	48 89 e5             	mov    %rsp,%rbp
  115ab1:	48 83 ec 30          	sub    $0x30,%rsp
  115ab5:	49 89 d0             	mov    %rdx,%r8
  115ab8:	48 89 f8             	mov    %rdi,%rax
  115abb:	48 89 f2             	mov    %rsi,%rdx
  115abe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115ac2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115ac6:	4c 89 c0             	mov    %r8,%rax
  115ac9:	48 89 ca             	mov    %rcx,%rdx
  115acc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115ad0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115ad4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115adb:	00 
  115adc:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115ae3:	00 
  115ae4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115ae8:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115aec:	ba 00 00 00 00       	mov    $0x0,%edx
  115af1:	e8 cc f1 ff ff       	callq  114cc2 <_d_assert>
  115af6:	c9                   	leaveq 
  115af7:	c3                   	retq   

0000000000115af8 <_aApplyRwc1>:
  115af8:	55                   	push   %rbp
  115af9:	48 89 e5             	mov    %rsp,%rbp
  115afc:	48 83 ec 30          	sub    $0x30,%rsp
  115b00:	49 89 d0             	mov    %rdx,%r8
  115b03:	48 89 f8             	mov    %rdi,%rax
  115b06:	48 89 f2             	mov    %rsi,%rdx
  115b09:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115b0d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115b11:	4c 89 c0             	mov    %r8,%rax
  115b14:	48 89 ca             	mov    %rcx,%rdx
  115b17:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115b1b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115b1f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115b26:	00 
  115b27:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115b2e:	00 
  115b2f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115b33:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115b37:	ba 00 00 00 00       	mov    $0x0,%edx
  115b3c:	e8 81 f1 ff ff       	callq  114cc2 <_d_assert>
  115b41:	c9                   	leaveq 
  115b42:	c3                   	retq   

0000000000115b43 <_aApplyRwd1>:
  115b43:	55                   	push   %rbp
  115b44:	48 89 e5             	mov    %rsp,%rbp
  115b47:	48 83 ec 30          	sub    $0x30,%rsp
  115b4b:	49 89 d0             	mov    %rdx,%r8
  115b4e:	48 89 f8             	mov    %rdi,%rax
  115b51:	48 89 f2             	mov    %rsi,%rdx
  115b54:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115b58:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115b5c:	4c 89 c0             	mov    %r8,%rax
  115b5f:	48 89 ca             	mov    %rcx,%rdx
  115b62:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115b66:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115b6a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115b71:	00 
  115b72:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115b79:	00 
  115b7a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115b7e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115b82:	ba 00 00 00 00       	mov    $0x0,%edx
  115b87:	e8 36 f1 ff ff       	callq  114cc2 <_d_assert>
  115b8c:	c9                   	leaveq 
  115b8d:	c3                   	retq   

0000000000115b8e <_aApplyRdc1>:
  115b8e:	55                   	push   %rbp
  115b8f:	48 89 e5             	mov    %rsp,%rbp
  115b92:	48 83 ec 30          	sub    $0x30,%rsp
  115b96:	49 89 d0             	mov    %rdx,%r8
  115b99:	48 89 f8             	mov    %rdi,%rax
  115b9c:	48 89 f2             	mov    %rsi,%rdx
  115b9f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115ba3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115ba7:	4c 89 c0             	mov    %r8,%rax
  115baa:	48 89 ca             	mov    %rcx,%rdx
  115bad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115bb1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115bb5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115bbc:	00 
  115bbd:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115bc4:	00 
  115bc5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115bc9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115bcd:	ba 00 00 00 00       	mov    $0x0,%edx
  115bd2:	e8 eb f0 ff ff       	callq  114cc2 <_d_assert>
  115bd7:	c9                   	leaveq 
  115bd8:	c3                   	retq   

0000000000115bd9 <_aApplyRdw1>:
  115bd9:	55                   	push   %rbp
  115bda:	48 89 e5             	mov    %rsp,%rbp
  115bdd:	48 83 ec 30          	sub    $0x30,%rsp
  115be1:	49 89 d0             	mov    %rdx,%r8
  115be4:	48 89 f8             	mov    %rdi,%rax
  115be7:	48 89 f2             	mov    %rsi,%rdx
  115bea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115bee:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115bf2:	4c 89 c0             	mov    %r8,%rax
  115bf5:	48 89 ca             	mov    %rcx,%rdx
  115bf8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115bfc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115c00:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115c07:	00 
  115c08:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115c0f:	00 
  115c10:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115c14:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115c18:	ba 00 00 00 00       	mov    $0x0,%edx
  115c1d:	e8 a0 f0 ff ff       	callq  114cc2 <_d_assert>
  115c22:	c9                   	leaveq 
  115c23:	c3                   	retq   

0000000000115c24 <_aApplyRcw2>:
  115c24:	55                   	push   %rbp
  115c25:	48 89 e5             	mov    %rsp,%rbp
  115c28:	48 83 ec 30          	sub    $0x30,%rsp
  115c2c:	49 89 d0             	mov    %rdx,%r8
  115c2f:	48 89 f8             	mov    %rdi,%rax
  115c32:	48 89 f2             	mov    %rsi,%rdx
  115c35:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115c39:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115c3d:	4c 89 c0             	mov    %r8,%rax
  115c40:	48 89 ca             	mov    %rcx,%rdx
  115c43:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115c47:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115c4b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115c52:	00 
  115c53:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115c5a:	00 
  115c5b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115c5f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115c63:	ba 00 00 00 00       	mov    $0x0,%edx
  115c68:	e8 55 f0 ff ff       	callq  114cc2 <_d_assert>
  115c6d:	c9                   	leaveq 
  115c6e:	c3                   	retq   

0000000000115c6f <_aApplyRcd2>:
  115c6f:	55                   	push   %rbp
  115c70:	48 89 e5             	mov    %rsp,%rbp
  115c73:	48 83 ec 30          	sub    $0x30,%rsp
  115c77:	49 89 d0             	mov    %rdx,%r8
  115c7a:	48 89 f8             	mov    %rdi,%rax
  115c7d:	48 89 f2             	mov    %rsi,%rdx
  115c80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115c84:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115c88:	4c 89 c0             	mov    %r8,%rax
  115c8b:	48 89 ca             	mov    %rcx,%rdx
  115c8e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115c92:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115c96:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115c9d:	00 
  115c9e:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115ca5:	00 
  115ca6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115caa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115cae:	ba 00 00 00 00       	mov    $0x0,%edx
  115cb3:	e8 0a f0 ff ff       	callq  114cc2 <_d_assert>
  115cb8:	c9                   	leaveq 
  115cb9:	c3                   	retq   

0000000000115cba <_aApplyRwc2>:
  115cba:	55                   	push   %rbp
  115cbb:	48 89 e5             	mov    %rsp,%rbp
  115cbe:	48 83 ec 30          	sub    $0x30,%rsp
  115cc2:	49 89 d0             	mov    %rdx,%r8
  115cc5:	48 89 f8             	mov    %rdi,%rax
  115cc8:	48 89 f2             	mov    %rsi,%rdx
  115ccb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115ccf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115cd3:	4c 89 c0             	mov    %r8,%rax
  115cd6:	48 89 ca             	mov    %rcx,%rdx
  115cd9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115cdd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115ce1:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115ce8:	00 
  115ce9:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115cf0:	00 
  115cf1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115cf5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115cf9:	ba 00 00 00 00       	mov    $0x0,%edx
  115cfe:	e8 bf ef ff ff       	callq  114cc2 <_d_assert>
  115d03:	c9                   	leaveq 
  115d04:	c3                   	retq   

0000000000115d05 <_aApplyRwd2>:
  115d05:	55                   	push   %rbp
  115d06:	48 89 e5             	mov    %rsp,%rbp
  115d09:	48 83 ec 30          	sub    $0x30,%rsp
  115d0d:	49 89 d0             	mov    %rdx,%r8
  115d10:	48 89 f8             	mov    %rdi,%rax
  115d13:	48 89 f2             	mov    %rsi,%rdx
  115d16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115d1a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115d1e:	4c 89 c0             	mov    %r8,%rax
  115d21:	48 89 ca             	mov    %rcx,%rdx
  115d24:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115d28:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115d2c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115d33:	00 
  115d34:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115d3b:	00 
  115d3c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115d40:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115d44:	ba 00 00 00 00       	mov    $0x0,%edx
  115d49:	e8 74 ef ff ff       	callq  114cc2 <_d_assert>
  115d4e:	c9                   	leaveq 
  115d4f:	c3                   	retq   

0000000000115d50 <_aApplyRdc2>:
  115d50:	55                   	push   %rbp
  115d51:	48 89 e5             	mov    %rsp,%rbp
  115d54:	48 83 ec 30          	sub    $0x30,%rsp
  115d58:	49 89 d0             	mov    %rdx,%r8
  115d5b:	48 89 f8             	mov    %rdi,%rax
  115d5e:	48 89 f2             	mov    %rsi,%rdx
  115d61:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115d65:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115d69:	4c 89 c0             	mov    %r8,%rax
  115d6c:	48 89 ca             	mov    %rcx,%rdx
  115d6f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115d73:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115d77:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115d7e:	00 
  115d7f:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115d86:	00 
  115d87:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115d8b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115d8f:	ba 00 00 00 00       	mov    $0x0,%edx
  115d94:	e8 29 ef ff ff       	callq  114cc2 <_d_assert>
  115d99:	c9                   	leaveq 
  115d9a:	c3                   	retq   

0000000000115d9b <_aApplyRdw2>:
  115d9b:	55                   	push   %rbp
  115d9c:	48 89 e5             	mov    %rsp,%rbp
  115d9f:	48 83 ec 30          	sub    $0x30,%rsp
  115da3:	49 89 d0             	mov    %rdx,%r8
  115da6:	48 89 f8             	mov    %rdi,%rax
  115da9:	48 89 f2             	mov    %rsi,%rdx
  115dac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115db0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115db4:	4c 89 c0             	mov    %r8,%rax
  115db7:	48 89 ca             	mov    %rcx,%rdx
  115dba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115dbe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  115dc2:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115dc9:	00 
  115dca:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115dd1:	00 
  115dd2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115dd6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115dda:	ba 00 00 00 00       	mov    $0x0,%edx
  115ddf:	e8 de ee ff ff       	callq  114cc2 <_d_assert>
  115de4:	c9                   	leaveq 
  115de5:	c3                   	retq   

0000000000115de6 <_adSortChar>:
  115de6:	55                   	push   %rbp
  115de7:	48 89 e5             	mov    %rsp,%rbp
  115dea:	48 83 ec 20          	sub    $0x20,%rsp
  115dee:	48 89 f0             	mov    %rsi,%rax
  115df1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115df5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115df9:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115e00:	00 
  115e01:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115e08:	00 
  115e09:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115e0d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115e11:	ba 00 00 00 00       	mov    $0x0,%edx
  115e16:	e8 a7 ee ff ff       	callq  114cc2 <_d_assert>
  115e1b:	c9                   	leaveq 
  115e1c:	c3                   	retq   

0000000000115e1d <_adSortWchar>:
  115e1d:	55                   	push   %rbp
  115e1e:	48 89 e5             	mov    %rsp,%rbp
  115e21:	48 83 ec 20          	sub    $0x20,%rsp
  115e25:	48 89 f0             	mov    %rsi,%rax
  115e28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  115e2c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  115e30:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  115e37:	00 
  115e38:	48 c7 45 f8 03 ae 11 	movq   $0x11ae03,-0x8(%rbp)
  115e3f:	00 
  115e40:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  115e44:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  115e48:	ba 00 00 00 00       	mov    $0x0,%edx
  115e4d:	e8 70 ee ff ff       	callq  114cc2 <_d_assert>
  115e52:	c9                   	leaveq 
  115e53:	c3                   	retq   

0000000000115e54 <_adReverseChar>:
	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
	4,4,4,4,4,4,4,4,5,5,5,5,6,6,0xFF,0xFF,
];

Array _adReverseChar(char[] a)
  115e54:	55                   	push   %rbp
  115e55:	48 89 e5             	mov    %rsp,%rbp
  115e58:	53                   	push   %rbx
  115e59:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  115e60:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  115e67:	48 89 f0             	mov    %rsi,%rax
  115e6a:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  115e71:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
{
	if(a.length > 1)
  115e78:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  115e7f:	48 83 f8 01          	cmp    $0x1,%rax
  115e83:	0f 86 5a 03 00 00    	jbe    1161e3 <_adReverseChar+0x38f>
	{
		char[6] tmp;
  115e89:	48 c7 85 50 ff ff ff 	movq   $0x6,-0xb0(%rbp)
  115e90:	06 00 00 00 
  115e94:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  115e9b:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  115ea2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  115ea9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  115ead:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  115eb4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  115eb8:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  115ebd:	0f 95 c0             	setne  %al
  115ec0:	83 f0 01             	xor    $0x1,%eax
  115ec3:	84 c0                	test   %al,%al
  115ec5:	75 11                	jne    115ed8 <_adReverseChar+0x84>
  115ec7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  115ecb:	c6 00 ff             	movb   $0xff,(%rax)
  115ece:	48 ff 45 b8          	incq   -0x48(%rbp)
  115ed2:	48 ff 4d c0          	decq   -0x40(%rbp)
  115ed6:	eb e0                	jmp    115eb8 <_adReverseChar+0x64>
		char[6] tmplo;
  115ed8:	48 c7 85 60 ff ff ff 	movq   $0x6,-0xa0(%rbp)
  115edf:	06 00 00 00 
  115ee3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  115eea:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  115ef1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  115ef8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  115efc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  115f03:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  115f07:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  115f0c:	0f 95 c0             	setne  %al
  115f0f:	83 f0 01             	xor    $0x1,%eax
  115f12:	84 c0                	test   %al,%al
  115f14:	75 11                	jne    115f27 <_adReverseChar+0xd3>
  115f16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  115f1a:	c6 00 ff             	movb   $0xff,(%rax)
  115f1d:	48 ff 45 c8          	incq   -0x38(%rbp)
  115f21:	48 ff 4d d0          	decq   -0x30(%rbp)
  115f25:	eb e0                	jmp    115f07 <_adReverseChar+0xb3>
		char* lo = a.ptr;
  115f27:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  115f2e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		char* hi = &a[length - 1];
  115f32:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  115f39:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  115f3d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  115f44:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  115f4b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  115f4f:	48 ff ca             	dec    %rdx
  115f52:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  115f59:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  115f60:	48 39 85 00 ff ff ff 	cmp    %rax,-0x100(%rbp)
  115f67:	73 10                	jae    115f79 <_adReverseChar+0x125>
  115f69:	48 8b 8d 00 ff ff ff 	mov    -0x100(%rbp),%rcx
  115f70:	48 89 8d f8 fe ff ff 	mov    %rcx,-0x108(%rbp)
  115f77:	eb 2e                	jmp    115fa7 <_adReverseChar+0x153>
  115f79:	48 c7 85 70 ff ff ff 	movq   $0x8,-0x90(%rbp)
  115f80:	08 00 00 00 
  115f84:	48 c7 85 78 ff ff ff 	movq   $0x11ae04,-0x88(%rbp)
  115f8b:	04 ae 11 00 
  115f8f:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  115f96:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  115f9d:	ba 39 02 00 00       	mov    $0x239,%edx
  115fa2:	e8 8e ed ff ff       	callq  114d35 <_d_array_bounds>
  115fa7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  115fae:	48 03 85 f0 fe ff ff 	add    -0x110(%rbp),%rax
  115fb5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  115fb9:	eb 00                	jmp    115fbb <_adReverseChar+0x167>

		while (lo < hi)
  115fbb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  115fbf:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  115fc3:	0f 92 c0             	setb   %al
  115fc6:	83 f0 01             	xor    $0x1,%eax
  115fc9:	84 c0                	test   %al,%al
  115fcb:	0f 85 12 02 00 00    	jne    1161e3 <_adReverseChar+0x38f>
		{	auto clo = *lo;
  115fd1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  115fd5:	0f b6 00             	movzbl (%rax),%eax
  115fd8:	88 45 ef             	mov    %al,-0x11(%rbp)
			auto chi = *hi;
  115fdb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  115fdf:	0f b6 00             	movzbl (%rax),%eax
  115fe2:	88 45 ee             	mov    %al,-0x12(%rbp)

			if (clo <= 0x7F && chi <= 0x7F)
  115fe5:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  115fe9:	83 f8 7f             	cmp    $0x7f,%eax
  115fec:	7f 27                	jg     116015 <_adReverseChar+0x1c1>
  115fee:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  115ff2:	83 f8 7f             	cmp    $0x7f,%eax
  115ff5:	7f 1e                	jg     116015 <_adReverseChar+0x1c1>
			{
				*lo = chi;
  115ff7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  115ffb:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  115fff:	88 02                	mov    %al,(%rdx)
				*hi = clo;
  116001:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  116005:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  116009:	88 02                	mov    %al,(%rdx)
				lo++;
  11600b:	48 ff 45 b0          	incq   -0x50(%rbp)
				hi--;
  11600f:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  116013:	eb a6                	jmp    115fbb <_adReverseChar+0x167>
			}

			uint stridelo = UTF8stride[clo];
  116015:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  116019:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  11601f:	73 0d                	jae    11602e <_adReverseChar+0x1da>
  116021:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  116025:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
  11602c:	eb 22                	jmp    116050 <_adReverseChar+0x1fc>
  11602e:	48 c7 45 80 08 00 00 	movq   $0x8,-0x80(%rbp)
  116035:	00 
  116036:	48 c7 45 88 04 ae 11 	movq   $0x11ae04,-0x78(%rbp)
  11603d:	00 
  11603e:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  116042:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  116046:	ba 48 02 00 00       	mov    $0x248,%edx
  11604b:	e8 e5 ec ff ff       	callq  114d35 <_d_array_bounds>
  116050:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  116057:	48 05 80 39 12 00    	add    $0x123980,%rax
  11605d:	0f b6 00             	movzbl (%rax),%eax
  116060:	0f b6 c0             	movzbl %al,%eax
  116063:	89 45 e8             	mov    %eax,-0x18(%rbp)

			uint stridehi = 1;
  116066:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  11606d:	eb 00                	jmp    11606f <_adReverseChar+0x21b>
			while ((chi & 0xC0) == 0x80)
  11606f:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  116073:	25 c0 00 00 00       	and    $0xc0,%eax
  116078:	3d 80 00 00 00       	cmp    $0x80,%eax
  11607d:	0f 94 c0             	sete   %al
  116080:	83 f0 01             	xor    $0x1,%eax
  116083:	84 c0                	test   %al,%al
  116085:	75 3f                	jne    1160c6 <_adReverseChar+0x272>
			{
				chi = *--hi;
  116087:	48 ff 4d a8          	decq   -0x58(%rbp)
  11608b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  11608f:	0f b6 00             	movzbl (%rax),%eax
  116092:	88 45 ee             	mov    %al,-0x12(%rbp)
				stridehi++;
  116095:	ff 45 e4             	incl   -0x1c(%rbp)
				assert(hi >= lo);
  116098:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  11609c:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  1160a0:	73 cd                	jae    11606f <_adReverseChar+0x21b>
  1160a2:	48 c7 45 90 08 00 00 	movq   $0x8,-0x70(%rbp)
  1160a9:	00 
  1160aa:	48 c7 45 98 04 ae 11 	movq   $0x11ae04,-0x68(%rbp)
  1160b1:	00 
  1160b2:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  1160b6:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  1160ba:	ba 4f 02 00 00       	mov    $0x24f,%edx
  1160bf:	e8 fe eb ff ff       	callq  114cc2 <_d_assert>
  1160c4:	eb a9                	jmp    11606f <_adReverseChar+0x21b>
			}
			if (lo == hi)
  1160c6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  1160ca:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  1160ce:	0f 84 0f 01 00 00    	je     1161e3 <_adReverseChar+0x38f>
				break;

			if (stridelo == stridehi)
  1160d4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  1160d7:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  1160da:	75 46                	jne    116122 <_adReverseChar+0x2ce>
			{

				memcpy(tmp.ptr, lo, stridelo);
  1160dc:	8b 55 e8             	mov    -0x18(%rbp),%edx
  1160df:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  1160e3:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  1160ea:	e8 cd f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
				memcpy(lo, hi, stridelo);
  1160ef:	8b 55 e8             	mov    -0x18(%rbp),%edx
  1160f2:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  1160f6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  1160fa:	e8 bd f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
				memcpy(hi, tmp.ptr, stridelo);
  1160ff:	8b 55 e8             	mov    -0x18(%rbp),%edx
  116102:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  116109:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  11610d:	e8 aa f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
				lo += stridelo;
  116112:	8b 45 e8             	mov    -0x18(%rbp),%eax
  116115:	48 01 45 b0          	add    %rax,-0x50(%rbp)
				hi--;
  116119:	48 ff 4d a8          	decq   -0x58(%rbp)
				continue;
  11611d:	e9 99 fe ff ff       	jmpq   115fbb <_adReverseChar+0x167>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi);
  116122:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  116125:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  116129:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  116130:	e8 87 f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(tmplo.ptr, lo, stridelo);
  116135:	8b 55 e8             	mov    -0x18(%rbp),%edx
  116138:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  11613c:	48 8d bd 30 ff ff ff 	lea    -0xd0(%rbp),%rdi
  116143:	e8 74 f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memmove(lo + stridehi, lo + stridelo , (hi - lo) - stridelo);
  116148:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  11614c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  116150:	48 29 d0             	sub    %rdx,%rax
  116153:	48 89 c2             	mov    %rax,%rdx
  116156:	8b 45 e8             	mov    -0x18(%rbp),%eax
  116159:	48 89 d1             	mov    %rdx,%rcx
  11615c:	48 29 c1             	sub    %rax,%rcx
  11615f:	48 89 c8             	mov    %rcx,%rax
  116162:	48 89 c2             	mov    %rax,%rdx
  116165:	8b 45 e8             	mov    -0x18(%rbp),%eax
  116168:	48 89 c6             	mov    %rax,%rsi
  11616b:	48 03 75 b0          	add    -0x50(%rbp),%rsi
  11616f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  116172:	48 89 c7             	mov    %rax,%rdi
  116175:	48 03 7d b0          	add    -0x50(%rbp),%rdi
  116179:	e8 3e f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(lo, tmp.ptr, stridehi);
  11617e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  116181:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
  116188:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  11618c:	e8 2b f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, tmplo.ptr, stridelo);
  116191:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  116194:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  116197:	48 98                	cltq   
  116199:	48 89 c2             	mov    %rax,%rdx
  11619c:	48 03 55 a8          	add    -0x58(%rbp),%rdx
  1161a0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  1161a3:	48 98                	cltq   
  1161a5:	48 89 d7             	mov    %rdx,%rdi
  1161a8:	48 29 c7             	sub    %rax,%rdi
  1161ab:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  1161b2:	48 89 ca             	mov    %rcx,%rdx
  1161b5:	e8 02 f5 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>

			lo += stridehi;
  1161ba:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  1161bd:	48 01 45 b0          	add    %rax,-0x50(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  1161c1:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  1161c5:	48 ff c9             	dec    %rcx
  1161c8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  1161cb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  1161ce:	89 d3                	mov    %edx,%ebx
  1161d0:	29 c3                	sub    %eax,%ebx
  1161d2:	89 d8                	mov    %ebx,%eax
  1161d4:	48 98                	cltq   
  1161d6:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  1161da:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  1161de:	e9 d8 fd ff ff       	jmpq   115fbb <_adReverseChar+0x167>
		}
	}

	Array aaa = *cast(Array*)(&a);
  1161e3:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  1161ea:	48 8b 02             	mov    (%rdx),%rax
  1161ed:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  1161f4:	48 8b 42 08          	mov    0x8(%rdx),%rax
  1161f8:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	return aaa;
  1161ff:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  116206:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  11620d:	48 89 02             	mov    %rax,(%rdx)
  116210:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  116217:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  11621e:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  116222:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  116229:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  116230:	5b                   	pop    %rbx
  116231:	c9                   	leaveq 
  116232:	c3                   	retq   

0000000000116233 <_adReverseWchar>:

Array _adReverseWchar(wchar[] a)
  116233:	55                   	push   %rbp
  116234:	48 89 e5             	mov    %rsp,%rbp
  116237:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  11623e:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  116245:	48 89 f0             	mov    %rsi,%rax
  116248:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  11624f:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
{
	if (a.length > 1)
  116256:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  11625d:	48 83 f8 01          	cmp    $0x1,%rax
  116261:	0f 86 3f 03 00 00    	jbe    1165a6 <_adReverseWchar+0x373>
	{
		wchar[2] tmp;
  116267:	48 c7 85 70 ff ff ff 	movq   $0x2,-0x90(%rbp)
  11626e:	02 00 00 00 
  116272:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  116279:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  116280:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  116287:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  11628b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  116292:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  116296:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  11629b:	0f 95 c0             	setne  %al
  11629e:	83 f0 01             	xor    $0x1,%eax
  1162a1:	84 c0                	test   %al,%al
  1162a3:	75 14                	jne    1162b9 <_adReverseWchar+0x86>
  1162a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1162a9:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
  1162ae:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  1162b3:	48 ff 4d e0          	decq   -0x20(%rbp)
  1162b7:	eb dd                	jmp    116296 <_adReverseWchar+0x63>
		wchar* lo = a.ptr;
  1162b9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  1162c0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		wchar* hi = &a[length - 1];
  1162c4:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  1162cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1162cf:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  1162d6:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  1162dd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1162e1:	48 ff ca             	dec    %rdx
  1162e4:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
  1162eb:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  1162f2:	48 39 85 30 ff ff ff 	cmp    %rax,-0xd0(%rbp)
  1162f9:	73 10                	jae    11630b <_adReverseWchar+0xd8>
  1162fb:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  116302:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  116309:	eb 22                	jmp    11632d <_adReverseWchar+0xfa>
  11630b:	48 c7 45 80 08 00 00 	movq   $0x8,-0x80(%rbp)
  116312:	00 
  116313:	48 c7 45 88 04 ae 11 	movq   $0x11ae04,-0x78(%rbp)
  11631a:	00 
  11631b:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
  11631f:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  116323:	ba 76 02 00 00       	mov    $0x276,%edx
  116328:	e8 08 ea ff ff       	callq  114d35 <_d_array_bounds>
  11632d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  116334:	48 01 c0             	add    %rax,%rax
  116337:	48 03 85 20 ff ff ff 	add    -0xe0(%rbp),%rax
  11633e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  116342:	eb 00                	jmp    116344 <_adReverseWchar+0x111>

		while (lo < hi)
  116344:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  116348:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  11634c:	0f 92 c0             	setb   %al
  11634f:	83 f0 01             	xor    $0x1,%eax
  116352:	84 c0                	test   %al,%al
  116354:	0f 85 4c 02 00 00    	jne    1165a6 <_adReverseWchar+0x373>
		{	auto clo = *lo;
  11635a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11635e:	0f b7 00             	movzwl (%rax),%eax
  116361:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
			auto chi = *hi;
  116365:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116369:	0f b7 00             	movzwl (%rax),%eax
  11636c:	66 89 45 f8          	mov    %ax,-0x8(%rbp)

			if ((clo < 0xD800 || clo > 0xDFFF) &&
  116370:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  116374:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  116379:	7c 0b                	jl     116386 <_adReverseWchar+0x153>
  11637b:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  11637f:	3d ff df 00 00       	cmp    $0xdfff,%eax
  116384:	7e 37                	jle    1163bd <_adReverseWchar+0x18a>
  116386:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  11638a:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  11638f:	7c 0b                	jl     11639c <_adReverseWchar+0x169>
  116391:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  116395:	3d ff df 00 00       	cmp    $0xdfff,%eax
  11639a:	7e 21                	jle    1163bd <_adReverseWchar+0x18a>
				(chi < 0xD800 || chi > 0xDFFF))
			{
				*lo = chi;
  11639c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  1163a0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  1163a3:	66 89 02             	mov    %ax,(%rdx)
				*hi = clo;
  1163a6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  1163aa:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  1163ae:	66 89 02             	mov    %ax,(%rdx)
				lo++;
  1163b1:	48 83 45 d0 02       	addq   $0x2,-0x30(%rbp)
				hi--;
  1163b6:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  1163bb:	eb 87                	jmp    116344 <_adReverseWchar+0x111>
			}

			int stridelo = 1 + (clo >= 0xD800 && clo <= 0xDBFF);
  1163bd:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  1163c1:	3d 00 d8 00 00       	cmp    $0xd800,%eax
  1163c6:	7c 14                	jl     1163dc <_adReverseWchar+0x1a9>
  1163c8:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  1163cc:	3d ff db 00 00       	cmp    $0xdbff,%eax
  1163d1:	7f 09                	jg     1163dc <_adReverseWchar+0x1a9>
  1163d3:	c6 85 3f ff ff ff 01 	movb   $0x1,-0xc1(%rbp)
  1163da:	eb 07                	jmp    1163e3 <_adReverseWchar+0x1b0>
  1163dc:	c6 85 3f ff ff ff 00 	movb   $0x0,-0xc1(%rbp)
  1163e3:	0f b6 85 3f ff ff ff 	movzbl -0xc1(%rbp),%eax
  1163ea:	ff c0                	inc    %eax
  1163ec:	89 45 f4             	mov    %eax,-0xc(%rbp)

			int stridehi = 1;
  1163ef:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
			if (chi >= 0xDC00 && chi <= 0xDFFF)
  1163f6:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  1163fa:	3d 00 dc 00 00       	cmp    $0xdc00,%eax
  1163ff:	7c 4a                	jl     11644b <_adReverseWchar+0x218>
  116401:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  116405:	3d ff df 00 00       	cmp    $0xdfff,%eax
  11640a:	7f 3f                	jg     11644b <_adReverseWchar+0x218>
			{
				chi = *--hi;
  11640c:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
  116411:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116415:	0f b7 00             	movzwl (%rax),%eax
  116418:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
				stridehi++;
  11641c:	ff 45 f0             	incl   -0x10(%rbp)
				assert(hi >= lo);
  11641f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116423:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  116427:	73 22                	jae    11644b <_adReverseWchar+0x218>
  116429:	48 c7 45 90 08 00 00 	movq   $0x8,-0x70(%rbp)
  116430:	00 
  116431:	48 c7 45 98 04 ae 11 	movq   $0x11ae04,-0x68(%rbp)
  116438:	00 
  116439:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  11643d:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  116441:	ba 8d 02 00 00       	mov    $0x28d,%edx
  116446:	e8 77 e8 ff ff       	callq  114cc2 <_d_assert>
			}
			if (lo == hi)
  11644b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11644f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  116453:	0f 84 4d 01 00 00    	je     1165a6 <_adReverseWchar+0x373>
				break;

			if (stridelo == stridehi)
  116459:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11645c:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  11645f:	75 63                	jne    1164c4 <_adReverseWchar+0x291>
			{	int stmp;
  116461:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

				assert(stridelo == 2);
  116468:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  11646c:	74 22                	je     116490 <_adReverseWchar+0x25d>
  11646e:	48 c7 45 a0 08 00 00 	movq   $0x8,-0x60(%rbp)
  116475:	00 
  116476:	48 c7 45 a8 04 ae 11 	movq   $0x11ae04,-0x58(%rbp)
  11647d:	00 
  11647e:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  116482:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  116486:	ba 95 02 00 00       	mov    $0x295,%edx
  11648b:	e8 32 e8 ff ff       	callq  114cc2 <_d_assert>
				assert(stmp.sizeof == 2 * (*lo).sizeof);
				stmp = *cast(int*)lo;
  116490:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  116494:	8b 00                	mov    (%rax),%eax
  116496:	89 45 fc             	mov    %eax,-0x4(%rbp)
				*cast(int*)lo = *cast(int*)hi;
  116499:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  11649d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1164a1:	8b 00                	mov    (%rax),%eax
  1164a3:	89 02                	mov    %eax,(%rdx)
				*cast(int*)hi = stmp;
  1164a5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  1164a9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1164ac:	89 02                	mov    %eax,(%rdx)
				lo += stridelo;
  1164ae:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1164b1:	48 98                	cltq   
  1164b3:	48 01 c0             	add    %rax,%rax
  1164b6:	48 01 45 d0          	add    %rax,-0x30(%rbp)
				hi--;
  1164ba:	48 83 6d c8 02       	subq   $0x2,-0x38(%rbp)
				continue;
  1164bf:	e9 80 fe ff ff       	jmpq   116344 <_adReverseWchar+0x111>
			}

			/* Shift the whole array. This is woefully inefficient
			 */
			memcpy(tmp.ptr, hi, stridehi * wchar.sizeof);
  1164c4:	8b 45 f0             	mov    -0x10(%rbp),%eax
  1164c7:	48 98                	cltq   
  1164c9:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  1164cd:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  1164d1:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  1164d8:	e8 df f1 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(hi + cast(int) stridehi - cast(int) stridelo, lo, stridelo * wchar.sizeof);
  1164dd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1164e0:	48 98                	cltq   
  1164e2:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  1164e6:	8b 45 f0             	mov    -0x10(%rbp),%eax
  1164e9:	48 98                	cltq   
  1164eb:	48 01 c0             	add    %rax,%rax
  1164ee:	48 89 c2             	mov    %rax,%rdx
  1164f1:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  1164f5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1164f8:	48 98                	cltq   
  1164fa:	48 01 c0             	add    %rax,%rax
  1164fd:	48 89 d7             	mov    %rdx,%rdi
  116500:	48 29 c7             	sub    %rax,%rdi
  116503:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  116507:	48 89 ca             	mov    %rcx,%rdx
  11650a:	e8 ad f1 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memmove(lo + stridehi, lo + stridelo , (hi - (lo + stridelo)) * wchar.sizeof);
  11650f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  116512:	48 98                	cltq   
  116514:	48 01 c0             	add    %rax,%rax
  116517:	48 89 c2             	mov    %rax,%rdx
  11651a:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  11651e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116522:	48 89 c1             	mov    %rax,%rcx
  116525:	48 29 d1             	sub    %rdx,%rcx
  116528:	48 89 ca             	mov    %rcx,%rdx
  11652b:	48 89 d0             	mov    %rdx,%rax
  11652e:	48 c1 e8 3f          	shr    $0x3f,%rax
  116532:	48 01 d0             	add    %rdx,%rax
  116535:	48 d1 f8             	sar    %rax
  116538:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  11653c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  11653f:	48 98                	cltq   
  116541:	48 01 c0             	add    %rax,%rax
  116544:	48 89 c6             	mov    %rax,%rsi
  116547:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  11654b:	8b 45 f0             	mov    -0x10(%rbp),%eax
  11654e:	48 98                	cltq   
  116550:	48 01 c0             	add    %rax,%rax
  116553:	48 89 c7             	mov    %rax,%rdi
  116556:	48 03 7d d0          	add    -0x30(%rbp),%rdi
  11655a:	e8 5d f1 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(lo, tmp.ptr, stridehi * wchar.sizeof);
  11655f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  116562:	48 98                	cltq   
  116564:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  116568:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  11656f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  116573:	e8 44 f1 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>

			lo += stridehi;
  116578:	8b 45 f0             	mov    -0x10(%rbp),%eax
  11657b:	48 98                	cltq   
  11657d:	48 01 c0             	add    %rax,%rax
  116580:	48 01 45 d0          	add    %rax,-0x30(%rbp)
			hi = hi - 1 + (cast(int) stridehi - cast(int) stridelo);
  116584:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  116588:	48 83 e9 02          	sub    $0x2,%rcx
  11658c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  11658f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  116592:	29 d0                	sub    %edx,%eax
  116594:	48 98                	cltq   
  116596:	48 01 c0             	add    %rax,%rax
  116599:	48 8d 04 01          	lea    (%rcx,%rax,1),%rax
  11659d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1165a1:	e9 9e fd ff ff       	jmpq   116344 <_adReverseWchar+0x111>
		}
	}

	Array aaa = *cast(Array*)(&a);	
  1165a6:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
  1165ad:	48 8b 02             	mov    (%rdx),%rax
  1165b0:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  1165b7:	48 8b 42 08          	mov    0x8(%rdx),%rax
  1165bb:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	return aaa;
  1165c2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  1165c9:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  1165d0:	48 89 02             	mov    %rax,(%rdx)
  1165d3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  1165da:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
  1165e1:	48 89 41 08          	mov    %rax,0x8(%rcx)
}
  1165e5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  1165ec:	c9                   	leaveq 
  1165ed:	c3                   	retq   

00000000001165ee <_adCmpChar>:

int _adCmpChar(Array a1, Array a2)
  1165ee:	55                   	push   %rbp
  1165ef:	48 89 e5             	mov    %rsp,%rbp
  1165f2:	48 83 ec 30          	sub    $0x30,%rsp
  1165f6:	49 89 d0             	mov    %rdx,%r8
  1165f9:	48 89 f8             	mov    %rdi,%rax
  1165fc:	48 89 f2             	mov    %rsi,%rdx
  1165ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  116603:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  116607:	4c 89 c0             	mov    %r8,%rax
  11660a:	48 89 ca             	mov    %rcx,%rdx
  11660d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  116611:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
			ret 					;
		}
	}
	else
	{
		int len;
  116615:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
		int c;
  11661c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

		len = a1.length;
  116623:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  116627:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if (a2.length < len)
  11662a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  11662e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  116631:	48 98                	cltq   
  116633:	48 39 c2             	cmp    %rax,%rdx
  116636:	73 07                	jae    11663f <_adCmpChar+0x51>
			len = a2.length;
  116638:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11663c:	89 45 fc             	mov    %eax,-0x4(%rbp)
		c = memcmp(cast(char *)a1.data, cast(char *)a2.data, len);
  11663f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  116642:	48 63 d0             	movslq %eax,%rdx
  116645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  116649:	48 89 c6             	mov    %rax,%rsi
  11664c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116650:	48 89 c7             	mov    %rax,%rdi
  116653:	e8 c6 f0 fe ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  116658:	89 45 f8             	mov    %eax,-0x8(%rbp)
		if (!c)
  11665b:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  11665f:	0f 95 c0             	setne  %al
  116662:	83 f0 01             	xor    $0x1,%eax
  116665:	84 c0                	test   %al,%al
  116667:	74 13                	je     11667c <_adCmpChar+0x8e>
			c = cast(int)a1.length - cast(int)a2.length;
  116669:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11666d:	89 c2                	mov    %eax,%edx
  11666f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  116673:	89 d1                	mov    %edx,%ecx
  116675:	29 c1                	sub    %eax,%ecx
  116677:	89 c8                	mov    %ecx,%eax
  116679:	89 45 f8             	mov    %eax,-0x8(%rbp)
		return c;
  11667c:	8b 45 f8             	mov    -0x8(%rbp),%eax
	}
}
  11667f:	c9                   	leaveq 
  116680:	c3                   	retq   

0000000000116681 <_adReverse>:

Array _adReverse(Array a, size_t szelem)
  116681:	55                   	push   %rbp
  116682:	48 89 e5             	mov    %rsp,%rbp
  116685:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  116689:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  11668d:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  116691:	48 89 f0             	mov    %rsi,%rax
  116694:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  116698:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	if (a.length >= 2)
  11669c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1166a0:	48 83 f8 02          	cmp    $0x2,%rax
  1166a4:	0f 82 05 01 00 00    	jb     1167af <_adReverse+0x12e>
	{
		byte*	 tmp;
  1166aa:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  1166b1:	00 
		byte[16] buffer;
  1166b2:	48 c7 45 c0 10 00 00 	movq   $0x10,-0x40(%rbp)
  1166b9:	00 
  1166ba:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  1166be:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1166c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1166c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1166ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1166ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1166d2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  1166d7:	0f 95 c0             	setne  %al
  1166da:	83 f0 01             	xor    $0x1,%eax
  1166dd:	84 c0                	test   %al,%al
  1166df:	75 11                	jne    1166f2 <_adReverse+0x71>
  1166e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1166e5:	c6 00 00             	movb   $0x0,(%rax)
  1166e8:	48 ff 45 f0          	incq   -0x10(%rbp)
  1166ec:	48 ff 4d f8          	decq   -0x8(%rbp)
  1166f0:	eb e0                	jmp    1166d2 <_adReverse+0x51>

		void* lo = a.data;
  1166f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1166f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		void* hi = a.data + (a.length - 1) * szelem;
  1166fa:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  1166fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  116702:	48 ff c8             	dec    %rax
  116705:	48 0f af 45 98       	imul   -0x68(%rbp),%rax
  11670a:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  11670e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tmp = buffer.ptr;
  116712:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  116716:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (szelem > 16)
  11671a:	48 83 7d 98 10       	cmpq   $0x10,-0x68(%rbp)
  11671f:	76 37                	jbe    116758 <_adReverse+0xd7>
			tmp = cast(byte*)alloca(szelem);
  116721:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  116725:	48 83 c0 0f          	add    $0xf,%rax
  116729:	48 83 c0 0f          	add    $0xf,%rax
  11672d:	48 c1 e8 04          	shr    $0x4,%rax
  116731:	48 c1 e0 04          	shl    $0x4,%rax
  116735:	48 29 c4             	sub    %rax,%rsp
  116738:	48 89 65 90          	mov    %rsp,-0x70(%rbp)
  11673c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  116740:	48 83 c0 0f          	add    $0xf,%rax
  116744:	48 c1 e8 04          	shr    $0x4,%rax
  116748:	48 c1 e0 04          	shl    $0x4,%rax
  11674c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  116750:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  116754:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		for (; lo < hi; lo += szelem, hi -= szelem)
  116758:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  11675c:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  116760:	0f 92 c0             	setb   %al
  116763:	83 f0 01             	xor    $0x1,%eax
  116766:	84 c0                	test   %al,%al
  116768:	75 45                	jne    1167af <_adReverse+0x12e>
		{
			memcpy(tmp, lo,  szelem);
  11676a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  11676e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  116772:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  116776:	e8 41 ef fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(lo,	hi,  szelem);
  11677b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  11677f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  116783:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  116787:	e8 30 ef fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
			memcpy(hi,	tmp, szelem);
  11678c:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  116790:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  116794:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  116798:	e8 1f ef fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>
  11679d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1167a1:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  1167a5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  1167a9:	48 29 45 d8          	sub    %rax,-0x28(%rbp)
  1167ad:	eb a9                	jmp    116758 <_adReverse+0xd7>
		}
	}
	return a;
  1167af:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1167b3:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  1167b7:	48 89 02             	mov    %rax,(%rdx)
  1167ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1167be:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  1167c2:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  1167c6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  1167ca:	c9                   	leaveq 
  1167cb:	c3                   	retq   

00000000001167cc <_adEq>:

int _adEq(Array a1, Array a2, TypeInfo ti)
  1167cc:	55                   	push   %rbp
  1167cd:	48 89 e5             	mov    %rsp,%rbp
  1167d0:	48 83 ec 50          	sub    $0x50,%rsp
  1167d4:	49 89 d1             	mov    %rdx,%r9
  1167d7:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  1167db:	48 89 f8             	mov    %rdi,%rax
  1167de:	48 89 f2             	mov    %rsi,%rdx
  1167e1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  1167e5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1167e9:	4c 89 c8             	mov    %r9,%rax
  1167ec:	48 89 ca             	mov    %rcx,%rdx
  1167ef:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1167f3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
{
	if(a1.length != a2.length)
  1167f7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  1167fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1167ff:	48 39 c2             	cmp    %rax,%rdx
  116802:	74 0c                	je     116810 <_adEq+0x44>
		return 0;				// not equal
  116804:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  11680b:	e9 be 00 00 00       	jmpq   1168ce <_adEq+0x102>

	auto sz = ti.tsize();
  116810:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116814:	48 8b 00             	mov    (%rax),%rax
  116817:	48 83 c0 40          	add    $0x40,%rax
  11681b:	48 8b 00             	mov    (%rax),%rax
  11681e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  116822:	ff d0                	callq  *%rax
  116824:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	auto p1 = a1.data;
  116828:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11682c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	auto p2 = a2.data;
  116830:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116834:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	if(sz == 1)
  116838:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
  11683d:	75 1f                	jne    11685e <_adEq+0x92>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);
  11683f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116843:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  116847:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11684b:	e8 ce ee fe ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  116850:	48 85 c0             	test   %rax,%rax
  116853:	0f 94 c0             	sete   %al
  116856:	0f b6 c0             	movzbl %al,%eax
  116859:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  11685c:	eb 70                	jmp    1168ce <_adEq+0x102>

	for(size_t i = 0; i < a1.length; i++)
  11685e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  116865:	00 
  116866:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11686a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  11686e:	0f 92 c0             	setb   %al
  116871:	83 f0 01             	xor    $0x1,%eax
  116874:	84 c0                	test   %al,%al
  116876:	75 4f                	jne    1168c7 <_adEq+0xfb>
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  116878:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11687c:	48 8b 00             	mov    (%rax),%rax
  11687f:	48 83 c0 30          	add    $0x30,%rax
  116883:	48 8b 08             	mov    (%rax),%rcx
  116886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11688a:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  11688f:	48 89 c2             	mov    %rax,%rdx
  116892:	48 03 55 e0          	add    -0x20(%rbp),%rdx
  116896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11689a:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  11689f:	48 89 c6             	mov    %rax,%rsi
  1168a2:	48 03 75 e8          	add    -0x18(%rbp),%rsi
  1168a6:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1168aa:	ff d1                	callq  *%rcx
  1168ac:	85 c0                	test   %eax,%eax
  1168ae:	0f 95 c0             	setne  %al
  1168b1:	83 f0 01             	xor    $0x1,%eax
  1168b4:	84 c0                	test   %al,%al
  1168b6:	74 09                	je     1168c1 <_adEq+0xf5>
			return 0;			// not equal
  1168b8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  1168bf:	eb 0d                	jmp    1168ce <_adEq+0x102>
		// We should really have a ti.isPOD() check for this
		return (memcmp(p1, p2, a1.length) == 0);

	for(size_t i = 0; i < a1.length; i++)
	{
		if(!ti.equals(p1 + i * sz, p2 + i * sz))
  1168c1:	48 ff 45 f8          	incq   -0x8(%rbp)
  1168c5:	eb 9f                	jmp    116866 <_adEq+0x9a>
			return 0;			// not equal
	}

	return 1;					// equal
  1168c7:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
  1168ce:	8b 45 b4             	mov    -0x4c(%rbp),%eax
}
  1168d1:	c9                   	leaveq 
  1168d2:	c3                   	retq   

00000000001168d3 <_adCmp>:

int _adCmp(Array a1, Array a2, TypeInfo ti)
  1168d3:	55                   	push   %rbp
  1168d4:	48 89 e5             	mov    %rsp,%rbp
  1168d7:	48 83 ec 70          	sub    $0x70,%rsp
  1168db:	49 89 d1             	mov    %rdx,%r9
  1168de:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
  1168e2:	48 89 f8             	mov    %rdi,%rax
  1168e5:	48 89 f2             	mov    %rsi,%rdx
  1168e8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  1168ec:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  1168f0:	4c 89 c8             	mov    %r9,%rax
  1168f3:	48 89 ca             	mov    %rcx,%rdx
  1168f6:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  1168fa:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
{
	//printf("adCmp()\n");
	auto len = a1.length;
  1168fe:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  116902:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (a2.length < len)
  116906:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  11690a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  11690e:	73 08                	jae    116918 <_adCmp+0x45>
		len = a2.length;
  116910:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  116914:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	auto sz = ti.tsize();
  116918:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11691c:	48 8b 00             	mov    (%rax),%rax
  11691f:	48 83 c0 40          	add    $0x40,%rax
  116923:	48 8b 00             	mov    (%rax),%rax
  116926:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  11692a:	ff d0                	callq  *%rax
  11692c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	void *p1 = a1.data;
  116930:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116934:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	void *p2 = a2.data;
  116938:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  11693c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

	if (sz == 1)
  116940:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
  116945:	75 28                	jne    11696f <_adCmp+0x9c>
	{	// We should really have a ti.isPOD() check for this
		auto c = memcmp(p1, p2, len);
  116947:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  11694b:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  11694f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
  116953:	e8 c6 ed fe ff       	callq  10571e <_D6system6memcmpFPvPvmZl>
  116958:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		if (c)
  11695c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  116961:	74 71                	je     1169d4 <_adCmp+0x101>
			return c;
  116963:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116967:	89 45 90             	mov    %eax,-0x70(%rbp)
  11696a:	e9 9e 00 00 00       	jmpq   116a0d <_adCmp+0x13a>
	}
	else
	{
		for (size_t i = 0; i < len; i++)
  11696f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  116976:	00 
  116977:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11697b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  11697f:	0f 92 c0             	setb   %al
  116982:	83 f0 01             	xor    $0x1,%eax
  116985:	84 c0                	test   %al,%al
  116987:	75 4b                	jne    1169d4 <_adCmp+0x101>
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
  116989:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11698d:	48 8b 00             	mov    (%rax),%rax
  116990:	48 83 c0 38          	add    $0x38,%rax
  116994:	48 8b 08             	mov    (%rax),%rcx
  116997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  11699b:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  1169a0:	48 89 c2             	mov    %rax,%rdx
  1169a3:	48 03 55 c8          	add    -0x38(%rbp),%rdx
  1169a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1169ab:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  1169b0:	48 89 c6             	mov    %rax,%rsi
  1169b3:	48 03 75 d0          	add    -0x30(%rbp),%rsi
  1169b7:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  1169bb:	ff d1                	callq  *%rcx
  1169bd:	89 45 fc             	mov    %eax,-0x4(%rbp)
			if (c)
  1169c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1169c4:	74 08                	je     1169ce <_adCmp+0xfb>
				return c;
  1169c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1169c9:	89 45 90             	mov    %eax,-0x70(%rbp)
  1169cc:	eb 3f                	jmp    116a0d <_adCmp+0x13a>
	else
	{
		for (size_t i = 0; i < len; i++)
		{
			auto c = ti.compare(p1 + i * sz, p2 + i * sz);
			if (c)
  1169ce:	48 ff 45 f0          	incq   -0x10(%rbp)
  1169d2:	eb a3                	jmp    116977 <_adCmp+0xa4>
				return c;
		}
	}
	if (a1.length == a2.length)
  1169d4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1169d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1169dc:	48 39 c2             	cmp    %rax,%rdx
  1169df:	75 09                	jne    1169ea <_adCmp+0x117>
		return 0;
  1169e1:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  1169e8:	eb 23                	jmp    116a0d <_adCmp+0x13a>
	return (a1.length > a2.length) ? 1 : -1;
  1169ea:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1169ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1169f2:	48 39 c2             	cmp    %rax,%rdx
  1169f5:	76 09                	jbe    116a00 <_adCmp+0x12d>
  1169f7:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
  1169fe:	eb 07                	jmp    116a07 <_adCmp+0x134>
  116a00:	c7 45 94 ff ff ff ff 	movl   $0xffffffff,-0x6c(%rbp)
  116a07:	8b 45 94             	mov    -0x6c(%rbp),%eax
  116a0a:	89 45 90             	mov    %eax,-0x70(%rbp)
  116a0d:	8b 45 90             	mov    -0x70(%rbp),%eax
}
  116a10:	c9                   	leaveq 
  116a11:	c3                   	retq   

0000000000116a12 <_adSort>:

Array _adSort(Array a, TypeInfo ti)
  116a12:	55                   	push   %rbp
  116a13:	48 89 e5             	mov    %rsp,%rbp
  116a16:	48 81 ec a0 04 00 00 	sub    $0x4a0,%rsp
  116a1d:	48 89 bd 60 fb ff ff 	mov    %rdi,-0x4a0(%rbp)
  116a24:	48 89 8d 68 fb ff ff 	mov    %rcx,-0x498(%rbp)
  116a2b:	48 89 f0             	mov    %rsi,%rax
  116a2e:	48 89 85 70 fb ff ff 	mov    %rax,-0x490(%rbp)
  116a35:	48 89 95 78 fb ff ff 	mov    %rdx,-0x488(%rbp)
	struct StackEntry {
		byte *l;
		byte *r;
	}

	size_t elem_size = ti.tsize();
  116a3c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116a43:	48 8b 00             	mov    (%rax),%rax
  116a46:	48 83 c0 40          	add    $0x40,%rax
  116a4a:	48 8b 00             	mov    (%rax),%rax
  116a4d:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116a54:	ff d0                	callq  *%rax
  116a56:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	size_t qsort_limit = elem_size * Qsort_Threshold;
  116a5a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  116a5e:	48 89 d0             	mov    %rdx,%rax
  116a61:	48 c1 e0 03          	shl    $0x3,%rax
  116a65:	48 29 d0             	sub    %rdx,%rax
  116a68:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	static assert(ubyte.sizeof == 1);
	static assert(ubyte.max == 255);

	StackEntry[size_t.sizeof * 8] stack; // log2( size_t.max )
  116a6c:	48 c7 45 80 40 00 00 	movq   $0x40,-0x80(%rbp)
  116a73:	00 
  116a74:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  116a7b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  116a7f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  116a83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  116a87:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  116a8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  116a8f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  116a94:	0f 95 c0             	setne  %al
  116a97:	83 f0 01             	xor    $0x1,%eax
  116a9a:	84 c0                	test   %al,%al
  116a9c:	75 24                	jne    116ac2 <_adSort+0xb0>
  116a9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  116aa2:	48 8b 15 57 44 00 00 	mov    0x4457(%rip),%rdx        # 11af00 <_D_adSort10StackEntry6__initZ>
  116aa9:	48 89 10             	mov    %rdx,(%rax)
  116aac:	48 8b 15 55 44 00 00 	mov    0x4455(%rip),%rdx        # 11af08 <_D_adSort10StackEntry6__initZ+0x8>
  116ab3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  116ab7:	48 83 45 f0 10       	addq   $0x10,-0x10(%rbp)
  116abc:	48 ff 4d f8          	decq   -0x8(%rbp)
  116ac0:	eb cd                	jmp    116a8f <_adSort+0x7d>
	StackEntry * sp = stack.ptr;
  116ac2:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  116ac9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	byte* lbound = cast(byte *) a.data;
  116acd:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  116ad4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	byte* rbound = cast(byte *) a.data + a.length * elem_size;
  116ad8:	48 8b 95 78 fb ff ff 	mov    -0x488(%rbp),%rdx
  116adf:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  116ae6:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  116aeb:	48 8d 04 02          	lea    (%rdx,%rax,1),%rax
  116aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  116af3:	eb 00                	jmp    116af5 <_adSort+0xe3>
	byte* li = void;
	byte* ri = void;

	while (1)
  116af5:	b8 00 00 00 00       	mov    $0x0,%eax
  116afa:	84 c0                	test   %al,%al
  116afc:	0f 85 a8 03 00 00    	jne    116eaa <_adSort+0x498>
	{
		if (rbound - lbound > qsort_limit)
  116b02:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116b06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116b0a:	48 29 d0             	sub    %rdx,%rax
  116b0d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  116b11:	0f 86 8c 02 00 00    	jbe    116da3 <_adSort+0x391>
		{
			ti.swap(lbound,
  116b17:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116b1e:	48 8b 00             	mov    (%rax),%rax
  116b21:	48 83 c0 48          	add    $0x48,%rax
  116b25:	4c 8b 00             	mov    (%rax),%r8
  116b28:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116b2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116b30:	48 29 d0             	sub    %rdx,%rax
  116b33:	48 89 c1             	mov    %rax,%rcx
  116b36:	48 d1 e9             	shr    %rcx
  116b39:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116b3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116b41:	48 29 d0             	sub    %rdx,%rax
  116b44:	48 d1 e8             	shr    %rax
  116b47:	ba 00 00 00 00       	mov    $0x0,%edx
  116b4c:	48 f7 75 e8          	divq   -0x18(%rbp)
  116b50:	48 89 d0             	mov    %rdx,%rax
  116b53:	48 89 ca             	mov    %rcx,%rdx
  116b56:	48 29 c2             	sub    %rax,%rdx
  116b59:	48 89 d0             	mov    %rdx,%rax
  116b5c:	48 89 c2             	mov    %rax,%rdx
  116b5f:	48 03 55 d0          	add    -0x30(%rbp),%rdx
  116b63:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  116b67:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116b6e:	41 ff d0             	callq  *%r8
				lbound + (
						  ((rbound - lbound) >>> 1) -
						  (((rbound - lbound) >>> 1) % elem_size)
						  ));

			li = lbound + elem_size;
  116b71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116b75:	48 03 45 d0          	add    -0x30(%rbp),%rax
  116b79:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			ri = rbound - elem_size;
  116b7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116b81:	48 89 c2             	mov    %rax,%rdx
  116b84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116b88:	48 29 d0             	sub    %rdx,%rax
  116b8b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

			if (ti.compare(li, ri) > 0)
  116b8f:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116b96:	48 8b 00             	mov    (%rax),%rax
  116b99:	48 83 c0 38          	add    $0x38,%rax
  116b9d:	48 8b 00             	mov    (%rax),%rax
  116ba0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116ba4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116ba8:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116baf:	ff d0                	callq  *%rax
  116bb1:	85 c0                	test   %eax,%eax
  116bb3:	7e 22                	jle    116bd7 <_adSort+0x1c5>
				ti.swap(li, ri);
  116bb5:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116bbc:	48 8b 00             	mov    (%rax),%rax
  116bbf:	48 83 c0 48          	add    $0x48,%rax
  116bc3:	48 8b 00             	mov    (%rax),%rax
  116bc6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116bca:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116bce:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116bd5:	ff d0                	callq  *%rax
			if (ti.compare(lbound, ri) > 0)
  116bd7:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116bde:	48 8b 00             	mov    (%rax),%rax
  116be1:	48 83 c0 38          	add    $0x38,%rax
  116be5:	48 8b 00             	mov    (%rax),%rax
  116be8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116bec:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  116bf0:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116bf7:	ff d0                	callq  *%rax
  116bf9:	85 c0                	test   %eax,%eax
  116bfb:	7e 22                	jle    116c1f <_adSort+0x20d>
				ti.swap(lbound, ri);
  116bfd:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116c04:	48 8b 00             	mov    (%rax),%rax
  116c07:	48 83 c0 48          	add    $0x48,%rax
  116c0b:	48 8b 00             	mov    (%rax),%rax
  116c0e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116c12:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  116c16:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116c1d:	ff d0                	callq  *%rax
			if (ti.compare(li, lbound) > 0)
  116c1f:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116c26:	48 8b 00             	mov    (%rax),%rax
  116c29:	48 83 c0 38          	add    $0x38,%rax
  116c2d:	48 8b 00             	mov    (%rax),%rax
  116c30:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116c34:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116c38:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116c3f:	ff d0                	callq  *%rax
  116c41:	85 c0                	test   %eax,%eax
  116c43:	7e 22                	jle    116c67 <_adSort+0x255>
				ti.swap(li, lbound);
  116c45:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116c4c:	48 8b 00             	mov    (%rax),%rax
  116c4f:	48 83 c0 48          	add    $0x48,%rax
  116c53:	48 8b 00             	mov    (%rax),%rax
  116c56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116c5a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116c5e:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116c65:	ff d0                	callq  *%rax

			while (1)
  116c67:	b8 00 00 00 00       	mov    $0x0,%eax
  116c6c:	84 c0                	test   %al,%al
  116c6e:	0f 85 9f 00 00 00    	jne    116d13 <_adSort+0x301>
			{
				do
					li += elem_size;
  116c74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116c78:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  116c7c:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116c83:	48 8b 00             	mov    (%rax),%rax
  116c86:	48 83 c0 38          	add    $0x38,%rax
  116c8a:	48 8b 00             	mov    (%rax),%rax
  116c8d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116c91:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116c95:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116c9c:	ff d0                	callq  *%rax
  116c9e:	c1 e8 1f             	shr    $0x1f,%eax
  116ca1:	83 f0 01             	xor    $0x1,%eax
  116ca4:	84 c0                	test   %al,%al
  116ca6:	75 02                	jne    116caa <_adSort+0x298>
  116ca8:	eb ca                	jmp    116c74 <_adSort+0x262>
				while (ti.compare(li, lbound) < 0);
				do
					ri -= elem_size;
  116caa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116cae:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  116cb2:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116cb9:	48 8b 00             	mov    (%rax),%rax
  116cbc:	48 83 c0 38          	add    $0x38,%rax
  116cc0:	48 8b 00             	mov    (%rax),%rax
  116cc3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116cc7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  116ccb:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116cd2:	ff d0                	callq  *%rax
  116cd4:	85 c0                	test   %eax,%eax
  116cd6:	0f 9f c0             	setg   %al
  116cd9:	83 f0 01             	xor    $0x1,%eax
  116cdc:	84 c0                	test   %al,%al
  116cde:	75 02                	jne    116ce2 <_adSort+0x2d0>
  116ce0:	eb c8                	jmp    116caa <_adSort+0x298>
				while (ti.compare(ri, lbound) > 0);
				if (li > ri)
  116ce2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116ce6:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  116cea:	77 27                	ja     116d13 <_adSort+0x301>
					break;
				ti.swap(li, ri);
  116cec:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116cf3:	48 8b 00             	mov    (%rax),%rax
  116cf6:	48 83 c0 48          	add    $0x48,%rax
  116cfa:	48 8b 00             	mov    (%rax),%rax
  116cfd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116d01:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  116d05:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116d0c:	ff d0                	callq  *%rax
  116d0e:	e9 54 ff ff ff       	jmpq   116c67 <_adSort+0x255>
			}
			ti.swap(lbound, ri);
  116d13:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116d1a:	48 8b 00             	mov    (%rax),%rax
  116d1d:	48 83 c0 48          	add    $0x48,%rax
  116d21:	48 8b 00             	mov    (%rax),%rax
  116d24:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116d28:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  116d2c:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116d33:	ff d0                	callq  *%rax
			if (ri - lbound > rbound - li)
  116d35:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  116d39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116d3d:	48 29 d0             	sub    %rdx,%rax
  116d40:	48 89 c1             	mov    %rax,%rcx
  116d43:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  116d47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116d4b:	48 29 d0             	sub    %rdx,%rax
  116d4e:	48 39 c1             	cmp    %rax,%rcx
  116d51:	7e 24                	jle    116d77 <_adSort+0x365>
			{
				sp.l = lbound;
  116d53:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  116d57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  116d5b:	48 89 02             	mov    %rax,(%rdx)
				sp.r = ri;
  116d5e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  116d62:	48 83 c2 08          	add    $0x8,%rdx
  116d66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116d6a:	48 89 02             	mov    %rax,(%rdx)
				lbound = li;
  116d6d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116d71:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  116d75:	eb 22                	jmp    116d99 <_adSort+0x387>
			}
			else
			{
				sp.l = li;
  116d77:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  116d7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116d7f:	48 89 02             	mov    %rax,(%rdx)
				sp.r = rbound;
  116d82:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  116d86:	48 83 c2 08          	add    $0x8,%rdx
  116d8a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116d8e:	48 89 02             	mov    %rax,(%rdx)
				rbound = ri;
  116d91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116d95:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			}
			++sp;
  116d99:	48 83 45 d8 10       	addq   $0x10,-0x28(%rbp)
  116d9e:	e9 52 fd ff ff       	jmpq   116af5 <_adSort+0xe3>
		} else {
			// Use insertion sort
			for (ri = lbound, li = lbound + elem_size;
  116da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  116da7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  116dab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116daf:	48 03 45 d0          	add    -0x30(%rbp),%rax
  116db3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  116db7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116dbb:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  116dbf:	0f 92 c0             	setb   %al
  116dc2:	83 f0 01             	xor    $0x1,%eax
  116dc5:	84 c0                	test   %al,%al
  116dc7:	0f 85 87 00 00 00    	jne    116e54 <_adSort+0x442>
				 li < rbound;
				 ri = li, li += elem_size)
			{
				for ( ; ti.compare(ri, ri + elem_size) > 0;
  116dcd:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116dd4:	48 8b 00             	mov    (%rax),%rax
  116dd7:	48 83 c0 38          	add    $0x38,%rax
  116ddb:	48 8b 08             	mov    (%rax),%rcx
  116dde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116de2:	48 89 c2             	mov    %rax,%rdx
  116de5:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  116de9:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  116ded:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116df4:	ff d1                	callq  *%rcx
  116df6:	85 c0                	test   %eax,%eax
  116df8:	0f 9f c0             	setg   %al
  116dfb:	83 f0 01             	xor    $0x1,%eax
  116dfe:	84 c0                	test   %al,%al
  116e00:	75 3d                	jne    116e3f <_adSort+0x42d>
					  ri -= elem_size)
				{
					ti.swap(ri, ri + elem_size);
  116e02:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
  116e09:	48 8b 00             	mov    (%rax),%rax
  116e0c:	48 83 c0 48          	add    $0x48,%rax
  116e10:	48 8b 08             	mov    (%rax),%rcx
  116e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116e17:	48 89 c2             	mov    %rax,%rdx
  116e1a:	48 03 55 b8          	add    -0x48(%rbp),%rdx
  116e1e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  116e22:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
  116e29:	ff d1                	callq  *%rcx
					if (ri == lbound)
  116e2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116e2f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  116e33:	74 0a                	je     116e3f <_adSort+0x42d>
  116e35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116e39:	48 29 45 b8          	sub    %rax,-0x48(%rbp)
  116e3d:	eb 8e                	jmp    116dcd <_adSort+0x3bb>
  116e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116e43:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  116e47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  116e4b:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  116e4f:	e9 63 ff ff ff       	jmpq   116db7 <_adSort+0x3a5>
						break;
				}
			}
			if (sp != stack.ptr)
  116e54:	48 8d 85 80 fb ff ff 	lea    -0x480(%rbp),%rax
  116e5b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  116e5f:	74 24                	je     116e85 <_adSort+0x473>
			{
				--sp;
  116e61:	48 83 6d d8 10       	subq   $0x10,-0x28(%rbp)
				lbound = sp.l;
  116e66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  116e6a:	48 8b 00             	mov    (%rax),%rax
  116e6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				rbound = sp.r;
  116e71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  116e75:	48 83 c0 08          	add    $0x8,%rax
  116e79:	48 8b 00             	mov    (%rax),%rax
  116e7c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  116e80:	e9 70 fc ff ff       	jmpq   116af5 <_adSort+0xe3>
			}
			else
				return a;
  116e85:	48 8b 85 70 fb ff ff 	mov    -0x490(%rbp),%rax
  116e8c:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  116e93:	48 89 02             	mov    %rax,(%rdx)
  116e96:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  116e9d:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
  116ea4:	48 89 42 08          	mov    %rax,0x8(%rdx)
  116ea8:	eb 3d                	jmp    116ee7 <_adSort+0x4d5>
	byte* li = void;
	byte* ri = void;

	while (1)
	{
		if (rbound - lbound > qsort_limit)
  116eaa:	48 c7 45 90 08 00 00 	movq   $0x8,-0x70(%rbp)
  116eb1:	00 
  116eb2:	48 c7 45 98 04 ae 11 	movq   $0x11ae04,-0x68(%rbp)
  116eb9:	00 
  116eba:	48 c7 45 a0 19 00 00 	movq   $0x19,-0x60(%rbp)
  116ec1:	00 
  116ec2:	48 c7 45 a8 10 af 11 	movq   $0x11af10,-0x58(%rbp)
  116ec9:	00 
  116eca:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  116ece:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  116ed2:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  116ed6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  116eda:	41 b8 d3 03 00 00    	mov    $0x3d3,%r8d
  116ee0:	e8 08 de ff ff       	callq  114ced <_d_assert_msg>
			}
			else
				return a;
		}
	}
}
  116ee5:	eb 07                	jmp    116eee <_adSort+0x4dc>
  116ee7:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
  116eee:	c9                   	leaveq 
  116eef:	c3                   	retq   

0000000000116ef0 <_d_arraycast>:

void[] _d_arraycast(size_t tsize, size_t fsize, void[] a)
  116ef0:	55                   	push   %rbp
  116ef1:	48 89 e5             	mov    %rsp,%rbp
  116ef4:	48 83 ec 50          	sub    $0x50,%rsp
  116ef8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  116efc:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  116f00:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  116f04:	4c 89 c0             	mov    %r8,%rax
  116f07:	48 89 ca             	mov    %rcx,%rdx
  116f0a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  116f0e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
{
	auto length = a.length;
  116f12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116f16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	auto nbytes = length * fsize;
  116f1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  116f1e:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
  116f23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	if(nbytes % tsize != 0)
  116f27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  116f2b:	ba 00 00 00 00       	mov    $0x0,%edx
  116f30:	48 f7 75 d8          	divq   -0x28(%rbp)
  116f34:	48 89 d0             	mov    %rdx,%rax
  116f37:	48 85 c0             	test   %rax,%rax
  116f3a:	74 32                	je     116f6e <_d_arraycast+0x7e>
		throw new Exception("array cast misalignment");
  116f3c:	48 c7 45 e0 17 00 00 	movq   $0x17,-0x20(%rbp)
  116f43:	00 
  116f44:	48 c7 45 e8 2a af 11 	movq   $0x11af2a,-0x18(%rbp)
  116f4b:	00 
  116f4c:	bf 00 37 12 00       	mov    $0x123700,%edi
  116f51:	e8 78 d5 ff ff       	callq  1144ce <_d_newclass>
  116f56:	48 89 c7             	mov    %rax,%rdi
  116f59:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  116f5d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  116f61:	e8 f4 c5 ff ff       	callq  11355a <_D6object9Exception5_ctorMFAaZC9Exception>
  116f66:	48 89 c7             	mov    %rax,%rdi
  116f69:	e8 78 e0 ff ff       	callq  114fe6 <_d_throw>

	length = nbytes / tsize;
  116f6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  116f72:	ba 00 00 00 00       	mov    $0x0,%edx
  116f77:	48 f7 75 d8          	divq   -0x28(%rbp)
  116f7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	*cast(size_t *)&a = length; // jam new length
  116f7f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  116f83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  116f87:	48 89 02             	mov    %rax,(%rdx)
	return a;
  116f8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  116f8e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116f92:	48 89 02             	mov    %rax,(%rdx)
  116f95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116f99:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116f9d:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  116fa1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  116fa5:	c9                   	leaveq 
  116fa6:	c3                   	retq   

0000000000116fa7 <_d_arraycopy>:

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
  116fa7:	55                   	push   %rbp
  116fa8:	48 89 e5             	mov    %rsp,%rbp
  116fab:	48 83 ec 50          	sub    $0x50,%rsp
  116faf:	48 89 7d b0          	mov    %rdi,-0x50(%rbp)
  116fb3:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  116fb7:	4c 89 c6             	mov    %r8,%rsi
  116fba:	4c 89 cf             	mov    %r9,%rdi
  116fbd:	48 89 d0             	mov    %rdx,%rax
  116fc0:	48 89 ca             	mov    %rcx,%rdx
  116fc3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  116fc7:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  116fcb:	48 89 f0             	mov    %rsi,%rax
  116fce:	48 89 fa             	mov    %rdi,%rdx
  116fd1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  116fd5:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
{
	if(to.length != from.length)
  116fd9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  116fdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  116fe1:	48 39 c2             	cmp    %rax,%rdx
  116fe4:	74 34                	je     11701a <_d_arraycopy+0x73>
		throw new Exception("lengths don't match for array copy");
  116fe6:	48 c7 45 e0 22 00 00 	movq   $0x22,-0x20(%rbp)
  116fed:	00 
  116fee:	48 c7 45 e8 48 af 11 	movq   $0x11af48,-0x18(%rbp)
  116ff5:	00 
  116ff6:	bf 00 37 12 00       	mov    $0x123700,%edi
  116ffb:	e8 ce d4 ff ff       	callq  1144ce <_d_newclass>
  117000:	48 89 c7             	mov    %rax,%rdi
  117003:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  117007:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11700b:	e8 4a c5 ff ff       	callq  11355a <_D6object9Exception5_ctorMFAaZC9Exception>
  117010:	48 89 c7             	mov    %rax,%rdi
  117013:	e8 ce df ff ff       	callq  114fe6 <_d_throw>
  117018:	eb 7f                	jmp    117099 <_d_arraycopy+0xf2>
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  11701a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  11701e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  117022:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  117027:	48 01 c2             	add    %rax,%rdx
  11702a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  11702e:	48 39 c2             	cmp    %rax,%rdx
  117031:	76 19                	jbe    11704c <_d_arraycopy+0xa5>
  117033:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  117037:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  11703b:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  117040:	48 01 c2             	add    %rax,%rdx
  117043:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  117047:	48 39 c2             	cmp    %rax,%rdx
  11704a:	77 1b                	ja     117067 <_d_arraycopy+0xc0>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
  11704c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  117050:	48 89 c2             	mov    %rax,%rdx
  117053:	48 0f af 55 d8       	imul   -0x28(%rbp),%rdx
  117058:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  11705c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  117060:	e8 57 e6 fe ff       	callq  1056bc <_D6system6memcpyFPvPvmZPv>

byte[] _d_arraycopy(size_t size, byte[] from, byte[] to)
{
	if(to.length != from.length)
		throw new Exception("lengths don't match for array copy");
	else if(cast(byte *)to + to.length * size <= cast(byte *)from || cast(byte *)from + from.length * size <= cast(byte *)to)
  117065:	eb 32                	jmp    117099 <_d_arraycopy+0xf2>
		memcpy(cast(byte *)to, cast(byte *)from, to.length * size);
	else
		throw new Exception("overlapping array copy");
  117067:	48 c7 45 f0 16 00 00 	movq   $0x16,-0x10(%rbp)
  11706e:	00 
  11706f:	48 c7 45 f8 6b af 11 	movq   $0x11af6b,-0x8(%rbp)
  117076:	00 
  117077:	bf 00 37 12 00       	mov    $0x123700,%edi
  11707c:	e8 4d d4 ff ff       	callq  1144ce <_d_newclass>
  117081:	48 89 c7             	mov    %rax,%rdi
  117084:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  117088:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  11708c:	e8 c9 c4 ff ff       	callq  11355a <_D6object9Exception5_ctorMFAaZC9Exception>
  117091:	48 89 c7             	mov    %rax,%rdi
  117094:	e8 4d df ff ff       	callq  114fe6 <_d_throw>

	return to;
  117099:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11709d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1170a1:	48 89 02             	mov    %rax,(%rdx)
  1170a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1170a8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1170ac:	48 89 42 08          	mov    %rax,0x8(%rdx)
}
  1170b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  1170b4:	c9                   	leaveq 
  1170b5:	c3                   	retq   
  1170b6:	90                   	nop    
  1170b7:	90                   	nop    
