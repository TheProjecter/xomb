#summary Scheduling information and links

==Citations==
  * [http://www.cs.huji.ac.il/~dants/papers/Cheat07Security.pdf Cheat: monopolizing the CPU without superuser privs] - Cool paper about scheduling and h4x
  * [http://people.freebsd.org/~deischen/docs/p95-anderson.pdf Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism] - This is the basis for the XOK exokernel's scheduling, although they used a simplified version.

==Relevant ExoPC code==
   * Get the code for the original XOK from [http://pdos.csail.mit.edu/exo/distrib.html]

==Prerequisites==
   * Something to schedule: processes or XOK's same-but-not enviroments.
   * for Preemptive scheduling, one needs a timer device and the ability to set and respond to timing interrupts.

==Discussion==
We don't have to follow the same path as XOK, so lets figure out what they did and then what we want to do, using the Scheduler Activations paper as a starting point (or using the Design and Implementation of 4.4 BSD book as a starting point if you want to get really into it).

===XOK vs Activations===
   * Unlike most OSes, we do not believe an exokernel performs blocking operations, this should greatly simplify the Activation interactions.
   * Activations solve an M to N mapping for threads to processors, but the original XOK was single threaded.  The way that multiprocessor XOK was implemented was to give all processors to all processes, rather than Activation's idea of dynamically scaling the number of CPUs

===Want we what to DO===